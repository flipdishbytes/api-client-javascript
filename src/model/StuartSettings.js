/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StuartSettingsTransportPrices from './StuartSettingsTransportPrices';

/**
 * The StuartSettings model module.
 * @module model/StuartSettings
 * @version 1.0.0
 */
class StuartSettings {
    /**
     * Constructs a new <code>StuartSettings</code>.
     * Stuart settings
     * @alias module:model/StuartSettings
     */
    constructor() { 
        
        StuartSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StuartSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StuartSettings} obj Optional instance to populate.
     * @return {module:model/StuartSettings} The populated <code>StuartSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StuartSettings();

            if (data.hasOwnProperty('ClientId')) {
                obj['ClientId'] = ApiClient.convertToType(data['ClientId'], 'String');
            }
            if (data.hasOwnProperty('ClientSecret')) {
                obj['ClientSecret'] = ApiClient.convertToType(data['ClientSecret'], 'String');
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('WebhookUrlBasicAuthentication')) {
                obj['WebhookUrlBasicAuthentication'] = ApiClient.convertToType(data['WebhookUrlBasicAuthentication'], 'String');
            }
            if (data.hasOwnProperty('OverrideWebhookUrl')) {
                obj['OverrideWebhookUrl'] = ApiClient.convertToType(data['OverrideWebhookUrl'], 'Boolean');
            }
            if (data.hasOwnProperty('MinutesToPickupBeforeThanDeliveryTime')) {
                obj['MinutesToPickupBeforeThanDeliveryTime'] = ApiClient.convertToType(data['MinutesToPickupBeforeThanDeliveryTime'], 'Number');
            }
            if (data.hasOwnProperty('PackageType')) {
                obj['PackageType'] = ApiClient.convertToType(data['PackageType'], 'String');
            }
            if (data.hasOwnProperty('TransportType')) {
                obj['TransportType'] = ApiClient.convertToType(data['TransportType'], 'String');
            }
            if (data.hasOwnProperty('CancelOrderIfStuartCancelDelivery')) {
                obj['CancelOrderIfStuartCancelDelivery'] = ApiClient.convertToType(data['CancelOrderIfStuartCancelDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('TransportPrices')) {
                obj['TransportPrices'] = StuartSettingsTransportPrices.constructFromObject(data['TransportPrices']);
            }
        }
        return obj;
    }


}

/**
 * Client Id
 * @member {String} ClientId
 */
StuartSettings.prototype['ClientId'] = undefined;

/**
 * Client Secret
 * @member {String} ClientSecret
 */
StuartSettings.prototype['ClientSecret'] = undefined;

/**
 * Enabled
 * @member {Boolean} Enabled
 */
StuartSettings.prototype['Enabled'] = undefined;

/**
 * Webhook url to settle in the Stuart portal
 * @member {String} WebhookUrlBasicAuthentication
 */
StuartSettings.prototype['WebhookUrlBasicAuthentication'] = undefined;

/**
 * Override Flipdish Webhook Url
 * @member {Boolean} OverrideWebhookUrl
 */
StuartSettings.prototype['OverrideWebhookUrl'] = undefined;

/**
 * MinutesToPickupBeforeThanDeliveryTime
 * @member {Number} MinutesToPickupBeforeThanDeliveryTime
 */
StuartSettings.prototype['MinutesToPickupBeforeThanDeliveryTime'] = undefined;

/**
 * Package type
 * @member {module:model/StuartSettings.PackageTypeEnum} PackageType
 */
StuartSettings.prototype['PackageType'] = undefined;

/**
 * Transport type
 * @member {module:model/StuartSettings.TransportTypeEnum} TransportType
 */
StuartSettings.prototype['TransportType'] = undefined;

/**
 * Determines if Flipdish order should be cancel when Stuart cancels delivery
 * @member {Boolean} CancelOrderIfStuartCancelDelivery
 */
StuartSettings.prototype['CancelOrderIfStuartCancelDelivery'] = undefined;

/**
 * @member {module:model/StuartSettingsTransportPrices} TransportPrices
 */
StuartSettings.prototype['TransportPrices'] = undefined;





/**
 * Allowed values for the <code>PackageType</code> property.
 * @enum {String}
 * @readonly
 */
StuartSettings['PackageTypeEnum'] = {

    /**
     * value: "Xsmall"
     * @const
     */
    "Xsmall": "Xsmall",

    /**
     * value: "Small"
     * @const
     */
    "Small": "Small",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "Large"
     * @const
     */
    "Large": "Large",

    /**
     * value: "Xlarge"
     * @const
     */
    "Xlarge": "Xlarge"
};


/**
 * Allowed values for the <code>TransportType</code> property.
 * @enum {String}
 * @readonly
 */
StuartSettings['TransportTypeEnum'] = {

    /**
     * value: "Bike"
     * @const
     */
    "Bike": "Bike",

    /**
     * value: "Cargobike"
     * @const
     */
    "Cargobike": "Cargobike",

    /**
     * value: "Cargobikexl"
     * @const
     */
    "Cargobikexl": "Cargobikexl",

    /**
     * value: "Motorbike"
     * @const
     */
    "Motorbike": "Motorbike",

    /**
     * value: "Motorbikexl"
     * @const
     */
    "Motorbikexl": "Motorbikexl",

    /**
     * value: "Car"
     * @const
     */
    "Car": "Car",

    /**
     * value: "Van"
     * @const
     */
    "Van": "Van"
};



export default StuartSettings;

