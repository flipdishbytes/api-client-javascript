/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InvoiceDiscount', 'model/InvoiceItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./InvoiceDiscount'), require('./InvoiceItem'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.UpcomingInvoice = factory(root.Flipdish.ApiClient, root.Flipdish.InvoiceDiscount, root.Flipdish.InvoiceItem);
  }
}(this, function(ApiClient, InvoiceDiscount, InvoiceItem) {
  'use strict';

  /**
   * The UpcomingInvoice model module.
   * @module model/UpcomingInvoice
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>UpcomingInvoice</code>.
   * @alias module:model/UpcomingInvoice
   * @class
   * @param Subtotal {Number} Subtotal
   * @param AmountDue {Number} Amount due
   * @param Tax {Number} Tax
   */
  var exports = function(Subtotal, AmountDue, Tax) {
    this.Subtotal = Subtotal;
    this.AmountDue = AmountDue;
    this.Tax = Tax;
  };

  /**
   * Constructs a <code>UpcomingInvoice</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UpcomingInvoice} obj Optional instance to populate.
   * @return {module:model/UpcomingInvoice} The populated <code>UpcomingInvoice</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Amount'))
        obj.Amount = ApiClient.convertToType(data['Amount'], 'Number');
      if (data.hasOwnProperty('NextBillingDate'))
        obj.NextBillingDate = ApiClient.convertToType(data['NextBillingDate'], 'Date');
      if (data.hasOwnProperty('Subtotal'))
        obj.Subtotal = ApiClient.convertToType(data['Subtotal'], 'Number');
      if (data.hasOwnProperty('TotalExcludingTax'))
        obj.TotalExcludingTax = ApiClient.convertToType(data['TotalExcludingTax'], 'Number');
      if (data.hasOwnProperty('AmountDue'))
        obj.AmountDue = ApiClient.convertToType(data['AmountDue'], 'Number');
      if (data.hasOwnProperty('Tax'))
        obj.Tax = ApiClient.convertToType(data['Tax'], 'Number');
      if (data.hasOwnProperty('Items'))
        obj.Items = ApiClient.convertToType(data['Items'], [InvoiceItem]);
      if (data.hasOwnProperty('Discounts'))
        obj.Discounts = ApiClient.convertToType(data['Discounts'], [InvoiceDiscount]);
    }
    return obj;
  }

  /**
   * Amount
   * @member {Number} Amount
   */
  exports.prototype.Amount = undefined;

  /**
   * Next billing date
   * @member {Date} NextBillingDate
   */
  exports.prototype.NextBillingDate = undefined;

  /**
   * Subtotal
   * @member {Number} Subtotal
   */
  exports.prototype.Subtotal = undefined;

  /**
   * Total excluding tax
   * @member {Number} TotalExcludingTax
   */
  exports.prototype.TotalExcludingTax = undefined;

  /**
   * Amount due
   * @member {Number} AmountDue
   */
  exports.prototype.AmountDue = undefined;

  /**
   * Tax
   * @member {Number} Tax
   */
  exports.prototype.Tax = undefined;

  /**
   * Items
   * @member {Array.<module:model/InvoiceItem>} Items
   */
  exports.prototype.Items = undefined;

  /**
   * Discounts
   * @member {Array.<module:model/InvoiceDiscount>} Discounts
   */
  exports.prototype.Discounts = undefined;


  return exports;

}));
