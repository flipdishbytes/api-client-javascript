/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MenuCatalogItem model module.
 * @module model/MenuCatalogItem
 * @version 1.0.0
 */
class MenuCatalogItem {
    /**
     * Constructs a new <code>MenuCatalogItem</code>.
     * Information to add a CatalogItem to a Menu
     * @alias module:model/MenuCatalogItem
     * @param CatalogItemId {String} Product Id to the product to add as Menu Item
     */
    constructor(CatalogItemId) { 
        
        MenuCatalogItem.initialize(this, CatalogItemId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, CatalogItemId) { 
        obj['CatalogItemId'] = CatalogItemId;
    }

    /**
     * Constructs a <code>MenuCatalogItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MenuCatalogItem} obj Optional instance to populate.
     * @return {module:model/MenuCatalogItem} The populated <code>MenuCatalogItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MenuCatalogItem();

            if (data.hasOwnProperty('CatalogItemId')) {
                obj['CatalogItemId'] = ApiClient.convertToType(data['CatalogItemId'], 'String');
            }
            if (data.hasOwnProperty('CellLayoutType')) {
                obj['CellLayoutType'] = ApiClient.convertToType(data['CellLayoutType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Product Id to the product to add as Menu Item
 * @member {String} CatalogItemId
 */
MenuCatalogItem.prototype['CatalogItemId'] = undefined;

/**
 * Small | Medium | Large | HiddenImage  Affects the layout of the menu.
 * @member {module:model/MenuCatalogItem.CellLayoutTypeEnum} CellLayoutType
 */
MenuCatalogItem.prototype['CellLayoutType'] = undefined;





/**
 * Allowed values for the <code>CellLayoutType</code> property.
 * @enum {String}
 * @readonly
 */
MenuCatalogItem['CellLayoutTypeEnum'] = {

    /**
     * value: "Small"
     * @const
     */
    "Small": "Small",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "Large"
     * @const
     */
    "Large": "Large",

    /**
     * value: "HiddenImage"
     * @const
     */
    "HiddenImage": "HiddenImage"
};



export default MenuCatalogItem;

