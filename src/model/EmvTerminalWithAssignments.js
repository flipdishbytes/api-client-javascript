/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EmvTerminalWithAssignments model module.
 * @module model/EmvTerminalWithAssignments
 * @version 1.0.0
 */
class EmvTerminalWithAssignments {
    /**
     * Constructs a new <code>EmvTerminalWithAssignments</code>.
     * EMV Payment Terminal
     * @alias module:model/EmvTerminalWithAssignments
     */
    constructor() { 
        
        EmvTerminalWithAssignments.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmvTerminalWithAssignments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmvTerminalWithAssignments} obj Optional instance to populate.
     * @return {module:model/EmvTerminalWithAssignments} The populated <code>EmvTerminalWithAssignments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmvTerminalWithAssignments();

            if (data.hasOwnProperty('EmvTerminalId')) {
                obj['EmvTerminalId'] = ApiClient.convertToType(data['EmvTerminalId'], 'String');
            }
            if (data.hasOwnProperty('TerminalId')) {
                obj['TerminalId'] = ApiClient.convertToType(data['TerminalId'], 'String');
            }
            if (data.hasOwnProperty('IsAssignedToHydraDevice')) {
                obj['IsAssignedToHydraDevice'] = ApiClient.convertToType(data['IsAssignedToHydraDevice'], 'Boolean');
            }
            if (data.hasOwnProperty('HydraConfigId')) {
                obj['HydraConfigId'] = ApiClient.convertToType(data['HydraConfigId'], 'Number');
            }
            if (data.hasOwnProperty('HydraDeviceId')) {
                obj['HydraDeviceId'] = ApiClient.convertToType(data['HydraDeviceId'], 'String');
            }
            if (data.hasOwnProperty('HydraName')) {
                obj['HydraName'] = ApiClient.convertToType(data['HydraName'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Flipdish Internal identifier of the Terminal
 * @member {String} EmvTerminalId
 */
EmvTerminalWithAssignments.prototype['EmvTerminalId'] = undefined;

/**
 * External Identifier of the Terminal
 * @member {String} TerminalId
 */
EmvTerminalWithAssignments.prototype['TerminalId'] = undefined;

/**
 * true if the terminal is assigned to a hydra device (e.g. a kiosk)
 * @member {Boolean} IsAssignedToHydraDevice
 */
EmvTerminalWithAssignments.prototype['IsAssignedToHydraDevice'] = undefined;

/**
 * hydra device id (null if the terminal is not assigned to any hydra device)
 * @member {Number} HydraConfigId
 */
EmvTerminalWithAssignments.prototype['HydraConfigId'] = undefined;

/**
 * external hydra device id (null if the terminal is not assigned to any hydra device)
 * @member {String} HydraDeviceId
 */
EmvTerminalWithAssignments.prototype['HydraDeviceId'] = undefined;

/**
 * hydra device name (null if the terminal is not assigned to any hydra device)
 * @member {String} HydraName
 */
EmvTerminalWithAssignments.prototype['HydraName'] = undefined;






export default EmvTerminalWithAssignments;

