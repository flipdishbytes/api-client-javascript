/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StoreCollectionSettings model module.
 * @module model/StoreCollectionSettings
 * @version 1.0.0
 */
class StoreCollectionSettings {
    /**
     * Constructs a new <code>StoreCollectionSettings</code>.
     * Store Collection Settings
     * @alias module:model/StoreCollectionSettings
     * @param PickupEnabled {Boolean} True if the store accepts pickup orders
     * @param MinimumPickupOrderAmount {Number} Minimum pickup order amount
     * @param RequireCustomerNameForPickup {Boolean} True if customer name required for pickup orders
     * @param CashOrdersPickupEnabled {Boolean} True if the store accepts cash payment for pickup orders
     * @param LeadTimeMinutes {Number} Auto accept lead time for collection orders
     * @param EtaInPickupConfirmationSmsEnabled {Boolean} True if order confirmation sms includes estimated time when order will be ready for collection
     */
    constructor(PickupEnabled, MinimumPickupOrderAmount, RequireCustomerNameForPickup, CashOrdersPickupEnabled, LeadTimeMinutes, EtaInPickupConfirmationSmsEnabled) { 
        
        StoreCollectionSettings.initialize(this, PickupEnabled, MinimumPickupOrderAmount, RequireCustomerNameForPickup, CashOrdersPickupEnabled, LeadTimeMinutes, EtaInPickupConfirmationSmsEnabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, PickupEnabled, MinimumPickupOrderAmount, RequireCustomerNameForPickup, CashOrdersPickupEnabled, LeadTimeMinutes, EtaInPickupConfirmationSmsEnabled) { 
        obj['PickupEnabled'] = PickupEnabled;
        obj['MinimumPickupOrderAmount'] = MinimumPickupOrderAmount;
        obj['RequireCustomerNameForPickup'] = RequireCustomerNameForPickup;
        obj['CashOrdersPickupEnabled'] = CashOrdersPickupEnabled;
        obj['LeadTimeMinutes'] = LeadTimeMinutes;
        obj['EtaInPickupConfirmationSmsEnabled'] = EtaInPickupConfirmationSmsEnabled;
    }

    /**
     * Constructs a <code>StoreCollectionSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoreCollectionSettings} obj Optional instance to populate.
     * @return {module:model/StoreCollectionSettings} The populated <code>StoreCollectionSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoreCollectionSettings();

            if (data.hasOwnProperty('PickupEnabled')) {
                obj['PickupEnabled'] = ApiClient.convertToType(data['PickupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('MinimumPickupOrderAmount')) {
                obj['MinimumPickupOrderAmount'] = ApiClient.convertToType(data['MinimumPickupOrderAmount'], 'Number');
            }
            if (data.hasOwnProperty('RequireCustomerNameForPickup')) {
                obj['RequireCustomerNameForPickup'] = ApiClient.convertToType(data['RequireCustomerNameForPickup'], 'Boolean');
            }
            if (data.hasOwnProperty('CashOrdersPickupEnabled')) {
                obj['CashOrdersPickupEnabled'] = ApiClient.convertToType(data['CashOrdersPickupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('LeadTimeMinutes')) {
                obj['LeadTimeMinutes'] = ApiClient.convertToType(data['LeadTimeMinutes'], 'Number');
            }
            if (data.hasOwnProperty('EtaInPickupConfirmationSmsEnabled')) {
                obj['EtaInPickupConfirmationSmsEnabled'] = ApiClient.convertToType(data['EtaInPickupConfirmationSmsEnabled'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * True if the store accepts pickup orders
 * @member {Boolean} PickupEnabled
 */
StoreCollectionSettings.prototype['PickupEnabled'] = undefined;

/**
 * Minimum pickup order amount
 * @member {Number} MinimumPickupOrderAmount
 */
StoreCollectionSettings.prototype['MinimumPickupOrderAmount'] = undefined;

/**
 * True if customer name required for pickup orders
 * @member {Boolean} RequireCustomerNameForPickup
 */
StoreCollectionSettings.prototype['RequireCustomerNameForPickup'] = undefined;

/**
 * True if the store accepts cash payment for pickup orders
 * @member {Boolean} CashOrdersPickupEnabled
 */
StoreCollectionSettings.prototype['CashOrdersPickupEnabled'] = undefined;

/**
 * Auto accept lead time for collection orders
 * @member {Number} LeadTimeMinutes
 */
StoreCollectionSettings.prototype['LeadTimeMinutes'] = undefined;

/**
 * True if order confirmation sms includes estimated time when order will be ready for collection
 * @member {Boolean} EtaInPickupConfirmationSmsEnabled
 */
StoreCollectionSettings.prototype['EtaInPickupConfirmationSmsEnabled'] = undefined;






export default StoreCollectionSettings;

