/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BusinessHoursPeriod from './BusinessHoursPeriod';
import DeliveryZone from './DeliveryZone';
import StoreAddress from './StoreAddress';
import StoreNote from './StoreNote';

/**
 * The Store model module.
 * @module model/Store
 * @version 1.0.0
 */
class Store {
    /**
     * Constructs a new <code>Store</code>.
     * Store
     * @alias module:model/Store
     */
    constructor() { 
        
        Store.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Store</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Store} obj Optional instance to populate.
     * @return {module:model/Store} The populated <code>Store</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Store();

            if (data.hasOwnProperty('StoreId')) {
                obj['StoreId'] = ApiClient.convertToType(data['StoreId'], 'Number');
            }
            if (data.hasOwnProperty('StoreGroupId')) {
                obj['StoreGroupId'] = ApiClient.convertToType(data['StoreGroupId'], 'Number');
            }
            if (data.hasOwnProperty('Address')) {
                obj['Address'] = StoreAddress.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('DeliveryZones')) {
                obj['DeliveryZones'] = ApiClient.convertToType(data['DeliveryZones'], [DeliveryZone]);
            }
            if (data.hasOwnProperty('ApmPhoneNumber')) {
                obj['ApmPhoneNumber'] = ApiClient.convertToType(data['ApmPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('PickupHours')) {
                obj['PickupHours'] = ApiClient.convertToType(data['PickupHours'], [BusinessHoursPeriod]);
            }
            if (data.hasOwnProperty('DeliveryHours')) {
                obj['DeliveryHours'] = ApiClient.convertToType(data['DeliveryHours'], [BusinessHoursPeriod]);
            }
            if (data.hasOwnProperty('MenuId')) {
                obj['MenuId'] = ApiClient.convertToType(data['MenuId'], 'Number');
            }
            if (data.hasOwnProperty('OrderConfirmationMessageOverrideDelivery')) {
                obj['OrderConfirmationMessageOverrideDelivery'] = ApiClient.convertToType(data['OrderConfirmationMessageOverrideDelivery'], 'String');
            }
            if (data.hasOwnProperty('OrderConfirmationMessageOverridePickup')) {
                obj['OrderConfirmationMessageOverridePickup'] = ApiClient.convertToType(data['OrderConfirmationMessageOverridePickup'], 'String');
            }
            if (data.hasOwnProperty('PrintoutLayoutType')) {
                obj['PrintoutLayoutType'] = ApiClient.convertToType(data['PrintoutLayoutType'], 'String');
            }
            if (data.hasOwnProperty('StoreNotes')) {
                obj['StoreNotes'] = ApiClient.convertToType(data['StoreNotes'], [StoreNote]);
            }
            if (data.hasOwnProperty('MicrosoftTimeZone')) {
                obj['MicrosoftTimeZone'] = ApiClient.convertToType(data['MicrosoftTimeZone'], 'String');
            }
            if (data.hasOwnProperty('IanaTimeZone')) {
                obj['IanaTimeZone'] = ApiClient.convertToType(data['IanaTimeZone'], 'String');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('PreOrderDeliveryEnabled')) {
                obj['PreOrderDeliveryEnabled'] = ApiClient.convertToType(data['PreOrderDeliveryEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('PreOrderPickupEnabled')) {
                obj['PreOrderPickupEnabled'] = ApiClient.convertToType(data['PreOrderPickupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('LogoUrl')) {
                obj['LogoUrl'] = ApiClient.convertToType(data['LogoUrl'], 'String');
            }
            if (data.hasOwnProperty('FraudPreventionStrategy')) {
                obj['FraudPreventionStrategy'] = ApiClient.convertToType(data['FraudPreventionStrategy'], 'String');
            }
            if (data.hasOwnProperty('AppIds')) {
                obj['AppIds'] = ApiClient.convertToType(data['AppIds'], ['String']);
            }
            if (data.hasOwnProperty('PropertyId')) {
                obj['PropertyId'] = ApiClient.convertToType(data['PropertyId'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('AlwaysAppearOpen')) {
                obj['AlwaysAppearOpen'] = ApiClient.convertToType(data['AlwaysAppearOpen'], 'Boolean');
            }
            if (data.hasOwnProperty('PreOrderEnabled')) {
                obj['PreOrderEnabled'] = ApiClient.convertToType(data['PreOrderEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('TakeOutEnabled')) {
                obj['TakeOutEnabled'] = ApiClient.convertToType(data['TakeOutEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('TableServiceEnabled')) {
                obj['TableServiceEnabled'] = ApiClient.convertToType(data['TableServiceEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('DineInEnabled')) {
                obj['DineInEnabled'] = ApiClient.convertToType(data['DineInEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('AllowPreOrdersAndTableService')) {
                obj['AllowPreOrdersAndTableService'] = ApiClient.convertToType(data['AllowPreOrdersAndTableService'], 'Boolean');
            }
            if (data.hasOwnProperty('PickupEnabled')) {
                obj['PickupEnabled'] = ApiClient.convertToType(data['PickupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('DeliveryEnabled')) {
                obj['DeliveryEnabled'] = ApiClient.convertToType(data['DeliveryEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('CardOrderDeliveryEnabled')) {
                obj['CardOrderDeliveryEnabled'] = ApiClient.convertToType(data['CardOrderDeliveryEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('CashOrdersDeliveryEnabled')) {
                obj['CashOrdersDeliveryEnabled'] = ApiClient.convertToType(data['CashOrdersDeliveryEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('CardOrdersPickupEnabled')) {
                obj['CardOrdersPickupEnabled'] = ApiClient.convertToType(data['CardOrdersPickupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('CashOrdersPickupEnabled')) {
                obj['CashOrdersPickupEnabled'] = ApiClient.convertToType(data['CashOrdersPickupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('TipsEnabled')) {
                obj['TipsEnabled'] = ApiClient.convertToType(data['TipsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('AutomaticallyAcceptOrders')) {
                obj['AutomaticallyAcceptOrders'] = ApiClient.convertToType(data['AutomaticallyAcceptOrders'], 'Boolean');
            }
            if (data.hasOwnProperty('OpenForDelivery')) {
                obj['OpenForDelivery'] = ApiClient.convertToType(data['OpenForDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('OpenForPickup')) {
                obj['OpenForPickup'] = ApiClient.convertToType(data['OpenForPickup'], 'Boolean');
            }
            if (data.hasOwnProperty('MinimumPickupOrderAmount')) {
                obj['MinimumPickupOrderAmount'] = ApiClient.convertToType(data['MinimumPickupOrderAmount'], 'Number');
            }
            if (data.hasOwnProperty('RequireCustomerNameForPickup')) {
                obj['RequireCustomerNameForPickup'] = ApiClient.convertToType(data['RequireCustomerNameForPickup'], 'Boolean');
            }
            if (data.hasOwnProperty('GdprCustomerPhoneNumbers')) {
                obj['GdprCustomerPhoneNumbers'] = ApiClient.convertToType(data['GdprCustomerPhoneNumbers'], 'Boolean');
            }
            if (data.hasOwnProperty('RequireCustomerNameForDelivery')) {
                obj['RequireCustomerNameForDelivery'] = ApiClient.convertToType(data['RequireCustomerNameForDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('AllowChefNotes')) {
                obj['AllowChefNotes'] = ApiClient.convertToType(data['AllowChefNotes'], 'Boolean');
            }
            if (data.hasOwnProperty('EtaInPickupConfirmationSmsEnabled')) {
                obj['EtaInPickupConfirmationSmsEnabled'] = ApiClient.convertToType(data['EtaInPickupConfirmationSmsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('EtaInDeliveryConfirmationSmsEnabled')) {
                obj['EtaInDeliveryConfirmationSmsEnabled'] = ApiClient.convertToType(data['EtaInDeliveryConfirmationSmsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('IsArchived')) {
                obj['IsArchived'] = ApiClient.convertToType(data['IsArchived'], 'Boolean');
            }
            if (data.hasOwnProperty('IsPublished')) {
                obj['IsPublished'] = ApiClient.convertToType(data['IsPublished'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], 'String');
            }
            if (data.hasOwnProperty('StaffLanguage')) {
                obj['StaffLanguage'] = ApiClient.convertToType(data['StaffLanguage'], 'String');
            }
            if (data.hasOwnProperty('SalesChannelTypes')) {
                obj['SalesChannelTypes'] = ApiClient.convertToType(data['SalesChannelTypes'], ['String']);
            }
            if (data.hasOwnProperty('InheritanceConfigTypes')) {
                obj['InheritanceConfigTypes'] = ApiClient.convertToType(data['InheritanceConfigTypes'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Store identifier
 * @member {Number} StoreId
 */
Store.prototype['StoreId'] = undefined;

/**
 * Store group id to which this store belongs
 * @member {Number} StoreGroupId
 */
Store.prototype['StoreGroupId'] = undefined;

/**
 * @member {module:model/StoreAddress} Address
 */
Store.prototype['Address'] = undefined;

/**
 * Delivery zones
 * @member {Array.<module:model/DeliveryZone>} DeliveryZones
 */
Store.prototype['DeliveryZones'] = undefined;

/**
 * Automated Phone Marketing number
 * @member {String} ApmPhoneNumber
 */
Store.prototype['ApmPhoneNumber'] = undefined;

/**
 * Pickup hours
 * @member {Array.<module:model/BusinessHoursPeriod>} PickupHours
 */
Store.prototype['PickupHours'] = undefined;

/**
 * Delivery hours
 * @member {Array.<module:model/BusinessHoursPeriod>} DeliveryHours
 */
Store.prototype['DeliveryHours'] = undefined;

/**
 * Menu identifier
 * @member {Number} MenuId
 */
Store.prototype['MenuId'] = undefined;

/**
 * Overridden confirmation message for delivery orders
 * @member {String} OrderConfirmationMessageOverrideDelivery
 */
Store.prototype['OrderConfirmationMessageOverrideDelivery'] = undefined;

/**
 * Overridden confirmation message for pickup orders
 * @member {String} OrderConfirmationMessageOverridePickup
 */
Store.prototype['OrderConfirmationMessageOverridePickup'] = undefined;

/**
 * Printout layout
 * @member {module:model/Store.PrintoutLayoutTypeEnum} PrintoutLayoutType
 */
Store.prototype['PrintoutLayoutType'] = undefined;

/**
 * Store notes
 * @member {Array.<module:model/StoreNote>} StoreNotes
 */
Store.prototype['StoreNotes'] = undefined;

/**
 * Microsoft Time Zone Index Values (https://msdn.microsoft.com/en-us/library/ms912391)  (Editable through store coordinate change)
 * @member {String} MicrosoftTimeZone
 */
Store.prototype['MicrosoftTimeZone'] = undefined;

/**
 * IANA Time Zone (https://www.iana.org/time-zones)  (Editable through store coordinate change)
 * @member {String} IanaTimeZone
 */
Store.prototype['IanaTimeZone'] = undefined;

/**
 * Currency (derived from Store Group)
 * @member {module:model/Store.CurrencyEnum} Currency
 */
Store.prototype['Currency'] = undefined;

/**
 * Is PerOrder Enabled for Delivery
 * @member {Boolean} PreOrderDeliveryEnabled
 */
Store.prototype['PreOrderDeliveryEnabled'] = undefined;

/**
 * Is PerOrder Enabled for Pickup
 * @member {Boolean} PreOrderPickupEnabled
 */
Store.prototype['PreOrderPickupEnabled'] = undefined;

/**
 * Url for logo image
 * @member {String} LogoUrl
 */
Store.prototype['LogoUrl'] = undefined;

/**
 * Fraud Prevention Strategy
 * @member {String} FraudPreventionStrategy
 */
Store.prototype['FraudPreventionStrategy'] = undefined;

/**
 * Store's app ids
 * @member {Array.<String>} AppIds
 */
Store.prototype['AppIds'] = undefined;

/**
 * Property Id
 * @member {String} PropertyId
 */
Store.prototype['PropertyId'] = undefined;

/**
 * Phone number
 * @member {String} PhoneNumber
 */
Store.prototype['PhoneNumber'] = undefined;

/**
 * True if the store always appears open
 * @member {Boolean} AlwaysAppearOpen
 */
Store.prototype['AlwaysAppearOpen'] = undefined;

/**
 * True if the store accepts pre-orders
 * @member {Boolean} PreOrderEnabled
 */
Store.prototype['PreOrderEnabled'] = undefined;

/**
 * True if the store accepts take-out orders
 * @member {Boolean} TakeOutEnabled
 */
Store.prototype['TakeOutEnabled'] = undefined;

/**
 * True if the store has table service
 * @member {Boolean} TableServiceEnabled
 */
Store.prototype['TableServiceEnabled'] = undefined;

/**
 * True if the store accepts dine-in orders
 * @member {Boolean} DineInEnabled
 */
Store.prototype['DineInEnabled'] = undefined;

/**
 * True if both pre-orders and talbe service can be enabled
 * @member {Boolean} AllowPreOrdersAndTableService
 */
Store.prototype['AllowPreOrdersAndTableService'] = undefined;

/**
 * True if the store accepts pickup orders
 * @member {Boolean} PickupEnabled
 */
Store.prototype['PickupEnabled'] = undefined;

/**
 * True if the store accepts delivery orders
 * @member {Boolean} DeliveryEnabled
 */
Store.prototype['DeliveryEnabled'] = undefined;

/**
 * True if the store accepts card payment for delivery orders
 * @member {Boolean} CardOrderDeliveryEnabled
 */
Store.prototype['CardOrderDeliveryEnabled'] = undefined;

/**
 * True if the store accepts cash payment for delivery orders
 * @member {Boolean} CashOrdersDeliveryEnabled
 */
Store.prototype['CashOrdersDeliveryEnabled'] = undefined;

/**
 * True if the store accepts card payment for pickup orders
 * @member {Boolean} CardOrdersPickupEnabled
 */
Store.prototype['CardOrdersPickupEnabled'] = undefined;

/**
 * True if the store accepts cash payment for pickup orders
 * @member {Boolean} CashOrdersPickupEnabled
 */
Store.prototype['CashOrdersPickupEnabled'] = undefined;

/**
 * True if the store accepts tips
 * @member {Boolean} TipsEnabled
 */
Store.prototype['TipsEnabled'] = undefined;

/**
 * True if the stores orders are automatically accepted in Flipdish
 * @member {Boolean} AutomaticallyAcceptOrders
 */
Store.prototype['AutomaticallyAcceptOrders'] = undefined;

/**
 * True if the store is open for delivery
 * @member {Boolean} OpenForDelivery
 */
Store.prototype['OpenForDelivery'] = undefined;

/**
 * True if the store is open for pickup
 * @member {Boolean} OpenForPickup
 */
Store.prototype['OpenForPickup'] = undefined;

/**
 * Minimum pickup order amount
 * @member {Number} MinimumPickupOrderAmount
 */
Store.prototype['MinimumPickupOrderAmount'] = undefined;

/**
 * True if customer name required for pickup orders
 * @member {Boolean} RequireCustomerNameForPickup
 */
Store.prototype['RequireCustomerNameForPickup'] = undefined;

/**
 * Mask your customers phone numbers printed on receipts and reduce the amout of personally identifiable customer information that is exposed.
 * @member {Boolean} GdprCustomerPhoneNumbers
 */
Store.prototype['GdprCustomerPhoneNumbers'] = undefined;

/**
 * True if customer name required for delivery orders
 * @member {Boolean} RequireCustomerNameForDelivery
 */
Store.prototype['RequireCustomerNameForDelivery'] = undefined;

/**
 * True if the customer is allowed enter custom notes with their orders
 * @member {Boolean} AllowChefNotes
 */
Store.prototype['AllowChefNotes'] = undefined;

/**
 * True if order confirmation sms includes estimated time when order will be ready for collection
 * @member {Boolean} EtaInPickupConfirmationSmsEnabled
 */
Store.prototype['EtaInPickupConfirmationSmsEnabled'] = undefined;

/**
 * True if order confirmation sms includes estimated time when order will delivered
 * @member {Boolean} EtaInDeliveryConfirmationSmsEnabled
 */
Store.prototype['EtaInDeliveryConfirmationSmsEnabled'] = undefined;

/**
 * Is the Store Archived
 * @member {Boolean} IsArchived
 */
Store.prototype['IsArchived'] = undefined;

/**
 * Is the Store Published
 * @member {Boolean} IsPublished
 */
Store.prototype['IsPublished'] = undefined;

/**
 * Name
 * @member {String} Name
 */
Store.prototype['Name'] = undefined;

/**
 * Email address (visible to customers)
 * @member {String} EmailAddress
 */
Store.prototype['EmailAddress'] = undefined;

/**
 * Staff Language (used for communication with the staff)  Emails, Printouts etc
 * @member {String} StaffLanguage
 */
Store.prototype['StaffLanguage'] = undefined;

/**
 * Sales Channel Types
 * @member {Array.<module:model/Store.SalesChannelTypesEnum>} SalesChannelTypes
 */
Store.prototype['SalesChannelTypes'] = undefined;

/**
 * Inheritance Config Types
 * @member {Array.<module:model/Store.InheritanceConfigTypesEnum>} InheritanceConfigTypes
 */
Store.prototype['InheritanceConfigTypes'] = undefined;





/**
 * Allowed values for the <code>PrintoutLayoutType</code> property.
 * @enum {String}
 * @readonly
 */
Store['PrintoutLayoutTypeEnum'] = {

    /**
     * value: "Default"
     * @const
     */
    "Default": "Default",

    /**
     * value: "Centra"
     * @const
     */
    "Centra": "Centra",

    /**
     * value: "SmallChefNotes"
     * @const
     */
    "SmallChefNotes": "SmallChefNotes",

    /**
     * value: "SmallChefNotesAndCentra"
     * @const
     */
    "SmallChefNotesAndCentra": "SmallChefNotesAndCentra"
};


/**
 * Allowed values for the <code>Currency</code> property.
 * @enum {String}
 * @readonly
 */
Store['CurrencyEnum'] = {

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "AUD"
     * @const
     */
    "AUD": "AUD",

    /**
     * value: "DJF"
     * @const
     */
    "DJF": "DJF",

    /**
     * value: "ZAR"
     * @const
     */
    "ZAR": "ZAR",

    /**
     * value: "ETB"
     * @const
     */
    "ETB": "ETB",

    /**
     * value: "AED"
     * @const
     */
    "AED": "AED",

    /**
     * value: "BHD"
     * @const
     */
    "BHD": "BHD",

    /**
     * value: "DZD"
     * @const
     */
    "DZD": "DZD",

    /**
     * value: "EGP"
     * @const
     */
    "EGP": "EGP",

    /**
     * value: "IQD"
     * @const
     */
    "IQD": "IQD",

    /**
     * value: "JOD"
     * @const
     */
    "JOD": "JOD",

    /**
     * value: "KWD"
     * @const
     */
    "KWD": "KWD",

    /**
     * value: "LBP"
     * @const
     */
    "LBP": "LBP",

    /**
     * value: "LYD"
     * @const
     */
    "LYD": "LYD",

    /**
     * value: "MAD"
     * @const
     */
    "MAD": "MAD",

    /**
     * value: "OMR"
     * @const
     */
    "OMR": "OMR",

    /**
     * value: "QAR"
     * @const
     */
    "QAR": "QAR",

    /**
     * value: "SAR"
     * @const
     */
    "SAR": "SAR",

    /**
     * value: "SYP"
     * @const
     */
    "SYP": "SYP",

    /**
     * value: "TND"
     * @const
     */
    "TND": "TND",

    /**
     * value: "YER"
     * @const
     */
    "YER": "YER",

    /**
     * value: "CLP"
     * @const
     */
    "CLP": "CLP",

    /**
     * value: "INR"
     * @const
     */
    "INR": "INR",

    /**
     * value: "AZN"
     * @const
     */
    "AZN": "AZN",

    /**
     * value: "RUB"
     * @const
     */
    "RUB": "RUB",

    /**
     * value: "BYN"
     * @const
     */
    "BYN": "BYN",

    /**
     * value: "BGN"
     * @const
     */
    "BGN": "BGN",

    /**
     * value: "NGN"
     * @const
     */
    "NGN": "NGN",

    /**
     * value: "BDT"
     * @const
     */
    "BDT": "BDT",

    /**
     * value: "CNY"
     * @const
     */
    "CNY": "CNY",

    /**
     * value: "BAM"
     * @const
     */
    "BAM": "BAM",

    /**
     * value: "CZK"
     * @const
     */
    "CZK": "CZK",

    /**
     * value: "DKK"
     * @const
     */
    "DKK": "DKK",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "MVR"
     * @const
     */
    "MVR": "MVR",

    /**
     * value: "BTN"
     * @const
     */
    "BTN": "BTN",

    /**
     * value: "XCD"
     * @const
     */
    "XCD": "XCD",

    /**
     * value: "BZD"
     * @const
     */
    "BZD": "BZD",

    /**
     * value: "HKD"
     * @const
     */
    "HKD": "HKD",

    /**
     * value: "IDR"
     * @const
     */
    "IDR": "IDR",

    /**
     * value: "JMD"
     * @const
     */
    "JMD": "JMD",

    /**
     * value: "MYR"
     * @const
     */
    "MYR": "MYR",

    /**
     * value: "NZD"
     * @const
     */
    "NZD": "NZD",

    /**
     * value: "PHP"
     * @const
     */
    "PHP": "PHP",

    /**
     * value: "SGD"
     * @const
     */
    "SGD": "SGD",

    /**
     * value: "TTD"
     * @const
     */
    "TTD": "TTD",

    /**
     * value: "XDR"
     * @const
     */
    "XDR": "XDR",

    /**
     * value: "ARS"
     * @const
     */
    "ARS": "ARS",

    /**
     * value: "BOB"
     * @const
     */
    "BOB": "BOB",

    /**
     * value: "COP"
     * @const
     */
    "COP": "COP",

    /**
     * value: "CRC"
     * @const
     */
    "CRC": "CRC",

    /**
     * value: "CUP"
     * @const
     */
    "CUP": "CUP",

    /**
     * value: "DOP"
     * @const
     */
    "DOP": "DOP",

    /**
     * value: "GTQ"
     * @const
     */
    "GTQ": "GTQ",

    /**
     * value: "HNL"
     * @const
     */
    "HNL": "HNL",

    /**
     * value: "MXN"
     * @const
     */
    "MXN": "MXN",

    /**
     * value: "NIO"
     * @const
     */
    "NIO": "NIO",

    /**
     * value: "PAB"
     * @const
     */
    "PAB": "PAB",

    /**
     * value: "PEN"
     * @const
     */
    "PEN": "PEN",

    /**
     * value: "PYG"
     * @const
     */
    "PYG": "PYG",

    /**
     * value: "UYU"
     * @const
     */
    "UYU": "UYU",

    /**
     * value: "VEF"
     * @const
     */
    "VEF": "VEF",

    /**
     * value: "IRR"
     * @const
     */
    "IRR": "IRR",

    /**
     * value: "XOF"
     * @const
     */
    "XOF": "XOF",

    /**
     * value: "CDF"
     * @const
     */
    "CDF": "CDF",

    /**
     * value: "XAF"
     * @const
     */
    "XAF": "XAF",

    /**
     * value: "HTG"
     * @const
     */
    "HTG": "HTG",

    /**
     * value: "ILS"
     * @const
     */
    "ILS": "ILS",

    /**
     * value: "HRK"
     * @const
     */
    "HRK": "HRK",

    /**
     * value: "HUF"
     * @const
     */
    "HUF": "HUF",

    /**
     * value: "AMD"
     * @const
     */
    "AMD": "AMD",

    /**
     * value: "ISK"
     * @const
     */
    "ISK": "ISK",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "GEL"
     * @const
     */
    "GEL": "GEL",

    /**
     * value: "KZT"
     * @const
     */
    "KZT": "KZT",

    /**
     * value: "KHR"
     * @const
     */
    "KHR": "KHR",

    /**
     * value: "KRW"
     * @const
     */
    "KRW": "KRW",

    /**
     * value: "KGS"
     * @const
     */
    "KGS": "KGS",

    /**
     * value: "LAK"
     * @const
     */
    "LAK": "LAK",

    /**
     * value: "MKD"
     * @const
     */
    "MKD": "MKD",

    /**
     * value: "MNT"
     * @const
     */
    "MNT": "MNT",

    /**
     * value: "BND"
     * @const
     */
    "BND": "BND",

    /**
     * value: "MMK"
     * @const
     */
    "MMK": "MMK",

    /**
     * value: "NOK"
     * @const
     */
    "NOK": "NOK",

    /**
     * value: "NPR"
     * @const
     */
    "NPR": "NPR",

    /**
     * value: "PKR"
     * @const
     */
    "PKR": "PKR",

    /**
     * value: "PLN"
     * @const
     */
    "PLN": "PLN",

    /**
     * value: "AFN"
     * @const
     */
    "AFN": "AFN",

    /**
     * value: "BRL"
     * @const
     */
    "BRL": "BRL",

    /**
     * value: "MDL"
     * @const
     */
    "MDL": "MDL",

    /**
     * value: "RON"
     * @const
     */
    "RON": "RON",

    /**
     * value: "RWF"
     * @const
     */
    "RWF": "RWF",

    /**
     * value: "SEK"
     * @const
     */
    "SEK": "SEK",

    /**
     * value: "LKR"
     * @const
     */
    "LKR": "LKR",

    /**
     * value: "SOS"
     * @const
     */
    "SOS": "SOS",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "RSD"
     * @const
     */
    "RSD": "RSD",

    /**
     * value: "KES"
     * @const
     */
    "KES": "KES",

    /**
     * value: "TJS"
     * @const
     */
    "TJS": "TJS",

    /**
     * value: "THB"
     * @const
     */
    "THB": "THB",

    /**
     * value: "ERN"
     * @const
     */
    "ERN": "ERN",

    /**
     * value: "TMT"
     * @const
     */
    "TMT": "TMT",

    /**
     * value: "BWP"
     * @const
     */
    "BWP": "BWP",

    /**
     * value: "TRY"
     * @const
     */
    "TRY": "TRY",

    /**
     * value: "UAH"
     * @const
     */
    "UAH": "UAH",

    /**
     * value: "UZS"
     * @const
     */
    "UZS": "UZS",

    /**
     * value: "VND"
     * @const
     */
    "VND": "VND",

    /**
     * value: "MOP"
     * @const
     */
    "MOP": "MOP",

    /**
     * value: "TWD"
     * @const
     */
    "TWD": "TWD",

    /**
     * value: "BMD"
     * @const
     */
    "BMD": "BMD"
};


/**
 * Allowed values for the <code>SalesChannelTypes</code> property.
 * @enum {String}
 * @readonly
 */
Store['SalesChannelTypesEnum'] = {

    /**
     * value: "Web"
     * @const
     */
    "Web": "Web",

    /**
     * value: "App"
     * @const
     */
    "App": "App",

    /**
     * value: "Kiosk"
     * @const
     */
    "Kiosk": "Kiosk",

    /**
     * value: "Pos"
     * @const
     */
    "Pos": "Pos",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};


/**
 * Allowed values for the <code>InheritanceConfigTypes</code> property.
 * @enum {String}
 * @readonly
 */
Store['InheritanceConfigTypesEnum'] = {

    /**
     * value: "CollectionSettings"
     * @const
     */
    "CollectionSettings": "CollectionSettings"
};



export default Store;

