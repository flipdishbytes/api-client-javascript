/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebhookLog model module.
 * @module model/WebhookLog
 * @version 1.0.0
 */
class WebhookLog {
    /**
     * Constructs a new <code>WebhookLog</code>.
     * Webhook log
     * @alias module:model/WebhookLog
     */
    constructor() { 
        
        WebhookLog.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebhookLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookLog} obj Optional instance to populate.
     * @return {module:model/WebhookLog} The populated <code>WebhookLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookLog();

            if (data.hasOwnProperty('WebhookSubscriptionOwnerUserId')) {
                obj['WebhookSubscriptionOwnerUserId'] = ApiClient.convertToType(data['WebhookSubscriptionOwnerUserId'], 'Number');
            }
            if (data.hasOwnProperty('EventCreated')) {
                obj['EventCreated'] = ApiClient.convertToType(data['EventCreated'], 'String');
            }
            if (data.hasOwnProperty('WebhookTriggered')) {
                obj['WebhookTriggered'] = ApiClient.convertToType(data['WebhookTriggered'], 'String');
            }
            if (data.hasOwnProperty('WebhookEventName')) {
                obj['WebhookEventName'] = ApiClient.convertToType(data['WebhookEventName'], 'String');
            }
            if (data.hasOwnProperty('WebhookSubscriptionCallbackUrl')) {
                obj['WebhookSubscriptionCallbackUrl'] = ApiClient.convertToType(data['WebhookSubscriptionCallbackUrl'], 'String');
            }
            if (data.hasOwnProperty('HttpResponseStatusCode')) {
                obj['HttpResponseStatusCode'] = ApiClient.convertToType(data['HttpResponseStatusCode'], 'String');
            }
            if (data.hasOwnProperty('HttpResponseStatus')) {
                obj['HttpResponseStatus'] = ApiClient.convertToType(data['HttpResponseStatus'], 'String');
            }
            if (data.hasOwnProperty('RequestHeaders')) {
                obj['RequestHeaders'] = ApiClient.convertToType(data['RequestHeaders'], 'String');
            }
            if (data.hasOwnProperty('RequestBody')) {
                obj['RequestBody'] = ApiClient.convertToType(data['RequestBody'], 'String');
            }
            if (data.hasOwnProperty('ResponseHeaders')) {
                obj['ResponseHeaders'] = ApiClient.convertToType(data['ResponseHeaders'], 'String');
            }
            if (data.hasOwnProperty('ResponseBody')) {
                obj['ResponseBody'] = ApiClient.convertToType(data['ResponseBody'], 'String');
            }
            if (data.hasOwnProperty('Duration')) {
                obj['Duration'] = ApiClient.convertToType(data['Duration'], 'String');
            }
            if (data.hasOwnProperty('RetryCount')) {
                obj['RetryCount'] = ApiClient.convertToType(data['RetryCount'], 'Number');
            }
            if (data.hasOwnProperty('FlipdishWebhookId')) {
                obj['FlipdishWebhookId'] = ApiClient.convertToType(data['FlipdishWebhookId'], 'String');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Webhook subscription owner user identifier
 * @member {Number} WebhookSubscriptionOwnerUserId
 */
WebhookLog.prototype['WebhookSubscriptionOwnerUserId'] = undefined;

/**
 * Event created
 * @member {String} EventCreated
 */
WebhookLog.prototype['EventCreated'] = undefined;

/**
 * Webhook triggered
 * @member {String} WebhookTriggered
 */
WebhookLog.prototype['WebhookTriggered'] = undefined;

/**
 * Webhook event name
 * @member {String} WebhookEventName
 */
WebhookLog.prototype['WebhookEventName'] = undefined;

/**
 * Webhook subscription callback url
 * @member {String} WebhookSubscriptionCallbackUrl
 */
WebhookLog.prototype['WebhookSubscriptionCallbackUrl'] = undefined;

/**
 * Received HTTP repsonse status HTTP code
 * @member {String} HttpResponseStatusCode
 */
WebhookLog.prototype['HttpResponseStatusCode'] = undefined;

/**
 * Received HTTP repsonse status
 * @member {String} HttpResponseStatus
 */
WebhookLog.prototype['HttpResponseStatus'] = undefined;

/**
 * Request headers
 * @member {String} RequestHeaders
 */
WebhookLog.prototype['RequestHeaders'] = undefined;

/**
 * Request body
 * @member {String} RequestBody
 */
WebhookLog.prototype['RequestBody'] = undefined;

/**
 * Received response headers
 * @member {String} ResponseHeaders
 */
WebhookLog.prototype['ResponseHeaders'] = undefined;

/**
 * Received response body
 * @member {String} ResponseBody
 */
WebhookLog.prototype['ResponseBody'] = undefined;

/**
 * Duration of HTTP request
 * @member {String} Duration
 */
WebhookLog.prototype['Duration'] = undefined;

/**
 * Retry count
 * @member {Number} RetryCount
 */
WebhookLog.prototype['RetryCount'] = undefined;

/**
 * Flipdish webhook identifier
 * @member {String} FlipdishWebhookId
 */
WebhookLog.prototype['FlipdishWebhookId'] = undefined;

/**
 * Flipdish webhook version
 * @member {String} Version
 */
WebhookLog.prototype['Version'] = undefined;






export default WebhookLog;

