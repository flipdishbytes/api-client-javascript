/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FieldGroup', 'model/Setting'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FieldGroup'), require('./Setting'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.AppConfigurationDetail = factory(root.Flipdish.ApiClient, root.Flipdish.FieldGroup, root.Flipdish.Setting);
  }
}(this, function(ApiClient, FieldGroup, Setting) {
  'use strict';

  /**
   * The AppConfigurationDetail model module.
   * @module model/AppConfigurationDetail
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>AppConfigurationDetail</code>.
   * Application configuration detail
   * @alias module:model/AppConfigurationDetail
   * @class
   * @param Id {String} Application Configuration Public Id
   * @param AppId {String} Whitelabel App Id
   * @param AppStoreAppId {String} App Store App Id
   * @param IsEnabled {Boolean} Is Enabled
   * @param ConfigurationType {module:model/AppConfigurationDetail.ConfigurationTypeEnum} Configuration Type  <example>ExternalLink</example><example>FlipdishHosted</example>
   * @param StoreSelectorType {module:model/AppConfigurationDetail.StoreSelectorTypeEnum} Store Selector Type
   * @param OAuthAppId {String} OAuth App Id
   * @param PermissionsType {module:model/AppConfigurationDetail.PermissionsTypeEnum} Permissions Type
   * @param Name {String} Name
   * @param Description {String} Description
   * @param VerificationStatus {module:model/AppConfigurationDetail.VerificationStatusEnum} Application verification status
   * @param Tags {Array.<String>} Tags
   * @param Regions {Array.<String>} Regions
   */
  var exports = function(Id, AppId, AppStoreAppId, IsEnabled, ConfigurationType, StoreSelectorType, OAuthAppId, PermissionsType, Name, Description, VerificationStatus, Tags, Regions) {
    this.Id = Id;
    this.AppId = AppId;
    this.AppStoreAppId = AppStoreAppId;
    this.IsEnabled = IsEnabled;
    this.ConfigurationType = ConfigurationType;
    this.StoreSelectorType = StoreSelectorType;
    this.OAuthAppId = OAuthAppId;
    this.PermissionsType = PermissionsType;
    this.Name = Name;
    this.Description = Description;
    this.VerificationStatus = VerificationStatus;
    this.Tags = Tags;
    this.Regions = Regions;
  };

  /**
   * Constructs a <code>AppConfigurationDetail</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AppConfigurationDetail} obj Optional instance to populate.
   * @return {module:model/AppConfigurationDetail} The populated <code>AppConfigurationDetail</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Id'))
        obj.Id = ApiClient.convertToType(data['Id'], 'String');
      if (data.hasOwnProperty('AppId'))
        obj.AppId = ApiClient.convertToType(data['AppId'], 'String');
      if (data.hasOwnProperty('AppStoreAppId'))
        obj.AppStoreAppId = ApiClient.convertToType(data['AppStoreAppId'], 'String');
      if (data.hasOwnProperty('IsEnabled'))
        obj.IsEnabled = ApiClient.convertToType(data['IsEnabled'], 'Boolean');
      if (data.hasOwnProperty('PhysicalRestaurants'))
        obj.PhysicalRestaurants = ApiClient.convertToType(data['PhysicalRestaurants'], ['Number']);
      if (data.hasOwnProperty('Settings'))
        obj.Settings = ApiClient.convertToType(data['Settings'], [Setting]);
      if (data.hasOwnProperty('ConfigurationType'))
        obj.ConfigurationType = ApiClient.convertToType(data['ConfigurationType'], 'String');
      if (data.hasOwnProperty('StoreSelectorType'))
        obj.StoreSelectorType = ApiClient.convertToType(data['StoreSelectorType'], 'String');
      if (data.hasOwnProperty('FieldGroups'))
        obj.FieldGroups = ApiClient.convertToType(data['FieldGroups'], [FieldGroup]);
      if (data.hasOwnProperty('SetupInstructions'))
        obj.SetupInstructions = ApiClient.convertToType(data['SetupInstructions'], 'String');
      if (data.hasOwnProperty('ExternalSetupLink'))
        obj.ExternalSetupLink = ApiClient.convertToType(data['ExternalSetupLink'], 'String');
      if (data.hasOwnProperty('OAuthAppId'))
        obj.OAuthAppId = ApiClient.convertToType(data['OAuthAppId'], 'String');
      if (data.hasOwnProperty('TeammateAppAccessLevel'))
        obj.TeammateAppAccessLevel = ApiClient.convertToType(data['TeammateAppAccessLevel'], 'String');
      if (data.hasOwnProperty('PermissionsType'))
        obj.PermissionsType = ApiClient.convertToType(data['PermissionsType'], 'String');
      if (data.hasOwnProperty('Name'))
        obj.Name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('Description'))
        obj.Description = ApiClient.convertToType(data['Description'], 'String');
      if (data.hasOwnProperty('Logo'))
        obj.Logo = ApiClient.convertToType(data['Logo'], 'String');
      if (data.hasOwnProperty('VerificationStatus'))
        obj.VerificationStatus = ApiClient.convertToType(data['VerificationStatus'], 'String');
      if (data.hasOwnProperty('Tags'))
        obj.Tags = ApiClient.convertToType(data['Tags'], ['String']);
      if (data.hasOwnProperty('Regions'))
        obj.Regions = ApiClient.convertToType(data['Regions'], ['String']);
      if (data.hasOwnProperty('DeveloperName'))
        obj.DeveloperName = ApiClient.convertToType(data['DeveloperName'], 'String');
    }
    return obj;
  }

  /**
   * Application Configuration Public Id
   * @member {String} Id
   */
  exports.prototype.Id = undefined;

  /**
   * Whitelabel App Id
   * @member {String} AppId
   */
  exports.prototype.AppId = undefined;

  /**
   * App Store App Id
   * @member {String} AppStoreAppId
   */
  exports.prototype.AppStoreAppId = undefined;

  /**
   * Is Enabled
   * @member {Boolean} IsEnabled
   */
  exports.prototype.IsEnabled = undefined;

  /**
   * Physical Restaurant Id's
   * @member {Array.<Number>} PhysicalRestaurants
   */
  exports.prototype.PhysicalRestaurants = undefined;

  /**
   * Settings
   * @member {Array.<module:model/Setting>} Settings
   */
  exports.prototype.Settings = undefined;

  /**
   * Configuration Type  <example>ExternalLink</example><example>FlipdishHosted</example>
   * @member {module:model/AppConfigurationDetail.ConfigurationTypeEnum} ConfigurationType
   */
  exports.prototype.ConfigurationType = undefined;

  /**
   * Store Selector Type
   * @member {module:model/AppConfigurationDetail.StoreSelectorTypeEnum} StoreSelectorType
   */
  exports.prototype.StoreSelectorType = undefined;

  /**
   * Field Groups
   * @member {Array.<module:model/FieldGroup>} FieldGroups
   */
  exports.prototype.FieldGroups = undefined;

  /**
   * Setup Instructions
   * @member {String} SetupInstructions
   */
  exports.prototype.SetupInstructions = undefined;

  /**
   * External Setup Link
   * @member {String} ExternalSetupLink
   */
  exports.prototype.ExternalSetupLink = undefined;

  /**
   * OAuth App Id
   * @member {String} OAuthAppId
   */
  exports.prototype.OAuthAppId = undefined;

  /**
   * Teammate App Access Level
   * @member {module:model/AppConfigurationDetail.TeammateAppAccessLevelEnum} TeammateAppAccessLevel
   */
  exports.prototype.TeammateAppAccessLevel = undefined;

  /**
   * Permissions Type
   * @member {module:model/AppConfigurationDetail.PermissionsTypeEnum} PermissionsType
   */
  exports.prototype.PermissionsType = undefined;

  /**
   * Name
   * @member {String} Name
   */
  exports.prototype.Name = undefined;

  /**
   * Description
   * @member {String} Description
   */
  exports.prototype.Description = undefined;

  /**
   * Logo
   * @member {String} Logo
   */
  exports.prototype.Logo = undefined;

  /**
   * Application verification status
   * @member {module:model/AppConfigurationDetail.VerificationStatusEnum} VerificationStatus
   */
  exports.prototype.VerificationStatus = undefined;

  /**
   * Tags
   * @member {Array.<String>} Tags
   */
  exports.prototype.Tags = undefined;

  /**
   * Regions
   * @member {Array.<String>} Regions
   */
  exports.prototype.Regions = undefined;

  /**
   * Developer Name
   * @member {String} DeveloperName
   */
  exports.prototype.DeveloperName = undefined;



  /**
   * Allowed values for the <code>ConfigurationType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ConfigurationTypeEnum = {
    /**
     * value: "ExternalLink"
     * @const
     */
    ExternalLink: "ExternalLink",

    /**
     * value: "FlipdishHosted"
     * @const
     */
    FlipdishHosted: "FlipdishHosted"
  };


  /**
   * Allowed values for the <code>StoreSelectorType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StoreSelectorTypeEnum = {
    /**
     * value: "None"
     * @const
     */
    None: "None",

    /**
     * value: "Single"
     * @const
     */
    Single: "Single",

    /**
     * value: "Multiple"
     * @const
     */
    Multiple: "Multiple"
  };


  /**
   * Allowed values for the <code>TeammateAppAccessLevel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TeammateAppAccessLevelEnum = {
    /**
     * value: "Owner"
     * @const
     */
    Owner: "Owner",

    /**
     * value: "StoreOwner"
     * @const
     */
    StoreOwner: "StoreOwner",

    /**
     * value: "ManagedOwner"
     * @const
     */
    ManagedOwner: "ManagedOwner",

    /**
     * value: "Integrator"
     * @const
     */
    Integrator: "Integrator",

    /**
     * value: "StoreManager"
     * @const
     */
    StoreManager: "StoreManager",

    /**
     * value: "StoreStaff"
     * @const
     */
    StoreStaff: "StoreStaff",

    /**
     * value: "StoreReadOnlyAccess"
     * @const
     */
    StoreReadOnlyAccess: "StoreReadOnlyAccess",

    /**
     * value: "FinanceManger"
     * @const
     */
    FinanceManger: "FinanceManger"
  };


  /**
   * Allowed values for the <code>PermissionsType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PermissionsTypeEnum = {
    /**
     * value: "Teammate"
     * @const
     */
    Teammate: "Teammate"
  };


  /**
   * Allowed values for the <code>VerificationStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.VerificationStatusEnum = {
    /**
     * value: "Draft"
     * @const
     */
    Draft: "Draft",

    /**
     * value: "Submitted"
     * @const
     */
    Submitted: "Submitted",

    /**
     * value: "Verified"
     * @const
     */
    Verified: "Verified"
  };

  return exports;

}));
