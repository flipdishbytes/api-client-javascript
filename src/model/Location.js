/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Coordinates from './Coordinates';

/**
 * The Location model module.
 * @module model/Location
 * @version 1.0.0
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * Location to deliver to
     * @alias module:model/Location
     */
    constructor() { 
        
        Location.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('AddressLine1')) {
                obj['AddressLine1'] = ApiClient.convertToType(data['AddressLine1'], 'String');
            }
            if (data.hasOwnProperty('AddressLine2')) {
                obj['AddressLine2'] = ApiClient.convertToType(data['AddressLine2'], 'String');
            }
            if (data.hasOwnProperty('FormattedAddress')) {
                obj['FormattedAddress'] = ApiClient.convertToType(data['FormattedAddress'], 'String');
            }
            if (data.hasOwnProperty('PostalCode')) {
                obj['PostalCode'] = ApiClient.convertToType(data['PostalCode'], 'String');
            }
            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Coordinates')) {
                obj['Coordinates'] = Coordinates.constructFromObject(data['Coordinates']);
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Line 1 of the address
 * @member {String} AddressLine1
 */
Location.prototype['AddressLine1'] = undefined;

/**
 * Line 2 of the address
 * @member {String} AddressLine2
 */
Location.prototype['AddressLine2'] = undefined;

/**
 * Formatted Address
 * @member {String} FormattedAddress
 */
Location.prototype['FormattedAddress'] = undefined;

/**
 * Postal / Zip Code
 * @member {String} PostalCode
 */
Location.prototype['PostalCode'] = undefined;

/**
 * City to deliver to
 * @member {String} City
 */
Location.prototype['City'] = undefined;

/**
 * @member {module:model/Coordinates} Coordinates
 */
Location.prototype['Coordinates'] = undefined;

/**
 * Notes for delivery
 * @member {String} Notes
 */
Location.prototype['Notes'] = undefined;






export default Location;

