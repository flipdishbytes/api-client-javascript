/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Coordinates'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Coordinates'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.Location = factory(root.Flipdish.ApiClient, root.Flipdish.Coordinates);
  }
}(this, function(ApiClient, Coordinates) {
  'use strict';

  /**
   * The Location model module.
   * @module model/Location
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Location</code>.
   * Location to deliver to
   * @alias module:model/Location
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Location} obj Optional instance to populate.
   * @return {module:model/Location} The populated <code>Location</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('AddressLine1'))
        obj.AddressLine1 = ApiClient.convertToType(data['AddressLine1'], 'String');
      if (data.hasOwnProperty('AddressLine2'))
        obj.AddressLine2 = ApiClient.convertToType(data['AddressLine2'], 'String');
      if (data.hasOwnProperty('FormattedAddress'))
        obj.FormattedAddress = ApiClient.convertToType(data['FormattedAddress'], 'String');
      if (data.hasOwnProperty('PostalCode'))
        obj.PostalCode = ApiClient.convertToType(data['PostalCode'], 'String');
      if (data.hasOwnProperty('City'))
        obj.City = ApiClient.convertToType(data['City'], 'String');
      if (data.hasOwnProperty('Coordinates'))
        obj.Coordinates = Coordinates.constructFromObject(data['Coordinates']);
      if (data.hasOwnProperty('Notes'))
        obj.Notes = ApiClient.convertToType(data['Notes'], 'String');
    }
    return obj;
  }

  /**
   * Line 1 of the address
   * @member {String} AddressLine1
   */
  exports.prototype.AddressLine1 = undefined;

  /**
   * Line 2 of the address
   * @member {String} AddressLine2
   */
  exports.prototype.AddressLine2 = undefined;

  /**
   * Formatted Address
   * @member {String} FormattedAddress
   */
  exports.prototype.FormattedAddress = undefined;

  /**
   * Postal / Zip Code
   * @member {String} PostalCode
   */
  exports.prototype.PostalCode = undefined;

  /**
   * City to deliver to
   * @member {String} City
   */
  exports.prototype.City = undefined;

  /**
   * Coordinates to deliver to
   * @member {module:model/Coordinates} Coordinates
   */
  exports.prototype.Coordinates = undefined;

  /**
   * Notes for delivery
   * @member {String} Notes
   */
  exports.prototype.Notes = undefined;


  return exports;

}));
