/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FlipdishOpenApiV10) {
      root.FlipdishOpenApiV10 = {};
    }
    root.FlipdishOpenApiV10.AccountFieldDefinition = factory(root.FlipdishOpenApiV10.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The AccountFieldDefinition model module.
   * @module model/AccountFieldDefinition
   * @version v1.0
   */

  /**
   * Constructs a new <code>AccountFieldDefinition</code>.
   * Represents the format of a bank account field
   * @alias module:model/AccountFieldDefinition
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>AccountFieldDefinition</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AccountFieldDefinition} obj Optional instance to populate.
   * @return {module:model/AccountFieldDefinition} The populated <code>AccountFieldDefinition</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Key'))
        obj.key = ApiClient.convertToType(data['Key'], 'String');
      if (data.hasOwnProperty('DisplayName'))
        obj.displayName = ApiClient.convertToType(data['DisplayName'], 'String');
      if (data.hasOwnProperty('Type'))
        obj.type = ApiClient.convertToType(data['Type'], 'String');
      if (data.hasOwnProperty('MinLength'))
        obj.minLength = ApiClient.convertToType(data['MinLength'], 'Number');
      if (data.hasOwnProperty('MaxLength'))
        obj.maxLength = ApiClient.convertToType(data['MaxLength'], 'Number');
      if (data.hasOwnProperty('DigitsOnly'))
        obj.digitsOnly = ApiClient.convertToType(data['DigitsOnly'], 'Boolean');
      if (data.hasOwnProperty('Regex'))
        obj.regex = ApiClient.convertToType(data['Regex'], 'String');
    }
    return obj;
  }

  /**
   * Depending on the Key, the field's value will be stored in a different field in PayeeBankAccountData
   * @member {module:model/AccountFieldDefinition.KeyEnum} key
   */
  exports.prototype.key = undefined;

  /**
   * Display name of the field
   * @member {String} displayName
   */
  exports.prototype.displayName = undefined;

  /**
   * There are some fields that are of type known to the frontend (IBAN, Swift) -- for those frontend should use its own validation library, e.g. ibantools
   * @member {module:model/AccountFieldDefinition.TypeEnum} type
   */
  exports.prototype.type = undefined;

  /**
   * Minimum length of the field
   * @member {Number} minLength
   */
  exports.prototype.minLength = undefined;

  /**
   * Maximum length of the field
   * @member {Number} maxLength
   */
  exports.prototype.maxLength = undefined;

  /**
   * Is the field digits (numeric) only
   * @member {Boolean} digitsOnly
   */
  exports.prototype.digitsOnly = undefined;

  /**
   * Regex for validating the field (if specified)
   * @member {String} regex
   */
  exports.prototype.regex = undefined;



  /**
   * Allowed values for the <code>key</code> property.
   * @enum {String}
   * @readonly
   */
  exports.KeyEnum = {
    /**
     * value: "Iban"
     * @const
     */
    iban: "Iban",

    /**
     * value: "AccountNumber"
     * @const
     */
    accountNumber: "AccountNumber",

    /**
     * value: "RoutingNumber"
     * @const
     */
    routingNumber: "RoutingNumber",

    /**
     * value: "BSB"
     * @const
     */
    BSB: "BSB",

    /**
     * value: "BranchCode"
     * @const
     */
    branchCode: "BranchCode",

    /**
     * value: "BankCode"
     * @const
     */
    bankCode: "BankCode",

    /**
     * value: "InstitutionNumber"
     * @const
     */
    institutionNumber: "InstitutionNumber",

    /**
     * value: "TransitNumber"
     * @const
     */
    transitNumber: "TransitNumber",

    /**
     * value: "ClearingCode"
     * @const
     */
    clearingCode: "ClearingCode",

    /**
     * value: "IfscCode"
     * @const
     */
    ifscCode: "IfscCode",

    /**
     * value: "Clabe"
     * @const
     */
    clabe: "Clabe",

    /**
     * value: "SortCode"
     * @const
     */
    sortCode: "SortCode",

    /**
     * value: "Swift"
     * @const
     */
    swift: "Swift"
  };


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "None"
     * @const
     */
    none: "None",

    /**
     * value: "Iban"
     * @const
     */
    iban: "Iban"
  };

  return exports;

}));
