/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountFieldDefinition model module.
 * @module model/AccountFieldDefinition
 * @version 1.0.0
 */
class AccountFieldDefinition {
    /**
     * Constructs a new <code>AccountFieldDefinition</code>.
     * Represents the format of a bank account field
     * @alias module:model/AccountFieldDefinition
     */
    constructor() { 
        
        AccountFieldDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountFieldDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountFieldDefinition} obj Optional instance to populate.
     * @return {module:model/AccountFieldDefinition} The populated <code>AccountFieldDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountFieldDefinition();

            if (data.hasOwnProperty('Key')) {
                obj['Key'] = ApiClient.convertToType(data['Key'], 'String');
            }
            if (data.hasOwnProperty('DisplayName')) {
                obj['DisplayName'] = ApiClient.convertToType(data['DisplayName'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('MinLength')) {
                obj['MinLength'] = ApiClient.convertToType(data['MinLength'], 'Number');
            }
            if (data.hasOwnProperty('MaxLength')) {
                obj['MaxLength'] = ApiClient.convertToType(data['MaxLength'], 'Number');
            }
            if (data.hasOwnProperty('DigitsOnly')) {
                obj['DigitsOnly'] = ApiClient.convertToType(data['DigitsOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('Regex')) {
                obj['Regex'] = ApiClient.convertToType(data['Regex'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Depending on the Key, the field's value will be stored in a different field in PayeeBankAccountData
 * @member {module:model/AccountFieldDefinition.KeyEnum} Key
 */
AccountFieldDefinition.prototype['Key'] = undefined;

/**
 * Display name of the field
 * @member {String} DisplayName
 */
AccountFieldDefinition.prototype['DisplayName'] = undefined;

/**
 * There are some fields that are of type known to the frontend (IBAN, Swift) -- for those frontend should use its own validation library, e.g. ibantools
 * @member {module:model/AccountFieldDefinition.TypeEnum} Type
 */
AccountFieldDefinition.prototype['Type'] = undefined;

/**
 * Minimum length of the field
 * @member {Number} MinLength
 */
AccountFieldDefinition.prototype['MinLength'] = undefined;

/**
 * Maximum length of the field
 * @member {Number} MaxLength
 */
AccountFieldDefinition.prototype['MaxLength'] = undefined;

/**
 * Is the field digits (numeric) only
 * @member {Boolean} DigitsOnly
 */
AccountFieldDefinition.prototype['DigitsOnly'] = undefined;

/**
 * Regex for validating the field (if specified)
 * @member {String} Regex
 */
AccountFieldDefinition.prototype['Regex'] = undefined;





/**
 * Allowed values for the <code>Key</code> property.
 * @enum {String}
 * @readonly
 */
AccountFieldDefinition['KeyEnum'] = {

    /**
     * value: "Iban"
     * @const
     */
    "Iban": "Iban",

    /**
     * value: "AccountNumber"
     * @const
     */
    "AccountNumber": "AccountNumber",

    /**
     * value: "RoutingNumber"
     * @const
     */
    "RoutingNumber": "RoutingNumber",

    /**
     * value: "BSB"
     * @const
     */
    "BSB": "BSB",

    /**
     * value: "BranchCode"
     * @const
     */
    "BranchCode": "BranchCode",

    /**
     * value: "BankCode"
     * @const
     */
    "BankCode": "BankCode",

    /**
     * value: "InstitutionNumber"
     * @const
     */
    "InstitutionNumber": "InstitutionNumber",

    /**
     * value: "TransitNumber"
     * @const
     */
    "TransitNumber": "TransitNumber",

    /**
     * value: "ClearingCode"
     * @const
     */
    "ClearingCode": "ClearingCode",

    /**
     * value: "IfscCode"
     * @const
     */
    "IfscCode": "IfscCode",

    /**
     * value: "Clabe"
     * @const
     */
    "Clabe": "Clabe",

    /**
     * value: "SortCode"
     * @const
     */
    "SortCode": "SortCode",

    /**
     * value: "Swift"
     * @const
     */
    "Swift": "Swift"
};


/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
AccountFieldDefinition['TypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Iban"
     * @const
     */
    "Iban": "Iban"
};



export default AccountFieldDefinition;

