/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.FlipdishOpenApiV10) {
      root.FlipdishOpenApiV10 = {};
    }
    root.FlipdishOpenApiV10.MenuSectionItemBase = factory(root.FlipdishOpenApiV10.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The MenuSectionItemBase model module.
   * @module model/MenuSectionItemBase
   * @version v1.0
   */

  /**
   * Constructs a new <code>MenuSectionItemBase</code>.
   * Menu item
   * @alias module:model/MenuSectionItemBase
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>MenuSectionItemBase</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MenuSectionItemBase} obj Optional instance to populate.
   * @return {module:model/MenuSectionItemBase} The populated <code>MenuSectionItemBase</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Name'))
        obj.name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('Description'))
        obj.description = ApiClient.convertToType(data['Description'], 'String');
      if (data.hasOwnProperty('SpicinessRating'))
        obj.spicinessRating = ApiClient.convertToType(data['SpicinessRating'], 'String');
      if (data.hasOwnProperty('Price'))
        obj.price = ApiClient.convertToType(data['Price'], 'Number');
      if (data.hasOwnProperty('DisplayOrder'))
        obj.displayOrder = ApiClient.convertToType(data['DisplayOrder'], 'Number');
      if (data.hasOwnProperty('Alcohol'))
        obj.alcohol = ApiClient.convertToType(data['Alcohol'], 'Boolean');
      if (data.hasOwnProperty('IsAvailable'))
        obj.isAvailable = ApiClient.convertToType(data['IsAvailable'], 'Boolean');
      if (data.hasOwnProperty('CellLayoutType'))
        obj.cellLayoutType = ApiClient.convertToType(data['CellLayoutType'], 'String');
      if (data.hasOwnProperty('DisableVouchers'))
        obj.disableVouchers = ApiClient.convertToType(data['DisableVouchers'], 'Boolean');
      if (data.hasOwnProperty('ImageUrl'))
        obj.imageUrl = ApiClient.convertToType(data['ImageUrl'], 'String');
    }
    return obj;
  }

  /**
   * Menu item name (like \"Korma\")
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * Description (like \"A lovely dish from the east\")
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * Spiciness rating
   * @member {module:model/MenuSectionItemBase.SpicinessRatingEnum} spicinessRating
   */
  exports.prototype.spicinessRating = undefined;

  /**
   * Price - this is only used when there is no master option set and should be set to 0 if a master option set exists.
   * @member {Number} price
   */
  exports.prototype.price = undefined;

  /**
   * Display order
   * @member {Number} displayOrder
   */
  exports.prototype.displayOrder = undefined;

  /**
   * To be set true if the item or an option of the item contains an alcoholic drink.
   * @member {Boolean} alcohol
   */
  exports.prototype.alcohol = undefined;

  /**
   * True if we accept orders for this item still
   * @member {Boolean} isAvailable
   */
  exports.prototype.isAvailable = undefined;

  /**
   * Small | Medium | Large  Affects the layout of the menu.
   * @member {module:model/MenuSectionItemBase.CellLayoutTypeEnum} cellLayoutType
   */
  exports.prototype.cellLayoutType = undefined;

  /**
   * If true, then vouchers won't be applied for this item
   * @member {Boolean} disableVouchers
   */
  exports.prototype.disableVouchers = undefined;

  /**
   * Image url
   * @member {String} imageUrl
   */
  exports.prototype.imageUrl = undefined;



  /**
   * Allowed values for the <code>spicinessRating</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SpicinessRatingEnum = {
    /**
     * value: "NotRated"
     * @const
     */
    notRated: "NotRated",

    /**
     * value: "Mild"
     * @const
     */
    mild: "Mild",

    /**
     * value: "Medium"
     * @const
     */
    medium: "Medium",

    /**
     * value: "Hot"
     * @const
     */
    hot: "Hot"
  };


  /**
   * Allowed values for the <code>cellLayoutType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CellLayoutTypeEnum = {
    /**
     * value: "Small"
     * @const
     */
    small: "Small",

    /**
     * value: "Medium"
     * @const
     */
    medium: "Medium",

    /**
     * value: "Large"
     * @const
     */
    large: "Large",

    /**
     * value: "HiddenImage"
     * @const
     */
    hiddenImage: "HiddenImage"
  };

  return exports;

}));
