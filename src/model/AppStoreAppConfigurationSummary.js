/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ConfiguredStore'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ConfiguredStore'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.AppStoreAppConfigurationSummary = factory(root.Flipdish.ApiClient, root.Flipdish.ConfiguredStore);
  }
}(this, function(ApiClient, ConfiguredStore) {
  'use strict';

  /**
   * The AppStoreAppConfigurationSummary model module.
   * @module model/AppStoreAppConfigurationSummary
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>AppStoreAppConfigurationSummary</code>.
   * App store app configuration summary information
   * @alias module:model/AppStoreAppConfigurationSummary
   * @class
   * @param Id {String} Unique App store app configuration id
   * @param AppId {String} App Id
   * @param IsEnabled {Boolean} Is enabled
   * @param Stores {Array.<module:model/ConfiguredStore>} List of stores
   * @param AppStoreAppId {String} Unique App store app id
   * @param Name {String} Name of Appstore app
   * @param Description {String} Description
   */
  var exports = function(Id, AppId, IsEnabled, Stores, AppStoreAppId, Name, Description) {
    this.Id = Id;
    this.AppId = AppId;
    this.IsEnabled = IsEnabled;
    this.Stores = Stores;
    this.AppStoreAppId = AppStoreAppId;
    this.Name = Name;
    this.Description = Description;
  };

  /**
   * Constructs a <code>AppStoreAppConfigurationSummary</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AppStoreAppConfigurationSummary} obj Optional instance to populate.
   * @return {module:model/AppStoreAppConfigurationSummary} The populated <code>AppStoreAppConfigurationSummary</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Id'))
        obj.Id = ApiClient.convertToType(data['Id'], 'String');
      if (data.hasOwnProperty('AppId'))
        obj.AppId = ApiClient.convertToType(data['AppId'], 'String');
      if (data.hasOwnProperty('IsEnabled'))
        obj.IsEnabled = ApiClient.convertToType(data['IsEnabled'], 'Boolean');
      if (data.hasOwnProperty('Stores'))
        obj.Stores = ApiClient.convertToType(data['Stores'], [ConfiguredStore]);
      if (data.hasOwnProperty('ConfigurationType'))
        obj.ConfigurationType = ApiClient.convertToType(data['ConfigurationType'], 'String');
      if (data.hasOwnProperty('StoreSelectorType'))
        obj.StoreSelectorType = ApiClient.convertToType(data['StoreSelectorType'], 'String');
      if (data.hasOwnProperty('AppStoreAppId'))
        obj.AppStoreAppId = ApiClient.convertToType(data['AppStoreAppId'], 'String');
      if (data.hasOwnProperty('Name'))
        obj.Name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('Description'))
        obj.Description = ApiClient.convertToType(data['Description'], 'String');
      if (data.hasOwnProperty('Logo'))
        obj.Logo = ApiClient.convertToType(data['Logo'], 'String');
      if (data.hasOwnProperty('DeveloperName'))
        obj.DeveloperName = ApiClient.convertToType(data['DeveloperName'], 'String');
    }
    return obj;
  }

  /**
   * Unique App store app configuration id
   * @member {String} Id
   */
  exports.prototype.Id = undefined;

  /**
   * App Id
   * @member {String} AppId
   */
  exports.prototype.AppId = undefined;

  /**
   * Is enabled
   * @member {Boolean} IsEnabled
   */
  exports.prototype.IsEnabled = undefined;

  /**
   * List of stores
   * @member {Array.<module:model/ConfiguredStore>} Stores
   */
  exports.prototype.Stores = undefined;

  /**
   * Configuration type
   * @member {module:model/AppStoreAppConfigurationSummary.ConfigurationTypeEnum} ConfigurationType
   */
  exports.prototype.ConfigurationType = undefined;

  /**
   * Store selector type
   * @member {module:model/AppStoreAppConfigurationSummary.StoreSelectorTypeEnum} StoreSelectorType
   */
  exports.prototype.StoreSelectorType = undefined;

  /**
   * Unique App store app id
   * @member {String} AppStoreAppId
   */
  exports.prototype.AppStoreAppId = undefined;

  /**
   * Name of Appstore app
   * @member {String} Name
   */
  exports.prototype.Name = undefined;

  /**
   * Description
   * @member {String} Description
   */
  exports.prototype.Description = undefined;

  /**
   * Logo
   * @member {String} Logo
   */
  exports.prototype.Logo = undefined;

  /**
   * Developer name
   * @member {String} DeveloperName
   */
  exports.prototype.DeveloperName = undefined;



  /**
   * Allowed values for the <code>ConfigurationType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ConfigurationTypeEnum = {
    /**
     * value: "ExternalLink"
     * @const
     */
    ExternalLink: "ExternalLink",

    /**
     * value: "FlipdishHosted"
     * @const
     */
    FlipdishHosted: "FlipdishHosted"
  };


  /**
   * Allowed values for the <code>StoreSelectorType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StoreSelectorTypeEnum = {
    /**
     * value: "None"
     * @const
     */
    None: "None",

    /**
     * value: "Single"
     * @const
     */
    Single: "Single",

    /**
     * value: "Multiple"
     * @const
     */
    Multiple: "Multiple"
  };

  return exports;

}));
