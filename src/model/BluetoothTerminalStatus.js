/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BluetoothTerminalStatus model module.
 * @module model/BluetoothTerminalStatus
 * @version 1.0.0
 */
class BluetoothTerminalStatus {
    /**
     * Constructs a new <code>BluetoothTerminalStatus</code>.
     * Status of the bluetooth terminal
     * @alias module:model/BluetoothTerminalStatus
     */
    constructor() { 
        
        BluetoothTerminalStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BluetoothTerminalStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BluetoothTerminalStatus} obj Optional instance to populate.
     * @return {module:model/BluetoothTerminalStatus} The populated <code>BluetoothTerminalStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BluetoothTerminalStatus();

            if (data.hasOwnProperty('SerialNumber')) {
                obj['SerialNumber'] = ApiClient.convertToType(data['SerialNumber'], 'String');
            }
            if (data.hasOwnProperty('SoftwareVersion')) {
                obj['SoftwareVersion'] = ApiClient.convertToType(data['SoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('DeviceType')) {
                obj['DeviceType'] = ApiClient.convertToType(data['DeviceType'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('BatteryLevel')) {
                obj['BatteryLevel'] = ApiClient.convertToType(data['BatteryLevel'], 'Number');
            }
            if (data.hasOwnProperty('UpdateTime')) {
                obj['UpdateTime'] = ApiClient.convertToType(data['UpdateTime'], 'Date');
            }
            if (data.hasOwnProperty('ReaderId')) {
                obj['ReaderId'] = ApiClient.convertToType(data['ReaderId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Serial Number
 * @member {String} SerialNumber
 */
BluetoothTerminalStatus.prototype['SerialNumber'] = undefined;

/**
 * Software Version
 * @member {String} SoftwareVersion
 */
BluetoothTerminalStatus.prototype['SoftwareVersion'] = undefined;

/**
 * Device Type
 * @member {module:model/BluetoothTerminalStatus.DeviceTypeEnum} DeviceType
 */
BluetoothTerminalStatus.prototype['DeviceType'] = undefined;

/**
 * Device Status
 * @member {module:model/BluetoothTerminalStatus.StatusEnum} Status
 */
BluetoothTerminalStatus.prototype['Status'] = undefined;

/**
 * Indication of the battery level from 0 to 1
 * @member {Number} BatteryLevel
 */
BluetoothTerminalStatus.prototype['BatteryLevel'] = undefined;

/**
 * Last time the status was updated
 * @member {Date} UpdateTime
 */
BluetoothTerminalStatus.prototype['UpdateTime'] = undefined;

/**
 * ReaderId for Stripe Terminal
 * @member {String} ReaderId
 */
BluetoothTerminalStatus.prototype['ReaderId'] = undefined;





/**
 * Allowed values for the <code>DeviceType</code> property.
 * @enum {String}
 * @readonly
 */
BluetoothTerminalStatus['DeviceTypeEnum'] = {

    /**
     * value: "CHIPPER_2X"
     * @const
     */
    "CHIPPER_2X": "CHIPPER_2X",

    /**
     * value: "COTS_DEVICE"
     * @const
     */
    "COTS_DEVICE": "COTS_DEVICE",

    /**
     * value: "VERIFONE_P400"
     * @const
     */
    "VERIFONE_P400": "VERIFONE_P400",

    /**
     * value: "WISEPAD_3"
     * @const
     */
    "WISEPAD_3": "WISEPAD_3",

    /**
     * value: "WISEPOS_E"
     * @const
     */
    "WISEPOS_E": "WISEPOS_E"
};


/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
BluetoothTerminalStatus['StatusEnum'] = {

    /**
     * value: "Not_Connected"
     * @const
     */
    "Not_Connected": "Not_Connected",

    /**
     * value: "Connecting"
     * @const
     */
    "Connecting": "Connecting",

    /**
     * value: "Connected"
     * @const
     */
    "Connected": "Connected",

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline"
};



export default BluetoothTerminalStatus;

