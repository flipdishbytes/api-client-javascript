/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OAuthApp model module.
 * @module model/OAuthApp
 * @version 1.0.0
 */
class OAuthApp {
    /**
     * Constructs a new <code>OAuthApp</code>.
     * Oauth client (also knowns as &#39;app&#39;)
     * @alias module:model/OAuthApp
     */
    constructor() { 
        
        OAuthApp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OAuthApp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OAuthApp} obj Optional instance to populate.
     * @return {module:model/OAuthApp} The populated <code>OAuthApp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OAuthApp();

            if (data.hasOwnProperty('OauthAppId')) {
                obj['OauthAppId'] = ApiClient.convertToType(data['OauthAppId'], 'String');
            }
            if (data.hasOwnProperty('OauthAppName')) {
                obj['OauthAppName'] = ApiClient.convertToType(data['OauthAppName'], 'String');
            }
            if (data.hasOwnProperty('OwnerUserId')) {
                obj['OwnerUserId'] = ApiClient.convertToType(data['OwnerUserId'], 'Number');
            }
            if (data.hasOwnProperty('LogoUri')) {
                obj['LogoUri'] = ApiClient.convertToType(data['LogoUri'], 'String');
            }
            if (data.hasOwnProperty('Flow')) {
                obj['Flow'] = ApiClient.convertToType(data['Flow'], 'String');
            }
            if (data.hasOwnProperty('RefreshTokenUsage')) {
                obj['RefreshTokenUsage'] = ApiClient.convertToType(data['RefreshTokenUsage'], 'String');
            }
            if (data.hasOwnProperty('AccessTokenLifetime')) {
                obj['AccessTokenLifetime'] = ApiClient.convertToType(data['AccessTokenLifetime'], 'Number');
            }
            if (data.hasOwnProperty('AbsoluteRefreshTokenLifetime')) {
                obj['AbsoluteRefreshTokenLifetime'] = ApiClient.convertToType(data['AbsoluteRefreshTokenLifetime'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * OAuth App Identifier
 * @member {String} OauthAppId
 */
OAuthApp.prototype['OauthAppId'] = undefined;

/**
 * OAuth App Name
 * @member {String} OauthAppName
 */
OAuthApp.prototype['OauthAppName'] = undefined;

/**
 * OAuth App owner user identifier
 * @member {Number} OwnerUserId
 */
OAuthApp.prototype['OwnerUserId'] = undefined;

/**
 * OAuth App logo uri
 * @member {String} LogoUri
 */
OAuthApp.prototype['LogoUri'] = undefined;

/**
 * Supported OpenID Connect flows
 * @member {module:model/OAuthApp.FlowEnum} Flow
 */
OAuthApp.prototype['Flow'] = undefined;

/**
 * ReUse: the refresh token handle will stay the same when refreshing tokens   OneTime: the refresh token handle will be updated when refreshing tokens
 * @member {module:model/OAuthApp.RefreshTokenUsageEnum} RefreshTokenUsage
 */
OAuthApp.prototype['RefreshTokenUsage'] = undefined;

/**
 * Timem it takes for the IdentityToken to expire in seconds
 * @member {Number} AccessTokenLifetime
 */
OAuthApp.prototype['AccessTokenLifetime'] = undefined;

/**
 * Maximum lifetime of a refresh token in seconds
 * @member {Number} AbsoluteRefreshTokenLifetime
 */
OAuthApp.prototype['AbsoluteRefreshTokenLifetime'] = undefined;





/**
 * Allowed values for the <code>Flow</code> property.
 * @enum {String}
 * @readonly
 */
OAuthApp['FlowEnum'] = {

    /**
     * value: "AuthorizationCode"
     * @const
     */
    "AuthorizationCode": "AuthorizationCode",

    /**
     * value: "Implicit"
     * @const
     */
    "Implicit": "Implicit",

    /**
     * value: "Hybrid"
     * @const
     */
    "Hybrid": "Hybrid",

    /**
     * value: "ClientCredentials"
     * @const
     */
    "ClientCredentials": "ClientCredentials"
};


/**
 * Allowed values for the <code>RefreshTokenUsage</code> property.
 * @enum {String}
 * @readonly
 */
OAuthApp['RefreshTokenUsageEnum'] = {

    /**
     * value: "ReUse"
     * @const
     */
    "ReUse": "ReUse",

    /**
     * value: "OneTimeOnly"
     * @const
     */
    "OneTimeOnly": "OneTimeOnly"
};



export default OAuthApp;

