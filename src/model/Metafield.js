/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Metafield model module.
 * @module model/Metafield
 * @version 1.0.0
 */
class Metafield {
    /**
     * Constructs a new <code>Metafield</code>.
     * Metafield
     * @alias module:model/Metafield
     * @param Key {String} Key of the metafield.  Allowed characters: lowercase letters, numbers, hyphen, underscore and dot
     * @param Value {String} Value of the metafield.
     */
    constructor(Key, Value) { 
        
        Metafield.initialize(this, Key, Value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, Key, Value) { 
        obj['Key'] = Key;
        obj['Value'] = Value;
    }

    /**
     * Constructs a <code>Metafield</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metafield} obj Optional instance to populate.
     * @return {module:model/Metafield} The populated <code>Metafield</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metafield();

            if (data.hasOwnProperty('Key')) {
                obj['Key'] = ApiClient.convertToType(data['Key'], 'String');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Key of the metafield.  Allowed characters: lowercase letters, numbers, hyphen, underscore and dot
 * @member {String} Key
 */
Metafield.prototype['Key'] = undefined;

/**
 * Value of the metafield.
 * @member {String} Value
 */
Metafield.prototype['Value'] = undefined;






export default Metafield;

