/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountFieldKeyValuePair'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccountFieldKeyValuePair'));
  } else {
    // Browser globals (root is window)
    if (!root.FlipdishOpenApiV10) {
      root.FlipdishOpenApiV10 = {};
    }
    root.FlipdishOpenApiV10.BankAccount = factory(root.FlipdishOpenApiV10.ApiClient, root.FlipdishOpenApiV10.AccountFieldKeyValuePair);
  }
}(this, function(ApiClient, AccountFieldKeyValuePair) {
  'use strict';

  /**
   * The BankAccount model module.
   * @module model/BankAccount
   * @version v1.0
   */

  /**
   * Constructs a new <code>BankAccount</code>.
   * BANK ACCOUNT
   * @alias module:model/BankAccount
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>BankAccount</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BankAccount} obj Optional instance to populate.
   * @return {module:model/BankAccount} The populated <code>BankAccount</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Id'))
        obj.id = ApiClient.convertToType(data['Id'], 'Number');
      if (data.hasOwnProperty('AccountName'))
        obj.accountName = ApiClient.convertToType(data['AccountName'], 'String');
      if (data.hasOwnProperty('Iban'))
        obj.iban = ApiClient.convertToType(data['Iban'], 'String');
      if (data.hasOwnProperty('Swift'))
        obj.swift = ApiClient.convertToType(data['Swift'], 'String');
      if (data.hasOwnProperty('PopulatedAccountFields'))
        obj.populatedAccountFields = ApiClient.convertToType(data['PopulatedAccountFields'], [AccountFieldKeyValuePair]);
      if (data.hasOwnProperty('AccountState'))
        obj.accountState = ApiClient.convertToType(data['AccountState'], 'String');
      if (data.hasOwnProperty('StoreNames'))
        obj.storeNames = ApiClient.convertToType(data['StoreNames'], ['String']);
      if (data.hasOwnProperty('BankAddress'))
        obj.bankAddress = ApiClient.convertToType(data['BankAddress'], 'String');
      if (data.hasOwnProperty('BankCountryCode'))
        obj.bankCountryCode = ApiClient.convertToType(data['BankCountryCode'], 'String');
      if (data.hasOwnProperty('AccountHolderAddress'))
        obj.accountHolderAddress = ApiClient.convertToType(data['AccountHolderAddress'], 'String');
      if (data.hasOwnProperty('AccountHolderCountryCode'))
        obj.accountHolderCountryCode = ApiClient.convertToType(data['AccountHolderCountryCode'], 'String');
      if (data.hasOwnProperty('VatNumber'))
        obj.vatNumber = ApiClient.convertToType(data['VatNumber'], 'String');
    }
    return obj;
  }

  /**
   * Id of this account
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * Name of this account
   * @member {String} accountName
   */
  exports.prototype.accountName = undefined;

  /**
   * IBAN of this account
   * @member {String} iban
   */
  exports.prototype.iban = undefined;

  /**
   * SWIFT of this bank account
   * @member {String} swift
   */
  exports.prototype.swift = undefined;

  /**
   * A list of one or more populated account fields (field key-value pairs).  If this list contains at least one item, the Iban, Swift and NationalClearingCode fields should be ignored.
   * @member {Array.<module:model/AccountFieldKeyValuePair>} populatedAccountFields
   */
  exports.prototype.populatedAccountFields = undefined;

  /**
   * Status of Account
   * @member {module:model/BankAccount.AccountStateEnum} accountState
   */
  exports.prototype.accountState = undefined;

  /**
   * Store Names that are attached to this account
   * @member {Array.<String>} storeNames
   */
  exports.prototype.storeNames = undefined;

  /**
   * Address lf the bank
   * @member {String} bankAddress
   */
  exports.prototype.bankAddress = undefined;

  /**
   * CountryCode of the Bank Account
   * @member {String} bankCountryCode
   */
  exports.prototype.bankCountryCode = undefined;

  /**
   * Account Holders Address
   * @member {String} accountHolderAddress
   */
  exports.prototype.accountHolderAddress = undefined;

  /**
   * Account Holders Country Code
   * @member {String} accountHolderCountryCode
   */
  exports.prototype.accountHolderCountryCode = undefined;

  /**
   * Account Holders Vat Number
   * @member {String} vatNumber
   */
  exports.prototype.vatNumber = undefined;



  /**
   * Allowed values for the <code>accountState</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AccountStateEnum = {
    /**
     * value: "Unverified"
     * @const
     */
    unverified: "Unverified",

    /**
     * value: "AwatingVerification"
     * @const
     */
    awatingVerification: "AwatingVerification",

    /**
     * value: "Verified"
     * @const
     */
    verified: "Verified",

    /**
     * value: "Grandfathered"
     * @const
     */
    grandfathered: "Grandfathered"
  };

  return exports;

}));
