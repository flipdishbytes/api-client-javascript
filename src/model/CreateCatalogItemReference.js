/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.CreateCatalogItemReference = factory(root.Flipdish.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The CreateCatalogItemReference model module.
   * @module model/CreateCatalogItemReference
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>CreateCatalogItemReference</code>.
   * Information to create a reference to a {Flipdish.PublicModels.V1.Catalog.Items.CatalogItem}
   * @alias module:model/CreateCatalogItemReference
   * @class
   * @param CatalogItemId {String} Identifier of the CatalogItemId to use as SubProduct
   * @param ItemType {module:model/CreateCatalogItemReference.ItemTypeEnum} Type of the SupProduct
   */
  var exports = function(CatalogItemId, ItemType) {
    this.CatalogItemId = CatalogItemId;
    this.ItemType = ItemType;
  };

  /**
   * Constructs a <code>CreateCatalogItemReference</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateCatalogItemReference} obj Optional instance to populate.
   * @return {module:model/CreateCatalogItemReference} The populated <code>CreateCatalogItemReference</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('CatalogItemId'))
        obj.CatalogItemId = ApiClient.convertToType(data['CatalogItemId'], 'String');
      if (data.hasOwnProperty('ItemType'))
        obj.ItemType = ApiClient.convertToType(data['ItemType'], 'String');
      if (data.hasOwnProperty('PreselectedQuantity'))
        obj.PreselectedQuantity = ApiClient.convertToType(data['PreselectedQuantity'], 'Number');
    }
    return obj;
  }

  /**
   * Identifier of the CatalogItemId to use as SubProduct
   * @member {String} CatalogItemId
   */
  exports.prototype.CatalogItemId = undefined;

  /**
   * Type of the SupProduct
   * @member {module:model/CreateCatalogItemReference.ItemTypeEnum} ItemType
   */
  exports.prototype.ItemType = undefined;

  /**
   * Quantity of the modifier that will be set when the parent product is placed in the basket
   * @member {Number} PreselectedQuantity
   */
  exports.prototype.PreselectedQuantity = undefined;



  /**
   * Allowed values for the <code>ItemType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ItemTypeEnum = {
    /**
     * value: "Product"
     * @const
     */
    Product: "Product",

    /**
     * value: "Modifier"
     * @const
     */
    Modifier: "Modifier"
  };

  return exports;

}));
