/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Field'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Field'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.FieldGroup = factory(root.Flipdish.ApiClient, root.Flipdish.Field);
  }
}(this, function(ApiClient, Field) {
  'use strict';

  /**
   * The FieldGroup model module.
   * @module model/FieldGroup
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>FieldGroup</code>.
   * Field Group
   * @alias module:model/FieldGroup
   * @class
   * @param Name {String} Name
   * @param Position {Number} Position  <remarks>Position order in the field groups to display</remarks>
   */
  var exports = function(Name, Position) {
    this.Name = Name;
    this.Position = Position;
  };

  /**
   * Constructs a <code>FieldGroup</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FieldGroup} obj Optional instance to populate.
   * @return {module:model/FieldGroup} The populated <code>FieldGroup</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Name'))
        obj.Name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('Description'))
        obj.Description = ApiClient.convertToType(data['Description'], 'String');
      if (data.hasOwnProperty('Tooltip'))
        obj.Tooltip = ApiClient.convertToType(data['Tooltip'], 'String');
      if (data.hasOwnProperty('Position'))
        obj.Position = ApiClient.convertToType(data['Position'], 'Number');
      if (data.hasOwnProperty('Fields'))
        obj.Fields = ApiClient.convertToType(data['Fields'], [Field]);
    }
    return obj;
  }

  /**
   * Name
   * @member {String} Name
   */
  exports.prototype.Name = undefined;

  /**
   * Description
   * @member {String} Description
   */
  exports.prototype.Description = undefined;

  /**
   * Tooltip  <remarks>Displays on text hover</remarks>
   * @member {String} Tooltip
   */
  exports.prototype.Tooltip = undefined;

  /**
   * Position  <remarks>Position order in the field groups to display</remarks>
   * @member {Number} Position
   */
  exports.prototype.Position = undefined;

  /**
   * Fields
   * @member {Array.<module:model/Field>} Fields
   */
  exports.prototype.Fields = undefined;


  return exports;

}));
