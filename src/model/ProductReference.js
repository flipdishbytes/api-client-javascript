/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Product from './Product';

/**
 * The ProductReference model module.
 * @module model/ProductReference
 * @version 1.0.0
 */
class ProductReference {
    /**
     * Constructs a new <code>ProductReference</code>.
     * Catalog Item associated
     * @alias module:model/ProductReference
     * @param CatalogItemId {String} Identifier of the CatalogItemId to use as SubProduct
     * @param ProductType {module:model/ProductReference.ProductTypeEnum} Type of the SupProduct
     */
    constructor(CatalogItemId, ProductType) { 
        
        ProductReference.initialize(this, CatalogItemId, ProductType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, CatalogItemId, ProductType) { 
        obj['CatalogItemId'] = CatalogItemId;
        obj['ProductType'] = ProductType;
    }

    /**
     * Constructs a <code>ProductReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductReference} obj Optional instance to populate.
     * @return {module:model/ProductReference} The populated <code>ProductReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductReference();

            if (data.hasOwnProperty('Item')) {
                obj['Item'] = Product.constructFromObject(data['Item']);
            }
            if (data.hasOwnProperty('Product')) {
                obj['Product'] = Product.constructFromObject(data['Product']);
            }
            if (data.hasOwnProperty('CatalogItemId')) {
                obj['CatalogItemId'] = ApiClient.convertToType(data['CatalogItemId'], 'String');
            }
            if (data.hasOwnProperty('ProductType')) {
                obj['ProductType'] = ApiClient.convertToType(data['ProductType'], 'String');
            }
            if (data.hasOwnProperty('PreselectedQuantity')) {
                obj['PreselectedQuantity'] = ApiClient.convertToType(data['PreselectedQuantity'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Product} Item
 */
ProductReference.prototype['Item'] = undefined;

/**
 * @member {module:model/Product} Product
 */
ProductReference.prototype['Product'] = undefined;

/**
 * Identifier of the CatalogItemId to use as SubProduct
 * @member {String} CatalogItemId
 */
ProductReference.prototype['CatalogItemId'] = undefined;

/**
 * Type of the SupProduct
 * @member {module:model/ProductReference.ProductTypeEnum} ProductType
 */
ProductReference.prototype['ProductType'] = undefined;

/**
 * Quantity of the modifier that will be set when the parent product is placed in the basket
 * @member {Number} PreselectedQuantity
 */
ProductReference.prototype['PreselectedQuantity'] = undefined;





/**
 * Allowed values for the <code>ProductType</code> property.
 * @enum {String}
 * @readonly
 */
ProductReference['ProductTypeEnum'] = {

    /**
     * value: "Product"
     * @const
     */
    "Product": "Product",

    /**
     * value: "Modifier"
     * @const
     */
    "Modifier": "Modifier"
};



export default ProductReference;

