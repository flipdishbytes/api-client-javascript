/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MenuItemOptionSetBase model module.
 * @module model/MenuItemOptionSetBase
 * @version 1.0.0
 */
class MenuItemOptionSetBase {
    /**
     * Constructs a new <code>MenuItemOptionSetBase</code>.
     * Menu item option set
     * @alias module:model/MenuItemOptionSetBase
     */
    constructor() { 
        
        MenuItemOptionSetBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MenuItemOptionSetBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MenuItemOptionSetBase} obj Optional instance to populate.
     * @return {module:model/MenuItemOptionSetBase} The populated <code>MenuItemOptionSetBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MenuItemOptionSetBase();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('IsMasterOptionSet')) {
                obj['IsMasterOptionSet'] = ApiClient.convertToType(data['IsMasterOptionSet'], 'Boolean');
            }
            if (data.hasOwnProperty('DisplayOrder')) {
                obj['DisplayOrder'] = ApiClient.convertToType(data['DisplayOrder'], 'Number');
            }
            if (data.hasOwnProperty('MinSelectCount')) {
                obj['MinSelectCount'] = ApiClient.convertToType(data['MinSelectCount'], 'Number');
            }
            if (data.hasOwnProperty('MaxSelectCount')) {
                obj['MaxSelectCount'] = ApiClient.convertToType(data['MaxSelectCount'], 'Number');
            }
            if (data.hasOwnProperty('CellLayoutType')) {
                obj['CellLayoutType'] = ApiClient.convertToType(data['CellLayoutType'], 'String');
            }
            if (data.hasOwnProperty('PublicId')) {
                obj['PublicId'] = ApiClient.convertToType(data['PublicId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Menu item option set name
 * @member {String} Name
 */
MenuItemOptionSetBase.prototype['Name'] = undefined;

/**
 * Is master option set. This can affect the layout of the options in the menu displayed to the customer. Usually it is true if the option could be considerd a standalone item as opposed to an addition (\"with ketchup\") or modifier (\"large\").
 * @member {Boolean} IsMasterOptionSet
 */
MenuItemOptionSetBase.prototype['IsMasterOptionSet'] = undefined;

/**
 * Display order. Displayed in ascending order.
 * @member {Number} DisplayOrder
 */
MenuItemOptionSetBase.prototype['DisplayOrder'] = undefined;

/**
 * Minimum items must be selected
 * @member {Number} MinSelectCount
 */
MenuItemOptionSetBase.prototype['MinSelectCount'] = undefined;

/**
 * Maximum number of items can be selected
 * @member {Number} MaxSelectCount
 */
MenuItemOptionSetBase.prototype['MaxSelectCount'] = undefined;

/**
 * Small | Medium | Large  Affects the layout of the menu.
 * @member {module:model/MenuItemOptionSetBase.CellLayoutTypeEnum} CellLayoutType
 */
MenuItemOptionSetBase.prototype['CellLayoutType'] = undefined;

/**
 * Permanent reference to the item.
 * @member {String} PublicId
 */
MenuItemOptionSetBase.prototype['PublicId'] = undefined;





/**
 * Allowed values for the <code>CellLayoutType</code> property.
 * @enum {String}
 * @readonly
 */
MenuItemOptionSetBase['CellLayoutTypeEnum'] = {

    /**
     * value: "Small"
     * @const
     */
    "Small": "Small",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "Large"
     * @const
     */
    "Large": "Large",

    /**
     * value: "HiddenImage"
     * @const
     */
    "HiddenImage": "HiddenImage"
};



export default MenuItemOptionSetBase;

