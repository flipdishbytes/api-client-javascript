/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StoreBase model module.
 * @module model/StoreBase
 * @version 1.0.0
 */
class StoreBase {
    /**
     * Constructs a new <code>StoreBase</code>.
     * Store Base
     * @alias module:model/StoreBase
     */
    constructor() { 
        
        StoreBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StoreBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoreBase} obj Optional instance to populate.
     * @return {module:model/StoreBase} The populated <code>StoreBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoreBase();

            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('AlwaysAppearOpen')) {
                obj['AlwaysAppearOpen'] = ApiClient.convertToType(data['AlwaysAppearOpen'], 'Boolean');
            }
            if (data.hasOwnProperty('PreOrderEnabled')) {
                obj['PreOrderEnabled'] = ApiClient.convertToType(data['PreOrderEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('TakeOutEnabled')) {
                obj['TakeOutEnabled'] = ApiClient.convertToType(data['TakeOutEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('TableServiceEnabled')) {
                obj['TableServiceEnabled'] = ApiClient.convertToType(data['TableServiceEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('DineInEnabled')) {
                obj['DineInEnabled'] = ApiClient.convertToType(data['DineInEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('AllowPreOrdersAndTableService')) {
                obj['AllowPreOrdersAndTableService'] = ApiClient.convertToType(data['AllowPreOrdersAndTableService'], 'Boolean');
            }
            if (data.hasOwnProperty('PickupEnabled')) {
                obj['PickupEnabled'] = ApiClient.convertToType(data['PickupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('DeliveryEnabled')) {
                obj['DeliveryEnabled'] = ApiClient.convertToType(data['DeliveryEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('CardOrderDeliveryEnabled')) {
                obj['CardOrderDeliveryEnabled'] = ApiClient.convertToType(data['CardOrderDeliveryEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('CashOrdersDeliveryEnabled')) {
                obj['CashOrdersDeliveryEnabled'] = ApiClient.convertToType(data['CashOrdersDeliveryEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('CardOrdersPickupEnabled')) {
                obj['CardOrdersPickupEnabled'] = ApiClient.convertToType(data['CardOrdersPickupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('CashOrdersPickupEnabled')) {
                obj['CashOrdersPickupEnabled'] = ApiClient.convertToType(data['CashOrdersPickupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('TipsEnabled')) {
                obj['TipsEnabled'] = ApiClient.convertToType(data['TipsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('AutomaticallyAcceptOrders')) {
                obj['AutomaticallyAcceptOrders'] = ApiClient.convertToType(data['AutomaticallyAcceptOrders'], 'Boolean');
            }
            if (data.hasOwnProperty('OpenForDelivery')) {
                obj['OpenForDelivery'] = ApiClient.convertToType(data['OpenForDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('OpenForPickup')) {
                obj['OpenForPickup'] = ApiClient.convertToType(data['OpenForPickup'], 'Boolean');
            }
            if (data.hasOwnProperty('MinimumPickupOrderAmount')) {
                obj['MinimumPickupOrderAmount'] = ApiClient.convertToType(data['MinimumPickupOrderAmount'], 'Number');
            }
            if (data.hasOwnProperty('RequireCustomerNameForPickup')) {
                obj['RequireCustomerNameForPickup'] = ApiClient.convertToType(data['RequireCustomerNameForPickup'], 'Boolean');
            }
            if (data.hasOwnProperty('GdprCustomerPhoneNumbers')) {
                obj['GdprCustomerPhoneNumbers'] = ApiClient.convertToType(data['GdprCustomerPhoneNumbers'], 'Boolean');
            }
            if (data.hasOwnProperty('RequireCustomerNameForDelivery')) {
                obj['RequireCustomerNameForDelivery'] = ApiClient.convertToType(data['RequireCustomerNameForDelivery'], 'Boolean');
            }
            if (data.hasOwnProperty('AllowChefNotes')) {
                obj['AllowChefNotes'] = ApiClient.convertToType(data['AllowChefNotes'], 'Boolean');
            }
            if (data.hasOwnProperty('EtaInPickupConfirmationSmsEnabled')) {
                obj['EtaInPickupConfirmationSmsEnabled'] = ApiClient.convertToType(data['EtaInPickupConfirmationSmsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('EtaInDeliveryConfirmationSmsEnabled')) {
                obj['EtaInDeliveryConfirmationSmsEnabled'] = ApiClient.convertToType(data['EtaInDeliveryConfirmationSmsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('IsArchived')) {
                obj['IsArchived'] = ApiClient.convertToType(data['IsArchived'], 'Boolean');
            }
            if (data.hasOwnProperty('IsPublished')) {
                obj['IsPublished'] = ApiClient.convertToType(data['IsPublished'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], 'String');
            }
            if (data.hasOwnProperty('StaffLanguage')) {
                obj['StaffLanguage'] = ApiClient.convertToType(data['StaffLanguage'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Phone number
 * @member {String} PhoneNumber
 */
StoreBase.prototype['PhoneNumber'] = undefined;

/**
 * True if the store always appears open
 * @member {Boolean} AlwaysAppearOpen
 */
StoreBase.prototype['AlwaysAppearOpen'] = undefined;

/**
 * True if the store accepts pre-orders
 * @member {Boolean} PreOrderEnabled
 */
StoreBase.prototype['PreOrderEnabled'] = undefined;

/**
 * True if the store accepts take-out orders
 * @member {Boolean} TakeOutEnabled
 */
StoreBase.prototype['TakeOutEnabled'] = undefined;

/**
 * True if the store has table service
 * @member {Boolean} TableServiceEnabled
 */
StoreBase.prototype['TableServiceEnabled'] = undefined;

/**
 * True if the store accepts dine-in orders
 * @member {Boolean} DineInEnabled
 */
StoreBase.prototype['DineInEnabled'] = undefined;

/**
 * True if both pre-orders and talbe service can be enabled
 * @member {Boolean} AllowPreOrdersAndTableService
 */
StoreBase.prototype['AllowPreOrdersAndTableService'] = undefined;

/**
 * True if the store accepts pickup orders
 * @member {Boolean} PickupEnabled
 */
StoreBase.prototype['PickupEnabled'] = undefined;

/**
 * True if the store accepts delivery orders
 * @member {Boolean} DeliveryEnabled
 */
StoreBase.prototype['DeliveryEnabled'] = undefined;

/**
 * True if the store accepts card payment for delivery orders
 * @member {Boolean} CardOrderDeliveryEnabled
 */
StoreBase.prototype['CardOrderDeliveryEnabled'] = undefined;

/**
 * True if the store accepts cash payment for delivery orders
 * @member {Boolean} CashOrdersDeliveryEnabled
 */
StoreBase.prototype['CashOrdersDeliveryEnabled'] = undefined;

/**
 * True if the store accepts card payment for pickup orders
 * @member {Boolean} CardOrdersPickupEnabled
 */
StoreBase.prototype['CardOrdersPickupEnabled'] = undefined;

/**
 * True if the store accepts cash payment for pickup orders
 * @member {Boolean} CashOrdersPickupEnabled
 */
StoreBase.prototype['CashOrdersPickupEnabled'] = undefined;

/**
 * True if the store accepts tips
 * @member {Boolean} TipsEnabled
 */
StoreBase.prototype['TipsEnabled'] = undefined;

/**
 * True if the stores orders are automatically accepted in Flipdish
 * @member {Boolean} AutomaticallyAcceptOrders
 */
StoreBase.prototype['AutomaticallyAcceptOrders'] = undefined;

/**
 * True if the store is open for delivery
 * @member {Boolean} OpenForDelivery
 */
StoreBase.prototype['OpenForDelivery'] = undefined;

/**
 * True if the store is open for pickup
 * @member {Boolean} OpenForPickup
 */
StoreBase.prototype['OpenForPickup'] = undefined;

/**
 * Minimum pickup order amount
 * @member {Number} MinimumPickupOrderAmount
 */
StoreBase.prototype['MinimumPickupOrderAmount'] = undefined;

/**
 * True if customer name required for pickup orders
 * @member {Boolean} RequireCustomerNameForPickup
 */
StoreBase.prototype['RequireCustomerNameForPickup'] = undefined;

/**
 * Mask your customers phone numbers printed on receipts and reduce the amout of personally identifiable customer information that is exposed.
 * @member {Boolean} GdprCustomerPhoneNumbers
 */
StoreBase.prototype['GdprCustomerPhoneNumbers'] = undefined;

/**
 * True if customer name required for delivery orders
 * @member {Boolean} RequireCustomerNameForDelivery
 */
StoreBase.prototype['RequireCustomerNameForDelivery'] = undefined;

/**
 * True if the customer is allowed enter custom notes with their orders
 * @member {Boolean} AllowChefNotes
 */
StoreBase.prototype['AllowChefNotes'] = undefined;

/**
 * True if order confirmation sms includes estimated time when order will be ready for collection
 * @member {Boolean} EtaInPickupConfirmationSmsEnabled
 */
StoreBase.prototype['EtaInPickupConfirmationSmsEnabled'] = undefined;

/**
 * True if order confirmation sms includes estimated time when order will delivered
 * @member {Boolean} EtaInDeliveryConfirmationSmsEnabled
 */
StoreBase.prototype['EtaInDeliveryConfirmationSmsEnabled'] = undefined;

/**
 * Is the Store Archived
 * @member {Boolean} IsArchived
 */
StoreBase.prototype['IsArchived'] = undefined;

/**
 * Is the Store Published
 * @member {Boolean} IsPublished
 */
StoreBase.prototype['IsPublished'] = undefined;

/**
 * Name
 * @member {String} Name
 */
StoreBase.prototype['Name'] = undefined;

/**
 * Email address (visible to customers)
 * @member {String} EmailAddress
 */
StoreBase.prototype['EmailAddress'] = undefined;

/**
 * Staff Language (used for communication with the staff)  Emails, Printouts etc
 * @member {String} StaffLanguage
 */
StoreBase.prototype['StaffLanguage'] = undefined;






export default StoreBase;

