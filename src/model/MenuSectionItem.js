/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BusinessHoursPeriod from './BusinessHoursPeriod';
import CreateMetadata from './CreateMetadata';
import MenuItemOptionSet from './MenuItemOptionSet';

/**
 * The MenuSectionItem model module.
 * @module model/MenuSectionItem
 * @version 1.0.0
 */
class MenuSectionItem {
    /**
     * Constructs a new <code>MenuSectionItem</code>.
     * Menu item
     * @alias module:model/MenuSectionItem
     */
    constructor() { 
        
        MenuSectionItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MenuSectionItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MenuSectionItem} obj Optional instance to populate.
     * @return {module:model/MenuSectionItem} The populated <code>MenuSectionItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MenuSectionItem();

            if (data.hasOwnProperty('ActualPrice')) {
                obj['ActualPrice'] = ApiClient.convertToType(data['ActualPrice'], 'Number');
            }
            if (data.hasOwnProperty('MenuItemOptionSets')) {
                obj['MenuItemOptionSets'] = ApiClient.convertToType(data['MenuItemOptionSets'], [MenuItemOptionSet]);
            }
            if (data.hasOwnProperty('DailySpecialHours')) {
                obj['DailySpecialHours'] = ApiClient.convertToType(data['DailySpecialHours'], [BusinessHoursPeriod]);
            }
            if (data.hasOwnProperty('PublicId')) {
                obj['PublicId'] = ApiClient.convertToType(data['PublicId'], 'String');
            }
            if (data.hasOwnProperty('TaxRateName')) {
                obj['TaxRateName'] = ApiClient.convertToType(data['TaxRateName'], 'String');
            }
            if (data.hasOwnProperty('TaxRateId')) {
                obj['TaxRateId'] = ApiClient.convertToType(data['TaxRateId'], 'Number');
            }
            if (data.hasOwnProperty('TaxValue')) {
                obj['TaxValue'] = ApiClient.convertToType(data['TaxValue'], 'Number');
            }
            if (data.hasOwnProperty('ExcludeFromVoucherDiscounting')) {
                obj['ExcludeFromVoucherDiscounting'] = ApiClient.convertToType(data['ExcludeFromVoucherDiscounting'], 'Boolean');
            }
            if (data.hasOwnProperty('Metadata')) {
                obj['Metadata'] = ApiClient.convertToType(data['Metadata'], [CreateMetadata]);
            }
            if (data.hasOwnProperty('CatalogItemId')) {
                obj['CatalogItemId'] = ApiClient.convertToType(data['CatalogItemId'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('SpicinessRating')) {
                obj['SpicinessRating'] = ApiClient.convertToType(data['SpicinessRating'], 'String');
            }
            if (data.hasOwnProperty('Price')) {
                obj['Price'] = ApiClient.convertToType(data['Price'], 'Number');
            }
            if (data.hasOwnProperty('DepositReturnFee')) {
                obj['DepositReturnFee'] = ApiClient.convertToType(data['DepositReturnFee'], 'Number');
            }
            if (data.hasOwnProperty('DisplayOrder')) {
                obj['DisplayOrder'] = ApiClient.convertToType(data['DisplayOrder'], 'Number');
            }
            if (data.hasOwnProperty('Alcohol')) {
                obj['Alcohol'] = ApiClient.convertToType(data['Alcohol'], 'Boolean');
            }
            if (data.hasOwnProperty('IsAvailable')) {
                obj['IsAvailable'] = ApiClient.convertToType(data['IsAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('CellLayoutType')) {
                obj['CellLayoutType'] = ApiClient.convertToType(data['CellLayoutType'], 'String');
            }
            if (data.hasOwnProperty('DisableVouchers')) {
                obj['DisableVouchers'] = ApiClient.convertToType(data['DisableVouchers'], 'Boolean');
            }
            if (data.hasOwnProperty('ImageName')) {
                obj['ImageName'] = ApiClient.convertToType(data['ImageName'], 'String');
            }
            if (data.hasOwnProperty('ImageUrl')) {
                obj['ImageUrl'] = ApiClient.convertToType(data['ImageUrl'], 'String');
            }
            if (data.hasOwnProperty('MenuItemId')) {
                obj['MenuItemId'] = ApiClient.convertToType(data['MenuItemId'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Actual price - the minimum price possible when all required option set items prices are included.
 * @member {Number} ActualPrice
 */
MenuSectionItem.prototype['ActualPrice'] = undefined;

/**
 * Menu item option sets
 * @member {Array.<module:model/MenuItemOptionSet>} MenuItemOptionSets
 */
MenuSectionItem.prototype['MenuItemOptionSets'] = undefined;

/**
 * Daily special hours
 * @member {Array.<module:model/BusinessHoursPeriod>} DailySpecialHours
 */
MenuSectionItem.prototype['DailySpecialHours'] = undefined;

/**
 * Permanent reference to the item.
 * @member {String} PublicId
 */
MenuSectionItem.prototype['PublicId'] = undefined;

/**
 * Tax rate name
 * @member {String} TaxRateName
 */
MenuSectionItem.prototype['TaxRateName'] = undefined;

/**
 * TaxRate
 * @member {Number} TaxRateId
 */
MenuSectionItem.prototype['TaxRateId'] = undefined;

/**
 * TaxValue - the tax associated with this item, based on TaxRate / TaxType and Currency (currency determines decimal point precision)
 * @member {Number} TaxValue
 */
MenuSectionItem.prototype['TaxValue'] = undefined;

/**
 * If true, the item is excluded from voucher discount calculations
 * @member {Boolean} ExcludeFromVoucherDiscounting
 */
MenuSectionItem.prototype['ExcludeFromVoucherDiscounting'] = undefined;

/**
 * List of metadata
 * @member {Array.<module:model/CreateMetadata>} Metadata
 */
MenuSectionItem.prototype['Metadata'] = undefined;

/**
 * Catalog item Id when the Item is associated to a Product
 * @member {String} CatalogItemId
 */
MenuSectionItem.prototype['CatalogItemId'] = undefined;

/**
 * Menu item name (like \"Korma\")
 * @member {String} Name
 */
MenuSectionItem.prototype['Name'] = undefined;

/**
 * Description (like \"A lovely dish from the east\")
 * @member {String} Description
 */
MenuSectionItem.prototype['Description'] = undefined;

/**
 * Spiciness rating
 * @member {module:model/MenuSectionItem.SpicinessRatingEnum} SpicinessRating
 */
MenuSectionItem.prototype['SpicinessRating'] = undefined;

/**
 * Price - this is only used when there is no master option set and should be set to 0 if a master option set exists.
 * @member {Number} Price
 */
MenuSectionItem.prototype['Price'] = undefined;

/**
 * An optional fee that can be added to the price of the item.
 * @member {Number} DepositReturnFee
 */
MenuSectionItem.prototype['DepositReturnFee'] = undefined;

/**
 * Display order
 * @member {Number} DisplayOrder
 */
MenuSectionItem.prototype['DisplayOrder'] = undefined;

/**
 * To be set true if the item or an option of the item contains an alcoholic drink.
 * @member {Boolean} Alcohol
 */
MenuSectionItem.prototype['Alcohol'] = undefined;

/**
 * True if we accept orders for this item still
 * @member {Boolean} IsAvailable
 */
MenuSectionItem.prototype['IsAvailable'] = undefined;

/**
 * Small | Medium | Large  Affects the layout of the menu.
 * @member {module:model/MenuSectionItem.CellLayoutTypeEnum} CellLayoutType
 */
MenuSectionItem.prototype['CellLayoutType'] = undefined;

/**
 * If true, then vouchers won't be applied for this item
 * @member {Boolean} DisableVouchers
 */
MenuSectionItem.prototype['DisableVouchers'] = undefined;

/**
 * Image url
 * @member {String} ImageName
 */
MenuSectionItem.prototype['ImageName'] = undefined;

/**
 * Image url
 * @member {String} ImageUrl
 */
MenuSectionItem.prototype['ImageUrl'] = undefined;

/**
 * Menu Item Id
 * @member {Number} MenuItemId
 */
MenuSectionItem.prototype['MenuItemId'] = undefined;





/**
 * Allowed values for the <code>SpicinessRating</code> property.
 * @enum {String}
 * @readonly
 */
MenuSectionItem['SpicinessRatingEnum'] = {

    /**
     * value: "NotRated"
     * @const
     */
    "NotRated": "NotRated",

    /**
     * value: "Mild"
     * @const
     */
    "Mild": "Mild",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "Hot"
     * @const
     */
    "Hot": "Hot"
};


/**
 * Allowed values for the <code>CellLayoutType</code> property.
 * @enum {String}
 * @readonly
 */
MenuSectionItem['CellLayoutTypeEnum'] = {

    /**
     * value: "Small"
     * @const
     */
    "Small": "Small",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "Large"
     * @const
     */
    "Large": "Large",

    /**
     * value: "HiddenImage"
     * @const
     */
    "HiddenImage": "HiddenImage"
};



export default MenuSectionItem;

