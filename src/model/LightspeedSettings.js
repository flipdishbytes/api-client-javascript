/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LightspeedSettings model module.
 * @module model/LightspeedSettings
 * @version 1.0.0
 */
class LightspeedSettings {
    /**
     * Constructs a new <code>LightspeedSettings</code>.
     * Ligthspeed store settings
     * @alias module:model/LightspeedSettings
     */
    constructor() { 
        
        LightspeedSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LightspeedSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LightspeedSettings} obj Optional instance to populate.
     * @return {module:model/LightspeedSettings} The populated <code>LightspeedSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LightspeedSettings();

            if (data.hasOwnProperty('CompanyId')) {
                obj['CompanyId'] = ApiClient.convertToType(data['CompanyId'], 'String');
            }
            if (data.hasOwnProperty('UseOAuth')) {
                obj['UseOAuth'] = ApiClient.convertToType(data['UseOAuth'], 'Boolean');
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('EstimatedMinutesForDelivery')) {
                obj['EstimatedMinutesForDelivery'] = ApiClient.convertToType(data['EstimatedMinutesForDelivery'], 'Number');
            }
            if (data.hasOwnProperty('EstimatedMinutesForCollection')) {
                obj['EstimatedMinutesForCollection'] = ApiClient.convertToType(data['EstimatedMinutesForCollection'], 'Number');
            }
            if (data.hasOwnProperty('GeographicLocation')) {
                obj['GeographicLocation'] = ApiClient.convertToType(data['GeographicLocation'], 'String');
            }
            if (data.hasOwnProperty('Establishment')) {
                obj['Establishment'] = ApiClient.convertToType(data['Establishment'], 'Boolean');
            }
            if (data.hasOwnProperty('VoucherId')) {
                obj['VoucherId'] = ApiClient.convertToType(data['VoucherId'], 'String');
            }
            if (data.hasOwnProperty('DeliveryFeeId')) {
                obj['DeliveryFeeId'] = ApiClient.convertToType(data['DeliveryFeeId'], 'String');
            }
            if (data.hasOwnProperty('ProcessingFeeId')) {
                obj['ProcessingFeeId'] = ApiClient.convertToType(data['ProcessingFeeId'], 'String');
            }
            if (data.hasOwnProperty('PriceType')) {
                obj['PriceType'] = ApiClient.convertToType(data['PriceType'], 'String');
            }
            if (data.hasOwnProperty('MenuId')) {
                obj['MenuId'] = ApiClient.convertToType(data['MenuId'], 'Number');
            }
            if (data.hasOwnProperty('CollectionTableId')) {
                obj['CollectionTableId'] = ApiClient.convertToType(data['CollectionTableId'], 'Number');
            }
            if (data.hasOwnProperty('DeliveryTableId')) {
                obj['DeliveryTableId'] = ApiClient.convertToType(data['DeliveryTableId'], 'Number');
            }
            if (data.hasOwnProperty('CollectionTableIds')) {
                obj['CollectionTableIds'] = ApiClient.convertToType(data['CollectionTableIds'], {'String': 'String'});
            }
            if (data.hasOwnProperty('DeliveryTableIds')) {
                obj['DeliveryTableIds'] = ApiClient.convertToType(data['DeliveryTableIds'], {'String': 'String'});
            }
            if (data.hasOwnProperty('UseTaxInclusivePrices')) {
                obj['UseTaxInclusivePrices'] = ApiClient.convertToType(data['UseTaxInclusivePrices'], 'Boolean');
            }
            if (data.hasOwnProperty('SkipStatusCheckAndAcceptOrderAfterSending')) {
                obj['SkipStatusCheckAndAcceptOrderAfterSending'] = ApiClient.convertToType(data['SkipStatusCheckAndAcceptOrderAfterSending'], 'Boolean');
            }
            if (data.hasOwnProperty('SendTableNumberToTableId')) {
                obj['SendTableNumberToTableId'] = ApiClient.convertToType(data['SendTableNumberToTableId'], 'Boolean');
            }
            if (data.hasOwnProperty('AddChefNoteToProduct')) {
                obj['AddChefNoteToProduct'] = ApiClient.convertToType(data['AddChefNoteToProduct'], 'Boolean');
            }
            if (data.hasOwnProperty('ChefNoteItemId')) {
                obj['ChefNoteItemId'] = ApiClient.convertToType(data['ChefNoteItemId'], 'String');
            }
            if (data.hasOwnProperty('ChefNoteModifierId')) {
                obj['ChefNoteModifierId'] = ApiClient.convertToType(data['ChefNoteModifierId'], 'String');
            }
            if (data.hasOwnProperty('ServiceChargeId')) {
                obj['ServiceChargeId'] = ApiClient.convertToType(data['ServiceChargeId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Company Id
 * @member {String} CompanyId
 */
LightspeedSettings.prototype['CompanyId'] = undefined;

/**
 * Use OAuth for authentication
 * @member {Boolean} UseOAuth
 */
LightspeedSettings.prototype['UseOAuth'] = undefined;

/**
 * Enabled
 * @member {Boolean} Enabled
 */
LightspeedSettings.prototype['Enabled'] = undefined;

/**
 * Estimated minutes for delivery
 * @member {Number} EstimatedMinutesForDelivery
 */
LightspeedSettings.prototype['EstimatedMinutesForDelivery'] = undefined;

/**
 * Estimated minutes for collection
 * @member {Number} EstimatedMinutesForCollection
 */
LightspeedSettings.prototype['EstimatedMinutesForCollection'] = undefined;

/**
 * Geographic location (euc1, nae1, euw2, ....))
 * @member {String} GeographicLocation
 */
LightspeedSettings.prototype['GeographicLocation'] = undefined;

/**
 * Is the CompanyId an establishment (kind of the store of a group of store)
 * @member {Boolean} Establishment
 */
LightspeedSettings.prototype['Establishment'] = undefined;

/**
 * The Lightspeed voucher identifier to map with our
 * @member {String} VoucherId
 */
LightspeedSettings.prototype['VoucherId'] = undefined;

/**
 * The Lightspeed delivery fee identifier to map with our
 * @member {String} DeliveryFeeId
 */
LightspeedSettings.prototype['DeliveryFeeId'] = undefined;

/**
 * The Lightspeed processing fee identifier to map with our
 * @member {String} ProcessingFeeId
 */
LightspeedSettings.prototype['ProcessingFeeId'] = undefined;

/**
 * Which price to choose from Lightspeed menu
 * @member {module:model/LightspeedSettings.PriceTypeEnum} PriceType
 */
LightspeedSettings.prototype['PriceType'] = undefined;

/**
 * The menu id of the store
 * @member {Number} MenuId
 */
LightspeedSettings.prototype['MenuId'] = undefined;

/**
 * Collection Table ID to send orders
 * @member {Number} CollectionTableId
 */
LightspeedSettings.prototype['CollectionTableId'] = undefined;

/**
 * Delivery Table ID to send orders
 * @member {Number} DeliveryTableId
 */
LightspeedSettings.prototype['DeliveryTableId'] = undefined;

/**
 * Collection Table IDs to send orders to
 * @member {Object.<String, String>} CollectionTableIds
 */
LightspeedSettings.prototype['CollectionTableIds'] = undefined;

/**
 * Delivery Table IDs to send orders to
 * @member {Object.<String, String>} DeliveryTableIds
 */
LightspeedSettings.prototype['DeliveryTableIds'] = undefined;

/**
 * Exclude tax
 * @member {Boolean} UseTaxInclusivePrices
 */
LightspeedSettings.prototype['UseTaxInclusivePrices'] = undefined;

/**
 * WARNING: only use this option if the Liteserver is not synchronizing within max 5 minutes with Lightspeed cloud!
 * @member {Boolean} SkipStatusCheckAndAcceptOrderAfterSending
 */
LightspeedSettings.prototype['SkipStatusCheckAndAcceptOrderAfterSending'] = undefined;

/**
 * Send Table Number to Table Id
 * @member {Boolean} SendTableNumberToTableId
 */
LightspeedSettings.prototype['SendTableNumberToTableId'] = undefined;

/**
 * Add ChefNote To Product
 * @member {Boolean} AddChefNoteToProduct
 */
LightspeedSettings.prototype['AddChefNoteToProduct'] = undefined;

/**
 * The Lightspeed Chef Note Item Id to map
 * @member {String} ChefNoteItemId
 */
LightspeedSettings.prototype['ChefNoteItemId'] = undefined;

/**
 * The Lightspeed Chef Note Modifier Id to map
 * @member {String} ChefNoteModifierId
 */
LightspeedSettings.prototype['ChefNoteModifierId'] = undefined;

/**
 * The Lightspeed Service Charge Id to map
 * @member {String} ServiceChargeId
 */
LightspeedSettings.prototype['ServiceChargeId'] = undefined;





/**
 * Allowed values for the <code>PriceType</code> property.
 * @enum {String}
 * @readonly
 */
LightspeedSettings['PriceTypeEnum'] = {

    /**
     * value: "Default"
     * @const
     */
    "Default": "Default",

    /**
     * value: "Takeaway"
     * @const
     */
    "Takeaway": "Takeaway",

    /**
     * value: "Delivery"
     * @const
     */
    "Delivery": "Delivery"
};



export default LightspeedSettings;

