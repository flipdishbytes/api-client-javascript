/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReaderActionStateInfo from './ReaderActionStateInfo';

/**
 * The CardReader model module.
 * @module model/CardReader
 * @version 1.0.0
 */
class CardReader {
    /**
     * Constructs a new <code>CardReader</code>.
     * Card reader
     * @alias module:model/CardReader
     */
    constructor() { 
        
        CardReader.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardReader</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardReader} obj Optional instance to populate.
     * @return {module:model/CardReader} The populated <code>CardReader</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardReader();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('DeviceSoftwareVersion')) {
                obj['DeviceSoftwareVersion'] = ApiClient.convertToType(data['DeviceSoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('SerialNumber')) {
                obj['SerialNumber'] = ApiClient.convertToType(data['SerialNumber'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('RegistrationCode')) {
                obj['RegistrationCode'] = ApiClient.convertToType(data['RegistrationCode'], 'String');
            }
            if (data.hasOwnProperty('DeviceType')) {
                obj['DeviceType'] = ApiClient.convertToType(data['DeviceType'], 'String');
            }
            if (data.hasOwnProperty('Deleted')) {
                obj['Deleted'] = ApiClient.convertToType(data['Deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('Action')) {
                obj['Action'] = ReaderActionStateInfo.constructFromObject(data['Action']);
            }
        }
        return obj;
    }


}

/**
 * Stripe reader id
 * @member {String} Id
 */
CardReader.prototype['Id'] = undefined;

/**
 * Software version
 * @member {String} DeviceSoftwareVersion
 */
CardReader.prototype['DeviceSoftwareVersion'] = undefined;

/**
 * Device serial number
 * @member {String} SerialNumber
 */
CardReader.prototype['SerialNumber'] = undefined;

/**
 * Device status online or offline
 * @member {String} Status
 */
CardReader.prototype['Status'] = undefined;

/**
 * Registration code
 * @member {String} RegistrationCode
 */
CardReader.prototype['RegistrationCode'] = undefined;

/**
 * Device type
 * @member {String} DeviceType
 */
CardReader.prototype['DeviceType'] = undefined;

/**
 * Indicates that the reader is deleted or not
 * @member {Boolean} Deleted
 */
CardReader.prototype['Deleted'] = undefined;

/**
 * @member {module:model/ReaderActionStateInfo} Action
 */
CardReader.prototype['Action'] = undefined;






export default CardReader;

