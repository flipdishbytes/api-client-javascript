/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AppConfigUpdateModel model module.
 * @module model/AppConfigUpdateModel
 * @version 1.0.0
 */
class AppConfigUpdateModel {
    /**
     * Constructs a new <code>AppConfigUpdateModel</code>.
     * Application configuration
     * @alias module:model/AppConfigUpdateModel
     */
    constructor() { 
        
        AppConfigUpdateModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppConfigUpdateModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppConfigUpdateModel} obj Optional instance to populate.
     * @return {module:model/AppConfigUpdateModel} The populated <code>AppConfigUpdateModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppConfigUpdateModel();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('HostName')) {
                obj['HostName'] = ApiClient.convertToType(data['HostName'], 'String');
            }
            if (data.hasOwnProperty('MainColor')) {
                obj['MainColor'] = ApiClient.convertToType(data['MainColor'], 'String');
            }
            if (data.hasOwnProperty('KioskPrimaryColour')) {
                obj['KioskPrimaryColour'] = ApiClient.convertToType(data['KioskPrimaryColour'], 'String');
            }
            if (data.hasOwnProperty('ApplicationCategory')) {
                obj['ApplicationCategory'] = ApiClient.convertToType(data['ApplicationCategory'], 'String');
            }
            if (data.hasOwnProperty('IsPanaceaEnabled')) {
                obj['IsPanaceaEnabled'] = ApiClient.convertToType(data['IsPanaceaEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('PanaceaVanityUrl')) {
                obj['PanaceaVanityUrl'] = ApiClient.convertToType(data['PanaceaVanityUrl'], 'String');
            }
            if (data.hasOwnProperty('CookieConsentPromptEnabled')) {
                obj['CookieConsentPromptEnabled'] = ApiClient.convertToType(data['CookieConsentPromptEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('LogoImageUrl')) {
                obj['LogoImageUrl'] = ApiClient.convertToType(data['LogoImageUrl'], 'String');
            }
            if (data.hasOwnProperty('CountryId')) {
                obj['CountryId'] = ApiClient.convertToType(data['CountryId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * App name.   This is used in various places on the Apple App Store, Google Play Store, mobile apps and websites.
 * @member {String} Name
 */
AppConfigUpdateModel.prototype['Name'] = undefined;

/**
 * HostName on which the web-ordering system is allowed to be hosted or that a Flipdish website is hosted on.
 * @member {String} HostName
 */
AppConfigUpdateModel.prototype['HostName'] = undefined;

/**
 * Main color of the web / Android / iOS applications
 * @member {String} MainColor
 */
AppConfigUpdateModel.prototype['MainColor'] = undefined;

/**
 * Primary colour used on the Kiosk
 * @member {String} KioskPrimaryColour
 */
AppConfigUpdateModel.prototype['KioskPrimaryColour'] = undefined;

/**
 * Application Category
 * @member {module:model/AppConfigUpdateModel.ApplicationCategoryEnum} ApplicationCategory
 */
AppConfigUpdateModel.prototype['ApplicationCategory'] = undefined;

/**
 * Panacea is the term used for websites that are hosted on the my.flipdish.com domain. This value is true when the App's website is hosted on this domain.  The alternative to using Panacea websites is to use a custom domain.
 * @member {Boolean} IsPanaceaEnabled
 */
AppConfigUpdateModel.prototype['IsPanaceaEnabled'] = undefined;

/**
 * In case of IsPanaceaEnabled is true, the app can be accessed via https://my.flipdish.com/{PanaceaVanityUrl}
 * @member {String} PanaceaVanityUrl
 */
AppConfigUpdateModel.prototype['PanaceaVanityUrl'] = undefined;

/**
 * Cookie Consent Prompt Enabled
 * @member {Boolean} CookieConsentPromptEnabled
 */
AppConfigUpdateModel.prototype['CookieConsentPromptEnabled'] = undefined;

/**
 * Logo image URL
 * @member {String} LogoImageUrl
 */
AppConfigUpdateModel.prototype['LogoImageUrl'] = undefined;

/**
 * Country identifier in ISO 3166-1 alpha-2 format.   This code is set automatically based on the locations of the Stores in the App.     The App Country is used    - to determine how to parse mobile phone numbers that are entered in their local numbering format   - to determine if country specific payment methods should be offered   - in various fraud checks
 * @member {String} CountryId
 */
AppConfigUpdateModel.prototype['CountryId'] = undefined;





/**
 * Allowed values for the <code>ApplicationCategory</code> property.
 * @enum {String}
 * @readonly
 */
AppConfigUpdateModel['ApplicationCategoryEnum'] = {

    /**
     * value: "Restaurant"
     * @const
     */
    "Restaurant": "Restaurant",

    /**
     * value: "Cafe"
     * @const
     */
    "Cafe": "Cafe",

    /**
     * value: "Convenience"
     * @const
     */
    "Convenience": "Convenience"
};



export default AppConfigUpdateModel;

