/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HydraStoreData from './HydraStoreData';

/**
 * The HydraDeviceDetails model module.
 * @module model/HydraDeviceDetails
 * @version 1.0.0
 */
class HydraDeviceDetails {
    /**
     * Constructs a new <code>HydraDeviceDetails</code>.
     * Hydra device details
     * @alias module:model/HydraDeviceDetails
     */
    constructor() { 
        
        HydraDeviceDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HydraDeviceDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HydraDeviceDetails} obj Optional instance to populate.
     * @return {module:model/HydraDeviceDetails} The populated <code>HydraDeviceDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HydraDeviceDetails();

            if (data.hasOwnProperty('HydraConfigId')) {
                obj['HydraConfigId'] = ApiClient.convertToType(data['HydraConfigId'], 'Number');
            }
            if (data.hasOwnProperty('DeviceId')) {
                obj['DeviceId'] = ApiClient.convertToType(data['DeviceId'], 'String');
            }
            if (data.hasOwnProperty('SerialNumber')) {
                obj['SerialNumber'] = ApiClient.convertToType(data['SerialNumber'], 'String');
            }
            if (data.hasOwnProperty('DeviceType')) {
                obj['DeviceType'] = ApiClient.convertToType(data['DeviceType'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('DeviceName')) {
                obj['DeviceName'] = ApiClient.convertToType(data['DeviceName'], 'String');
            }
            if (data.hasOwnProperty('StoreNames')) {
                obj['StoreNames'] = ApiClient.convertToType(data['StoreNames'], [HydraStoreData]);
            }
            if (data.hasOwnProperty('LastPollUtc')) {
                obj['LastPollUtc'] = ApiClient.convertToType(data['LastPollUtc'], 'Date');
            }
            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
            if (data.hasOwnProperty('BuildNumber')) {
                obj['BuildNumber'] = ApiClient.convertToType(data['BuildNumber'], 'String');
            }
            if (data.hasOwnProperty('GitSha')) {
                obj['GitSha'] = ApiClient.convertToType(data['GitSha'], 'String');
            }
            if (data.hasOwnProperty('GitBranch')) {
                obj['GitBranch'] = ApiClient.convertToType(data['GitBranch'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Flipdish internal device identifier
 * @member {Number} HydraConfigId
 */
HydraDeviceDetails.prototype['HydraConfigId'] = undefined;

/**
 * Device Id
 * @member {String} DeviceId
 */
HydraDeviceDetails.prototype['DeviceId'] = undefined;

/**
 * Serial Number
 * @member {String} SerialNumber
 */
HydraDeviceDetails.prototype['SerialNumber'] = undefined;

/**
 * Type of the device
 * @member {module:model/HydraDeviceDetails.DeviceTypeEnum} DeviceType
 */
HydraDeviceDetails.prototype['DeviceType'] = undefined;

/**
 * Status of the device
 * @member {module:model/HydraDeviceDetails.StatusEnum} Status
 */
HydraDeviceDetails.prototype['Status'] = undefined;

/**
 * Device Name
 * @member {String} DeviceName
 */
HydraDeviceDetails.prototype['DeviceName'] = undefined;

/**
 * Store Names
 * @member {Array.<module:model/HydraStoreData>} StoreNames
 */
HydraDeviceDetails.prototype['StoreNames'] = undefined;

/**
 * Last poll time in UTC
 * @member {Date} LastPollUtc
 */
HydraDeviceDetails.prototype['LastPollUtc'] = undefined;

/**
 * Version of the device
 * @member {String} Version
 */
HydraDeviceDetails.prototype['Version'] = undefined;

/**
 * Build number of the device
 * @member {String} BuildNumber
 */
HydraDeviceDetails.prototype['BuildNumber'] = undefined;

/**
 * SHA of the commit
 * @member {String} GitSha
 */
HydraDeviceDetails.prototype['GitSha'] = undefined;

/**
 * Build branch
 * @member {String} GitBranch
 */
HydraDeviceDetails.prototype['GitBranch'] = undefined;





/**
 * Allowed values for the <code>DeviceType</code> property.
 * @enum {String}
 * @readonly
 */
HydraDeviceDetails['DeviceTypeEnum'] = {

    /**
     * value: "Kiosk"
     * @const
     */
    "Kiosk": "Kiosk",

    /**
     * value: "Terminal"
     * @const
     */
    "Terminal": "Terminal",

    /**
     * value: "LegacyPrinter"
     * @const
     */
    "LegacyPrinter": "LegacyPrinter"
};


/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
HydraDeviceDetails['StatusEnum'] = {

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "PossiblyOffline"
     * @const
     */
    "PossiblyOffline": "PossiblyOffline",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline"
};



export default HydraDeviceDetails;

