/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountFieldKeyValuePair', 'model/StripeConnectedAccountInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccountFieldKeyValuePair'), require('./StripeConnectedAccountInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.BankAccountSummary = factory(root.Flipdish.ApiClient, root.Flipdish.AccountFieldKeyValuePair, root.Flipdish.StripeConnectedAccountInfo);
  }
}(this, function(ApiClient, AccountFieldKeyValuePair, StripeConnectedAccountInfo) {
  'use strict';

  /**
   * The BankAccountSummary model module.
   * @module model/BankAccountSummary
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>BankAccountSummary</code>.
   * 
   * @alias module:model/BankAccountSummary
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>BankAccountSummary</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BankAccountSummary} obj Optional instance to populate.
   * @return {module:model/BankAccountSummary} The populated <code>BankAccountSummary</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('Id'))
        obj.Id = ApiClient.convertToType(data['Id'], 'Number');
      if (data.hasOwnProperty('StoreNames'))
        obj.StoreNames = ApiClient.convertToType(data['StoreNames'], ['String']);
      if (data.hasOwnProperty('AccountState'))
        obj.AccountState = ApiClient.convertToType(data['AccountState'], 'String');
      if (data.hasOwnProperty('CurrencyCode'))
        obj.CurrencyCode = ApiClient.convertToType(data['CurrencyCode'], 'String');
      if (data.hasOwnProperty('StripeConnectedAccountInfo'))
        obj.StripeConnectedAccountInfo = StripeConnectedAccountInfo.constructFromObject(data['StripeConnectedAccountInfo']);
      if (data.hasOwnProperty('AccountName'))
        obj.AccountName = ApiClient.convertToType(data['AccountName'], 'String');
      if (data.hasOwnProperty('Iban'))
        obj.Iban = ApiClient.convertToType(data['Iban'], 'String');
      if (data.hasOwnProperty('Swift'))
        obj.Swift = ApiClient.convertToType(data['Swift'], 'String');
      if (data.hasOwnProperty('NationalClearingCode'))
        obj.NationalClearingCode = ApiClient.convertToType(data['NationalClearingCode'], 'String');
      if (data.hasOwnProperty('PopulatedAccountFields'))
        obj.PopulatedAccountFields = ApiClient.convertToType(data['PopulatedAccountFields'], [AccountFieldKeyValuePair]);
      if (data.hasOwnProperty('RejectionReason'))
        obj.RejectionReason = ApiClient.convertToType(data['RejectionReason'], 'String');
      if (data.hasOwnProperty('BusinessType'))
        obj.BusinessType = ApiClient.convertToType(data['BusinessType'], 'String');
    }
    return obj;
  }

  /**
   * Id of this account
   * @member {Number} Id
   */
  exports.prototype.Id = undefined;

  /**
   * Store Names that are attached to this account
   * @member {Array.<String>} StoreNames
   */
  exports.prototype.StoreNames = undefined;

  /**
   * Status of Account
   * @member {module:model/BankAccountSummary.AccountStateEnum} AccountState
   */
  exports.prototype.AccountState = undefined;

  /**
   * Currency of Account
   * @member {String} CurrencyCode
   */
  exports.prototype.CurrencyCode = undefined;

  /**
   * Information about the Stripe connected account associated with this bank account (if any)
   * @member {module:model/StripeConnectedAccountInfo} StripeConnectedAccountInfo
   */
  exports.prototype.StripeConnectedAccountInfo = undefined;

  /**
   * Name of this account
   * @member {String} AccountName
   */
  exports.prototype.AccountName = undefined;

  /**
   * IBAN of this account
   * @member {String} Iban
   */
  exports.prototype.Iban = undefined;

  /**
   * SWIFT of this bank account
   * @member {String} Swift
   */
  exports.prototype.Swift = undefined;

  /**
   * National Clearing Code (BSB in Australia, Routing Number in USA/Canada, NCC in NZ)
   * @member {String} NationalClearingCode
   */
  exports.prototype.NationalClearingCode = undefined;

  /**
   * A list of one or more populated account fields (field key-value pairs).  If this list contains at least one item, the Iban, Swift and NationalClearingCode fields will be ignored.
   * @member {Array.<module:model/AccountFieldKeyValuePair>} PopulatedAccountFields
   */
  exports.prototype.PopulatedAccountFields = undefined;

  /**
   * Reason for Rejection
   * @member {String} RejectionReason
   */
  exports.prototype.RejectionReason = undefined;

  /**
   * Business Type
   * @member {module:model/BankAccountSummary.BusinessTypeEnum} BusinessType
   */
  exports.prototype.BusinessType = undefined;



  /**
   * Allowed values for the <code>AccountState</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AccountStateEnum = {
    /**
     * value: "Unverified"
     * @const
     */
    Unverified: "Unverified",

    /**
     * value: "AwatingVerification"
     * @const
     */
    AwatingVerification: "AwatingVerification",

    /**
     * value: "Verified"
     * @const
     */
    Verified: "Verified",

    /**
     * value: "Grandfathered"
     * @const
     */
    Grandfathered: "Grandfathered"
  };


  /**
   * Allowed values for the <code>BusinessType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.BusinessTypeEnum = {
    /**
     * value: "Individual"
     * @const
     */
    Individual: "Individual",

    /**
     * value: "Company"
     * @const
     */
    Company: "Company",

    /**
     * value: "NonProfit"
     * @const
     */
    NonProfit: "NonProfit",

    /**
     * value: "GovernmentEntity"
     * @const
     */
    GovernmentEntity: "GovernmentEntity"
  };

  return exports;

}));
