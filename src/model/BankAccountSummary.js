/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountFieldKeyValuePair from './AccountFieldKeyValuePair';
import StripeConnectedAccountInfo from './StripeConnectedAccountInfo';

/**
 * The BankAccountSummary model module.
 * @module model/BankAccountSummary
 * @version 1.0.0
 */
class BankAccountSummary {
    /**
     * Constructs a new <code>BankAccountSummary</code>.
     * 
     * @alias module:model/BankAccountSummary
     */
    constructor() { 
        
        BankAccountSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BankAccountSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankAccountSummary} obj Optional instance to populate.
     * @return {module:model/BankAccountSummary} The populated <code>BankAccountSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankAccountSummary();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('StoreNames')) {
                obj['StoreNames'] = ApiClient.convertToType(data['StoreNames'], ['String']);
            }
            if (data.hasOwnProperty('AccountState')) {
                obj['AccountState'] = ApiClient.convertToType(data['AccountState'], 'String');
            }
            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = ApiClient.convertToType(data['CurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('StripeConnectedAccountInfo')) {
                obj['StripeConnectedAccountInfo'] = StripeConnectedAccountInfo.constructFromObject(data['StripeConnectedAccountInfo']);
            }
            if (data.hasOwnProperty('AccountName')) {
                obj['AccountName'] = ApiClient.convertToType(data['AccountName'], 'String');
            }
            if (data.hasOwnProperty('Iban')) {
                obj['Iban'] = ApiClient.convertToType(data['Iban'], 'String');
            }
            if (data.hasOwnProperty('Swift')) {
                obj['Swift'] = ApiClient.convertToType(data['Swift'], 'String');
            }
            if (data.hasOwnProperty('NationalClearingCode')) {
                obj['NationalClearingCode'] = ApiClient.convertToType(data['NationalClearingCode'], 'String');
            }
            if (data.hasOwnProperty('PopulatedAccountFields')) {
                obj['PopulatedAccountFields'] = ApiClient.convertToType(data['PopulatedAccountFields'], [AccountFieldKeyValuePair]);
            }
            if (data.hasOwnProperty('RejectionReason')) {
                obj['RejectionReason'] = ApiClient.convertToType(data['RejectionReason'], 'String');
            }
            if (data.hasOwnProperty('BusinessType')) {
                obj['BusinessType'] = ApiClient.convertToType(data['BusinessType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Id of this account
 * @member {Number} Id
 */
BankAccountSummary.prototype['Id'] = undefined;

/**
 * Store Names that are attached to this account
 * @member {Array.<String>} StoreNames
 */
BankAccountSummary.prototype['StoreNames'] = undefined;

/**
 * Status of Account
 * @member {module:model/BankAccountSummary.AccountStateEnum} AccountState
 */
BankAccountSummary.prototype['AccountState'] = undefined;

/**
 * Currency of Account
 * @member {String} CurrencyCode
 */
BankAccountSummary.prototype['CurrencyCode'] = undefined;

/**
 * @member {module:model/StripeConnectedAccountInfo} StripeConnectedAccountInfo
 */
BankAccountSummary.prototype['StripeConnectedAccountInfo'] = undefined;

/**
 * Name of this account
 * @member {String} AccountName
 */
BankAccountSummary.prototype['AccountName'] = undefined;

/**
 * IBAN of this account
 * @member {String} Iban
 */
BankAccountSummary.prototype['Iban'] = undefined;

/**
 * SWIFT of this bank account
 * @member {String} Swift
 */
BankAccountSummary.prototype['Swift'] = undefined;

/**
 * National Clearing Code (BSB in Australia, Routing Number in USA/Canada, NCC in NZ)
 * @member {String} NationalClearingCode
 */
BankAccountSummary.prototype['NationalClearingCode'] = undefined;

/**
 * A list of one or more populated account fields (field key-value pairs).  If this list contains at least one item, the Iban, Swift and NationalClearingCode fields will be ignored.
 * @member {Array.<module:model/AccountFieldKeyValuePair>} PopulatedAccountFields
 */
BankAccountSummary.prototype['PopulatedAccountFields'] = undefined;

/**
 * Reason for Rejection
 * @member {String} RejectionReason
 */
BankAccountSummary.prototype['RejectionReason'] = undefined;

/**
 * Business Type
 * @member {module:model/BankAccountSummary.BusinessTypeEnum} BusinessType
 */
BankAccountSummary.prototype['BusinessType'] = undefined;





/**
 * Allowed values for the <code>AccountState</code> property.
 * @enum {String}
 * @readonly
 */
BankAccountSummary['AccountStateEnum'] = {

    /**
     * value: "Unverified"
     * @const
     */
    "Unverified": "Unverified",

    /**
     * value: "AwatingVerification"
     * @const
     */
    "AwatingVerification": "AwatingVerification",

    /**
     * value: "Verified"
     * @const
     */
    "Verified": "Verified",

    /**
     * value: "Grandfathered"
     * @const
     */
    "Grandfathered": "Grandfathered"
};


/**
 * Allowed values for the <code>BusinessType</code> property.
 * @enum {String}
 * @readonly
 */
BankAccountSummary['BusinessTypeEnum'] = {

    /**
     * value: "Individual"
     * @const
     */
    "Individual": "Individual",

    /**
     * value: "Company"
     * @const
     */
    "Company": "Company",

    /**
     * value: "NonProfit"
     * @const
     */
    "NonProfit": "NonProfit",

    /**
     * value: "GovernmentEntity"
     * @const
     */
    "GovernmentEntity": "GovernmentEntity"
};



export default BankAccountSummary;

