/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SupportedCountry model module.
 * @module model/SupportedCountry
 * @version 1.0.0
 */
class SupportedCountry {
    /**
     * Constructs a new <code>SupportedCountry</code>.
     * Describes a supported country
     * @alias module:model/SupportedCountry
     */
    constructor() { 
        
        SupportedCountry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SupportedCountry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SupportedCountry} obj Optional instance to populate.
     * @return {module:model/SupportedCountry} The populated <code>SupportedCountry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SupportedCountry();

            if (data.hasOwnProperty('CountryCode')) {
                obj['CountryCode'] = ApiClient.convertToType(data['CountryCode'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PhoneCode')) {
                obj['PhoneCode'] = ApiClient.convertToType(data['PhoneCode'], 'Number');
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], 'String');
            }
            if (data.hasOwnProperty('LanguageName')) {
                obj['LanguageName'] = ApiClient.convertToType(data['LanguageName'], 'String');
            }
            if (data.hasOwnProperty('OtpNumber')) {
                obj['OtpNumber'] = ApiClient.convertToType(data['OtpNumber'], 'String');
            }
            if (data.hasOwnProperty('SupportNumber')) {
                obj['SupportNumber'] = ApiClient.convertToType(data['SupportNumber'], 'String');
            }
            if (data.hasOwnProperty('AddressLayout')) {
                obj['AddressLayout'] = ApiClient.convertToType(data['AddressLayout'], 'String');
            }
            if (data.hasOwnProperty('PostCodeType')) {
                obj['PostCodeType'] = ApiClient.convertToType(data['PostCodeType'], 'String');
            }
            if (data.hasOwnProperty('SupportRegion')) {
                obj['SupportRegion'] = ApiClient.convertToType(data['SupportRegion'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Country code
 * @member {String} CountryCode
 */
SupportedCountry.prototype['CountryCode'] = undefined;

/**
 * Nice display name for a country
 * @member {String} Name
 */
SupportedCountry.prototype['Name'] = undefined;

/**
 * Country internatinoal phone code prefix
 * @member {Number} PhoneCode
 */
SupportedCountry.prototype['PhoneCode'] = undefined;

/**
 * Language code
 * @member {String} LanguageCode
 */
SupportedCountry.prototype['LanguageCode'] = undefined;

/**
 * Language name
 * @member {String} LanguageName
 */
SupportedCountry.prototype['LanguageName'] = undefined;

/**
 * The phone number provided to Store staff which, in conjunction with a one-time-code, will connect them to the customer.
 * @member {String} OtpNumber
 */
SupportedCountry.prototype['OtpNumber'] = undefined;

/**
 * The store's support phone number, displayed to customers.
 * @member {String} SupportNumber
 */
SupportedCountry.prototype['SupportNumber'] = undefined;

/**
 * Address layout format. This changes the layout of address entry forms on the web app, iOS and Android app and should be set based on local custom.
 * @member {module:model/SupportedCountry.AddressLayoutEnum} AddressLayout
 */
SupportedCountry.prototype['AddressLayout'] = undefined;

/**
 * Post code type
 * @member {module:model/SupportedCountry.PostCodeTypeEnum} PostCodeType
 */
SupportedCountry.prototype['PostCodeType'] = undefined;

/**
 * Supported region. This is not used.
 * @member {module:model/SupportedCountry.SupportRegionEnum} SupportRegion
 */
SupportedCountry.prototype['SupportRegion'] = undefined;





/**
 * Allowed values for the <code>AddressLayout</code> property.
 * @enum {String}
 * @readonly
 */
SupportedCountry['AddressLayoutEnum'] = {

    /**
     * value: "BuildingFirst"
     * @const
     */
    "BuildingFirst": "BuildingFirst",

    /**
     * value: "AddressFirst"
     * @const
     */
    "AddressFirst": "AddressFirst",

    /**
     * value: "FullStreetAddressFirst"
     * @const
     */
    "FullStreetAddressFirst": "FullStreetAddressFirst"
};


/**
 * Allowed values for the <code>PostCodeType</code> property.
 * @enum {String}
 * @readonly
 */
SupportedCountry['PostCodeTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "PostCode"
     * @const
     */
    "PostCode": "PostCode",

    /**
     * value: "Zip"
     * @const
     */
    "Zip": "Zip"
};


/**
 * Allowed values for the <code>SupportRegion</code> property.
 * @enum {String}
 * @readonly
 */
SupportedCountry['SupportRegionEnum'] = {

    /**
     * value: "Default"
     * @const
     */
    "Default": "Default",

    /**
     * value: "Spain"
     * @const
     */
    "Spain": "Spain",

    /**
     * value: "Benelux"
     * @const
     */
    "Benelux": "Benelux"
};



export default SupportedCountry;

