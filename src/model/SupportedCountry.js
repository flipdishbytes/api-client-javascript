/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.SupportedCountry = factory(root.Flipdish.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The SupportedCountry model module.
   * @module model/SupportedCountry
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>SupportedCountry</code>.
   * Describes a supported country
   * @alias module:model/SupportedCountry
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>SupportedCountry</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SupportedCountry} obj Optional instance to populate.
   * @return {module:model/SupportedCountry} The populated <code>SupportedCountry</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('CountryCode'))
        obj.CountryCode = ApiClient.convertToType(data['CountryCode'], 'String');
      if (data.hasOwnProperty('Name'))
        obj.Name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('PhoneCode'))
        obj.PhoneCode = ApiClient.convertToType(data['PhoneCode'], 'Number');
      if (data.hasOwnProperty('LanguageCode'))
        obj.LanguageCode = ApiClient.convertToType(data['LanguageCode'], 'String');
      if (data.hasOwnProperty('LanguageName'))
        obj.LanguageName = ApiClient.convertToType(data['LanguageName'], 'String');
      if (data.hasOwnProperty('OtpNumber'))
        obj.OtpNumber = ApiClient.convertToType(data['OtpNumber'], 'String');
      if (data.hasOwnProperty('SupportNumber'))
        obj.SupportNumber = ApiClient.convertToType(data['SupportNumber'], 'String');
      if (data.hasOwnProperty('AddressLayout'))
        obj.AddressLayout = ApiClient.convertToType(data['AddressLayout'], 'String');
      if (data.hasOwnProperty('PostCodeType'))
        obj.PostCodeType = ApiClient.convertToType(data['PostCodeType'], 'String');
      if (data.hasOwnProperty('SupportRegion'))
        obj.SupportRegion = ApiClient.convertToType(data['SupportRegion'], 'String');
    }
    return obj;
  }

  /**
   * Country code
   * @member {String} CountryCode
   */
  exports.prototype.CountryCode = undefined;

  /**
   * Nice display name for a country
   * @member {String} Name
   */
  exports.prototype.Name = undefined;

  /**
   * Country internatinoal phone code prefix
   * @member {Number} PhoneCode
   */
  exports.prototype.PhoneCode = undefined;

  /**
   * Language code
   * @member {String} LanguageCode
   */
  exports.prototype.LanguageCode = undefined;

  /**
   * Language name
   * @member {String} LanguageName
   */
  exports.prototype.LanguageName = undefined;

  /**
   * The phone number provided to Store staff which, in conjunction with a one-time-code, will connect them to the customer.
   * @member {String} OtpNumber
   */
  exports.prototype.OtpNumber = undefined;

  /**
   * The store's support phone number, displayed to customers.
   * @member {String} SupportNumber
   */
  exports.prototype.SupportNumber = undefined;

  /**
   * Address layout format. This changes the layout of address entry forms on the web app, iOS and Android app and should be set based on local custom.
   * @member {module:model/SupportedCountry.AddressLayoutEnum} AddressLayout
   */
  exports.prototype.AddressLayout = undefined;

  /**
   * Post code type
   * @member {module:model/SupportedCountry.PostCodeTypeEnum} PostCodeType
   */
  exports.prototype.PostCodeType = undefined;

  /**
   * Supported region. This is not used.
   * @member {module:model/SupportedCountry.SupportRegionEnum} SupportRegion
   */
  exports.prototype.SupportRegion = undefined;



  /**
   * Allowed values for the <code>AddressLayout</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AddressLayoutEnum = {
    /**
     * value: "BuildingFirst"
     * @const
     */
    BuildingFirst: "BuildingFirst",

    /**
     * value: "AddressFirst"
     * @const
     */
    AddressFirst: "AddressFirst",

    /**
     * value: "FullStreetAddressFirst"
     * @const
     */
    FullStreetAddressFirst: "FullStreetAddressFirst"
  };


  /**
   * Allowed values for the <code>PostCodeType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PostCodeTypeEnum = {
    /**
     * value: "None"
     * @const
     */
    None: "None",

    /**
     * value: "PostCode"
     * @const
     */
    PostCode: "PostCode",

    /**
     * value: "Zip"
     * @const
     */
    Zip: "Zip"
  };


  /**
   * Allowed values for the <code>SupportRegion</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SupportRegionEnum = {
    /**
     * value: "Default"
     * @const
     */
    _Default: "Default",

    /**
     * value: "Spain"
     * @const
     */
    Spain: "Spain",

    /**
     * value: "Benelux"
     * @const
     */
    Benelux: "Benelux"
  };

  return exports;

}));
