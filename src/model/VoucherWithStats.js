/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditNoteDetails from './CreditNoteDetails';
import LumpDiscountDetails from './LumpDiscountDetails';
import PercentDiscountDetails from './PercentDiscountDetails';
import PromotionDetails from './PromotionDetails';
import ValidityPeriod from './ValidityPeriod';

/**
 * The VoucherWithStats model module.
 * @module model/VoucherWithStats
 * @version 1.0.0
 */
class VoucherWithStats {
    /**
     * Constructs a new <code>VoucherWithStats</code>.
     * Voucher With Statistics
     * @alias module:model/VoucherWithStats
     */
    constructor() { 
        
        VoucherWithStats.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VoucherWithStats</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VoucherWithStats} obj Optional instance to populate.
     * @return {module:model/VoucherWithStats} The populated <code>VoucherWithStats</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VoucherWithStats();

            if (data.hasOwnProperty('TotalUsed')) {
                obj['TotalUsed'] = ApiClient.convertToType(data['TotalUsed'], 'Number');
            }
            if (data.hasOwnProperty('TotalCustomers')) {
                obj['TotalCustomers'] = ApiClient.convertToType(data['TotalCustomers'], 'Number');
            }
            if (data.hasOwnProperty('TotalAmountFromOrders')) {
                obj['TotalAmountFromOrders'] = ApiClient.convertToType(data['TotalAmountFromOrders'], 'Number');
            }
            if (data.hasOwnProperty('TotalDiscounted')) {
                obj['TotalDiscounted'] = ApiClient.convertToType(data['TotalDiscounted'], 'Number');
            }
            if (data.hasOwnProperty('AverageOrderSize')) {
                obj['AverageOrderSize'] = ApiClient.convertToType(data['AverageOrderSize'], 'Number');
            }
            if (data.hasOwnProperty('VoucherId')) {
                obj['VoucherId'] = ApiClient.convertToType(data['VoucherId'], 'Number');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('VoucherType')) {
                obj['VoucherType'] = ApiClient.convertToType(data['VoucherType'], 'String');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('StoreNames')) {
                obj['StoreNames'] = ApiClient.convertToType(data['StoreNames'], ['String']);
            }
            if (data.hasOwnProperty('PromotionDetails')) {
                obj['PromotionDetails'] = PromotionDetails.constructFromObject(data['PromotionDetails']);
            }
            if (data.hasOwnProperty('CreditNoteDetails')) {
                obj['CreditNoteDetails'] = CreditNoteDetails.constructFromObject(data['CreditNoteDetails']);
            }
            if (data.hasOwnProperty('LumpDiscountDetails')) {
                obj['LumpDiscountDetails'] = LumpDiscountDetails.constructFromObject(data['LumpDiscountDetails']);
            }
            if (data.hasOwnProperty('PercentDiscountDetails')) {
                obj['PercentDiscountDetails'] = PercentDiscountDetails.constructFromObject(data['PercentDiscountDetails']);
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Stores')) {
                obj['Stores'] = ApiClient.convertToType(data['Stores'], ['Number']);
            }
            if (data.hasOwnProperty('ValidOnOrdersOver')) {
                obj['ValidOnOrdersOver'] = ApiClient.convertToType(data['ValidOnOrdersOver'], 'Number');
            }
            if (data.hasOwnProperty('TakesPriority')) {
                obj['TakesPriority'] = ApiClient.convertToType(data['TakesPriority'], 'Boolean');
            }
            if (data.hasOwnProperty('IsEnabled')) {
                obj['IsEnabled'] = ApiClient.convertToType(data['IsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('IsAutomaticallyApplied')) {
                obj['IsAutomaticallyApplied'] = ApiClient.convertToType(data['IsAutomaticallyApplied'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludeDeliveryFee')) {
                obj['IncludeDeliveryFee'] = ApiClient.convertToType(data['IncludeDeliveryFee'], 'Boolean');
            }
            if (data.hasOwnProperty('IsValidForDeliveryOrders')) {
                obj['IsValidForDeliveryOrders'] = ApiClient.convertToType(data['IsValidForDeliveryOrders'], 'Boolean');
            }
            if (data.hasOwnProperty('IsValidForPickupOrders')) {
                obj['IsValidForPickupOrders'] = ApiClient.convertToType(data['IsValidForPickupOrders'], 'Boolean');
            }
            if (data.hasOwnProperty('IsValidForOrdersPayedOnline')) {
                obj['IsValidForOrdersPayedOnline'] = ApiClient.convertToType(data['IsValidForOrdersPayedOnline'], 'Boolean');
            }
            if (data.hasOwnProperty('IsValidForOrdersPayedByCash')) {
                obj['IsValidForOrdersPayedByCash'] = ApiClient.convertToType(data['IsValidForOrdersPayedByCash'], 'Boolean');
            }
            if (data.hasOwnProperty('IsValidForFirstOrderOnly')) {
                obj['IsValidForFirstOrderOnly'] = ApiClient.convertToType(data['IsValidForFirstOrderOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('IsValidOncePerCustomer')) {
                obj['IsValidOncePerCustomer'] = ApiClient.convertToType(data['IsValidOncePerCustomer'], 'Boolean');
            }
            if (data.hasOwnProperty('IsValidOnlyOnce')) {
                obj['IsValidOnlyOnce'] = ApiClient.convertToType(data['IsValidOnlyOnce'], 'Boolean');
            }
            if (data.hasOwnProperty('IsDiscoverable')) {
                obj['IsDiscoverable'] = ApiClient.convertToType(data['IsDiscoverable'], 'Boolean');
            }
            if (data.hasOwnProperty('ForceDiscount')) {
                obj['ForceDiscount'] = ApiClient.convertToType(data['ForceDiscount'], 'Boolean');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('ExpiryDate')) {
                obj['ExpiryDate'] = ApiClient.convertToType(data['ExpiryDate'], 'Date');
            }
            if (data.hasOwnProperty('ChannelRestrictions')) {
                obj['ChannelRestrictions'] = ApiClient.convertToType(data['ChannelRestrictions'], ['String']);
            }
            if (data.hasOwnProperty('ValidityPeriods')) {
                obj['ValidityPeriods'] = ApiClient.convertToType(data['ValidityPeriods'], [ValidityPeriod]);
            }
            if (data.hasOwnProperty('VoucherSubType')) {
                obj['VoucherSubType'] = ApiClient.convertToType(data['VoucherSubType'], 'String');
            }
            if (data.hasOwnProperty('CustomerId')) {
                obj['CustomerId'] = ApiClient.convertToType(data['CustomerId'], 'Number');
            }
            if (data.hasOwnProperty('MaxRedemptions')) {
                obj['MaxRedemptions'] = ApiClient.convertToType(data['MaxRedemptions'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Total times the voucher was used
 * @member {Number} TotalUsed
 */
VoucherWithStats.prototype['TotalUsed'] = undefined;

/**
 * Total amount of customers who used this voucher
 * @member {Number} TotalCustomers
 */
VoucherWithStats.prototype['TotalCustomers'] = undefined;

/**
 * Total amount of money from orders
 * @member {Number} TotalAmountFromOrders
 */
VoucherWithStats.prototype['TotalAmountFromOrders'] = undefined;

/**
 * Total amount of money given away
 * @member {Number} TotalDiscounted
 */
VoucherWithStats.prototype['TotalDiscounted'] = undefined;

/**
 * Average Order Size
 * @member {Number} AverageOrderSize
 */
VoucherWithStats.prototype['AverageOrderSize'] = undefined;

/**
 * Voucher Id
 * @member {Number} VoucherId
 */
VoucherWithStats.prototype['VoucherId'] = undefined;

/**
 * Voucher Status
 * @member {module:model/VoucherWithStats.StatusEnum} Status
 */
VoucherWithStats.prototype['Status'] = undefined;

/**
 * Voucher Type
 * @member {module:model/VoucherWithStats.VoucherTypeEnum} VoucherType
 */
VoucherWithStats.prototype['VoucherType'] = undefined;

/**
 * Currency of the voucher
 * @member {module:model/VoucherWithStats.CurrencyEnum} Currency
 */
VoucherWithStats.prototype['Currency'] = undefined;

/**
 * Stores that this voucher applies to
 * @member {Array.<String>} StoreNames
 */
VoucherWithStats.prototype['StoreNames'] = undefined;

/**
 * @member {module:model/PromotionDetails} PromotionDetails
 */
VoucherWithStats.prototype['PromotionDetails'] = undefined;

/**
 * @member {module:model/CreditNoteDetails} CreditNoteDetails
 */
VoucherWithStats.prototype['CreditNoteDetails'] = undefined;

/**
 * @member {module:model/LumpDiscountDetails} LumpDiscountDetails
 */
VoucherWithStats.prototype['LumpDiscountDetails'] = undefined;

/**
 * @member {module:model/PercentDiscountDetails} PercentDiscountDetails
 */
VoucherWithStats.prototype['PercentDiscountDetails'] = undefined;

/**
 * Voucher Code
 * @member {String} Code
 */
VoucherWithStats.prototype['Code'] = undefined;

/**
 * Voucher Description (Visible on printout)
 * @member {String} Description
 */
VoucherWithStats.prototype['Description'] = undefined;

/**
 * Stores that this voucher applies to
 * @member {Array.<Number>} Stores
 */
VoucherWithStats.prototype['Stores'] = undefined;

/**
 * Valid on orders on or above
 * @member {Number} ValidOnOrdersOver
 */
VoucherWithStats.prototype['ValidOnOrdersOver'] = undefined;

/**
 * Takes priority
 * @member {Boolean} TakesPriority
 */
VoucherWithStats.prototype['TakesPriority'] = undefined;

/**
 * Is voucher enabled
 * @member {Boolean} IsEnabled
 */
VoucherWithStats.prototype['IsEnabled'] = undefined;

/**
 * Is voucher automatically applied
 * @member {Boolean} IsAutomaticallyApplied
 */
VoucherWithStats.prototype['IsAutomaticallyApplied'] = undefined;

/**
 * Include delivery fees
 * @member {Boolean} IncludeDeliveryFee
 */
VoucherWithStats.prototype['IncludeDeliveryFee'] = undefined;

/**
 * Valid for delivery orders
 * @member {Boolean} IsValidForDeliveryOrders
 */
VoucherWithStats.prototype['IsValidForDeliveryOrders'] = undefined;

/**
 * Valid for pickup orders
 * @member {Boolean} IsValidForPickupOrders
 */
VoucherWithStats.prototype['IsValidForPickupOrders'] = undefined;

/**
 * Valid for orders payed online
 * @member {Boolean} IsValidForOrdersPayedOnline
 */
VoucherWithStats.prototype['IsValidForOrdersPayedOnline'] = undefined;

/**
 * Valid for orders payed in cash
 * @member {Boolean} IsValidForOrdersPayedByCash
 */
VoucherWithStats.prototype['IsValidForOrdersPayedByCash'] = undefined;

/**
 * Valid only on the first order by the customer
 * @member {Boolean} IsValidForFirstOrderOnly
 */
VoucherWithStats.prototype['IsValidForFirstOrderOnly'] = undefined;

/**
 * Valid once per customer
 * @member {Boolean} IsValidOncePerCustomer
 */
VoucherWithStats.prototype['IsValidOncePerCustomer'] = undefined;

/**
 * Valid only once, by any customer (once used cannot be used again by any other customer)
 * @member {Boolean} IsValidOnlyOnce
 */
VoucherWithStats.prototype['IsValidOnlyOnce'] = undefined;

/**
 * Enables the voucher to be offered in the Voucher Discoverability feature
 * @member {Boolean} IsDiscoverable
 */
VoucherWithStats.prototype['IsDiscoverable'] = undefined;

/**
 * Force the discount to be applied which bypasses some menu restrictions
 * @member {Boolean} ForceDiscount
 */
VoucherWithStats.prototype['ForceDiscount'] = undefined;

/**
 * Voucher Starts On (Time in UTC)
 * @member {Date} StartDate
 */
VoucherWithStats.prototype['StartDate'] = undefined;

/**
 * Voucher Expires On (Time in UTC)
 * @member {Date} ExpiryDate
 */
VoucherWithStats.prototype['ExpiryDate'] = undefined;

/**
 * Limit the channels this voucher can be used on
 * @member {Array.<module:model/VoucherWithStats.ChannelRestrictionsEnum>} ChannelRestrictions
 */
VoucherWithStats.prototype['ChannelRestrictions'] = undefined;

/**
 * Periods in which the voucher is valid.  An empty list means the voucher is valid at all times.  When updating the voucher, if this is set to null, the validity periods won't be updated.
 * @member {Array.<module:model/ValidityPeriod>} ValidityPeriods
 */
VoucherWithStats.prototype['ValidityPeriods'] = undefined;

/**
 * Voucher Subtype
 * @member {module:model/VoucherWithStats.VoucherSubTypeEnum} VoucherSubType
 */
VoucherWithStats.prototype['VoucherSubType'] = undefined;

/**
 * Customer UserID
 * @member {Number} CustomerId
 */
VoucherWithStats.prototype['CustomerId'] = undefined;

/**
 * Maximum number of times the voucher can be redeemed (used)
 * @member {Number} MaxRedemptions
 */
VoucherWithStats.prototype['MaxRedemptions'] = undefined;





/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
VoucherWithStats['StatusEnum'] = {

    /**
     * value: "Valid"
     * @const
     */
    "Valid": "Valid",

    /**
     * value: "NotYetValid"
     * @const
     */
    "NotYetValid": "NotYetValid",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Used"
     * @const
     */
    "Used": "Used",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>VoucherType</code> property.
 * @enum {String}
 * @readonly
 */
VoucherWithStats['VoucherTypeEnum'] = {

    /**
     * value: "PercentageDiscount"
     * @const
     */
    "PercentageDiscount": "PercentageDiscount",

    /**
     * value: "LumpDiscount"
     * @const
     */
    "LumpDiscount": "LumpDiscount",

    /**
     * value: "AddItem"
     * @const
     */
    "AddItem": "AddItem",

    /**
     * value: "CreditNote"
     * @const
     */
    "CreditNote": "CreditNote",

    /**
     * value: "FreeDelivery"
     * @const
     */
    "FreeDelivery": "FreeDelivery"
};


/**
 * Allowed values for the <code>Currency</code> property.
 * @enum {String}
 * @readonly
 */
VoucherWithStats['CurrencyEnum'] = {

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "AUD"
     * @const
     */
    "AUD": "AUD",

    /**
     * value: "DJF"
     * @const
     */
    "DJF": "DJF",

    /**
     * value: "ZAR"
     * @const
     */
    "ZAR": "ZAR",

    /**
     * value: "ETB"
     * @const
     */
    "ETB": "ETB",

    /**
     * value: "AED"
     * @const
     */
    "AED": "AED",

    /**
     * value: "BHD"
     * @const
     */
    "BHD": "BHD",

    /**
     * value: "DZD"
     * @const
     */
    "DZD": "DZD",

    /**
     * value: "EGP"
     * @const
     */
    "EGP": "EGP",

    /**
     * value: "IQD"
     * @const
     */
    "IQD": "IQD",

    /**
     * value: "JOD"
     * @const
     */
    "JOD": "JOD",

    /**
     * value: "KWD"
     * @const
     */
    "KWD": "KWD",

    /**
     * value: "LBP"
     * @const
     */
    "LBP": "LBP",

    /**
     * value: "LYD"
     * @const
     */
    "LYD": "LYD",

    /**
     * value: "MAD"
     * @const
     */
    "MAD": "MAD",

    /**
     * value: "OMR"
     * @const
     */
    "OMR": "OMR",

    /**
     * value: "QAR"
     * @const
     */
    "QAR": "QAR",

    /**
     * value: "SAR"
     * @const
     */
    "SAR": "SAR",

    /**
     * value: "SYP"
     * @const
     */
    "SYP": "SYP",

    /**
     * value: "TND"
     * @const
     */
    "TND": "TND",

    /**
     * value: "YER"
     * @const
     */
    "YER": "YER",

    /**
     * value: "CLP"
     * @const
     */
    "CLP": "CLP",

    /**
     * value: "INR"
     * @const
     */
    "INR": "INR",

    /**
     * value: "AZN"
     * @const
     */
    "AZN": "AZN",

    /**
     * value: "RUB"
     * @const
     */
    "RUB": "RUB",

    /**
     * value: "BYN"
     * @const
     */
    "BYN": "BYN",

    /**
     * value: "BGN"
     * @const
     */
    "BGN": "BGN",

    /**
     * value: "NGN"
     * @const
     */
    "NGN": "NGN",

    /**
     * value: "BDT"
     * @const
     */
    "BDT": "BDT",

    /**
     * value: "CNY"
     * @const
     */
    "CNY": "CNY",

    /**
     * value: "BAM"
     * @const
     */
    "BAM": "BAM",

    /**
     * value: "CZK"
     * @const
     */
    "CZK": "CZK",

    /**
     * value: "DKK"
     * @const
     */
    "DKK": "DKK",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "MVR"
     * @const
     */
    "MVR": "MVR",

    /**
     * value: "BTN"
     * @const
     */
    "BTN": "BTN",

    /**
     * value: "XCD"
     * @const
     */
    "XCD": "XCD",

    /**
     * value: "BZD"
     * @const
     */
    "BZD": "BZD",

    /**
     * value: "HKD"
     * @const
     */
    "HKD": "HKD",

    /**
     * value: "IDR"
     * @const
     */
    "IDR": "IDR",

    /**
     * value: "JMD"
     * @const
     */
    "JMD": "JMD",

    /**
     * value: "MYR"
     * @const
     */
    "MYR": "MYR",

    /**
     * value: "NZD"
     * @const
     */
    "NZD": "NZD",

    /**
     * value: "PHP"
     * @const
     */
    "PHP": "PHP",

    /**
     * value: "SGD"
     * @const
     */
    "SGD": "SGD",

    /**
     * value: "TTD"
     * @const
     */
    "TTD": "TTD",

    /**
     * value: "XDR"
     * @const
     */
    "XDR": "XDR",

    /**
     * value: "ARS"
     * @const
     */
    "ARS": "ARS",

    /**
     * value: "BOB"
     * @const
     */
    "BOB": "BOB",

    /**
     * value: "COP"
     * @const
     */
    "COP": "COP",

    /**
     * value: "CRC"
     * @const
     */
    "CRC": "CRC",

    /**
     * value: "CUP"
     * @const
     */
    "CUP": "CUP",

    /**
     * value: "DOP"
     * @const
     */
    "DOP": "DOP",

    /**
     * value: "GTQ"
     * @const
     */
    "GTQ": "GTQ",

    /**
     * value: "HNL"
     * @const
     */
    "HNL": "HNL",

    /**
     * value: "MXN"
     * @const
     */
    "MXN": "MXN",

    /**
     * value: "NIO"
     * @const
     */
    "NIO": "NIO",

    /**
     * value: "PAB"
     * @const
     */
    "PAB": "PAB",

    /**
     * value: "PEN"
     * @const
     */
    "PEN": "PEN",

    /**
     * value: "PYG"
     * @const
     */
    "PYG": "PYG",

    /**
     * value: "UYU"
     * @const
     */
    "UYU": "UYU",

    /**
     * value: "VEF"
     * @const
     */
    "VEF": "VEF",

    /**
     * value: "IRR"
     * @const
     */
    "IRR": "IRR",

    /**
     * value: "XOF"
     * @const
     */
    "XOF": "XOF",

    /**
     * value: "CDF"
     * @const
     */
    "CDF": "CDF",

    /**
     * value: "XAF"
     * @const
     */
    "XAF": "XAF",

    /**
     * value: "HTG"
     * @const
     */
    "HTG": "HTG",

    /**
     * value: "ILS"
     * @const
     */
    "ILS": "ILS",

    /**
     * value: "HRK"
     * @const
     */
    "HRK": "HRK",

    /**
     * value: "HUF"
     * @const
     */
    "HUF": "HUF",

    /**
     * value: "AMD"
     * @const
     */
    "AMD": "AMD",

    /**
     * value: "ISK"
     * @const
     */
    "ISK": "ISK",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "GEL"
     * @const
     */
    "GEL": "GEL",

    /**
     * value: "KZT"
     * @const
     */
    "KZT": "KZT",

    /**
     * value: "KHR"
     * @const
     */
    "KHR": "KHR",

    /**
     * value: "KRW"
     * @const
     */
    "KRW": "KRW",

    /**
     * value: "KGS"
     * @const
     */
    "KGS": "KGS",

    /**
     * value: "LAK"
     * @const
     */
    "LAK": "LAK",

    /**
     * value: "MKD"
     * @const
     */
    "MKD": "MKD",

    /**
     * value: "MNT"
     * @const
     */
    "MNT": "MNT",

    /**
     * value: "BND"
     * @const
     */
    "BND": "BND",

    /**
     * value: "MMK"
     * @const
     */
    "MMK": "MMK",

    /**
     * value: "NOK"
     * @const
     */
    "NOK": "NOK",

    /**
     * value: "NPR"
     * @const
     */
    "NPR": "NPR",

    /**
     * value: "PKR"
     * @const
     */
    "PKR": "PKR",

    /**
     * value: "PLN"
     * @const
     */
    "PLN": "PLN",

    /**
     * value: "AFN"
     * @const
     */
    "AFN": "AFN",

    /**
     * value: "BRL"
     * @const
     */
    "BRL": "BRL",

    /**
     * value: "MDL"
     * @const
     */
    "MDL": "MDL",

    /**
     * value: "RON"
     * @const
     */
    "RON": "RON",

    /**
     * value: "RWF"
     * @const
     */
    "RWF": "RWF",

    /**
     * value: "SEK"
     * @const
     */
    "SEK": "SEK",

    /**
     * value: "LKR"
     * @const
     */
    "LKR": "LKR",

    /**
     * value: "SOS"
     * @const
     */
    "SOS": "SOS",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "RSD"
     * @const
     */
    "RSD": "RSD",

    /**
     * value: "KES"
     * @const
     */
    "KES": "KES",

    /**
     * value: "TJS"
     * @const
     */
    "TJS": "TJS",

    /**
     * value: "THB"
     * @const
     */
    "THB": "THB",

    /**
     * value: "ERN"
     * @const
     */
    "ERN": "ERN",

    /**
     * value: "TMT"
     * @const
     */
    "TMT": "TMT",

    /**
     * value: "BWP"
     * @const
     */
    "BWP": "BWP",

    /**
     * value: "TRY"
     * @const
     */
    "TRY": "TRY",

    /**
     * value: "UAH"
     * @const
     */
    "UAH": "UAH",

    /**
     * value: "UZS"
     * @const
     */
    "UZS": "UZS",

    /**
     * value: "VND"
     * @const
     */
    "VND": "VND",

    /**
     * value: "MOP"
     * @const
     */
    "MOP": "MOP",

    /**
     * value: "TWD"
     * @const
     */
    "TWD": "TWD",

    /**
     * value: "BMD"
     * @const
     */
    "BMD": "BMD"
};


/**
 * Allowed values for the <code>ChannelRestrictions</code> property.
 * @enum {String}
 * @readonly
 */
VoucherWithStats['ChannelRestrictionsEnum'] = {

    /**
     * value: "Ios"
     * @const
     */
    "Ios": "Ios",

    /**
     * value: "Android"
     * @const
     */
    "Android": "Android",

    /**
     * value: "Web"
     * @const
     */
    "Web": "Web",

    /**
     * value: "Kiosk"
     * @const
     */
    "Kiosk": "Kiosk",

    /**
     * value: "Pos"
     * @const
     */
    "Pos": "Pos",

    /**
     * value: "Google"
     * @const
     */
    "Google": "Google"
};


/**
 * Allowed values for the <code>VoucherSubType</code> property.
 * @enum {String}
 * @readonly
 */
VoucherWithStats['VoucherSubTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "SignUp"
     * @const
     */
    "SignUp": "SignUp",

    /**
     * value: "Loyalty"
     * @const
     */
    "Loyalty": "Loyalty",

    /**
     * value: "Loyalty25"
     * @const
     */
    "Loyalty25": "Loyalty25",

    /**
     * value: "Retention"
     * @const
     */
    "Retention": "Retention",

    /**
     * value: "SecondaryRetention"
     * @const
     */
    "SecondaryRetention": "SecondaryRetention",

    /**
     * value: "Custom"
     * @const
     */
    "Custom": "Custom"
};



export default VoucherWithStats;

