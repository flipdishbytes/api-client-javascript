/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MenuSection from './MenuSection';
import MenuTaxRate from './MenuTaxRate';

/**
 * The Menu model module.
 * @module model/Menu
 * @version 1.0.0
 */
class Menu {
    /**
     * Constructs a new <code>Menu</code>.
     * Menu
     * @alias module:model/Menu
     */
    constructor() { 
        
        Menu.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Menu</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Menu} obj Optional instance to populate.
     * @return {module:model/Menu} The populated <code>Menu</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Menu();

            if (data.hasOwnProperty('MenuId')) {
                obj['MenuId'] = ApiClient.convertToType(data['MenuId'], 'Number');
            }
            if (data.hasOwnProperty('ModifiedTime')) {
                obj['ModifiedTime'] = ApiClient.convertToType(data['ModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('VersionNumber')) {
                obj['VersionNumber'] = ApiClient.convertToType(data['VersionNumber'], 'Number');
            }
            if (data.hasOwnProperty('ImageName')) {
                obj['ImageName'] = ApiClient.convertToType(data['ImageName'], 'String');
            }
            if (data.hasOwnProperty('ImageUrl')) {
                obj['ImageUrl'] = ApiClient.convertToType(data['ImageUrl'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Locked')) {
                obj['Locked'] = ApiClient.convertToType(data['Locked'], 'Boolean');
            }
            if (data.hasOwnProperty('MenuSections')) {
                obj['MenuSections'] = ApiClient.convertToType(data['MenuSections'], [MenuSection]);
            }
            if (data.hasOwnProperty('TaxRates')) {
                obj['TaxRates'] = ApiClient.convertToType(data['TaxRates'], [MenuTaxRate]);
            }
            if (data.hasOwnProperty('AppId')) {
                obj['AppId'] = ApiClient.convertToType(data['AppId'], 'String');
            }
            if (data.hasOwnProperty('DisplaySectionLinks')) {
                obj['DisplaySectionLinks'] = ApiClient.convertToType(data['DisplaySectionLinks'], 'Boolean');
            }
            if (data.hasOwnProperty('MenuSectionBehaviour')) {
                obj['MenuSectionBehaviour'] = ApiClient.convertToType(data['MenuSectionBehaviour'], 'String');
            }
            if (data.hasOwnProperty('TaxType')) {
                obj['TaxType'] = ApiClient.convertToType(data['TaxType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Menu identifier
 * @member {Number} MenuId
 */
Menu.prototype['MenuId'] = undefined;

/**
 * Last modified time
 * @member {Date} ModifiedTime
 */
Menu.prototype['ModifiedTime'] = undefined;

/**
 * Menu version
 * @member {Number} VersionNumber
 */
Menu.prototype['VersionNumber'] = undefined;

/**
 * Image Name
 * @member {String} ImageName
 */
Menu.prototype['ImageName'] = undefined;

/**
 * Image url
 * @member {String} ImageUrl
 */
Menu.prototype['ImageUrl'] = undefined;

/**
 * Name of Menu, only shown in portal
 * @member {String} Name
 */
Menu.prototype['Name'] = undefined;

/**
 * Locked: is menu locked against modifcation
 * @member {Boolean} Locked
 */
Menu.prototype['Locked'] = undefined;

/**
 * Menu sections (startes, main etc)
 * @member {Array.<module:model/MenuSection>} MenuSections
 */
Menu.prototype['MenuSections'] = undefined;

/**
 * Menu tax rates
 * @member {Array.<module:model/MenuTaxRate>} TaxRates
 */
Menu.prototype['TaxRates'] = undefined;

/**
 * Identifier of App the menu is attached to
 * @member {String} AppId
 */
Menu.prototype['AppId'] = undefined;

/**
 * Display menu section link on UI
 * @member {Boolean} DisplaySectionLinks
 */
Menu.prototype['DisplaySectionLinks'] = undefined;

/**
 * Menu section behaviour
 * @member {module:model/Menu.MenuSectionBehaviourEnum} MenuSectionBehaviour
 */
Menu.prototype['MenuSectionBehaviour'] = undefined;

/**
 * Tax type
 * @member {module:model/Menu.TaxTypeEnum} TaxType
 */
Menu.prototype['TaxType'] = undefined;





/**
 * Allowed values for the <code>MenuSectionBehaviour</code> property.
 * @enum {String}
 * @readonly
 */
Menu['MenuSectionBehaviourEnum'] = {

    /**
     * value: "ExpandSingle"
     * @const
     */
    "ExpandSingle": "ExpandSingle",

    /**
     * value: "ExpandMultiple"
     * @const
     */
    "ExpandMultiple": "ExpandMultiple"
};


/**
 * Allowed values for the <code>TaxType</code> property.
 * @enum {String}
 * @readonly
 */
Menu['TaxTypeEnum'] = {

    /**
     * value: "IncludedInBasePrice"
     * @const
     */
    "IncludedInBasePrice": "IncludedInBasePrice",

    /**
     * value: "ExcludedFromBasePrice"
     * @const
     */
    "ExcludedFromBasePrice": "ExcludedFromBasePrice"
};



export default Menu;

