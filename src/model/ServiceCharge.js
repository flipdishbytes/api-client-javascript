/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceCharge model module.
 * @module model/ServiceCharge
 * @version 1.0.0
 */
class ServiceCharge {
    /**
     * Constructs a new <code>ServiceCharge</code>.
     * Store Service Charge
     * @alias module:model/ServiceCharge
     */
    constructor() { 
        
        ServiceCharge.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceCharge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceCharge} obj Optional instance to populate.
     * @return {module:model/ServiceCharge} The populated <code>ServiceCharge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceCharge();

            if (data.hasOwnProperty('StoreId')) {
                obj['StoreId'] = ApiClient.convertToType(data['StoreId'], 'Number');
            }
            if (data.hasOwnProperty('PercentageValue')) {
                obj['PercentageValue'] = ApiClient.convertToType(data['PercentageValue'], 'Number');
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('IsOptional')) {
                obj['IsOptional'] = ApiClient.convertToType(data['IsOptional'], 'Boolean');
            }
            if (data.hasOwnProperty('DisplayWithProcessingFee')) {
                obj['DisplayWithProcessingFee'] = ApiClient.convertToType(data['DisplayWithProcessingFee'], 'Boolean');
            }
            if (data.hasOwnProperty('IncludesVouchers')) {
                obj['IncludesVouchers'] = ApiClient.convertToType(data['IncludesVouchers'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Store identifier
 * @member {Number} StoreId
 */
ServiceCharge.prototype['StoreId'] = undefined;

/**
 * The Default Service Charge Value
 * @member {Number} PercentageValue
 */
ServiceCharge.prototype['PercentageValue'] = undefined;

/**
 * Enable Service Charge for store true(on) / false(off)
 * @member {Boolean} Enabled
 */
ServiceCharge.prototype['Enabled'] = undefined;

/**
 * Sets the service charge to be optional
 * @member {Boolean} IsOptional
 */
ServiceCharge.prototype['IsOptional'] = undefined;

/**
 * Display service charge together with processing fee
 * @member {Boolean} DisplayWithProcessingFee
 */
ServiceCharge.prototype['DisplayWithProcessingFee'] = undefined;

/**
 * If true, will include voucher value in calculation   i.e 10E order with 1E service charge and 5E voucher would have service charge at 0.5E
 * @member {Boolean} IncludesVouchers
 */
ServiceCharge.prototype['IncludesVouchers'] = undefined;






export default ServiceCharge;

