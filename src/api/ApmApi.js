/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestApiArrayResultApmCurrencyDataPoint from '../model/RestApiArrayResultApmCurrencyDataPoint';
import RestApiArrayResultApmDataPoint from '../model/RestApiArrayResultApmDataPoint';
import RestApiArrayResultApmHourlyDataPoint from '../model/RestApiArrayResultApmHourlyDataPoint';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultPhoneCall from '../model/RestApiPaginationResultPhoneCall';
import RestApiResultApmStatistics from '../model/RestApiResultApmStatistics';
import RestApiResultApmStatus from '../model/RestApiResultApmStatus';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Apm service.
* @module api/ApmApi
* @version 1.0.0
*/
export default class ApmApi {

    /**
    * Constructs a new ApmApi. 
    * @alias module:api/ApmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getApmStatus operation.
     * @callback module:api/ApmApi~getApmStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApmStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApmApi~getApmStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApmStatus}
     */
    getApmStatus(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getApmStatus");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultApmStatus;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasicStatistics operation.
     * @callback module:api/ApmApi~getBasicStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApmStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getBasicStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApmStatistics}
     */
    getBasicStatistics(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBasicStatistics");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'storeId': this.apiClient.buildCollectionParam(opts['storeId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultApmStatistics;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCalendarWeekStatistics operation.
     * @callback module:api/ApmApi~getCalendarWeekStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultApmHourlyDataPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getCalendarWeekStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultApmHourlyDataPoint}
     */
    getCalendarWeekStatistics(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCalendarWeekStatistics");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'storeId': this.apiClient.buildCollectionParam(opts['storeId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultApmHourlyDataPoint;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/statistics/calendar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallsStatistics operation.
     * @callback module:api/ApmApi~getCallsStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultApmDataPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} aggregateDataBy 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dataPointLimit 
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getCallsStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultApmDataPoint}
     */
    getCallsStatistics(appId, aggregateDataBy, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCallsStatistics");
      }
      // verify the required parameter 'aggregateDataBy' is set
      if (aggregateDataBy === undefined || aggregateDataBy === null) {
        throw new Error("Missing the required parameter 'aggregateDataBy' when calling getCallsStatistics");
      }

      let pathParams = {
        'appId': appId,
        'aggregateDataBy': aggregateDataBy
      };
      let queryParams = {
        'dataPointLimit': opts['dataPointLimit'],
        'storeId': this.apiClient.buildCollectionParam(opts['storeId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultApmDataPoint;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/statistics/calls/{aggregateDataBy}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderStatistics operation.
     * @callback module:api/ApmApi~getOrderStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultApmCurrencyDataPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} aggregateDataBy 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dataPointLimit 
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getOrderStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultApmCurrencyDataPoint}
     */
    getOrderStatistics(appId, aggregateDataBy, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrderStatistics");
      }
      // verify the required parameter 'aggregateDataBy' is set
      if (aggregateDataBy === undefined || aggregateDataBy === null) {
        throw new Error("Missing the required parameter 'aggregateDataBy' when calling getOrderStatistics");
      }

      let pathParams = {
        'appId': appId,
        'aggregateDataBy': aggregateDataBy
      };
      let queryParams = {
        'dataPointLimit': opts['dataPointLimit'],
        'storeId': this.apiClient.buildCollectionParam(opts['storeId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultApmCurrencyDataPoint;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/statistics/orders/{aggregateDataBy}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaginatedCallList operation.
     * @callback module:api/ApmApi~getPaginatedCallListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPhoneCall} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getPaginatedCallListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPhoneCall}
     */
    getPaginatedCallList(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPaginatedCallList");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'storeId': this.apiClient.buildCollectionParam(opts['storeId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultPhoneCall;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
