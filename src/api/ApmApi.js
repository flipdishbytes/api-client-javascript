/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestApiArrayResultApmCurrencyDataPoint', 'model/RestApiArrayResultApmDataPoint', 'model/RestApiArrayResultApmHourlyDataPoint', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultPhoneCall', 'model/RestApiResultApmStatistics', 'model/RestApiResultApmStatus', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestApiArrayResultApmCurrencyDataPoint'), require('../model/RestApiArrayResultApmDataPoint'), require('../model/RestApiArrayResultApmHourlyDataPoint'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultPhoneCall'), require('../model/RestApiResultApmStatistics'), require('../model/RestApiResultApmStatus'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.ApmApi = factory(root.Flipdish.ApiClient, root.Flipdish.RestApiArrayResultApmCurrencyDataPoint, root.Flipdish.RestApiArrayResultApmDataPoint, root.Flipdish.RestApiArrayResultApmHourlyDataPoint, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiPaginationResultPhoneCall, root.Flipdish.RestApiResultApmStatistics, root.Flipdish.RestApiResultApmStatus, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, RestApiArrayResultApmCurrencyDataPoint, RestApiArrayResultApmDataPoint, RestApiArrayResultApmHourlyDataPoint, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultPhoneCall, RestApiResultApmStatistics, RestApiResultApmStatus, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * Apm service.
   * @module api/ApmApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ApmApi. 
   * @alias module:api/ApmApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getApmStatus operation.
     * @callback module:api/ApmApi~getApmStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApmStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ApmApi~getApmStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApmStatus}
     */
    this.getApmStatus = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getApmStatus");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultApmStatus;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasicStatistics operation.
     * @callback module:api/ApmApi~getBasicStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApmStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getBasicStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApmStatistics}
     */
    this.getBasicStatistics = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBasicStatistics");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'storeId': {
          value: opts['storeId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultApmStatistics;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/statistics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCalendarWeekStatistics operation.
     * @callback module:api/ApmApi~getCalendarWeekStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultApmHourlyDataPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getCalendarWeekStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultApmHourlyDataPoint}
     */
    this.getCalendarWeekStatistics = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCalendarWeekStatistics");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'storeId': {
          value: opts['storeId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultApmHourlyDataPoint;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/statistics/calendar', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallsStatistics operation.
     * @callback module:api/ApmApi~getCallsStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultApmDataPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} aggregateDataBy 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dataPointLimit 
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getCallsStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultApmDataPoint}
     */
    this.getCallsStatistics = function(appId, aggregateDataBy, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCallsStatistics");
      }

      // verify the required parameter 'aggregateDataBy' is set
      if (aggregateDataBy === undefined || aggregateDataBy === null) {
        throw new Error("Missing the required parameter 'aggregateDataBy' when calling getCallsStatistics");
      }


      var pathParams = {
        'appId': appId,
        'aggregateDataBy': aggregateDataBy
      };
      var queryParams = {
        'dataPointLimit': opts['dataPointLimit'],
      };
      var collectionQueryParams = {
        'storeId': {
          value: opts['storeId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultApmDataPoint;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/statistics/calls/{aggregateDataBy}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderStatistics operation.
     * @callback module:api/ApmApi~getOrderStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultApmCurrencyDataPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} aggregateDataBy 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dataPointLimit 
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getOrderStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultApmCurrencyDataPoint}
     */
    this.getOrderStatistics = function(appId, aggregateDataBy, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrderStatistics");
      }

      // verify the required parameter 'aggregateDataBy' is set
      if (aggregateDataBy === undefined || aggregateDataBy === null) {
        throw new Error("Missing the required parameter 'aggregateDataBy' when calling getOrderStatistics");
      }


      var pathParams = {
        'appId': appId,
        'aggregateDataBy': aggregateDataBy
      };
      var queryParams = {
        'dataPointLimit': opts['dataPointLimit'],
      };
      var collectionQueryParams = {
        'storeId': {
          value: opts['storeId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultApmCurrencyDataPoint;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/statistics/orders/{aggregateDataBy}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaginatedCallList operation.
     * @callback module:api/ApmApi~getPaginatedCallListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPhoneCall} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/ApmApi~getPaginatedCallListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPhoneCall}
     */
    this.getPaginatedCallList = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPaginatedCallList");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'storeId': {
          value: opts['storeId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultPhoneCall;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/apm/calls', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
