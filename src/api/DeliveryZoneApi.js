/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeliveryZoneBase', 'model/RestApiArrayResultDeliveryZone', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultDeliveryZone', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeliveryZoneBase'), require('../model/RestApiArrayResultDeliveryZone'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultDeliveryZone'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.DeliveryZoneApi = factory(root.Flipdish.ApiClient, root.Flipdish.DeliveryZoneBase, root.Flipdish.RestApiArrayResultDeliveryZone, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultDeliveryZone, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, DeliveryZoneBase, RestApiArrayResultDeliveryZone, RestApiErrorResult, RestApiForbiddenResult, RestApiResultDeliveryZone, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * DeliveryZone service.
   * @module api/DeliveryZoneApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DeliveryZoneApi. 
   * @alias module:api/DeliveryZoneApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addDeliveryZone operation.
     * @callback module:api/DeliveryZoneApi~addDeliveryZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultDeliveryZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a delivery zone to the store id
     * @param {Number} storeId Store Id to which the delivery zone will be added
     * @param {module:model/DeliveryZoneBase} deliveryZoneBase Optional delivery zone, if not supplied will create a default zone
     * @param {module:api/DeliveryZoneApi~addDeliveryZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultDeliveryZone}
     */
    this.addDeliveryZone = function(storeId, deliveryZoneBase, callback) {
      var postBody = deliveryZoneBase;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling addDeliveryZone");
      }

      // verify the required parameter 'deliveryZoneBase' is set
      if (deliveryZoneBase === undefined || deliveryZoneBase === null) {
        throw new Error("Missing the required parameter 'deliveryZoneBase' when calling addDeliveryZone");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultDeliveryZone;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/deliveryzones', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryZones operation.
     * @callback module:api/DeliveryZoneApi~getDeliveryZonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultDeliveryZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the delivery zones associated with a store
     * @param {Number} storeId Store Id to which the delivery zones are associated
     * @param {module:api/DeliveryZoneApi~getDeliveryZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultDeliveryZone}
     */
    this.getDeliveryZones = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getDeliveryZones");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultDeliveryZone;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/deliveryzones', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDeliveryZone operation.
     * @callback module:api/DeliveryZoneApi~removeDeliveryZoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the existing delivery zone
     * @param {Number} storeId Store Id to which the delivery zone belongs
     * @param {Number} deliveryZoneId Delivery zone id to be removed
     * @param {module:api/DeliveryZoneApi~removeDeliveryZoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeDeliveryZone = function(storeId, deliveryZoneId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling removeDeliveryZone");
      }

      // verify the required parameter 'deliveryZoneId' is set
      if (deliveryZoneId === undefined || deliveryZoneId === null) {
        throw new Error("Missing the required parameter 'deliveryZoneId' when calling removeDeliveryZone");
      }


      var pathParams = {
        'storeId': storeId,
        'deliveryZoneId': deliveryZoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeliveryZone operation.
     * @callback module:api/DeliveryZoneApi~updateDeliveryZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultDeliveryZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the existing delivery zone
     * @param {Number} storeId Store Id to which the delivery zone belongs
     * @param {Number} deliveryZoneId Delivery zone id to be updated
     * @param {module:model/DeliveryZoneBase} deliveryZone Delta of delivery zone parameters that need to be changed
     * @param {module:api/DeliveryZoneApi~updateDeliveryZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultDeliveryZone}
     */
    this.updateDeliveryZone = function(storeId, deliveryZoneId, deliveryZone, callback) {
      var postBody = deliveryZone;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateDeliveryZone");
      }

      // verify the required parameter 'deliveryZoneId' is set
      if (deliveryZoneId === undefined || deliveryZoneId === null) {
        throw new Error("Missing the required parameter 'deliveryZoneId' when calling updateDeliveryZone");
      }

      // verify the required parameter 'deliveryZone' is set
      if (deliveryZone === undefined || deliveryZone === null) {
        throw new Error("Missing the required parameter 'deliveryZone' when calling updateDeliveryZone");
      }


      var pathParams = {
        'storeId': storeId,
        'deliveryZoneId': deliveryZoneId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultDeliveryZone;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
