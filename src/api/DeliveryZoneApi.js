/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeliveryZoneBase from '../model/DeliveryZoneBase';
import RestApiArrayResultDeliveryZone from '../model/RestApiArrayResultDeliveryZone';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultDeliveryZone from '../model/RestApiResultDeliveryZone';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* DeliveryZone service.
* @module api/DeliveryZoneApi
* @version 1.0.0
*/
export default class DeliveryZoneApi {

    /**
    * Constructs a new DeliveryZoneApi. 
    * @alias module:api/DeliveryZoneApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDeliveryZone operation.
     * @callback module:api/DeliveryZoneApi~addDeliveryZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultDeliveryZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/DeliveryZoneBase} deliveryZoneBase 
     * @param {module:api/DeliveryZoneApi~addDeliveryZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultDeliveryZone}
     */
    addDeliveryZone(storeId, deliveryZoneBase, callback) {
      let postBody = deliveryZoneBase;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling addDeliveryZone");
      }
      // verify the required parameter 'deliveryZoneBase' is set
      if (deliveryZoneBase === undefined || deliveryZoneBase === null) {
        throw new Error("Missing the required parameter 'deliveryZoneBase' when calling addDeliveryZone");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultDeliveryZone;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/deliveryzones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryZones operation.
     * @callback module:api/DeliveryZoneApi~getDeliveryZonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultDeliveryZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/DeliveryZoneApi~getDeliveryZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultDeliveryZone}
     */
    getDeliveryZones(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getDeliveryZones");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultDeliveryZone;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/deliveryzones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDeliveryZone operation.
     * @callback module:api/DeliveryZoneApi~removeDeliveryZoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {Number} deliveryZoneId 
     * @param {module:api/DeliveryZoneApi~removeDeliveryZoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeDeliveryZone(storeId, deliveryZoneId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling removeDeliveryZone");
      }
      // verify the required parameter 'deliveryZoneId' is set
      if (deliveryZoneId === undefined || deliveryZoneId === null) {
        throw new Error("Missing the required parameter 'deliveryZoneId' when calling removeDeliveryZone");
      }

      let pathParams = {
        'storeId': storeId,
        'deliveryZoneId': deliveryZoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeliveryZone operation.
     * @callback module:api/DeliveryZoneApi~updateDeliveryZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultDeliveryZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {Number} deliveryZoneId 
     * @param {module:model/DeliveryZoneBase} deliveryZone 
     * @param {module:api/DeliveryZoneApi~updateDeliveryZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultDeliveryZone}
     */
    updateDeliveryZone(storeId, deliveryZoneId, deliveryZone, callback) {
      let postBody = deliveryZone;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateDeliveryZone");
      }
      // verify the required parameter 'deliveryZoneId' is set
      if (deliveryZoneId === undefined || deliveryZoneId === null) {
        throw new Error("Missing the required parameter 'deliveryZoneId' when calling updateDeliveryZone");
      }
      // verify the required parameter 'deliveryZone' is set
      if (deliveryZone === undefined || deliveryZone === null) {
        throw new Error("Missing the required parameter 'deliveryZone' when calling updateDeliveryZone");
      }

      let pathParams = {
        'storeId': storeId,
        'deliveryZoneId': deliveryZoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultDeliveryZone;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/deliveryzones/{deliveryZoneId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
