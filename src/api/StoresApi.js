/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BusinessHoursOverrideBase from '../model/BusinessHoursOverrideBase';
import BusinessHoursPeriodBase from '../model/BusinessHoursPeriodBase';
import Coordinates from '../model/Coordinates';
import LeadTime from '../model/LeadTime';
import PreOrderConfig from '../model/PreOrderConfig';
import RestApiArrayResultBusinessHoursPeriod from '../model/RestApiArrayResultBusinessHoursPeriod';
import RestApiArrayResultPreOrderTime from '../model/RestApiArrayResultPreOrderTime';
import RestApiArrayResultProcessingFeeConfig from '../model/RestApiArrayResultProcessingFeeConfig';
import RestApiArrayResultRestApiDefaultResponse from '../model/RestApiArrayResultRestApiDefaultResponse';
import RestApiArrayResultStoreDeliveryZoneFeeConfig from '../model/RestApiArrayResultStoreDeliveryZoneFeeConfig';
import RestApiArrayResultStoreStatistics from '../model/RestApiArrayResultStoreStatistics';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultBusinessHoursOverride from '../model/RestApiPaginationResultBusinessHoursOverride';
import RestApiPaginationResultStore from '../model/RestApiPaginationResultStore';
import RestApiPaginationResultStoreHeader from '../model/RestApiPaginationResultStoreHeader';
import RestApiPaginationResultStoreValidationConfig from '../model/RestApiPaginationResultStoreValidationConfig';
import RestApiResultAssignedBankAccount from '../model/RestApiResultAssignedBankAccount';
import RestApiResultBusinessHoursOverride from '../model/RestApiResultBusinessHoursOverride';
import RestApiResultBusinessHoursPeriod from '../model/RestApiResultBusinessHoursPeriod';
import RestApiResultCoordinates from '../model/RestApiResultCoordinates';
import RestApiResultOrderLeadTimes from '../model/RestApiResultOrderLeadTimes';
import RestApiResultPreOrderConfig from '../model/RestApiResultPreOrderConfig';
import RestApiResultProcessingFeeConfig from '../model/RestApiResultProcessingFeeConfig';
import RestApiResultServiceCharge from '../model/RestApiResultServiceCharge';
import RestApiResultStore from '../model/RestApiResultStore';
import RestApiResultStoreAddress from '../model/RestApiResultStoreAddress';
import RestApiResultStoreEndOfDayReport from '../model/RestApiResultStoreEndOfDayReport';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import ServiceCharge from '../model/ServiceCharge';
import StoreAddressBase from '../model/StoreAddressBase';
import StoreAddressForm from '../model/StoreAddressForm';
import StoreBase from '../model/StoreBase';
import StoreCloneSettings from '../model/StoreCloneSettings';
import StoreCreateBase from '../model/StoreCreateBase';
import StoreDeliveryZoneFeeConfigUpdateRequest from '../model/StoreDeliveryZoneFeeConfigUpdateRequest';
import StoreFeeConfig from '../model/StoreFeeConfig';

/**
* Stores service.
* @module api/StoresApi
* @version 1.0.0
*/
export default class StoresApi {

    /**
    * Constructs a new StoresApi. 
    * @alias module:api/StoresApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the archiveStore operation.
     * @callback module:api/StoresApi~archiveStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/StoresApi~archiveStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archiveStore(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling archiveStore");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['Data', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignMenu operation.
     * @callback module:api/StoresApi~assignMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {Number} menuId 
     * @param {module:api/StoresApi~assignMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRestApiDefaultResponse}
     */
    assignMenu(storeId, menuId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling assignMenu");
      }
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling assignMenu");
      }

      let pathParams = {
        'storeId': storeId,
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultRestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/menu/{menuId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneStore operation.
     * @callback module:api/StoresApi~cloneStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/StoreCloneSettings} settings 
     * @param {module:api/StoresApi~cloneStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStore}
     */
    cloneStore(storeId, settings, callback) {
      let postBody = settings;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling cloneStore");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling cloneStore");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStore;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configureStoreServiceCharge operation.
     * @callback module:api/StoresApi~configureStoreServiceChargeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultServiceCharge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/ServiceCharge} serviceCharge 
     * @param {module:api/StoresApi~configureStoreServiceChargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultServiceCharge}
     */
    configureStoreServiceCharge(storeId, serviceCharge, callback) {
      let postBody = serviceCharge;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling configureStoreServiceCharge");
      }
      // verify the required parameter 'serviceCharge' is set
      if (serviceCharge === undefined || serviceCharge === null) {
        throw new Error("Missing the required parameter 'serviceCharge' when calling configureStoreServiceCharge");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultServiceCharge;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/servicecharge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBusinessHoursOverrideByStoreId operation.
     * @callback module:api/StoresApi~createBusinessHoursOverrideByStoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultBusinessHoursOverride} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/BusinessHoursOverrideBase} businessHoursOverride 
     * @param {module:api/StoresApi~createBusinessHoursOverrideByStoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultBusinessHoursOverride}
     */
    createBusinessHoursOverrideByStoreId(storeId, businessHoursOverride, callback) {
      let postBody = businessHoursOverride;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling createBusinessHoursOverrideByStoreId");
      }
      // verify the required parameter 'businessHoursOverride' is set
      if (businessHoursOverride === undefined || businessHoursOverride === null) {
        throw new Error("Missing the required parameter 'businessHoursOverride' when calling createBusinessHoursOverrideByStoreId");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultBusinessHoursOverride;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/businesshoursoverrides', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStore operation.
     * @callback module:api/StoresApi~createStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeGroupId 
     * @param {module:model/StoreCreateBase} store 
     * @param {module:api/StoresApi~createStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStore}
     */
    createStore(storeGroupId, store, callback) {
      let postBody = store;
      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling createStore");
      }
      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling createStore");
      }

      let pathParams = {
      };
      let queryParams = {
        'storeGroupId': storeGroupId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStore;
      return this.apiClient.callApi(
        '/api/v1.0/stores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStoreInProperty operation.
     * @callback module:api/StoresApi~createStoreInPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeGroupId 
     * @param {String} propertyId 
     * @param {module:model/StoreCreateBase} store 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.autoAssignMenu 
     * @param {module:api/StoresApi~createStoreInPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStore}
     */
    createStoreInProperty(storeGroupId, propertyId, store, opts, callback) {
      opts = opts || {};
      let postBody = store;
      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling createStoreInProperty");
      }
      // verify the required parameter 'propertyId' is set
      if (propertyId === undefined || propertyId === null) {
        throw new Error("Missing the required parameter 'propertyId' when calling createStoreInProperty");
      }
      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling createStoreInProperty");
      }

      let pathParams = {
        'propertyId': propertyId
      };
      let queryParams = {
        'storeGroupId': storeGroupId,
        'autoAssignMenu': opts['autoAssignMenu']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStore;
      return this.apiClient.callApi(
        '/api/v1.0/properties/{propertyId}/stores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBusinessHoursOverride operation.
     * @callback module:api/StoresApi~deleteBusinessHoursOverrideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {Number} businessHoursOverrideId 
     * @param {module:api/StoresApi~deleteBusinessHoursOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRestApiDefaultResponse}
     */
    deleteBusinessHoursOverride(storeId, businessHoursOverrideId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteBusinessHoursOverride");
      }
      // verify the required parameter 'businessHoursOverrideId' is set
      if (businessHoursOverrideId === undefined || businessHoursOverrideId === null) {
        throw new Error("Missing the required parameter 'businessHoursOverrideId' when calling deleteBusinessHoursOverride");
      }

      let pathParams = {
        'storeId': storeId,
        'businessHoursOverrideId': businessHoursOverrideId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultRestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/businesshoursoverrides/{businessHoursOverrideId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankAccountForStore operation.
     * @callback module:api/StoresApi~getBankAccountForStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAssignedBankAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/StoresApi~getBankAccountForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAssignedBankAccount}
     */
    getBankAccountForStore(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getBankAccountForStore");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultAssignedBankAccount;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/bankaccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessHours operation.
     * @callback module:api/StoresApi~getBusinessHoursCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultBusinessHoursPeriod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/String} deliveryType 
     * @param {module:api/StoresApi~getBusinessHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultBusinessHoursPeriod}
     */
    getBusinessHours(storeId, deliveryType, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getBusinessHours");
      }
      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling getBusinessHours");
      }

      let pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultBusinessHoursPeriod;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/availability/{deliveryType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessHoursOverrideByStoreId operation.
     * @callback module:api/StoresApi~getBusinessHoursOverrideByStoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultBusinessHoursOverride} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.after 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/StoresApi~getBusinessHoursOverrideByStoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultBusinessHoursOverride}
     */
    getBusinessHoursOverrideByStoreId(storeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getBusinessHoursOverrideByStoreId");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        'after': opts['after'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultBusinessHoursOverride;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/businesshoursoverrides', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndOfDayReport operation.
     * @callback module:api/StoresApi~getEndOfDayReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreEndOfDayReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date 
     * @param {module:api/StoresApi~getEndOfDayReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreEndOfDayReport}
     */
    getEndOfDayReport(storeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getEndOfDayReport");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStoreEndOfDayReport;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/endofdayreport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPreOrderConfig operation.
     * @callback module:api/StoresApi~getPreOrderConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultPreOrderConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/String} deliveryType 
     * @param {module:api/StoresApi~getPreOrderConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultPreOrderConfig}
     */
    getPreOrderConfig(storeId, deliveryType, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getPreOrderConfig");
      }
      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling getPreOrderConfig");
      }

      let pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultPreOrderConfig;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPreOrderPreview operation.
     * @callback module:api/StoresApi~getPreOrderPreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultPreOrderTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/String} deliveryType 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.preOrderConfig_leadTimeMinutes Lead Time in Minutes
     * @param {Number} opts.preOrderConfig_intervalMinutes Interval in minutes
     * @param {Number} opts.preOrderConfig_maxOrderAheadDays Max Days to order ahead
     * @param {Boolean} opts.preOrderConfig_includeAsap Show ASAP as option
     * @param {Boolean} opts.preOrderConfig_includeMoreGranularInitialTime Granual Init' Time
     * @param {String} opts.preOrderConfig_cutOffTimePreviousDayBasic Cut off time previous day
     * @param {String} opts.preOrderConfig_cutOffTimeCurrentDayBasic Cut off time current day
     * @param {module:model/String} opts.preOrderConfig_preOrderTimeDisplayType Type of time displayed.
     * @param {Boolean} opts.preOrderConfig_alwaysAppearOpen Specifies whether a customer can pre-order outside the store opening hours or not.
     * @param {Boolean} opts.preOrderConfig_requireExplicitSelectAlways Force customer to select collection time.
     * @param {module:api/StoresApi~getPreOrderPreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultPreOrderTime}
     */
    getPreOrderPreview(storeId, deliveryType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getPreOrderPreview");
      }
      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling getPreOrderPreview");
      }

      let pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      let queryParams = {
        'preOrderConfig.leadTimeMinutes': opts['preOrderConfig_leadTimeMinutes'],
        'preOrderConfig.intervalMinutes': opts['preOrderConfig_intervalMinutes'],
        'preOrderConfig.maxOrderAheadDays': opts['preOrderConfig_maxOrderAheadDays'],
        'preOrderConfig.includeAsap': opts['preOrderConfig_includeAsap'],
        'preOrderConfig.includeMoreGranularInitialTime': opts['preOrderConfig_includeMoreGranularInitialTime'],
        'preOrderConfig.cutOffTimePreviousDayBasic': opts['preOrderConfig_cutOffTimePreviousDayBasic'],
        'preOrderConfig.cutOffTimeCurrentDayBasic': opts['preOrderConfig_cutOffTimeCurrentDayBasic'],
        'preOrderConfig.preOrderTimeDisplayType': opts['preOrderConfig_preOrderTimeDisplayType'],
        'preOrderConfig.alwaysAppearOpen': opts['preOrderConfig_alwaysAppearOpen'],
        'preOrderConfig.requireExplicitSelectAlways': opts['preOrderConfig_requireExplicitSelectAlways']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultPreOrderTime;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/preview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessingFeeConfigsByStoreId operation.
     * @callback module:api/StoresApi~getProcessingFeeConfigsByStoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultProcessingFeeConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.appNameId 
     * @param {module:api/StoresApi~getProcessingFeeConfigsByStoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultProcessingFeeConfig}
     */
    getProcessingFeeConfigsByStoreId(storeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getProcessingFeeConfigsByStoreId");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        'appNameId': opts['appNameId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultProcessingFeeConfig;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/processingfeeconfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessingFeeConfigsByStoreIdAndPaymentAccountType operation.
     * @callback module:api/StoresApi~getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultProcessingFeeConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/String} paymentAccountType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.appNameId 
     * @param {module:api/StoresApi~getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultProcessingFeeConfig}
     */
    getProcessingFeeConfigsByStoreIdAndPaymentAccountType(storeId, paymentAccountType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType");
      }
      // verify the required parameter 'paymentAccountType' is set
      if (paymentAccountType === undefined || paymentAccountType === null) {
        throw new Error("Missing the required parameter 'paymentAccountType' when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType");
      }

      let pathParams = {
        'storeId': storeId,
        'paymentAccountType': paymentAccountType
      };
      let queryParams = {
        'appNameId': opts['appNameId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultProcessingFeeConfig;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/processingfeeconfigs/{paymentAccountType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreById operation.
     * @callback module:api/StoresApi~getStoreByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/StoresApi~getStoreByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStore}
     */
    getStoreById(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreById");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStore;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreDeliveryFeeConfig operation.
     * @callback module:api/StoresApi~getStoreDeliveryFeeConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultStoreDeliveryZoneFeeConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/StoresApi~getStoreDeliveryFeeConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultStoreDeliveryZoneFeeConfig}
     */
    getStoreDeliveryFeeConfig(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreDeliveryFeeConfig");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultStoreDeliveryZoneFeeConfig;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/feeConfig/deliveryZones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreFeeConfig operation.
     * @callback module:api/StoresApi~getStoreFeeConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreFeeConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/StoresApi~getStoreFeeConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreFeeConfig}
     */
    getStoreFeeConfig(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreFeeConfig");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'FeeConfigId', 'StoreId', 'StartTime', 'PercentFeeCardOrders', 'PercentFeeCashOrders', 'PercentFeeCardOrdersWeb', 'PercentFeeCashOrdersWeb', 'PercentFeeCardOrdersKiosk', 'PercentFeeCashOrdersKiosk', 'FixedFeeCardOrdersKiosk', 'FixedFeeCashOrdersKiosk', 'PercentFeeCardOrdersKioskChargedToCustomerIncludingVat', 'FixedFeeCardOrdersKioskChargedToCustomerIncludingVat', 'PercentFeeCashOrdersKioskChargedToCustomerIncludingVat', 'FixedFeeCashOrdersKioskChargedToCustomerIncludingVat', 'FixedFeeCardOrders', 'FixedFeeCashOrders', 'PercentFeeCardOrdersChargedToCustomerIncludingVat', 'FixedFeeCardOrdersChargedToCustomerIncludingVat', 'PercentFeeCashOrdersChargedToCustomerIncludingVat', 'FixedFeeCashOrdersChargedToCustomerIncludingVat', 'PercentFeeTips', 'PercentFeeTipsCollection', 'PercentFeeTipsDelivery', 'TaxRatePercent', 'PercentFeeCardOrdersLocationService', 'PercentFeeCashOrdersLocationService', 'FixedFeeCardOrdersLocationService', 'FixedFeeCashOrdersLocationService', 'PercentFeeCardOrdersLocationServiceChargedToCustomerIncludingVat', 'PercentFeeCashOrdersLocationServiceChargedToCustomerIncludingVat', 'FixedFeeCardOrdersLocationServiceChargedToCustomerIncludingVat', 'FixedFeeCashOrdersLocationServiceChargedToCustomerIncludingVat', 'PercentFeeDelivery', 'FixedFeeDelivery', 'PercentFeeCardPosTransaction', 'FixedFeeCardPosTransaction', 'PercentFeeOrderWithGoogle', 'FixedFeeOrderWithGoogle'];
      let returnType = StoreFeeConfig;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/feeConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreHeadersByAppId operation.
     * @callback module:api/StoresApi~getStoreHeadersByAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStoreHeader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeNameQuery 
     * @param {module:model/String} opts.salesChannelType 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/StoresApi~getStoreHeadersByAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStoreHeader}
     */
    getStoreHeadersByAppId(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoreHeadersByAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'storeNameQuery': opts['storeNameQuery'],
        'salesChannelType': opts['salesChannelType'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultStoreHeader;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/header', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreLeadTimes operation.
     * @callback module:api/StoresApi~getStoreLeadTimesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultOrderLeadTimes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/StoresApi~getStoreLeadTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultOrderLeadTimes}
     */
    getStoreLeadTimes(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreLeadTimes");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultOrderLeadTimes;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/leadTimes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreNetSales operation.
     * @callback module:api/StoresApi~getStoreNetSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultStoreStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Array.<Number>} storeId 
     * @param {module:api/StoresApi~getStoreNetSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultStoreStatistics}
     */
    getStoreNetSales(appId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoreNetSales");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreNetSales");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'storeId': this.apiClient.buildCollectionParam(storeId, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultStoreStatistics;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreServiceCharge operation.
     * @callback module:api/StoresApi~getStoreServiceChargeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceCharge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/StoresApi~getStoreServiceChargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceCharge}
     */
    getStoreServiceCharge(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreServiceCharge");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'StoreId', 'PercentageValue', 'Enabled', 'IsOptional', 'DisplayWithProcessingFee', 'IncludesVouchers'];
      let returnType = ServiceCharge;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/servicecharge', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStores operation.
     * @callback module:api/StoresApi~getStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Number} opts.storeGroupId 
     * @param {module:api/StoresApi~getStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStore}
     */
    getStores(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchQuery': opts['searchQuery'],
        'page': opts['page'],
        'limit': opts['limit'],
        'storeGroupId': opts['storeGroupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultStore;
      return this.apiClient.callApi(
        '/api/v1.0/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoresByAppId operation.
     * @callback module:api/StoresApi~getStoresByAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/StoresApi~getStoresByAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStore}
     */
    getStoresByAppId(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoresByAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'searchQuery': opts['searchQuery'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultStore;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoresByStoreIdWithValidations operation.
     * @callback module:api/StoresApi~getStoresByStoreIdWithValidationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStoreValidationConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<Number>} storeId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/StoresApi~getStoresByStoreIdWithValidationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStoreValidationConfig}
     */
    getStoresByStoreIdWithValidations(storeId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoresByStoreIdWithValidations");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoresByStoreIdWithValidations");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'storeId': this.apiClient.buildCollectionParam(storeId, 'multi'),
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultStoreValidationConfig;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/storevalidation/kiosk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishStore operation.
     * @callback module:api/StoresApi~publishStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/StoresApi~publishStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    publishStore(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling publishStore");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['Data', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putStoreDeliveryFeeConfig operation.
     * @callback module:api/StoresApi~putStoreDeliveryFeeConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/StoreDeliveryZoneFeeConfigUpdateRequest} feeConfigUpdateRequest 
     * @param {module:api/StoresApi~putStoreDeliveryFeeConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putStoreDeliveryFeeConfig(storeId, feeConfigUpdateRequest, callback) {
      let postBody = feeConfigUpdateRequest;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling putStoreDeliveryFeeConfig");
      }
      // verify the required parameter 'feeConfigUpdateRequest' is set
      if (feeConfigUpdateRequest === undefined || feeConfigUpdateRequest === null) {
        throw new Error("Missing the required parameter 'feeConfigUpdateRequest' when calling putStoreDeliveryFeeConfig");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['Message', 'ErrorCode', 'StackTrace', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/feeConfig/deliveryZones', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setBusinessHours operation.
     * @callback module:api/StoresApi~setBusinessHoursCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultBusinessHoursPeriod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/String} deliveryType 
     * @param {module:model/BusinessHoursPeriodBase} businessHoursPeriod 
     * @param {module:api/StoresApi~setBusinessHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultBusinessHoursPeriod}
     */
    setBusinessHours(storeId, deliveryType, businessHoursPeriod, callback) {
      let postBody = businessHoursPeriod;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setBusinessHours");
      }
      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling setBusinessHours");
      }
      // verify the required parameter 'businessHoursPeriod' is set
      if (businessHoursPeriod === undefined || businessHoursPeriod === null) {
        throw new Error("Missing the required parameter 'businessHoursPeriod' when calling setBusinessHours");
      }

      let pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultBusinessHoursPeriod;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/availability/{deliveryType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPreOrdeEnabled operation.
     * @callback module:api/StoresApi~setPreOrdeEnabledCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/String} deliveryType 
     * @param {Boolean} enabled 
     * @param {module:api/StoresApi~setPreOrdeEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRestApiDefaultResponse}
     */
    setPreOrdeEnabled(storeId, deliveryType, enabled, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setPreOrdeEnabled");
      }
      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling setPreOrdeEnabled");
      }
      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling setPreOrdeEnabled");
      }

      let pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      let queryParams = {
        'enabled': enabled
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultRestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/enabled', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setStoreLeadTimes operation.
     * @callback module:api/StoresApi~setStoreLeadTimesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultOrderLeadTimes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/LeadTime} leadTime 
     * @param {module:api/StoresApi~setStoreLeadTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultOrderLeadTimes}
     */
    setStoreLeadTimes(storeId, leadTime, callback) {
      let postBody = leadTime;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setStoreLeadTimes");
      }
      // verify the required parameter 'leadTime' is set
      if (leadTime === undefined || leadTime === null) {
        throw new Error("Missing the required parameter 'leadTime' when calling setStoreLeadTimes");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultOrderLeadTimes;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/leadTimes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the supportedSalesChannelsTypes operation.
     * @callback module:api/StoresApi~supportedSalesChannelsTypesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} propertyId 
     * @param {Number} storeId 
     * @param {Array.<String>} salesChannelTypes 
     * @param {module:api/StoresApi~supportedSalesChannelsTypesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    supportedSalesChannelsTypes(propertyId, storeId, salesChannelTypes, callback) {
      let postBody = salesChannelTypes;
      // verify the required parameter 'propertyId' is set
      if (propertyId === undefined || propertyId === null) {
        throw new Error("Missing the required parameter 'propertyId' when calling supportedSalesChannelsTypes");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling supportedSalesChannelsTypes");
      }
      // verify the required parameter 'salesChannelTypes' is set
      if (salesChannelTypes === undefined || salesChannelTypes === null) {
        throw new Error("Missing the required parameter 'salesChannelTypes' when calling supportedSalesChannelsTypes");
      }

      let pathParams = {
        'propertyId': propertyId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/properties/{propertyId}/stores/{storeId}/supportedSalesChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpublishStore operation.
     * @callback module:api/StoresApi~unpublishStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:api/StoresApi~unpublishStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unpublishStore(storeId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling unpublishStore");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['Data', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/unpublish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePreOrderConfig operation.
     * @callback module:api/StoresApi~updatePreOrderConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/String} deliveryType 
     * @param {module:model/PreOrderConfig} preOrderConfig 
     * @param {module:api/StoresApi~updatePreOrderConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRestApiDefaultResponse}
     */
    updatePreOrderConfig(storeId, deliveryType, preOrderConfig, callback) {
      let postBody = preOrderConfig;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updatePreOrderConfig");
      }
      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling updatePreOrderConfig");
      }
      // verify the required parameter 'preOrderConfig' is set
      if (preOrderConfig === undefined || preOrderConfig === null) {
        throw new Error("Missing the required parameter 'preOrderConfig' when calling updatePreOrderConfig");
      }

      let pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultRestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStore operation.
     * @callback module:api/StoresApi~updateStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/StoreBase} store 
     * @param {module:api/StoresApi~updateStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStore}
     */
    updateStore(storeId, store, callback) {
      let postBody = store;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateStore");
      }
      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling updateStore");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStore;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStoreAddress operation.
     * @callback module:api/StoresApi~updateStoreAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/StoreAddressBase} storeAddress 
     * @param {module:api/StoresApi~updateStoreAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreAddress}
     */
    updateStoreAddress(storeId, storeAddress, callback) {
      let postBody = storeAddress;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateStoreAddress");
      }
      // verify the required parameter 'storeAddress' is set
      if (storeAddress === undefined || storeAddress === null) {
        throw new Error("Missing the required parameter 'storeAddress' when calling updateStoreAddress");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStoreAddress;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStoreAddressCoordinates operation.
     * @callback module:api/StoresApi~updateStoreAddressCoordinatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultCoordinates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/Coordinates} coordinates 
     * @param {Object} opts Optional parameters
     * @param {String} opts.appNameId 
     * @param {module:api/StoresApi~updateStoreAddressCoordinatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultCoordinates}
     */
    updateStoreAddressCoordinates(storeId, coordinates, opts, callback) {
      opts = opts || {};
      let postBody = coordinates;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateStoreAddressCoordinates");
      }
      // verify the required parameter 'coordinates' is set
      if (coordinates === undefined || coordinates === null) {
        throw new Error("Missing the required parameter 'coordinates' when calling updateStoreAddressCoordinates");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
        'appNameId': opts['appNameId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultCoordinates;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/address/coordinates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStoreAddressForm operation.
     * @callback module:api/StoresApi~updateStoreAddressFormCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/StoreAddressForm} address 
     * @param {module:api/StoresApi~updateStoreAddressFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateStoreAddressForm(storeId, address, callback) {
      let postBody = address;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateStoreAddressForm");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling updateStoreAddressForm");
      }

      let pathParams = {
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/addressform', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
