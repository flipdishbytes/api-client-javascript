/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BusinessHoursOverrideBase', 'model/BusinessHoursPeriodBase', 'model/Coordinates', 'model/PreOrderConfig', 'model/RestApiArrayResultBusinessHoursPeriod', 'model/RestApiArrayResultPreOrderTime', 'model/RestApiArrayResultProcessingFeeConfig', 'model/RestApiArrayResultRestApiDefaultResponse', 'model/RestApiArrayResultStoreStatistics', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultBusinessHoursOverride', 'model/RestApiPaginationResultStore', 'model/RestApiPaginationResultStoreHeader', 'model/RestApiResultAssignedBankAccount', 'model/RestApiResultBusinessHoursOverride', 'model/RestApiResultBusinessHoursPeriod', 'model/RestApiResultCoordinates', 'model/RestApiResultPreOrderConfig', 'model/RestApiResultProcessingFeeConfig', 'model/RestApiResultStore', 'model/RestApiResultStoreAddress', 'model/RestApiResultStoreEndOfDayReport', 'model/RestApiUnauthorizedResult', 'model/StoreAddressBase', 'model/StoreBase', 'model/StoreCloneSettings', 'model/StoreCreateBase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BusinessHoursOverrideBase'), require('../model/BusinessHoursPeriodBase'), require('../model/Coordinates'), require('../model/PreOrderConfig'), require('../model/RestApiArrayResultBusinessHoursPeriod'), require('../model/RestApiArrayResultPreOrderTime'), require('../model/RestApiArrayResultProcessingFeeConfig'), require('../model/RestApiArrayResultRestApiDefaultResponse'), require('../model/RestApiArrayResultStoreStatistics'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultBusinessHoursOverride'), require('../model/RestApiPaginationResultStore'), require('../model/RestApiPaginationResultStoreHeader'), require('../model/RestApiResultAssignedBankAccount'), require('../model/RestApiResultBusinessHoursOverride'), require('../model/RestApiResultBusinessHoursPeriod'), require('../model/RestApiResultCoordinates'), require('../model/RestApiResultPreOrderConfig'), require('../model/RestApiResultProcessingFeeConfig'), require('../model/RestApiResultStore'), require('../model/RestApiResultStoreAddress'), require('../model/RestApiResultStoreEndOfDayReport'), require('../model/RestApiUnauthorizedResult'), require('../model/StoreAddressBase'), require('../model/StoreBase'), require('../model/StoreCloneSettings'), require('../model/StoreCreateBase'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.StoresApi = factory(root.Flipdish.ApiClient, root.Flipdish.BusinessHoursOverrideBase, root.Flipdish.BusinessHoursPeriodBase, root.Flipdish.Coordinates, root.Flipdish.PreOrderConfig, root.Flipdish.RestApiArrayResultBusinessHoursPeriod, root.Flipdish.RestApiArrayResultPreOrderTime, root.Flipdish.RestApiArrayResultProcessingFeeConfig, root.Flipdish.RestApiArrayResultRestApiDefaultResponse, root.Flipdish.RestApiArrayResultStoreStatistics, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiPaginationResultBusinessHoursOverride, root.Flipdish.RestApiPaginationResultStore, root.Flipdish.RestApiPaginationResultStoreHeader, root.Flipdish.RestApiResultAssignedBankAccount, root.Flipdish.RestApiResultBusinessHoursOverride, root.Flipdish.RestApiResultBusinessHoursPeriod, root.Flipdish.RestApiResultCoordinates, root.Flipdish.RestApiResultPreOrderConfig, root.Flipdish.RestApiResultProcessingFeeConfig, root.Flipdish.RestApiResultStore, root.Flipdish.RestApiResultStoreAddress, root.Flipdish.RestApiResultStoreEndOfDayReport, root.Flipdish.RestApiUnauthorizedResult, root.Flipdish.StoreAddressBase, root.Flipdish.StoreBase, root.Flipdish.StoreCloneSettings, root.Flipdish.StoreCreateBase);
  }
}(this, function(ApiClient, BusinessHoursOverrideBase, BusinessHoursPeriodBase, Coordinates, PreOrderConfig, RestApiArrayResultBusinessHoursPeriod, RestApiArrayResultPreOrderTime, RestApiArrayResultProcessingFeeConfig, RestApiArrayResultRestApiDefaultResponse, RestApiArrayResultStoreStatistics, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultBusinessHoursOverride, RestApiPaginationResultStore, RestApiPaginationResultStoreHeader, RestApiResultAssignedBankAccount, RestApiResultBusinessHoursOverride, RestApiResultBusinessHoursPeriod, RestApiResultCoordinates, RestApiResultPreOrderConfig, RestApiResultProcessingFeeConfig, RestApiResultStore, RestApiResultStoreAddress, RestApiResultStoreEndOfDayReport, RestApiUnauthorizedResult, StoreAddressBase, StoreBase, StoreCloneSettings, StoreCreateBase) {
  'use strict';

  /**
   * Stores service.
   * @module api/StoresApi
   * @version 1.0.0
   */

  /**
   * Constructs a new StoresApi. 
   * @alias module:api/StoresApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the archiveStore operation.
     * @callback module:api/StoresApi~archiveStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive store
     * @param {Number} storeId Store identifier
     * @param {module:api/StoresApi~archiveStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.archiveStore = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling archiveStore");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignMenu operation.
     * @callback module:api/StoresApi~assignMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign Menu to Store
     * @param {Number} storeId Store identifier
     * @param {Number} menuId Id of Menu to assign to store
     * @param {module:api/StoresApi~assignMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRestApiDefaultResponse}
     */
    this.assignMenu = function(storeId, menuId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling assignMenu");
      }

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling assignMenu");
      }


      var pathParams = {
        'storeId': storeId,
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultRestApiDefaultResponse;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/menu/{menuId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneStore operation.
     * @callback module:api/StoresApi~cloneStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone store with store clone settings
     * @param {Number} storeId Store identifier
     * @param {module:model/StoreCloneSettings} settings Settings for cloning the store
     * @param {module:api/StoresApi~cloneStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStore}
     */
    this.cloneStore = function(storeId, settings, callback) {
      var postBody = settings;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling cloneStore");
      }

      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling cloneStore");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStore;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/clone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBusinessHoursOverrideByStoreId operation.
     * @callback module:api/StoresApi~createBusinessHoursOverrideByStoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultBusinessHoursOverride} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Business Hours Override for a store
     * @param {Number} storeId Store identifier
     * @param {module:model/BusinessHoursOverrideBase} businessHoursOverride Business Hours Override
     * @param {module:api/StoresApi~createBusinessHoursOverrideByStoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultBusinessHoursOverride}
     */
    this.createBusinessHoursOverrideByStoreId = function(storeId, businessHoursOverride, callback) {
      var postBody = businessHoursOverride;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling createBusinessHoursOverrideByStoreId");
      }

      // verify the required parameter 'businessHoursOverride' is set
      if (businessHoursOverride === undefined || businessHoursOverride === null) {
        throw new Error("Missing the required parameter 'businessHoursOverride' when calling createBusinessHoursOverrideByStoreId");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultBusinessHoursOverride;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/businesshoursoverrides', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createStore operation.
     * @callback module:api/StoresApi~createStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create store with Store Group identifier
     * @param {Number} storeGroupId Store Group identifier
     * @param {module:model/StoreCreateBase} store Store
     * @param {module:api/StoresApi~createStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStore}
     */
    this.createStore = function(storeGroupId, store, callback) {
      var postBody = store;

      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling createStore");
      }

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling createStore");
      }


      var pathParams = {
      };
      var queryParams = {
        'storeGroupId': storeGroupId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStore;

      return this.apiClient.callApi(
        '/api/v1.0/stores', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBusinessHoursOverride operation.
     * @callback module:api/StoresApi~deleteBusinessHoursOverrideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Business Hours Override for a store
     * @param {Number} storeId 
     * @param {Number} businessHoursOverrideId 
     * @param {module:api/StoresApi~deleteBusinessHoursOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRestApiDefaultResponse}
     */
    this.deleteBusinessHoursOverride = function(storeId, businessHoursOverrideId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteBusinessHoursOverride");
      }

      // verify the required parameter 'businessHoursOverrideId' is set
      if (businessHoursOverrideId === undefined || businessHoursOverrideId === null) {
        throw new Error("Missing the required parameter 'businessHoursOverrideId' when calling deleteBusinessHoursOverride");
      }


      var pathParams = {
        'storeId': storeId,
        'businessHoursOverrideId': businessHoursOverrideId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultRestApiDefaultResponse;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/businesshoursoverrides/{businessHoursOverrideId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankAccountForStore operation.
     * @callback module:api/StoresApi~getBankAccountForStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAssignedBankAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Stores Bank Account Id
     * @param {Number} storeId Store identifier
     * @param {module:api/StoresApi~getBankAccountForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAssignedBankAccount}
     */
    this.getBankAccountForStore = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getBankAccountForStore");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultAssignedBankAccount;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/bankaccount', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessHours operation.
     * @callback module:api/StoresApi~getBusinessHoursCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultBusinessHoursPeriod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business hours
     * @param {Number} storeId Store identifier
     * @param {module:model/String} deliveryType Delivery type
     * @param {module:api/StoresApi~getBusinessHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultBusinessHoursPeriod}
     */
    this.getBusinessHours = function(storeId, deliveryType, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getBusinessHours");
      }

      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling getBusinessHours");
      }


      var pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultBusinessHoursPeriod;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/availability/{deliveryType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBusinessHoursOverrideByStoreId operation.
     * @callback module:api/StoresApi~getBusinessHoursOverrideByStoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultBusinessHoursOverride} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get business hours overrides by store identifier
     * @param {Number} storeId Store identifier
     * @param {Object} opts Optional parameters
     * @param {Date} opts.after Return results that ended after this datetime. Default value is the current datetime.
     * @param {Number} opts.page Requested page index
     * @param {Number} opts.limit Requested page limit
     * @param {module:api/StoresApi~getBusinessHoursOverrideByStoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultBusinessHoursOverride}
     */
    this.getBusinessHoursOverrideByStoreId = function(storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getBusinessHoursOverrideByStoreId");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'after': opts['after'],
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultBusinessHoursOverride;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/businesshoursoverrides', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndOfDayReport operation.
     * @callback module:api/StoresApi~getEndOfDayReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreEndOfDayReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get store end of day report
     * @param {Number} storeId Store identifier
     * @param {Object} opts Optional parameters
     * @param {Date} opts._date Store identifier
     * @param {module:api/StoresApi~getEndOfDayReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreEndOfDayReport}
     */
    this.getEndOfDayReport = function(storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getEndOfDayReport");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'date': opts['_date'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStoreEndOfDayReport;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/endofdayreport', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPreOrderConfig operation.
     * @callback module:api/StoresApi~getPreOrderConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultPreOrderConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the pre order config for a store, by type
     * @param {Number} storeId Store identifier
     * @param {module:model/String} deliveryType \"delivery\" or \"pickup\"
     * @param {module:api/StoresApi~getPreOrderConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultPreOrderConfig}
     */
    this.getPreOrderConfig = function(storeId, deliveryType, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getPreOrderConfig");
      }

      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling getPreOrderConfig");
      }


      var pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultPreOrderConfig;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPreOrderPreview operation.
     * @callback module:api/StoresApi~getPreOrderPreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultPreOrderTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Preview times of the pre-order configuration
     * @param {Number} storeId Store identifier
     * @param {module:model/String} deliveryType \"delivery\" or \"pickup\"
     * @param {Object} opts Optional parameters
     * @param {Number} opts.preOrderConfig_leadTimeMinutes Lead Time in Minutes
     * @param {Number} opts.preOrderConfig_intervalMinutes Interval in minutes
     * @param {Number} opts.preOrderConfig_maxOrderAheadDays Max Days to order ahead
     * @param {Boolean} opts.preOrderConfig_includeAsap Show ASAP as option
     * @param {Boolean} opts.preOrderConfig_includeMoreGranularInitialTime Granual Init' Time
     * @param {String} opts.preOrderConfig_cutOffTimePreviousDayBasic Cut off time previous day
     * @param {String} opts.preOrderConfig_cutOffTimeCurrentDayBasic Cut off time current day
     * @param {module:model/String} opts.preOrderConfig_preOrderTimeDisplayType Type of time displayed.
     * @param {Boolean} opts.preOrderConfig_alwaysAppearOpen Specifies whether a customer can pre-order outside the store opening hours or not.
     * @param {Boolean} opts.preOrderConfig_requireExplicitSelectAlways Force customer to select collection time.
     * @param {module:api/StoresApi~getPreOrderPreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultPreOrderTime}
     */
    this.getPreOrderPreview = function(storeId, deliveryType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getPreOrderPreview");
      }

      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling getPreOrderPreview");
      }


      var pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      var queryParams = {
        'preOrderConfig.leadTimeMinutes': opts['preOrderConfig_leadTimeMinutes'],
        'preOrderConfig.intervalMinutes': opts['preOrderConfig_intervalMinutes'],
        'preOrderConfig.maxOrderAheadDays': opts['preOrderConfig_maxOrderAheadDays'],
        'preOrderConfig.includeAsap': opts['preOrderConfig_includeAsap'],
        'preOrderConfig.includeMoreGranularInitialTime': opts['preOrderConfig_includeMoreGranularInitialTime'],
        'preOrderConfig.cutOffTimePreviousDayBasic': opts['preOrderConfig_cutOffTimePreviousDayBasic'],
        'preOrderConfig.cutOffTimeCurrentDayBasic': opts['preOrderConfig_cutOffTimeCurrentDayBasic'],
        'preOrderConfig.preOrderTimeDisplayType': opts['preOrderConfig_preOrderTimeDisplayType'],
        'preOrderConfig.alwaysAppearOpen': opts['preOrderConfig_alwaysAppearOpen'],
        'preOrderConfig.requireExplicitSelectAlways': opts['preOrderConfig_requireExplicitSelectAlways'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultPreOrderTime;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/preview', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessingFeeConfigsByStoreId operation.
     * @callback module:api/StoresApi~getProcessingFeeConfigsByStoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultProcessingFeeConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get processing fee configs by store identifier
     * @param {Number} storeId Store identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.appNameId App Name Id(Not used, still here for compatability reasons)
     * @param {module:api/StoresApi~getProcessingFeeConfigsByStoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultProcessingFeeConfig}
     */
    this.getProcessingFeeConfigsByStoreId = function(storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getProcessingFeeConfigsByStoreId");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'appNameId': opts['appNameId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultProcessingFeeConfig;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/processingfeeconfigs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessingFeeConfigsByStoreIdAndPaymentAccountType operation.
     * @callback module:api/StoresApi~getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultProcessingFeeConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get processing fee configs by store identifier
     * @param {Number} storeId Store identifier
     * @param {module:model/String} paymentAccountType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.appNameId App Name Id(Not used, still here for compatability reasons)
     * @param {module:api/StoresApi~getProcessingFeeConfigsByStoreIdAndPaymentAccountTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultProcessingFeeConfig}
     */
    this.getProcessingFeeConfigsByStoreIdAndPaymentAccountType = function(storeId, paymentAccountType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType");
      }

      // verify the required parameter 'paymentAccountType' is set
      if (paymentAccountType === undefined || paymentAccountType === null) {
        throw new Error("Missing the required parameter 'paymentAccountType' when calling getProcessingFeeConfigsByStoreIdAndPaymentAccountType");
      }


      var pathParams = {
        'storeId': storeId,
        'paymentAccountType': paymentAccountType
      };
      var queryParams = {
        'appNameId': opts['appNameId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultProcessingFeeConfig;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/processingfeeconfigs/{paymentAccountType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreById operation.
     * @callback module:api/StoresApi~getStoreByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get store by identifier
     * @param {Number} storeId Store identifier
     * @param {module:api/StoresApi~getStoreByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStore}
     */
    this.getStoreById = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreById");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStore;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreHeadersByAppId operation.
     * @callback module:api/StoresApi~getStoreHeadersByAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStoreHeader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all stores by app name id
     * @param {String} appId App Name Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeNameQuery 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/StoresApi~getStoreHeadersByAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStoreHeader}
     */
    this.getStoreHeadersByAppId = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoreHeadersByAppId");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'storeNameQuery': opts['storeNameQuery'],
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultStoreHeader;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/header', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreNetSales operation.
     * @callback module:api/StoresApi~getStoreNetSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultStoreStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stores statistics by app name id and storeIds
     * @param {String} appId App Name Id
     * @param {Array.<Number>} storeId Store Ids
     * @param {module:api/StoresApi~getStoreNetSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultStoreStatistics}
     */
    this.getStoreNetSales = function(appId, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoreNetSales");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreNetSales");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'storeId': {
          value: storeId,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultStoreStatistics;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStores operation.
     * @callback module:api/StoresApi~getStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all stores, excluding archived ones
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery Search query
     * @param {Number} opts.page Requested page index
     * @param {Number} opts.limit Requested page limit
     * @param {Number} opts.storeGroupId Store Group Id
     * @param {module:api/StoresApi~getStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStore}
     */
    this.getStores = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'searchQuery': opts['searchQuery'],
        'page': opts['page'],
        'limit': opts['limit'],
        'storeGroupId': opts['storeGroupId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultStore;

      return this.apiClient.callApi(
        '/api/v1.0/stores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoresByAppId operation.
     * @callback module:api/StoresApi~getStoresByAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all stores by app name id
     * @param {String} appId App Name Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery Search query
     * @param {Number} opts.page Requested page index
     * @param {Number} opts.limit Requested page limit
     * @param {module:api/StoresApi~getStoresByAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStore}
     */
    this.getStoresByAppId = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoresByAppId");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'searchQuery': opts['searchQuery'],
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultStore;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publishStore operation.
     * @callback module:api/StoresApi~publishStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish store
     * @param {Number} storeId Store identifier
     * @param {module:api/StoresApi~publishStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.publishStore = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling publishStore");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/publish', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setBusinessHours operation.
     * @callback module:api/StoresApi~setBusinessHoursCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultBusinessHoursPeriod} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Business hours
     * @param {Number} storeId Store identifier
     * @param {module:model/String} deliveryType Delivery type
     * @param {module:model/BusinessHoursPeriodBase} businessHoursPeriod Business Hours Period
     * @param {module:api/StoresApi~setBusinessHoursCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultBusinessHoursPeriod}
     */
    this.setBusinessHours = function(storeId, deliveryType, businessHoursPeriod, callback) {
      var postBody = businessHoursPeriod;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setBusinessHours");
      }

      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling setBusinessHours");
      }

      // verify the required parameter 'businessHoursPeriod' is set
      if (businessHoursPeriod === undefined || businessHoursPeriod === null) {
        throw new Error("Missing the required parameter 'businessHoursPeriod' when calling setBusinessHours");
      }


      var pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultBusinessHoursPeriod;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/availability/{deliveryType}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setPreOrdeEnabled operation.
     * @callback module:api/StoresApi~setPreOrdeEnabledCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UPDATE pre order config for a store, by type
     * @param {Number} storeId Store identifier
     * @param {module:model/String} deliveryType \"delivery\" or \"pickup\"
     * @param {Boolean} enabled Update pre order config values
     * @param {module:api/StoresApi~setPreOrdeEnabledCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRestApiDefaultResponse}
     */
    this.setPreOrdeEnabled = function(storeId, deliveryType, enabled, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setPreOrdeEnabled");
      }

      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling setPreOrdeEnabled");
      }

      // verify the required parameter 'enabled' is set
      if (enabled === undefined || enabled === null) {
        throw new Error("Missing the required parameter 'enabled' when calling setPreOrdeEnabled");
      }


      var pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      var queryParams = {
        'enabled': enabled,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultRestApiDefaultResponse;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}/enabled', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unpublishStore operation.
     * @callback module:api/StoresApi~unpublishStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpublish store
     * @param {Number} storeId Store identifier
     * @param {module:api/StoresApi~unpublishStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unpublishStore = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling unpublishStore");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/unpublish', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePreOrderConfig operation.
     * @callback module:api/StoresApi~updatePreOrderConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UPDATE pre order config for a store, by type
     * @param {Number} storeId Store identifier
     * @param {module:model/String} deliveryType \"delivery\" or \"pickup\"
     * @param {module:model/PreOrderConfig} preOrderConfig Update pre order config values
     * @param {module:api/StoresApi~updatePreOrderConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRestApiDefaultResponse}
     */
    this.updatePreOrderConfig = function(storeId, deliveryType, preOrderConfig, callback) {
      var postBody = preOrderConfig;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updatePreOrderConfig");
      }

      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling updatePreOrderConfig");
      }

      // verify the required parameter 'preOrderConfig' is set
      if (preOrderConfig === undefined || preOrderConfig === null) {
        throw new Error("Missing the required parameter 'preOrderConfig' when calling updatePreOrderConfig");
      }


      var pathParams = {
        'storeId': storeId,
        'deliveryType': deliveryType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultRestApiDefaultResponse;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/preorderconfig/{deliveryType}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStore operation.
     * @callback module:api/StoresApi~updateStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update store by identifier
     * @param {Number} storeId Store Group identifier
     * @param {module:model/StoreBase} store Store
     * @param {module:api/StoresApi~updateStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStore}
     */
    this.updateStore = function(storeId, store, callback) {
      var postBody = store;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateStore");
      }

      // verify the required parameter 'store' is set
      if (store === undefined || store === null) {
        throw new Error("Missing the required parameter 'store' when calling updateStore");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStore;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStoreAddress operation.
     * @callback module:api/StoresApi~updateStoreAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update store address
     * @param {Number} storeId Store identifier
     * @param {module:model/StoreAddressBase} storeAddress Store address
     * @param {module:api/StoresApi~updateStoreAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreAddress}
     */
    this.updateStoreAddress = function(storeId, storeAddress, callback) {
      var postBody = storeAddress;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateStoreAddress");
      }

      // verify the required parameter 'storeAddress' is set
      if (storeAddress === undefined || storeAddress === null) {
        throw new Error("Missing the required parameter 'storeAddress' when calling updateStoreAddress");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStoreAddress;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/address', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStoreAddressCoordinates operation.
     * @callback module:api/StoresApi~updateStoreAddressCoordinatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultCoordinates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update store address coordinates
     * @param {Number} storeId Store identifier
     * @param {module:model/Coordinates} coordinates Store address coordinates
     * @param {Object} opts Optional parameters
     * @param {String} opts.appNameId App Name Id(Not used, still here for compatability reasons)
     * @param {module:api/StoresApi~updateStoreAddressCoordinatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultCoordinates}
     */
    this.updateStoreAddressCoordinates = function(storeId, coordinates, opts, callback) {
      opts = opts || {};
      var postBody = coordinates;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateStoreAddressCoordinates");
      }

      // verify the required parameter 'coordinates' is set
      if (coordinates === undefined || coordinates === null) {
        throw new Error("Missing the required parameter 'coordinates' when calling updateStoreAddressCoordinates");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'appNameId': opts['appNameId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultCoordinates;

      return this.apiClient.callApi(
        '/api/v1.0/stores/{storeId}/address/coordinates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
