/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultAppStoreAppSummary', 'model/RestApiResultAppStoreApp', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultAppStoreAppSummary'), require('../model/RestApiResultAppStoreApp'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.AppStoreApi = factory(root.Flipdish.ApiClient, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiPaginationResultAppStoreAppSummary, root.Flipdish.RestApiResultAppStoreApp, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultAppStoreAppSummary, RestApiResultAppStoreApp, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * AppStore service.
   * @module api/AppStoreApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AppStoreApi. 
   * @alias module:api/AppStoreApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAppStoreApp operation.
     * @callback module:api/AppStoreApi~getAppStoreAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAppStoreApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appStoreAppId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.appId 
     * @param {module:api/AppStoreApi~getAppStoreAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAppStoreApp}
     */
    this.getAppStoreApp = function(appStoreAppId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling getAppStoreApp");
      }


      var pathParams = {
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
        'appId': opts['appId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultAppStoreApp;

      return this.apiClient.callApi(
        '/api/v1.0/appstore/apps/{appStoreAppId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppStoreApps operation.
     * @callback module:api/AppStoreApi~getAppStoreAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultAppStoreAppSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} search 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Boolean} opts.excludeNotOwned 
     * @param {Boolean} opts.showOnlyVerified 
     * @param {module:api/AppStoreApi~getAppStoreAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultAppStoreAppSummary}
     */
    this.getAppStoreApps = function(search, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling getAppStoreApps");
      }


      var pathParams = {
      };
      var queryParams = {
        'search': search,
        'page': opts['page'],
        'limit': opts['limit'],
        'excludeNotOwned': opts['excludeNotOwned'],
        'showOnlyVerified': opts['showOnlyVerified'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultAppStoreAppSummary;

      return this.apiClient.callApi(
        '/api/v1.0/appstore/apps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
