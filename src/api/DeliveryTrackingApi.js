/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DriverInvitation', 'model/OrderIdAndSequenceNumber', 'model/RestApiArrayResultDriver', 'model/RestApiForbiddenResult', 'model/RestApiResultDriver', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DriverInvitation'), require('../model/OrderIdAndSequenceNumber'), require('../model/RestApiArrayResultDriver'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultDriver'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.FlipdishOpenApiV10) {
      root.FlipdishOpenApiV10 = {};
    }
    root.FlipdishOpenApiV10.DeliveryTrackingApi = factory(root.FlipdishOpenApiV10.ApiClient, root.FlipdishOpenApiV10.DriverInvitation, root.FlipdishOpenApiV10.OrderIdAndSequenceNumber, root.FlipdishOpenApiV10.RestApiArrayResultDriver, root.FlipdishOpenApiV10.RestApiForbiddenResult, root.FlipdishOpenApiV10.RestApiResultDriver, root.FlipdishOpenApiV10.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, DriverInvitation, OrderIdAndSequenceNumber, RestApiArrayResultDriver, RestApiForbiddenResult, RestApiResultDriver, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * DeliveryTracking service.
   * @module api/DeliveryTrackingApi
   * @version v1.0
   */

  /**
   * Constructs a new DeliveryTrackingApi. 
   * @alias module:api/DeliveryTrackingApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the assignDriverToOrder operation.
     * @callback module:api/DeliveryTrackingApi~assignDriverToOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE] Assign driver to order
     * @param {String} appId Application identifier
     * @param {Number} orderId Order Id
     * @param {Number} driverId Driver Id
     * @param {module:api/DeliveryTrackingApi~assignDriverToOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.assignDriverToOrder = function(appId, orderId, driverId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling assignDriverToOrder");
      }

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling assignDriverToOrder");
      }

      // verify the required parameter 'driverId' is set
      if (driverId === undefined || driverId === null) {
        throw new Error("Missing the required parameter 'driverId' when calling assignDriverToOrder");
      }


      var pathParams = {
        'appId': appId,
        'orderId': orderId,
        'driverId': driverId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/drivers/{driverId}/orders/{orderId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignDriverToOrders operation.
     * @callback module:api/DeliveryTrackingApi~assignDriverToOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign driver to multiple orders
     * @param {String} appId Application identifier
     * @param {Number} driverId Driver Id
     * @param {Array.<module:model/OrderIdAndSequenceNumber>} orderIdAndSequenceNumbers Array of object containing OrderId and Sequence
     * @param {module:api/DeliveryTrackingApi~assignDriverToOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.assignDriverToOrders = function(appId, driverId, orderIdAndSequenceNumbers, callback) {
      var postBody = orderIdAndSequenceNumbers;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling assignDriverToOrders");
      }

      // verify the required parameter 'driverId' is set
      if (driverId === undefined || driverId === null) {
        throw new Error("Missing the required parameter 'driverId' when calling assignDriverToOrders");
      }

      // verify the required parameter 'orderIdAndSequenceNumbers' is set
      if (orderIdAndSequenceNumbers === undefined || orderIdAndSequenceNumbers === null) {
        throw new Error("Missing the required parameter 'orderIdAndSequenceNumbers' when calling assignDriverToOrders");
      }


      var pathParams = {
        'appId': appId,
        'driverId': driverId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/drivers/{driverId}/orders', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDrivers operation.
     * @callback module:api/DeliveryTrackingApi~getDriversCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultDriver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE] Get drivers by App
     * @param {String} appId Application identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Driver's username
     * @param {String} opts.phoneNumber Driver's phone number
     * @param {Number} opts.storeId Store Id
     * @param {module:model/String} opts.presence Offline/Online
     * @param {module:api/DeliveryTrackingApi~getDriversCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultDriver}
     */
    this.getDrivers = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getDrivers");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'name': opts['name'],
        'phoneNumber': opts['phoneNumber'],
        'storeId': opts['storeId'],
        'presence': opts['presence'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultDriver;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/drivers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inviteDriverToApp operation.
     * @callback module:api/DeliveryTrackingApi~inviteDriverToAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultDriver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE] Invite driver
     * @param {String} appId Application identifier
     * @param {module:model/DriverInvitation} driverInvitation Driver invitation model
     * @param {module:api/DeliveryTrackingApi~inviteDriverToAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultDriver}
     */
    this.inviteDriverToApp = function(appId, driverInvitation, callback) {
      var postBody = driverInvitation;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling inviteDriverToApp");
      }

      // verify the required parameter 'driverInvitation' is set
      if (driverInvitation === undefined || driverInvitation === null) {
        throw new Error("Missing the required parameter 'driverInvitation' when calling inviteDriverToApp");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultDriver;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/drivers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDriverFromApp operation.
     * @callback module:api/DeliveryTrackingApi~removeDriverFromAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE] Unassign driver from app
     * @param {String} appId Application identifier
     * @param {Number} driverId Driver Id
     * @param {module:api/DeliveryTrackingApi~removeDriverFromAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeDriverFromApp = function(appId, driverId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling removeDriverFromApp");
      }

      // verify the required parameter 'driverId' is set
      if (driverId === undefined || driverId === null) {
        throw new Error("Missing the required parameter 'driverId' when calling removeDriverFromApp");
      }


      var pathParams = {
        'appId': appId,
        'driverId': driverId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/drivers/{driverId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignDriverFromOrder operation.
     * @callback module:api/DeliveryTrackingApi~unassignDriverFromOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE] Unassign driver from order
     * @param {String} appId Application identifier
     * @param {Number} orderId Order Id
     * @param {module:api/DeliveryTrackingApi~unassignDriverFromOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unassignDriverFromOrder = function(appId, orderId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling unassignDriverFromOrder");
      }

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling unassignDriverFromOrder");
      }


      var pathParams = {
        'appId': appId,
        'orderId': orderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/orders/{orderId}/driver', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
