/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HttpPostedFileBase from '../model/HttpPostedFileBase';
import MenuZone from '../model/MenuZone';
import RestApiArrayResultMenuZone from '../model/RestApiArrayResultMenuZone';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultMenuZone from '../model/RestApiResultMenuZone';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* MenuZones service.
* @module api/MenuZonesApi
* @version 1.0.0
*/
export default class MenuZonesApi {

    /**
    * Constructs a new MenuZonesApi. 
    * @alias module:api/MenuZonesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMenuZone operation.
     * @callback module:api/MenuZonesApi~addMenuZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenuZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new menu zone to a menu.
     * @param {Number} menuId The menu id.
     * @param {module:model/MenuZone} menuZone The object containing the new zone. This is optional and not supplying it will generate an empty default zone.
     * @param {module:api/MenuZonesApi~addMenuZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenuZone}
     */
    addMenuZone(menuId, menuZone, callback) {
      let postBody = menuZone;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling addMenuZone");
      }
      // verify the required parameter 'menuZone' is set
      if (menuZone === undefined || menuZone === null) {
        throw new Error("Missing the required parameter 'menuZone' when calling addMenuZone");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultMenuZone;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuZone operation.
     * @callback module:api/MenuZonesApi~deleteMenuZoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a menu zone.
     * @param {Number} menuZoneId The menu zone id.
     * @param {String} menuId 
     * @param {module:api/MenuZonesApi~deleteMenuZoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMenuZone(menuZoneId, menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuZoneId' is set
      if (menuZoneId === undefined || menuZoneId === null) {
        throw new Error("Missing the required parameter 'menuZoneId' when calling deleteMenuZone");
      }
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuZone");
      }

      let pathParams = {
        'menuZoneId': menuZoneId,
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones/{menuZoneId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuZoneImage operation.
     * @callback module:api/MenuZonesApi~deleteMenuZoneImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a menu zone image.
     * @param {Number} menuZoneId The zone Id/
     * @param {String} menuId 
     * @param {module:api/MenuZonesApi~deleteMenuZoneImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMenuZoneImage(menuZoneId, menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuZoneId' is set
      if (menuZoneId === undefined || menuZoneId === null) {
        throw new Error("Missing the required parameter 'menuZoneId' when calling deleteMenuZoneImage");
      }
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuZoneImage");
      }

      let pathParams = {
        'menuZoneId': menuZoneId,
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones/{menuZoneId}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flipMenuZones operation.
     * @callback module:api/MenuZonesApi~flipMenuZonesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flips the order of two menu zones.
     * @param {Number} menuZoneId Source.
     * @param {Number} menuZoneI2 Destination.
     * @param {String} menuId 
     * @param {module:api/MenuZonesApi~flipMenuZonesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flipMenuZones(menuZoneId, menuZoneI2, menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuZoneId' is set
      if (menuZoneId === undefined || menuZoneId === null) {
        throw new Error("Missing the required parameter 'menuZoneId' when calling flipMenuZones");
      }
      // verify the required parameter 'menuZoneI2' is set
      if (menuZoneI2 === undefined || menuZoneI2 === null) {
        throw new Error("Missing the required parameter 'menuZoneI2' when calling flipMenuZones");
      }
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling flipMenuZones");
      }

      let pathParams = {
        'menuZoneId': menuZoneId,
        'menuZoneI2': menuZoneI2,
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones/{menuZoneId}/flip/{menuZoneI2}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuZone operation.
     * @callback module:api/MenuZonesApi~getMenuZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenuZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific menu zone for a given zone id
     * @param {Number} menuId The menu id.
     * @param {Number} menuZoneId The menu zone id.
     * @param {module:api/MenuZonesApi~getMenuZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenuZone}
     */
    getMenuZone(menuId, menuZoneId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuZone");
      }
      // verify the required parameter 'menuZoneId' is set
      if (menuZoneId === undefined || menuZoneId === null) {
        throw new Error("Missing the required parameter 'menuZoneId' when calling getMenuZone");
      }

      let pathParams = {
        'menuId': menuId,
        'menuZoneId': menuZoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultMenuZone;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones/{menuZoneId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuZonesForMenuId operation.
     * @callback module:api/MenuZonesApi~getMenuZonesForMenuIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the menu zones for a menu
     * @param {Number} menuId The menu id to load zones for
     * @param {module:api/MenuZonesApi~getMenuZonesForMenuIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuZone}
     */
    getMenuZonesForMenuId(menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuZonesForMenuId");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultMenuZone;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuSectionMenuZone operation.
     * @callback module:api/MenuZonesApi~setMenuSectionMenuZoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a zone to a menu section.
     * @param {Number} menuZoneId The menu id.
     * @param {Number} menuSectionId The menu section id.
     * @param {String} menuId 
     * @param {module:api/MenuZonesApi~setMenuSectionMenuZoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setMenuSectionMenuZone(menuZoneId, menuSectionId, menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuZoneId' is set
      if (menuZoneId === undefined || menuZoneId === null) {
        throw new Error("Missing the required parameter 'menuZoneId' when calling setMenuSectionMenuZone");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling setMenuSectionMenuZone");
      }
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuSectionMenuZone");
      }

      let pathParams = {
        'menuZoneId': menuZoneId,
        'menuSectionId': menuSectionId,
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones/{menuZoneId}/section/{menuSectionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuZoneDescription operation.
     * @callback module:api/MenuZonesApi~setMenuZoneDescriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the description of a menu zone.
     * @param {Number} menuZoneId The zone id.
     * @param {String} menuId 
     * @param {String} description The new description. Add as a raw string in the request, without any JSON wrapper.
     * @param {module:api/MenuZonesApi~setMenuZoneDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setMenuZoneDescription(menuZoneId, menuId, description, callback) {
      let postBody = description;
      // verify the required parameter 'menuZoneId' is set
      if (menuZoneId === undefined || menuZoneId === null) {
        throw new Error("Missing the required parameter 'menuZoneId' when calling setMenuZoneDescription");
      }
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuZoneDescription");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling setMenuZoneDescription");
      }

      let pathParams = {
        'menuZoneId': menuZoneId,
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones/{menuZoneId}/description', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuZoneName operation.
     * @callback module:api/MenuZonesApi~setMenuZoneNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the name of a menu zone.
     * @param {Number} menuZoneId The menu zone id.
     * @param {String} menuZoneName The new name.
     * @param {String} menuId 
     * @param {module:api/MenuZonesApi~setMenuZoneNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setMenuZoneName(menuZoneId, menuZoneName, menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuZoneId' is set
      if (menuZoneId === undefined || menuZoneId === null) {
        throw new Error("Missing the required parameter 'menuZoneId' when calling setMenuZoneName");
      }
      // verify the required parameter 'menuZoneName' is set
      if (menuZoneName === undefined || menuZoneName === null) {
        throw new Error("Missing the required parameter 'menuZoneName' when calling setMenuZoneName");
      }
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuZoneName");
      }

      let pathParams = {
        'menuZoneId': menuZoneId,
        'menuZoneName': menuZoneName,
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones/{menuZoneId}/name/{menuZoneName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMenuZone operation.
     * @callback module:api/MenuZonesApi~updateMenuZoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a menu zone.
     * @param {Number} menuId The menu id.
     * @param {Number} menuZoneId The menu zone id.
     * @param {module:model/MenuZone} menuZone The object containing the updated values.
     * @param {module:api/MenuZonesApi~updateMenuZoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMenuZone(menuId, menuZoneId, menuZone, callback) {
      let postBody = menuZone;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling updateMenuZone");
      }
      // verify the required parameter 'menuZoneId' is set
      if (menuZoneId === undefined || menuZoneId === null) {
        throw new Error("Missing the required parameter 'menuZoneId' when calling updateMenuZone");
      }
      // verify the required parameter 'menuZone' is set
      if (menuZone === undefined || menuZone === null) {
        throw new Error("Missing the required parameter 'menuZone' when calling updateMenuZone");
      }

      let pathParams = {
        'menuId': menuId,
        'menuZoneId': menuZoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones/{menuZoneId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMenuZoneImage operation.
     * @callback module:api/MenuZonesApi~uploadMenuZoneImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads an image for a menu zone.
     * @param {Number} menuZoneId The zone id.
     * @param {String} menuId 
     * @param {Array.<module:model/HttpPostedFileBase>} file The file to upload.
     * @param {module:api/MenuZonesApi~uploadMenuZoneImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadMenuZoneImage(menuZoneId, menuId, file, callback) {
      let postBody = file;
      // verify the required parameter 'menuZoneId' is set
      if (menuZoneId === undefined || menuZoneId === null) {
        throw new Error("Missing the required parameter 'menuZoneId' when calling uploadMenuZoneImage");
      }
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling uploadMenuZoneImage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadMenuZoneImage");
      }

      let pathParams = {
        'menuZoneId': menuZoneId,
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/zones/{menuZoneId}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
