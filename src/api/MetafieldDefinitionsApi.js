/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMetafieldDefinition from '../model/CreateMetafieldDefinition';
import OwnerEntityConfigurations from '../model/OwnerEntityConfigurations';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultMetafieldDefinition from '../model/RestApiPaginationResultMetafieldDefinition';
import RestApiPaginationResultMetafieldDefinitionRecommendation from '../model/RestApiPaginationResultMetafieldDefinitionRecommendation';
import RestApiResultMetafieldDefinition from '../model/RestApiResultMetafieldDefinition';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import UpdateMetafieldDefinition from '../model/UpdateMetafieldDefinition';

/**
* MetafieldDefinitions service.
* @module api/MetafieldDefinitionsApi
* @version 1.0.0
*/
export default class MetafieldDefinitionsApi {

    /**
    * Constructs a new MetafieldDefinitionsApi. 
    * @alias module:api/MetafieldDefinitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMetafieldDefinition operation.
     * @callback module:api/MetafieldDefinitionsApi~createMetafieldDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMetafieldDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} ownerEntity 
     * @param {module:model/CreateMetafieldDefinition} createMetafieldDefinition 
     * @param {module:api/MetafieldDefinitionsApi~createMetafieldDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMetafieldDefinition}
     */
    createMetafieldDefinition(appId, ownerEntity, createMetafieldDefinition, callback) {
      let postBody = createMetafieldDefinition;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createMetafieldDefinition");
      }
      // verify the required parameter 'ownerEntity' is set
      if (ownerEntity === undefined || ownerEntity === null) {
        throw new Error("Missing the required parameter 'ownerEntity' when calling createMetafieldDefinition");
      }
      // verify the required parameter 'createMetafieldDefinition' is set
      if (createMetafieldDefinition === undefined || createMetafieldDefinition === null) {
        throw new Error("Missing the required parameter 'createMetafieldDefinition' when calling createMetafieldDefinition");
      }

      let pathParams = {
        'appId': appId,
        'ownerEntity': ownerEntity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'IsReadOnly', 'OwnerEntity', 'Key', 'ValueType', 'Name', 'Description', 'Behaviors'];
      let returnType = RestApiResultMetafieldDefinition;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/metafields/definitions/{ownerEntity}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetafieldDefinitionByKey operation.
     * @callback module:api/MetafieldDefinitionsApi~getMetafieldDefinitionByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMetafieldDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} ownerEntity 
     * @param {String} key 
     * @param {module:api/MetafieldDefinitionsApi~getMetafieldDefinitionByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMetafieldDefinition}
     */
    getMetafieldDefinitionByKey(appId, ownerEntity, key, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getMetafieldDefinitionByKey");
      }
      // verify the required parameter 'ownerEntity' is set
      if (ownerEntity === undefined || ownerEntity === null) {
        throw new Error("Missing the required parameter 'ownerEntity' when calling getMetafieldDefinitionByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMetafieldDefinitionByKey");
      }

      let pathParams = {
        'appId': appId,
        'ownerEntity': ownerEntity,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'IsReadOnly', 'OwnerEntity', 'Key', 'ValueType', 'Name', 'Description', 'Behaviors'];
      let returnType = RestApiResultMetafieldDefinition;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/metafields/definitions/{ownerEntity}/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetafieldDefinitions operation.
     * @callback module:api/MetafieldDefinitionsApi~getMetafieldDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultMetafieldDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} ownerEntity 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/MetafieldDefinitionsApi~getMetafieldDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultMetafieldDefinition}
     */
    getMetafieldDefinitions(appId, ownerEntity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getMetafieldDefinitions");
      }
      // verify the required parameter 'ownerEntity' is set
      if (ownerEntity === undefined || ownerEntity === null) {
        throw new Error("Missing the required parameter 'ownerEntity' when calling getMetafieldDefinitions");
      }

      let pathParams = {
        'appId': appId,
        'ownerEntity': ownerEntity
      };
      let queryParams = {
        'searchTerm': opts['searchTerm'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultMetafieldDefinition;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/metafields/definitions/{ownerEntity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOwnerEntityConfigurations operation.
     * @callback module:api/MetafieldDefinitionsApi~getOwnerEntityConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OwnerEntityConfigurations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/MetafieldDefinitionsApi~getOwnerEntityConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OwnerEntityConfigurations}
     */
    getOwnerEntityConfigurations(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOwnerEntityConfigurations");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Configurations'];
      let returnType = OwnerEntityConfigurations;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/metafields/definitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOwnerEntityRecommendations operation.
     * @callback module:api/MetafieldDefinitionsApi~getOwnerEntityRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultMetafieldDefinitionRecommendation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} ownerEntity 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/MetafieldDefinitionsApi~getOwnerEntityRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultMetafieldDefinitionRecommendation}
     */
    getOwnerEntityRecommendations(appId, ownerEntity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOwnerEntityRecommendations");
      }
      // verify the required parameter 'ownerEntity' is set
      if (ownerEntity === undefined || ownerEntity === null) {
        throw new Error("Missing the required parameter 'ownerEntity' when calling getOwnerEntityRecommendations");
      }

      let pathParams = {
        'appId': appId,
        'ownerEntity': ownerEntity
      };
      let queryParams = {
        'searchTerm': opts['searchTerm'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultMetafieldDefinitionRecommendation;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/metafields/definitions/recommendations/{ownerEntity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMetafieldDefinition operation.
     * @callback module:api/MetafieldDefinitionsApi~updateMetafieldDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMetafieldDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} ownerEntity 
     * @param {String} key 
     * @param {module:model/UpdateMetafieldDefinition} updateMetafieldDefinition 
     * @param {module:api/MetafieldDefinitionsApi~updateMetafieldDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMetafieldDefinition}
     */
    updateMetafieldDefinition(appId, ownerEntity, key, updateMetafieldDefinition, callback) {
      let postBody = updateMetafieldDefinition;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateMetafieldDefinition");
      }
      // verify the required parameter 'ownerEntity' is set
      if (ownerEntity === undefined || ownerEntity === null) {
        throw new Error("Missing the required parameter 'ownerEntity' when calling updateMetafieldDefinition");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMetafieldDefinition");
      }
      // verify the required parameter 'updateMetafieldDefinition' is set
      if (updateMetafieldDefinition === undefined || updateMetafieldDefinition === null) {
        throw new Error("Missing the required parameter 'updateMetafieldDefinition' when calling updateMetafieldDefinition");
      }

      let pathParams = {
        'appId': appId,
        'ownerEntity': ownerEntity,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'IsReadOnly', 'OwnerEntity', 'Key', 'ValueType', 'Name', 'Description', 'Behaviors'];
      let returnType = RestApiResultMetafieldDefinition;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/metafields/definitions/{ownerEntity}/{key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
