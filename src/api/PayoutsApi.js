/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PayoutDetail', 'model/RestApiArrayResultPayoutSummary', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultPayout', 'model/RestApiPaginationResultPayoutChargeback', 'model/RestApiPaginationResultPayoutOrder', 'model/RestApiPaginationResultPayoutOtherCharge', 'model/RestApiPaginationResultPayoutRefund', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PayoutDetail'), require('../model/RestApiArrayResultPayoutSummary'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultPayout'), require('../model/RestApiPaginationResultPayoutChargeback'), require('../model/RestApiPaginationResultPayoutOrder'), require('../model/RestApiPaginationResultPayoutOtherCharge'), require('../model/RestApiPaginationResultPayoutRefund'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.PayoutsApi = factory(root.Flipdish.ApiClient, root.Flipdish.PayoutDetail, root.Flipdish.RestApiArrayResultPayoutSummary, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiPaginationResultPayout, root.Flipdish.RestApiPaginationResultPayoutChargeback, root.Flipdish.RestApiPaginationResultPayoutOrder, root.Flipdish.RestApiPaginationResultPayoutOtherCharge, root.Flipdish.RestApiPaginationResultPayoutRefund, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, PayoutDetail, RestApiArrayResultPayoutSummary, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultPayout, RestApiPaginationResultPayoutChargeback, RestApiPaginationResultPayoutOrder, RestApiPaginationResultPayoutOtherCharge, RestApiPaginationResultPayoutRefund, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * Payouts service.
   * @module api/PayoutsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PayoutsApi. 
   * @alias module:api/PayoutsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the exportPayoutChargebacks operation.
     * @callback module:api/PayoutsApi~exportPayoutChargebacksCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a list of payout's chargebacks as CSV
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~exportPayoutChargebacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.exportPayoutChargebacks = function(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling exportPayoutChargebacks");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling exportPayoutChargebacks");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling exportPayoutChargebacks");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/chargebacks/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPayoutOrders operation.
     * @callback module:api/PayoutsApi~exportPayoutOrdersCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a list of payout's orders as CSV
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~exportPayoutOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.exportPayoutOrders = function(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling exportPayoutOrders");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling exportPayoutOrders");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling exportPayoutOrders");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/orders/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPayoutOtherCharges operation.
     * @callback module:api/PayoutsApi~exportPayoutOtherChargesCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a list of payout's other charges as CSV
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~exportPayoutOtherChargesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.exportPayoutOtherCharges = function(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling exportPayoutOtherCharges");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling exportPayoutOtherCharges");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling exportPayoutOtherCharges");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/othercharges/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPayoutRefunds operation.
     * @callback module:api/PayoutsApi~exportPayoutRefundsCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a list of payout's refunds as CSV
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~exportPayoutRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.exportPayoutRefunds = function(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling exportPayoutRefunds");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling exportPayoutRefunds");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling exportPayoutRefunds");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/refunds/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPayoutStores operation.
     * @callback module:api/PayoutsApi~exportPayoutStoresCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export payout's details as CSV
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~exportPayoutStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.exportPayoutStores = function(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling exportPayoutStores");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling exportPayoutStores");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling exportPayoutStores");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayout operation.
     * @callback module:api/PayoutsApi~getPayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayoutDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Payout details broken down by Store
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {module:api/PayoutsApi~getPayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayoutDetail}
     */
    this.getPayout = function(appId, bankAccountId, payoutId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayout");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayout");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayout");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = PayoutDetail;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutChargebacks operation.
     * @callback module:api/PayoutsApi~getPayoutChargebacksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayoutChargeback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of payout's chargebacks
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~getPayoutChargebacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayoutChargeback}
     */
    this.getPayoutChargebacks = function(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutChargebacks");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutChargebacks");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutChargebacks");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultPayoutChargeback;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/chargebacks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutOrders operation.
     * @callback module:api/PayoutsApi~getPayoutOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayoutOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of payout's orders
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~getPayoutOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayoutOrder}
     */
    this.getPayoutOrders = function(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutOrders");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutOrders");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutOrders");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultPayoutOrder;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutOtherCharges operation.
     * @callback module:api/PayoutsApi~getPayoutOtherChargesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayoutOtherCharge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of payout's other charges
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~getPayoutOtherChargesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayoutOtherCharge}
     */
    this.getPayoutOtherCharges = function(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutOtherCharges");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutOtherCharges");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutOtherCharges");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultPayoutOtherCharge;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/othercharges', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutRefunds operation.
     * @callback module:api/PayoutsApi~getPayoutRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayoutRefund} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of payout's refunds
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~getPayoutRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayoutRefund}
     */
    this.getPayoutRefunds = function(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutRefunds");
      }

      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutRefunds");
      }

      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutRefunds");
      }


      var pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultPayoutRefund;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/refunds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutSummaries operation.
     * @callback module:api/PayoutsApi~getPayoutSummariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultPayoutSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of payout summaries
     * BETA - this endpoint is under development, do not use it in your production system
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.bankAccountId 
     * @param {Number} opts.payeeBankAccountDataId Deprecated
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:model/String} opts.status 
     * @param {module:api/PayoutsApi~getPayoutSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultPayoutSummary}
     */
    this.getPayoutSummaries = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutSummaries");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'bankAccountId': opts['bankAccountId'],
        'payeeBankAccountDataId': opts['payeeBankAccountDataId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'status': opts['status'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultPayoutSummary;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/payouts/summaries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayouts operation.
     * @callback module:api/PayoutsApi~getPayoutsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayout} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of payouts
     * BETA - this endpoint is under development, do not use it in your production system
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.bankAccountId 
     * @param {Number} opts.payeeBankAccountDataId Deprecated
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:model/String} opts.status 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/PayoutsApi~getPayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayout}
     */
    this.getPayouts = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayouts");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'bankAccountId': opts['bankAccountId'],
        'payeeBankAccountDataId': opts['payeeBankAccountDataId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'status': opts['status'],
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultPayout;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/payouts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
