/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PayoutDetail from '../model/PayoutDetail';
import RestApiArrayResultPayoutSummary from '../model/RestApiArrayResultPayoutSummary';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultPayout from '../model/RestApiPaginationResultPayout';
import RestApiPaginationResultPayoutChargeback from '../model/RestApiPaginationResultPayoutChargeback';
import RestApiPaginationResultPayoutOrder from '../model/RestApiPaginationResultPayoutOrder';
import RestApiPaginationResultPayoutOtherCharge from '../model/RestApiPaginationResultPayoutOtherCharge';
import RestApiPaginationResultPayoutRefund from '../model/RestApiPaginationResultPayoutRefund';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Payouts service.
* @module api/PayoutsApi
* @version 1.0.0
*/
export default class PayoutsApi {

    /**
    * Constructs a new PayoutsApi. 
    * @alias module:api/PayoutsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPayout operation.
     * @callback module:api/PayoutsApi~getPayoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PayoutDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {module:api/PayoutsApi~getPayoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PayoutDetail}
     */
    getPayout(appId, bankAccountId, payoutId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayout");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayout");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayout");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'PayoutId', 'BankAccountId', 'AccountName', 'PayoutStatus', 'CreatedDate', 'PeriodStartTime', 'PeriodEndTime', 'DestinationBank', 'DestinationAccount', 'PayoutType', 'Currency', 'PayoutStores', 'Amount', 'CutoffDate'];
      let returnType = PayoutDetail;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutChargebacks operation.
     * @callback module:api/PayoutsApi~getPayoutChargebacksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayoutChargeback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~getPayoutChargebacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayoutChargeback}
     */
    getPayoutChargebacks(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutChargebacks");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutChargebacks");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutChargebacks");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'storeIds': this.apiClient.buildCollectionParam(opts['storeIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultPayoutChargeback;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/chargebacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutOrders operation.
     * @callback module:api/PayoutsApi~getPayoutOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayoutOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~getPayoutOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayoutOrder}
     */
    getPayoutOrders(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutOrders");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutOrders");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutOrders");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'storeIds': this.apiClient.buildCollectionParam(opts['storeIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultPayoutOrder;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutOtherCharges operation.
     * @callback module:api/PayoutsApi~getPayoutOtherChargesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayoutOtherCharge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~getPayoutOtherChargesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayoutOtherCharge}
     */
    getPayoutOtherCharges(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutOtherCharges");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutOtherCharges");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutOtherCharges");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'storeIds': this.apiClient.buildCollectionParam(opts['storeIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultPayoutOtherCharge;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/othercharges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutRefunds operation.
     * @callback module:api/PayoutsApi~getPayoutRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayoutRefund} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutsApi~getPayoutRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayoutRefund}
     */
    getPayoutRefunds(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutRefunds");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutRefunds");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutRefunds");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'storeIds': this.apiClient.buildCollectionParam(opts['storeIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultPayoutRefund;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/payouts/{payoutId}/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutSummaries operation.
     * @callback module:api/PayoutsApi~getPayoutSummariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultPayoutSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {Array.<Number>} opts.payoutRequestIds_bankAccountIds List of bank account ids to search for
     * @param {Array.<module:model/String>} opts.payoutRequestIds_states List of {Flipdish.PublicModels.V1.Payouts.PayoutStatus} so search for
     * @param {module:api/PayoutsApi~getPayoutSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultPayoutSummary}
     */
    getPayoutSummaries(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutSummaries");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'payoutRequestIds.bankAccountIds': this.apiClient.buildCollectionParam(opts['payoutRequestIds_bankAccountIds'], 'multi'),
        'payoutRequestIds.states': this.apiClient.buildCollectionParam(opts['payoutRequestIds_states'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultPayoutSummary;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/payouts/summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayouts operation.
     * @callback module:api/PayoutsApi~getPayoutsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayout} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Array.<Number>} opts.payoutRequestIds_bankAccountIds List of bank account ids to search for
     * @param {Array.<module:model/String>} opts.payoutRequestIds_states List of {Flipdish.PublicModels.V1.Payouts.PayoutStatus} so search for
     * @param {module:api/PayoutsApi~getPayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayout}
     */
    getPayouts(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayouts");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'page': opts['page'],
        'limit': opts['limit'],
        'payoutRequestIds.bankAccountIds': this.apiClient.buildCollectionParam(opts['payoutRequestIds_bankAccountIds'], 'multi'),
        'payoutRequestIds.states': this.apiClient.buildCollectionParam(opts['payoutRequestIds_states'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultPayout;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/payouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
