/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLocation from '../model/CreateLocation';
import RestApiArrayResultLocationAreaLocation from '../model/RestApiArrayResultLocationAreaLocation';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultLocationAreaLocation from '../model/RestApiResultLocationAreaLocation';
import RestApiResultMappedLocation from '../model/RestApiResultMappedLocation';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Location service.
* @module api/LocationApi
* @version 1.0.0
*/
export default class LocationApi {

    /**
    * Constructs a new LocationApi. 
    * @alias module:api/LocationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLocation operation.
     * @callback module:api/LocationApi~createLocationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} locationAreaId 
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {Array.<module:model/CreateLocation>} createLocationInput 
     * @param {module:api/LocationApi~createLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createLocation(locationAreaId, appId, storeId, createLocationInput, callback) {
      let postBody = createLocationInput;
      // verify the required parameter 'locationAreaId' is set
      if (locationAreaId === undefined || locationAreaId === null) {
        throw new Error("Missing the required parameter 'locationAreaId' when calling createLocation");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createLocation");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling createLocation");
      }
      // verify the required parameter 'createLocationInput' is set
      if (createLocationInput === undefined || createLocationInput === null) {
        throw new Error("Missing the required parameter 'createLocationInput' when calling createLocation");
      }

      let pathParams = {
        'locationAreaId': locationAreaId,
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLocation operation.
     * @callback module:api/LocationApi~deleteLocationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} locationId 
     * @param {Number} locationAreaId 
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:api/LocationApi~deleteLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLocation(locationId, locationAreaId, appId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling deleteLocation");
      }
      // verify the required parameter 'locationAreaId' is set
      if (locationAreaId === undefined || locationAreaId === null) {
        throw new Error("Missing the required parameter 'locationAreaId' when calling deleteLocation");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteLocation");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteLocation");
      }

      let pathParams = {
        'locationId': locationId,
        'locationAreaId': locationAreaId,
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapLocationToExternalId operation.
     * @callback module:api/LocationApi~mapLocationToExternalIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMappedLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} locationId 
     * @param {Number} locationAreaId 
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalLocationId 
     * @param {module:api/LocationApi~mapLocationToExternalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMappedLocation}
     */
    mapLocationToExternalId(locationId, locationAreaId, appId, storeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling mapLocationToExternalId");
      }
      // verify the required parameter 'locationAreaId' is set
      if (locationAreaId === undefined || locationAreaId === null) {
        throw new Error("Missing the required parameter 'locationAreaId' when calling mapLocationToExternalId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling mapLocationToExternalId");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling mapLocationToExternalId");
      }

      let pathParams = {
        'locationId': locationId,
        'locationAreaId': locationAreaId,
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
        'externalLocationId': opts['externalLocationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultMappedLocation;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/map-external', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveLocation operation.
     * @callback module:api/LocationApi~moveLocationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} locationId 
     * @param {Number} locationAreaId 
     * @param {Number} newLocationAreaId 
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:api/LocationApi~moveLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    moveLocation(locationId, locationAreaId, newLocationAreaId, appId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling moveLocation");
      }
      // verify the required parameter 'locationAreaId' is set
      if (locationAreaId === undefined || locationAreaId === null) {
        throw new Error("Missing the required parameter 'locationAreaId' when calling moveLocation");
      }
      // verify the required parameter 'newLocationAreaId' is set
      if (newLocationAreaId === undefined || newLocationAreaId === null) {
        throw new Error("Missing the required parameter 'newLocationAreaId' when calling moveLocation");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling moveLocation");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling moveLocation");
      }

      let pathParams = {
        'locationId': locationId,
        'locationAreaId': locationAreaId,
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
        'newLocationAreaId': newLocationAreaId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLocation operation.
     * @callback module:api/LocationApi~updateLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultLocationAreaLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} locationAreaId 
     * @param {Number} locationId 
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:model/CreateLocation} updateLocationInput 
     * @param {module:api/LocationApi~updateLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultLocationAreaLocation}
     */
    updateLocation(locationAreaId, locationId, appId, storeId, updateLocationInput, callback) {
      let postBody = updateLocationInput;
      // verify the required parameter 'locationAreaId' is set
      if (locationAreaId === undefined || locationAreaId === null) {
        throw new Error("Missing the required parameter 'locationAreaId' when calling updateLocation");
      }
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling updateLocation");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateLocation");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateLocation");
      }
      // verify the required parameter 'updateLocationInput' is set
      if (updateLocationInput === undefined || updateLocationInput === null) {
        throw new Error("Missing the required parameter 'updateLocationInput' when calling updateLocation");
      }

      let pathParams = {
        'locationAreaId': locationAreaId,
        'locationId': locationId,
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultLocationAreaLocation;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/location/{locationId}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
