/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IndexPageBase from '../model/IndexPageBase';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultIndexPage from '../model/RestApiResultIndexPage';
import RestApiResultIndexPageBase from '../model/RestApiResultIndexPageBase';
import RestApiResultWebsiteImage from '../model/RestApiResultWebsiteImage';
import RestApiResultWebsiteTestimonial from '../model/RestApiResultWebsiteTestimonial';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import WebsiteTestimonialBase from '../model/WebsiteTestimonialBase';

/**
* Website service.
* @module api/WebsiteApi
* @version 1.0.0
*/
export default class WebsiteApi {

    /**
    * Constructs a new WebsiteApi. 
    * @alias module:api/WebsiteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTestimonial operation.
     * @callback module:api/WebsiteApi~addTestimonialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultWebsiteTestimonial} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/WebsiteTestimonialBase} testimonial 
     * @param {module:api/WebsiteApi~addTestimonialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultWebsiteTestimonial}
     */
    addTestimonial(appId, testimonial, callback) {
      let postBody = testimonial;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling addTestimonial");
      }
      // verify the required parameter 'testimonial' is set
      if (testimonial === undefined || testimonial === null) {
        throw new Error("Missing the required parameter 'testimonial' when calling addTestimonial");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultWebsiteTestimonial;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/website/testimonial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTestimonial operation.
     * @callback module:api/WebsiteApi~deleteTestimonialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} testimonialId 
     * @param {module:api/WebsiteApi~deleteTestimonialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTestimonial(appId, testimonialId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteTestimonial");
      }
      // verify the required parameter 'testimonialId' is set
      if (testimonialId === undefined || testimonialId === null) {
        throw new Error("Missing the required parameter 'testimonialId' when calling deleteTestimonial");
      }

      let pathParams = {
        'appId': appId,
        'testimonialId': testimonialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/website/testimonial/{testimonialId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebsiteImage operation.
     * @callback module:api/WebsiteApi~deleteWebsiteImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} imageId 
     * @param {module:api/WebsiteApi~deleteWebsiteImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebsiteImage(appId, imageId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteWebsiteImage");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteWebsiteImage");
      }

      let pathParams = {
        'appId': appId,
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/website/image/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editTestimonial operation.
     * @callback module:api/WebsiteApi~editTestimonialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultWebsiteTestimonial} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} testimonialId 
     * @param {module:model/WebsiteTestimonialBase} testimonial 
     * @param {module:api/WebsiteApi~editTestimonialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultWebsiteTestimonial}
     */
    editTestimonial(appId, testimonialId, testimonial, callback) {
      let postBody = testimonial;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling editTestimonial");
      }
      // verify the required parameter 'testimonialId' is set
      if (testimonialId === undefined || testimonialId === null) {
        throw new Error("Missing the required parameter 'testimonialId' when calling editTestimonial");
      }
      // verify the required parameter 'testimonial' is set
      if (testimonial === undefined || testimonial === null) {
        throw new Error("Missing the required parameter 'testimonial' when calling editTestimonial");
      }

      let pathParams = {
        'appId': appId,
        'testimonialId': testimonialId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultWebsiteTestimonial;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/website/testimonial/{testimonialId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIndexConfiguration operation.
     * @callback module:api/WebsiteApi~getIndexConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultIndexPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/WebsiteApi~getIndexConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultIndexPage}
     */
    getIndexConfiguration(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getIndexConfiguration");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultIndexPage;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/website/index', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setIndexConfiguration operation.
     * @callback module:api/WebsiteApi~setIndexConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultIndexPageBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/IndexPageBase} indexPage 
     * @param {module:api/WebsiteApi~setIndexConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultIndexPageBase}
     */
    setIndexConfiguration(appId, indexPage, callback) {
      let postBody = indexPage;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setIndexConfiguration");
      }
      // verify the required parameter 'indexPage' is set
      if (indexPage === undefined || indexPage === null) {
        throw new Error("Missing the required parameter 'indexPage' when calling setIndexConfiguration");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultIndexPageBase;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/website/index', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadWebsiteImage operation.
     * @callback module:api/WebsiteApi~uploadWebsiteImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultWebsiteImage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} imageLocation 
     * @param {File} Image App Logo
     * @param {module:api/WebsiteApi~uploadWebsiteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultWebsiteImage}
     */
    uploadWebsiteImage(appId, imageLocation, Image, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling uploadWebsiteImage");
      }
      // verify the required parameter 'imageLocation' is set
      if (imageLocation === undefined || imageLocation === null) {
        throw new Error("Missing the required parameter 'imageLocation' when calling uploadWebsiteImage");
      }
      // verify the required parameter 'Image' is set
      if (Image === undefined || Image === null) {
        throw new Error("Missing the required parameter 'Image' when calling uploadWebsiteImage");
      }

      let pathParams = {
        'appId': appId,
        'imageLocation': imageLocation
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Image': Image
      };

      let authNames = ['oauth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultWebsiteImage;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/website/image/{imageLocation}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the websiteCheckNow operation.
     * @callback module:api/WebsiteApi~websiteCheckNowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/WebsiteApi~websiteCheckNowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    websiteCheckNow(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling websiteCheckNow");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/website/dnscheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
