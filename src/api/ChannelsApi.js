/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Response from '../model/Response';
import RestApiArrayResultChannel from '../model/RestApiArrayResultChannel';
import RestApiArrayResultStoreChannelAssignment from '../model/RestApiArrayResultStoreChannelAssignment';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultAppChannelAssignment from '../model/RestApiResultAppChannelAssignment';
import RestApiResultChannel from '../model/RestApiResultChannel';
import RestApiResultStoreChannelAssignment from '../model/RestApiResultStoreChannelAssignment';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Channels service.
* @module api/ChannelsApi
* @version 1.0.0
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignAppIdToSalesChannel operation.
     * @callback module:api/ChannelsApi~assignAppIdToSalesChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} channelId 
     * @param {module:api/ChannelsApi~assignAppIdToSalesChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    assignAppIdToSalesChannel(appId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling assignAppIdToSalesChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling assignAppIdToSalesChannel");
      }

      let pathParams = {
        'appId': appId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/{channelId}/assign-appId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignStoreToChannel operation.
     * @callback module:api/ChannelsApi~assignStoreToChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {String} appId 
     * @param {Number} channelId 
     * @param {module:api/ChannelsApi~assignStoreToChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    assignStoreToChannel(storeId, appId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling assignStoreToChannel");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling assignStoreToChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling assignStoreToChannel");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'storeId': storeId,
        'channelId': channelId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/assign-store', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachStoreToSalesChannel operation.
     * @callback module:api/ChannelsApi~attachStoreToSalesChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} channelId 
     * @param {Number} storeId 
     * @param {module:api/ChannelsApi~attachStoreToSalesChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    attachStoreToSalesChannel(appId, channelId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling attachStoreToSalesChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling attachStoreToSalesChannel");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling attachStoreToSalesChannel");
      }

      let pathParams = {
        'appId': appId,
        'channelId': channelId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/{channelId}/stores/{storeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detachAllStoresFromSalesChannel operation.
     * @callback module:api/ChannelsApi~detachAllStoresFromSalesChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} channelId 
     * @param {module:api/ChannelsApi~detachAllStoresFromSalesChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    detachAllStoresFromSalesChannel(appId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling detachAllStoresFromSalesChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling detachAllStoresFromSalesChannel");
      }

      let pathParams = {
        'appId': appId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/{channelId}/stores', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detachStoreFromSalesChannel operation.
     * @callback module:api/ChannelsApi~detachStoreFromSalesChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} channelId 
     * @param {Number} storeId 
     * @param {module:api/ChannelsApi~detachStoreFromSalesChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    detachStoreFromSalesChannel(appId, channelId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling detachStoreFromSalesChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling detachStoreFromSalesChannel");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling detachStoreFromSalesChannel");
      }

      let pathParams = {
        'appId': appId,
        'channelId': channelId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/{channelId}/stores/{storeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssignedChannels operation.
     * @callback module:api/ChannelsApi~getAssignedChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ChannelsApi~getAssignedChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultChannel}
     */
    getAssignedChannels(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAssignedChannels");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultChannel;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/assigned-channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableChannels operation.
     * @callback module:api/ChannelsApi~getAvailableChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ChannelsApi~getAvailableChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultChannel}
     */
    getAvailableChannels(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAvailableChannels");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultChannel;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/available-channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannel operation.
     * @callback module:api/ChannelsApi~getChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {String} appId 
     * @param {module:api/ChannelsApi~getChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultChannel}
     */
    getChannel(id, appId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChannel");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getChannel");
      }

      let pathParams = {
        'id': id,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultChannel;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannels operation.
     * @callback module:api/ChannelsApi~getChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/ChannelsApi~getChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultChannel}
     */
    getChannels(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getChannels");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultChannel;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoresAssignedToChannel operation.
     * @callback module:api/ChannelsApi~getStoresAssignedToChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultStoreChannelAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} channelId 
     * @param {module:api/ChannelsApi~getStoresAssignedToChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultStoreChannelAssignment}
     */
    getStoresAssignedToChannel(appId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoresAssignedToChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getStoresAssignedToChannel");
      }

      let pathParams = {
        'appId': appId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultStoreChannelAssignment;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/{channelId}/assigned-stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoresBySalesChannel operation.
     * @callback module:api/ChannelsApi~getStoresBySalesChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} channelId 
     * @param {module:api/ChannelsApi~getStoresBySalesChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getStoresBySalesChannel(appId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoresBySalesChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getStoresBySalesChannel");
      }

      let pathParams = {
        'appId': appId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/{channelId}/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignStoreFromChannel operation.
     * @callback module:api/ChannelsApi~unassignStoreFromChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {String} appId 
     * @param {Number} channelId 
     * @param {module:api/ChannelsApi~unassignStoreFromChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    unassignStoreFromChannel(storeId, appId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling unassignStoreFromChannel");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling unassignStoreFromChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling unassignStoreFromChannel");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'storeId': storeId,
        'channelId': channelId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/channels/unassign-store', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
