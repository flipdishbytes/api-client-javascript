/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PushNotificationRequest from '../model/PushNotificationRequest';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultPushNotificationResponse from '../model/RestApiPaginationResultPushNotificationResponse';
import RestApiResultPushNotificationResponse from '../model/RestApiResultPushNotificationResponse';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* PushNotifications service.
* @module api/PushNotificationsApi
* @version 1.0.0
*/
export default class PushNotificationsApi {

    /**
    * Constructs a new PushNotificationsApi. 
    * @alias module:api/PushNotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePushNotification operation.
     * @callback module:api/PushNotificationsApi~deletePushNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} scheduledPushNotificationId 
     * @param {module:api/PushNotificationsApi~deletePushNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePushNotification(appId, scheduledPushNotificationId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deletePushNotification");
      }
      // verify the required parameter 'scheduledPushNotificationId' is set
      if (scheduledPushNotificationId === undefined || scheduledPushNotificationId === null) {
        throw new Error("Missing the required parameter 'scheduledPushNotificationId' when calling deletePushNotification");
      }

      let pathParams = {
        'appId': appId,
        'scheduledPushNotificationId': scheduledPushNotificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/pushnotifications/{scheduledPushNotificationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPushNotifications operation.
     * @callback module:api/PushNotificationsApi~getPushNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPushNotificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/PushNotificationsApi~getPushNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPushNotificationResponse}
     */
    getPushNotifications(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPushNotifications");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiPaginationResultPushNotificationResponse;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/pushnotifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulePushNotification operation.
     * @callback module:api/PushNotificationsApi~schedulePushNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultPushNotificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/PushNotificationRequest} notification 
     * @param {module:api/PushNotificationsApi~schedulePushNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultPushNotificationResponse}
     */
    schedulePushNotification(appId, notification, callback) {
      let postBody = notification;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling schedulePushNotification");
      }
      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling schedulePushNotification");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultPushNotificationResponse;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/pushnotifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePushNotification operation.
     * @callback module:api/PushNotificationsApi~updatePushNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultPushNotificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} scheduledPushNotificationId 
     * @param {module:model/PushNotificationRequest} notification 
     * @param {module:api/PushNotificationsApi~updatePushNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultPushNotificationResponse}
     */
    updatePushNotification(appId, scheduledPushNotificationId, notification, callback) {
      let postBody = notification;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updatePushNotification");
      }
      // verify the required parameter 'scheduledPushNotificationId' is set
      if (scheduledPushNotificationId === undefined || scheduledPushNotificationId === null) {
        throw new Error("Missing the required parameter 'scheduledPushNotificationId' when calling updatePushNotification");
      }
      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling updatePushNotification");
      }

      let pathParams = {
        'appId': appId,
        'scheduledPushNotificationId': scheduledPushNotificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultPushNotificationResponse;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/pushnotifications/{scheduledPushNotificationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
