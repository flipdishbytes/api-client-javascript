/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Accept from '../model/Accept';
import OrderDeliveryInformationBase from '../model/OrderDeliveryInformationBase';
import OrderFulfillmentStatusUpdate from '../model/OrderFulfillmentStatusUpdate';
import OrderList from '../model/OrderList';
import Refund from '../model/Refund';
import Reject from '../model/Reject';
import RestApiArrayResultOrderFulfillmentStatus from '../model/RestApiArrayResultOrderFulfillmentStatus';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultOrder from '../model/RestApiPaginationResultOrder';
import RestApiPaginationResultOrderSummary from '../model/RestApiPaginationResultOrderSummary';
import RestApiResultOrder from '../model/RestApiResultOrder';
import RestApiResultOrderDeliveryInformation from '../model/RestApiResultOrderDeliveryInformation';
import RestApiResultOrderFulfillmentStatus from '../model/RestApiResultOrderFulfillmentStatus';
import RestApiResultOrderFulfillmentStatusWithConfigurationActions from '../model/RestApiResultOrderFulfillmentStatusWithConfigurationActions';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Orders service.
* @module api/OrdersApi
* @version 1.0.0
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptOrder operation.
     * @callback module:api/OrdersApi~acceptOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Accept} acceptObject 
     * @param {module:api/OrdersApi~acceptOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    acceptOrder(id, acceptObject, callback) {
      let postBody = acceptObject;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling acceptOrder");
      }
      // verify the required parameter 'acceptObject' is set
      if (acceptObject === undefined || acceptObject === null) {
        throw new Error("Missing the required parameter 'acceptObject' when calling acceptOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{id}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dispatchOrder operation.
     * @callback module:api/OrdersApi~dispatchOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/OrdersApi~dispatchOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dispatchOrder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dispatchOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{id}/dispatch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeliveryInformation operation.
     * @callback module:api/OrdersApi~getDeliveryInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultOrderDeliveryInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {module:api/OrdersApi~getDeliveryInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultOrderDeliveryInformation}
     */
    getDeliveryInformation(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getDeliveryInformation");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultOrderDeliveryInformation;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{orderId}/deliveryinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFulfillmentState operation.
     * @callback module:api/OrdersApi~getFulfillmentStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultOrderFulfillmentStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {module:api/OrdersApi~getFulfillmentStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultOrderFulfillmentStatus}
     */
    getFulfillmentState(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getFulfillmentState");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultOrderFulfillmentStatus;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{orderId}/fulfillment/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFulfillmentStatusWithDetailsAndActions operation.
     * @callback module:api/OrdersApi~getFulfillmentStatusWithDetailsAndActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultOrderFulfillmentStatusWithConfigurationActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {module:api/OrdersApi~getFulfillmentStatusWithDetailsAndActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultOrderFulfillmentStatusWithConfigurationActions}
     */
    getFulfillmentStatusWithDetailsAndActions(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getFulfillmentStatusWithDetailsAndActions");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultOrderFulfillmentStatusWithConfigurationActions;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{orderId}/fulfillment/state/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderById operation.
     * @callback module:api/OrdersApi~getOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/OrdersApi~getOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultOrder}
     */
    getOrderById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrderById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiResultOrder;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrders operation.
     * @callback module:api/OrdersApi~getOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.physicalRestaurantId 
     * @param {Array.<module:model/String>} opts.state 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/OrdersApi~getOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultOrder}
     */
    getOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'physicalRestaurantId': this.apiClient.buildCollectionParam(opts['physicalRestaurantId'], 'multi'),
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'from': opts['from'],
        'to': opts['to'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiPaginationResultOrder;
      return this.apiClient.callApi(
        '/api/v1.0/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrdersSummary operation.
     * @callback module:api/OrdersApi~getOrdersSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultOrderSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery 
     * @param {Array.<Number>} opts.physicalRestaurantId 
     * @param {Array.<module:model/String>} opts.state 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Boolean} opts.orderByRequestedForTime 
     * @param {Array.<module:model/String>} opts.channels 
     * @param {Array.<Number>} opts.orderIds 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Boolean} opts.logSql 
     * @param {module:api/OrdersApi~getOrdersSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultOrderSummary}
     */
    getOrdersSummary(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrdersSummary");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'searchQuery': opts['searchQuery'],
        'physicalRestaurantId': this.apiClient.buildCollectionParam(opts['physicalRestaurantId'], 'multi'),
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'page': opts['page'],
        'limit': opts['limit'],
        'orderByRequestedForTime': opts['orderByRequestedForTime'],
        'channels': this.apiClient.buildCollectionParam(opts['channels'], 'multi'),
        'orderIds': this.apiClient.buildCollectionParam(opts['orderIds'], 'multi'),
        'from': opts['from'],
        'to': opts['to'],
        'logSql': opts['logSql']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiPaginationResultOrderSummary;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/orders/summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrdersSummaryNew operation.
     * @callback module:api/OrdersApi~getOrdersSummaryNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultOrderSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery 
     * @param {Array.<Number>} opts.physicalRestaurantId 
     * @param {Array.<module:model/String>} opts.state 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Boolean} opts.orderByRequestedForTime 
     * @param {Array.<module:model/String>} opts.channels 
     * @param {Array.<Number>} opts.orderIds 
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Boolean} opts.logSql 
     * @param {module:api/OrdersApi~getOrdersSummaryNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultOrderSummary}
     */
    getOrdersSummaryNew(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOrdersSummaryNew");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'searchQuery': opts['searchQuery'],
        'physicalRestaurantId': this.apiClient.buildCollectionParam(opts['physicalRestaurantId'], 'multi'),
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'page': opts['page'],
        'limit': opts['limit'],
        'orderByRequestedForTime': opts['orderByRequestedForTime'],
        'channels': this.apiClient.buildCollectionParam(opts['channels'], 'multi'),
        'orderIds': this.apiClient.buildCollectionParam(opts['orderIds'], 'multi'),
        'from': opts['from'],
        'to': opts['to'],
        'logSql': opts['logSql']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiPaginationResultOrderSummary;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/orders/summariesNew', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadyToProcess operation.
     * @callback module:api/OrdersApi~getReadyToProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeId 
     * @param {module:api/OrdersApi~getReadyToProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderList}
     */
    getReadyToProcess(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getReadyToProcess");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'storeId': this.apiClient.buildCollectionParam(opts['storeId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message'];
      let returnType = OrderList;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/orders/ready_to_process', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refundOrder operation.
     * @callback module:api/OrdersApi~refundOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Refund} refundObject 
     * @param {module:api/OrdersApi~refundOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    refundOrder(id, refundObject, callback) {
      let postBody = refundObject;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling refundOrder");
      }
      // verify the required parameter 'refundObject' is set
      if (refundObject === undefined || refundObject === null) {
        throw new Error("Missing the required parameter 'refundObject' when calling refundOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{id}/refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectOrder operation.
     * @callback module:api/OrdersApi~rejectOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/Reject} rejectObject 
     * @param {module:api/OrdersApi~rejectOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rejectOrder(id, rejectObject, callback) {
      let postBody = rejectObject;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rejectOrder");
      }
      // verify the required parameter 'rejectObject' is set
      if (rejectObject === undefined || rejectObject === null) {
        throw new Error("Missing the required parameter 'rejectObject' when calling rejectOrder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{id}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFulfillmentStatuses operation.
     * @callback module:api/OrdersApi~searchFulfillmentStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultOrderFulfillmentStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} orderIds 
     * @param {module:api/OrdersApi~searchFulfillmentStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultOrderFulfillmentStatus}
     */
    searchFulfillmentStatuses(appId, orderIds, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling searchFulfillmentStatuses");
      }
      // verify the required parameter 'orderIds' is set
      if (orderIds === undefined || orderIds === null) {
        throw new Error("Missing the required parameter 'orderIds' when calling searchFulfillmentStatuses");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'orderIds': orderIds
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultOrderFulfillmentStatus;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/orders/fulfillmentstatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeliveryInformation operation.
     * @callback module:api/OrdersApi~updateDeliveryInformationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {module:model/OrderDeliveryInformationBase} deliveryInformation 
     * @param {module:api/OrdersApi~updateDeliveryInformationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDeliveryInformation(orderId, deliveryInformation, callback) {
      let postBody = deliveryInformation;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateDeliveryInformation");
      }
      // verify the required parameter 'deliveryInformation' is set
      if (deliveryInformation === undefined || deliveryInformation === null) {
        throw new Error("Missing the required parameter 'deliveryInformation' when calling updateDeliveryInformation");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{orderId}/deliveryinfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFulfillmentState operation.
     * @callback module:api/OrdersApi~updateFulfillmentStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {module:model/OrderFulfillmentStatusUpdate} fulfillmentStatusRequest 
     * @param {module:api/OrdersApi~updateFulfillmentStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFulfillmentState(orderId, fulfillmentStatusRequest, callback) {
      let postBody = fulfillmentStatusRequest;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateFulfillmentState");
      }
      // verify the required parameter 'fulfillmentStatusRequest' is set
      if (fulfillmentStatusRequest === undefined || fulfillmentStatusRequest === null) {
        throw new Error("Missing the required parameter 'fulfillmentStatusRequest' when calling updateFulfillmentState");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{orderId}/fulfillment/state', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
