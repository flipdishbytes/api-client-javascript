/**
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Accept', 'model/Refund', 'model/Reject', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultOrder', 'model/RestApiResultOrder', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Accept'), require('../model/Refund'), require('../model/Reject'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultOrder'), require('../model/RestApiResultOrder'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.OrdersApi = factory(root.Flipdish.ApiClient, root.Flipdish.Accept, root.Flipdish.Refund, root.Flipdish.Reject, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiPaginationResultOrder, root.Flipdish.RestApiResultOrder, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, Accept, Refund, Reject, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultOrder, RestApiResultOrder, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * Orders service.
   * @module api/OrdersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new OrdersApi. 
   * @alias module:api/OrdersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the acceptOrder operation.
     * @callback module:api/OrdersApi~acceptOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept order
     * To accept an order, you create an &#x60;accept&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param {Number} id Order identifier
     * @param {module:model/Accept} acceptObject 
     * @param {module:api/OrdersApi~acceptOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.acceptOrder = function(id, acceptObject, callback) {
      var postBody = acceptObject;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling acceptOrder");
      }

      // verify the required parameter 'acceptObject' is set
      if (acceptObject === undefined || acceptObject === null) {
        throw new Error("Missing the required parameter 'acceptObject' when calling acceptOrder");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/orders/{id}/accept', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderById operation.
     * @callback module:api/OrdersApi~getOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order by ID
     * @param {Number} id Order identifier
     * @param {module:api/OrdersApi~getOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultOrder}
     */
    this.getOrderById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrderById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultOrder;

      return this.apiClient.callApi(
        '/api/v1.0/orders/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrders operation.
     * @callback module:api/OrdersApi~getOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get orders by filter
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.physicalRestaurantId Physical restaurant identifiers
     * @param {Array.<module:model/String>} opts.state Order states
     * @param {Number} opts.page Requested page number
     * @param {Number} opts.limit Requested page limit
     * @param {module:api/OrdersApi~getOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultOrder}
     */
    this.getOrders = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'physicalRestaurantId': {
          value: opts['physicalRestaurantId'],
          collectionFormat: 'multi'
        },
        'state': {
          value: opts['state'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultOrder;

      return this.apiClient.callApi(
        '/api/v1.0/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refundOrder operation.
     * @callback module:api/OrdersApi~refundOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund order
     * To refund an order, you create a &#x60;refund&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param {Number} id Order identifier
     * @param {module:model/Refund} refundObject 
     * @param {module:api/OrdersApi~refundOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.refundOrder = function(id, refundObject, callback) {
      var postBody = refundObject;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling refundOrder");
      }

      // verify the required parameter 'refundObject' is set
      if (refundObject === undefined || refundObject === null) {
        throw new Error("Missing the required parameter 'refundObject' when calling refundOrder");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/orders/{id}/refund', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectOrder operation.
     * @callback module:api/OrdersApi~rejectOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reject order
     * To reject an order, you create a &#x60;reject&#x60; object and send it to Flipdish API using HTTP POST method. &#x60;Id&#x60; path parameter identifies the order.
     * @param {Number} id Order identifier
     * @param {module:model/Reject} rejectObject 
     * @param {module:api/OrdersApi~rejectOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.rejectOrder = function(id, rejectObject, callback) {
      var postBody = rejectObject;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rejectOrder");
      }

      // verify the required parameter 'rejectObject' is set
      if (rejectObject === undefined || rejectObject === null) {
        throw new Error("Missing the required parameter 'rejectObject' when calling rejectOrder");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/orders/{id}/reject', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
