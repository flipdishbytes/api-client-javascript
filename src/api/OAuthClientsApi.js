/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OAuthApp from '../model/OAuthApp';
import RestApiArrayResultOAuthApp from '../model/RestApiArrayResultOAuthApp';
import RestApiArrayResultOauthClientRedirectUri from '../model/RestApiArrayResultOauthClientRedirectUri';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultOAuthApp from '../model/RestApiResultOAuthApp';
import RestApiResultOauthClientRedirectUri from '../model/RestApiResultOauthClientRedirectUri';
import RestApiStringResult from '../model/RestApiStringResult';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* OAuthClients service.
* @module api/OAuthClientsApi
* @version 1.0.0
*/
export default class OAuthClientsApi {

    /**
    * Constructs a new OAuthClientsApi. 
    * @alias module:api/OAuthClientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addRedirectUri operation.
     * @callback module:api/OAuthClientsApi~addRedirectUriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultOauthClientRedirectUri} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appId 
     * @param {String} uri 
     * @param {module:api/OAuthClientsApi~addRedirectUriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultOauthClientRedirectUri}
     */
    addRedirectUri(oauthAppId, appId, uri, callback) {
      let postBody = uri;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling addRedirectUri");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling addRedirectUri");
      }
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling addRedirectUri");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultOauthClientRedirectUri;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients/{oauthAppId}/redirecturis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOAuthApp operation.
     * @callback module:api/OAuthClientsApi~createOAuthAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/OAuthApp} oAuthApp 
     * @param {module:api/OAuthClientsApi~createOAuthAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createOAuthApp(appId, oAuthApp, callback) {
      let postBody = oAuthApp;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createOAuthApp");
      }
      // verify the required parameter 'oAuthApp' is set
      if (oAuthApp === undefined || oAuthApp === null) {
        throw new Error("Missing the required parameter 'oAuthApp' when calling createOAuthApp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOAuthApp operation.
     * @callback module:api/OAuthClientsApi~deleteOAuthAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appId 
     * @param {module:api/OAuthClientsApi~deleteOAuthAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOAuthApp(oauthAppId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling deleteOAuthApp");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteOAuthApp");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients/{oauthAppId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOAuthApps operation.
     * @callback module:api/OAuthClientsApi~getOAuthAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultOAuthApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.oauthAppName 
     * @param {module:api/OAuthClientsApi~getOAuthAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultOAuthApp}
     */
    getOAuthApps(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOAuthApps");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'oauthAppName': opts['oauthAppName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultOAuthApp;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOAuthClientByClientId operation.
     * @callback module:api/OAuthClientsApi~getOAuthClientByClientIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultOAuthApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appId 
     * @param {module:api/OAuthClientsApi~getOAuthClientByClientIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultOAuthApp}
     */
    getOAuthClientByClientId(oauthAppId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling getOAuthClientByClientId");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOAuthClientByClientId");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultOAuthApp;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients/{oauthAppId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOAuthClientSecret operation.
     * @callback module:api/OAuthClientsApi~getOAuthClientSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appId 
     * @param {module:api/OAuthClientsApi~getOAuthClientSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    getOAuthClientSecret(oauthAppId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling getOAuthClientSecret");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOAuthClientSecret");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients/{oauthAppId}/secret', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOauthAccessToken operation.
     * @callback module:api/OAuthClientsApi~getOauthAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appId 
     * @param {module:api/OAuthClientsApi~getOauthAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    getOauthAccessToken(oauthAppId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling getOauthAccessToken");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getOauthAccessToken");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients/{oauthAppId}/accesstoken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRedirectUris operation.
     * @callback module:api/OAuthClientsApi~getRedirectUrisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultOauthClientRedirectUri} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appId 
     * @param {module:api/OAuthClientsApi~getRedirectUrisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultOauthClientRedirectUri}
     */
    getRedirectUris(oauthAppId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling getRedirectUris");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRedirectUris");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultOauthClientRedirectUri;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients/{oauthAppId}/redirecturis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oAuthClientsGetApplications operation.
     * @callback module:api/OAuthClientsApi~oAuthClientsGetApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/OAuthClientsApi~oAuthClientsGetApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    oAuthClientsGetApplications(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling oAuthClientsGetApplications");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients/appnames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRedirectUri operation.
     * @callback module:api/OAuthClientsApi~removeRedirectUriCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {Number} uriId 
     * @param {String} appId 
     * @param {module:api/OAuthClientsApi~removeRedirectUriCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeRedirectUri(oauthAppId, uriId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling removeRedirectUri");
      }
      // verify the required parameter 'uriId' is set
      if (uriId === undefined || uriId === null) {
        throw new Error("Missing the required parameter 'uriId' when calling removeRedirectUri");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling removeRedirectUri");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'uriId': uriId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients/{oauthAppId}/redirecturis/{uriId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOAuthApp operation.
     * @callback module:api/OAuthClientsApi~updateOAuthAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appId 
     * @param {module:model/OAuthApp} oAuthApp 
     * @param {module:api/OAuthClientsApi~updateOAuthAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOAuthApp(oauthAppId, appId, oAuthApp, callback) {
      let postBody = oAuthApp;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling updateOAuthApp");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateOAuthApp");
      }
      // verify the required parameter 'oAuthApp' is set
      if (oAuthApp === undefined || oAuthApp === null) {
        throw new Error("Missing the required parameter 'oAuthApp' when calling updateOAuthApp");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/oauthclients/{oauthAppId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
