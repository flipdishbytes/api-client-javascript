/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestApiArrayResultSmsProviderCredential from '../model/RestApiArrayResultSmsProviderCredential';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultSmsProviderCredential from '../model/RestApiResultSmsProviderCredential';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import SmsProviderCredential from '../model/SmsProviderCredential';
import SmsProviderCredentialUpdateRequest from '../model/SmsProviderCredentialUpdateRequest';

/**
* SmsProviderCredentials service.
* @module api/SmsProviderCredentialsApi
* @version 1.0.0
*/
export default class SmsProviderCredentialsApi {

    /**
    * Constructs a new SmsProviderCredentialsApi. 
    * @alias module:api/SmsProviderCredentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBrandSmsProviderCredentialByServiceType operation.
     * @callback module:api/SmsProviderCredentialsApi~getBrandSmsProviderCredentialByServiceTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultSmsProviderCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} orgId 
     * @param {String} brandId 
     * @param {module:model/String} serviceType 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withFallback 
     * @param {module:api/SmsProviderCredentialsApi~getBrandSmsProviderCredentialByServiceTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultSmsProviderCredential}
     */
    getBrandSmsProviderCredentialByServiceType(orgId, brandId, serviceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling getBrandSmsProviderCredentialByServiceType");
      }
      // verify the required parameter 'brandId' is set
      if (brandId === undefined || brandId === null) {
        throw new Error("Missing the required parameter 'brandId' when calling getBrandSmsProviderCredentialByServiceType");
      }
      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling getBrandSmsProviderCredentialByServiceType");
      }

      let pathParams = {
        'orgId': orgId,
        'brandId': brandId,
        'serviceType': serviceType
      };
      let queryParams = {
        'withFallback': opts['withFallback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultSmsProviderCredential;
      return this.apiClient.callApi(
        '/api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrandSmsProviderCredentials operation.
     * @callback module:api/SmsProviderCredentialsApi~getBrandSmsProviderCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultSmsProviderCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} orgId 
     * @param {String} brandId 
     * @param {module:api/SmsProviderCredentialsApi~getBrandSmsProviderCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultSmsProviderCredential}
     */
    getBrandSmsProviderCredentials(orgId, brandId, callback) {
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling getBrandSmsProviderCredentials");
      }
      // verify the required parameter 'brandId' is set
      if (brandId === undefined || brandId === null) {
        throw new Error("Missing the required parameter 'brandId' when calling getBrandSmsProviderCredentials");
      }

      let pathParams = {
        'orgId': orgId,
        'brandId': brandId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultSmsProviderCredential;
      return this.apiClient.callApi(
        '/api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smsProviderCredentialDelete operation.
     * @callback module:api/SmsProviderCredentialsApi~smsProviderCredentialDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultSmsProviderCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} orgId 
     * @param {String} brandId 
     * @param {module:model/String} serviceType 
     * @param {module:api/SmsProviderCredentialsApi~smsProviderCredentialDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultSmsProviderCredential}
     */
    smsProviderCredentialDelete(orgId, brandId, serviceType, callback) {
      let postBody = null;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling smsProviderCredentialDelete");
      }
      // verify the required parameter 'brandId' is set
      if (brandId === undefined || brandId === null) {
        throw new Error("Missing the required parameter 'brandId' when calling smsProviderCredentialDelete");
      }
      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling smsProviderCredentialDelete");
      }

      let pathParams = {
        'orgId': orgId,
        'brandId': brandId,
        'serviceType': serviceType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultSmsProviderCredential;
      return this.apiClient.callApi(
        '/api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smsProviderCredentialUpdate operation.
     * @callback module:api/SmsProviderCredentialsApi~smsProviderCredentialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultSmsProviderCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} orgId 
     * @param {String} brandId 
     * @param {module:model/String} serviceType 
     * @param {module:model/SmsProviderCredentialUpdateRequest} credential 
     * @param {module:api/SmsProviderCredentialsApi~smsProviderCredentialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultSmsProviderCredential}
     */
    smsProviderCredentialUpdate(orgId, brandId, serviceType, credential, callback) {
      let postBody = credential;
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling smsProviderCredentialUpdate");
      }
      // verify the required parameter 'brandId' is set
      if (brandId === undefined || brandId === null) {
        throw new Error("Missing the required parameter 'brandId' when calling smsProviderCredentialUpdate");
      }
      // verify the required parameter 'serviceType' is set
      if (serviceType === undefined || serviceType === null) {
        throw new Error("Missing the required parameter 'serviceType' when calling smsProviderCredentialUpdate");
      }
      // verify the required parameter 'credential' is set
      if (credential === undefined || credential === null) {
        throw new Error("Missing the required parameter 'credential' when calling smsProviderCredentialUpdate");
      }

      let pathParams = {
        'orgId': orgId,
        'brandId': brandId,
        'serviceType': serviceType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultSmsProviderCredential;
      return this.apiClient.callApi(
        '/api/v1.0/sms-providers/orgs/{orgId}/brands/{brandId}/provider-credentials/{serviceType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smsProviderCredentialsBulkUpsert operation.
     * @callback module:api/SmsProviderCredentialsApi~smsProviderCredentialsBulkUpsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultSmsProviderCredential} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<module:model/SmsProviderCredential>} credentials 
     * @param {module:api/SmsProviderCredentialsApi~smsProviderCredentialsBulkUpsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultSmsProviderCredential}
     */
    smsProviderCredentialsBulkUpsert(credentials, callback) {
      let postBody = credentials;
      // verify the required parameter 'credentials' is set
      if (credentials === undefined || credentials === null) {
        throw new Error("Missing the required parameter 'credentials' when calling smsProviderCredentialsBulkUpsert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultSmsProviderCredential;
      return this.apiClient.callApi(
        '/api/v1.0/sms-providers/bulk-upsert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
