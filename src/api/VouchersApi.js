/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateVoucher', 'model/RestApiArrayResultVoucherDataPoint', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultVoucherSummary', 'model/RestApiResultVoucherWithStats', 'model/RestApiUnauthorizedResult', 'model/VoucherBase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateVoucher'), require('../model/RestApiArrayResultVoucherDataPoint'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultVoucherSummary'), require('../model/RestApiResultVoucherWithStats'), require('../model/RestApiUnauthorizedResult'), require('../model/VoucherBase'));
  } else {
    // Browser globals (root is window)
    if (!root.FlipdishOpenApiV10) {
      root.FlipdishOpenApiV10 = {};
    }
    root.FlipdishOpenApiV10.VouchersApi = factory(root.FlipdishOpenApiV10.ApiClient, root.FlipdishOpenApiV10.CreateVoucher, root.FlipdishOpenApiV10.RestApiArrayResultVoucherDataPoint, root.FlipdishOpenApiV10.RestApiErrorResult, root.FlipdishOpenApiV10.RestApiForbiddenResult, root.FlipdishOpenApiV10.RestApiPaginationResultVoucherSummary, root.FlipdishOpenApiV10.RestApiResultVoucherWithStats, root.FlipdishOpenApiV10.RestApiUnauthorizedResult, root.FlipdishOpenApiV10.VoucherBase);
  }
}(this, function(ApiClient, CreateVoucher, RestApiArrayResultVoucherDataPoint, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultVoucherSummary, RestApiResultVoucherWithStats, RestApiUnauthorizedResult, VoucherBase) {
  'use strict';

  /**
   * Vouchers service.
   * @module api/VouchersApi
   * @version v1.0
   */

  /**
   * Constructs a new VouchersApi. 
   * @alias module:api/VouchersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createVoucher operation.
     * @callback module:api/VouchersApi~createVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultVoucherWithStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API] Create voucher
     * @param {String} appId App Name Id
     * @param {module:model/CreateVoucher} voucher Voucher Details
     * @param {module:api/VouchersApi~createVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultVoucherWithStats}
     */
    this.createVoucher = function(appId, voucher, callback) {
      var postBody = voucher;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createVoucher");
      }

      // verify the required parameter 'voucher' is set
      if (voucher === undefined || voucher === null) {
        throw new Error("Missing the required parameter 'voucher' when calling createVoucher");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultVoucherWithStats;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{appId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherById operation.
     * @callback module:api/VouchersApi~getVoucherByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultVoucherWithStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API] Get voucher by identifier
     * @param {Number} voucherId Id of the voucher
     * @param {module:api/VouchersApi~getVoucherByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultVoucherWithStats}
     */
    this.getVoucherById = function(voucherId, callback) {
      var postBody = null;

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling getVoucherById");
      }


      var pathParams = {
        'voucherId': voucherId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultVoucherWithStats;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{voucherId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherStatsById operation.
     * @callback module:api/VouchersApi~getVoucherStatsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultVoucherDataPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API] Get voucher stats by identifier
     * @param {Number} voucherId Id of the voucher
     * @param {module:model/String} aggregateDataBy Aggregate data by day \\ week \\ month
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dataPointLimit Amount of data points per request
     * @param {module:api/VouchersApi~getVoucherStatsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultVoucherDataPoint}
     */
    this.getVoucherStatsById = function(voucherId, aggregateDataBy, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling getVoucherStatsById");
      }

      // verify the required parameter 'aggregateDataBy' is set
      if (aggregateDataBy === undefined || aggregateDataBy === null) {
        throw new Error("Missing the required parameter 'aggregateDataBy' when calling getVoucherStatsById");
      }


      var pathParams = {
        'voucherId': voucherId
      };
      var queryParams = {
        'aggregateDataBy': aggregateDataBy,
        'dataPointLimit': opts['dataPointLimit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultVoucherDataPoint;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers/stats/{voucherId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVouchers operation.
     * @callback module:api/VouchersApi~getVouchersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultVoucherSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API] Get vouchers summaries for App Id
     * @param {String} appId Application Id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex Page Number
     * @param {Number} opts.pageSize Page Size
     * @param {Array.<String>} opts.searchCodes Search by Voucher Code\\s
     * @param {Array.<module:model/String>} opts.statusSearch Search by Status
     * @param {Array.<module:model/String>} opts.typeSearch Search by Type
     * @param {Array.<module:model/String>} opts.subTypeSearch Search by Sub Type
     * @param {Array.<Number>} opts.storeIds Search by Store Ids
     * @param {module:api/VouchersApi~getVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultVoucherSummary}
     */
    this.getVouchers = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getVouchers");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
        'searchCodes': {
          value: opts['searchCodes'],
          collectionFormat: 'multi'
        },
        'statusSearch': {
          value: opts['statusSearch'],
          collectionFormat: 'multi'
        },
        'typeSearch': {
          value: opts['typeSearch'],
          collectionFormat: 'multi'
        },
        'subTypeSearch': {
          value: opts['subTypeSearch'],
          collectionFormat: 'multi'
        },
        'storeIds': {
          value: opts['storeIds'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultVoucherSummary;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/vouchers/summaries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVoucher operation.
     * @callback module:api/VouchersApi~updateVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultVoucherWithStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API] Updates voucher
     * @param {Number} voucherId Id of the voucher
     * @param {module:model/VoucherBase} voucher Updated details for the voucher
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeId 
     * @param {Number} opts.percentValue Percent voucher value (can have 1 of 3)
     * @param {Number} opts.lumpValue Lump voucher value (can have 1 of 3)
     * @param {Number} opts.freeItemId Free Item Id (can have 1 of 3)
     * @param {module:api/VouchersApi~updateVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultVoucherWithStats}
     */
    this.updateVoucher = function(voucherId, voucher, opts, callback) {
      opts = opts || {};
      var postBody = voucher;

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling updateVoucher");
      }

      // verify the required parameter 'voucher' is set
      if (voucher === undefined || voucher === null) {
        throw new Error("Missing the required parameter 'voucher' when calling updateVoucher");
      }


      var pathParams = {
        'voucherId': voucherId
      };
      var queryParams = {
        'percentValue': opts['percentValue'],
        'lumpValue': opts['lumpValue'],
        'freeItemId': opts['freeItemId'],
      };
      var collectionQueryParams = {
        'storeId': {
          value: opts['storeId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultVoucherWithStats;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{voucherId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
