/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateVoucher from '../model/CreateVoucher';
import RestApiArrayResultVoucherDataPoint from '../model/RestApiArrayResultVoucherDataPoint';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultVoucherSummary from '../model/RestApiPaginationResultVoucherSummary';
import RestApiResultVoucher from '../model/RestApiResultVoucher';
import RestApiResultVoucherWithStats from '../model/RestApiResultVoucherWithStats';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import SetVoucherValidityPeriodsSimplifiedRequest from '../model/SetVoucherValidityPeriodsSimplifiedRequest';
import UpdateVoucher from '../model/UpdateVoucher';
import UpdateVoucherUsage from '../model/UpdateVoucherUsage';

/**
* Vouchers service.
* @module api/VouchersApi
* @version 1.0.0
*/
export default class VouchersApi {

    /**
    * Constructs a new VouchersApi. 
    * @alias module:api/VouchersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVoucher operation.
     * @callback module:api/VouchersApi~createVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultVoucherWithStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/CreateVoucher} voucher 
     * @param {module:api/VouchersApi~createVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultVoucherWithStats}
     */
    createVoucher(appId, voucher, callback) {
      let postBody = voucher;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createVoucher");
      }
      // verify the required parameter 'voucher' is set
      if (voucher === undefined || voucher === null) {
        throw new Error("Missing the required parameter 'voucher' when calling createVoucher");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultVoucherWithStats;
      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{appId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherByCode operation.
     * @callback module:api/VouchersApi~getVoucherByCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultVoucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} code 
     * @param {module:api/VouchersApi~getVoucherByCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultVoucher}
     */
    getVoucherByCode(appId, code, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getVoucherByCode");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getVoucherByCode");
      }

      let pathParams = {
        'appId': appId,
        'code': code
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultVoucher;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/vouchers/code/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherById operation.
     * @callback module:api/VouchersApi~getVoucherByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultVoucherWithStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} voucherId 
     * @param {module:api/VouchersApi~getVoucherByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultVoucherWithStats}
     */
    getVoucherById(voucherId, callback) {
      let postBody = null;
      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling getVoucherById");
      }

      let pathParams = {
        'voucherId': voucherId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultVoucherWithStats;
      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{voucherId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherStatsById operation.
     * @callback module:api/VouchersApi~getVoucherStatsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultVoucherDataPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} voucherId 
     * @param {module:model/String} aggregateDataBy 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dataPointLimit 
     * @param {module:api/VouchersApi~getVoucherStatsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultVoucherDataPoint}
     */
    getVoucherStatsById(voucherId, aggregateDataBy, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling getVoucherStatsById");
      }
      // verify the required parameter 'aggregateDataBy' is set
      if (aggregateDataBy === undefined || aggregateDataBy === null) {
        throw new Error("Missing the required parameter 'aggregateDataBy' when calling getVoucherStatsById");
      }

      let pathParams = {
        'voucherId': voucherId
      };
      let queryParams = {
        'aggregateDataBy': aggregateDataBy,
        'dataPointLimit': opts['dataPointLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultVoucherDataPoint;
      return this.apiClient.callApi(
        '/api/v1.0/vouchers/stats/{voucherId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherValidityPeriods operation.
     * @callback module:api/VouchersApi~getVoucherValidityPeriodsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} voucherId 
     * @param {module:api/VouchersApi~getVoucherValidityPeriodsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVoucherValidityPeriods(appId, voucherId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getVoucherValidityPeriods");
      }
      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling getVoucherValidityPeriods");
      }

      let pathParams = {
        'appId': appId,
        'voucherId': voucherId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['Data', 'application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/vouchers/{voucherId}/validity-periods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVouchers operation.
     * @callback module:api/VouchersApi~getVouchersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultVoucherSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 
     * @param {Number} opts.pageSize 
     * @param {Array.<String>} opts.searchCodes 
     * @param {Array.<module:model/String>} opts.statusSearch 
     * @param {Array.<module:model/String>} opts.typeSearch 
     * @param {Array.<module:model/String>} opts.subTypeSearch 
     * @param {Array.<Number>} opts.storeIds 
     * @param {Array.<module:model/String>} opts.channelRestrictions 
     * @param {module:api/VouchersApi~getVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultVoucherSummary}
     */
    getVouchers(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getVouchers");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
        'searchCodes': this.apiClient.buildCollectionParam(opts['searchCodes'], 'multi'),
        'statusSearch': this.apiClient.buildCollectionParam(opts['statusSearch'], 'multi'),
        'typeSearch': this.apiClient.buildCollectionParam(opts['typeSearch'], 'multi'),
        'subTypeSearch': this.apiClient.buildCollectionParam(opts['subTypeSearch'], 'multi'),
        'storeIds': this.apiClient.buildCollectionParam(opts['storeIds'], 'multi'),
        'channelRestrictions': this.apiClient.buildCollectionParam(opts['channelRestrictions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiPaginationResultVoucherSummary;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/vouchers/summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setVoucherValidityPeriodsSimplified operation.
     * @callback module:api/VouchersApi~setVoucherValidityPeriodsSimplifiedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} voucherId 
     * @param {module:model/SetVoucherValidityPeriodsSimplifiedRequest} request 
     * @param {module:api/VouchersApi~setVoucherValidityPeriodsSimplifiedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setVoucherValidityPeriodsSimplified(appId, voucherId, request, callback) {
      let postBody = request;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setVoucherValidityPeriodsSimplified");
      }
      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling setVoucherValidityPeriodsSimplified");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling setVoucherValidityPeriodsSimplified");
      }

      let pathParams = {
        'appId': appId,
        'voucherId': voucherId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['Data', 'application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/vouchers/{voucherId}/validity-periods-simplified', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVoucher operation.
     * @callback module:api/VouchersApi~updateVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultVoucherWithStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} voucherId 
     * @param {module:model/UpdateVoucher} voucher 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeId 
     * @param {Number} opts.percentValue 
     * @param {Number} opts.lumpValue 
     * @param {Number} opts.maxDiscountAmount 
     * @param {module:api/VouchersApi~updateVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultVoucherWithStats}
     */
    updateVoucher(voucherId, voucher, opts, callback) {
      opts = opts || {};
      let postBody = voucher;
      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling updateVoucher");
      }
      // verify the required parameter 'voucher' is set
      if (voucher === undefined || voucher === null) {
        throw new Error("Missing the required parameter 'voucher' when calling updateVoucher");
      }

      let pathParams = {
        'voucherId': voucherId
      };
      let queryParams = {
        'storeId': this.apiClient.buildCollectionParam(opts['storeId'], 'multi'),
        'percentValue': opts['percentValue'],
        'lumpValue': opts['lumpValue'],
        'maxDiscountAmount': opts['maxDiscountAmount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultVoucherWithStats;
      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{voucherId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVoucherUsage operation.
     * @callback module:api/VouchersApi~updateVoucherUsageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} voucherId 
     * @param {module:model/UpdateVoucherUsage} voucherUsage 
     * @param {module:api/VouchersApi~updateVoucherUsageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVoucherUsage(appId, voucherId, voucherUsage, callback) {
      let postBody = voucherUsage;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateVoucherUsage");
      }
      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling updateVoucherUsage");
      }
      // verify the required parameter 'voucherUsage' is set
      if (voucherUsage === undefined || voucherUsage === null) {
        throw new Error("Missing the required parameter 'voucherUsage' when calling updateVoucherUsage");
      }

      let pathParams = {
        'appId': appId,
        'voucherId': voucherId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['Data', 'application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/vouchers/{voucherId}/usage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
