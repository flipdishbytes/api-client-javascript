/**
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestApiArrayResultMetadata', 'model/RestApiArrayResultRestApiDefaultResponse', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultVoucher', 'model/RestApiResultMetadata', 'model/RestApiResultVoucher', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestApiArrayResultMetadata'), require('../model/RestApiArrayResultRestApiDefaultResponse'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultVoucher'), require('../model/RestApiResultMetadata'), require('../model/RestApiResultVoucher'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.VouchersApi = factory(root.Flipdish.ApiClient, root.Flipdish.RestApiArrayResultMetadata, root.Flipdish.RestApiArrayResultRestApiDefaultResponse, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiPaginationResultVoucher, root.Flipdish.RestApiResultMetadata, root.Flipdish.RestApiResultVoucher, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, RestApiArrayResultMetadata, RestApiArrayResultRestApiDefaultResponse, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultVoucher, RestApiResultMetadata, RestApiResultVoucher, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * Vouchers service.
   * @module api/VouchersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new VouchersApi. 
   * @alias module:api/VouchersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteVoucherMetadata operation.
     * @callback module:api/VouchersApi~deleteVoucherMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete voucher metadata
     * @param {Number} voucherId 
     * @param {Number} menuId 
     * @param {Number} storeId 
     * @param {String} key 
     * @param {module:api/VouchersApi~deleteVoucherMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRestApiDefaultResponse}
     */
    this.deleteVoucherMetadata = function(voucherId, menuId, storeId, key, callback) {
      var postBody = null;

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling deleteVoucherMetadata");
      }

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteVoucherMetadata");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteVoucherMetadata");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteVoucherMetadata");
      }


      var pathParams = {
        'voucherId': voucherId,
        'menuId': menuId,
        'storeId': storeId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultRestApiDefaultResponse;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{voucherId}/menu/{menuId}/store/{storeId}/metadata/{key}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherById operation.
     * @callback module:api/VouchersApi~getVoucherByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultVoucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get voucher by identifier
     * @param {Number} voucherId 
     * @param {module:api/VouchersApi~getVoucherByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultVoucher}
     */
    this.getVoucherById = function(voucherId, callback) {
      var postBody = null;

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling getVoucherById");
      }


      var pathParams = {
        'voucherId': voucherId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultVoucher;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{voucherId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherMetadata operation.
     * @callback module:api/VouchersApi~getVoucherMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get voucher metadata
     * @param {Number} voucherId 
     * @param {Number} menuId 
     * @param {Number} storeId 
     * @param {module:api/VouchersApi~getVoucherMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMetadata}
     */
    this.getVoucherMetadata = function(voucherId, menuId, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling getVoucherMetadata");
      }

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getVoucherMetadata");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getVoucherMetadata");
      }


      var pathParams = {
        'voucherId': voucherId,
        'menuId': menuId,
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMetadata;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{voucherId}/menu/{menuId}/store/{storeId}/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoucherMetadata_0 operation.
     * @callback module:api/VouchersApi~getVoucherMetadata_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get voucher metadata
     * @param {Number} voucherId 
     * @param {Number} menuId 
     * @param {Number} storeId 
     * @param {String} key 
     * @param {module:api/VouchersApi~getVoucherMetadata_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMetadata}
     */
    this.getVoucherMetadata_0 = function(voucherId, menuId, storeId, key, callback) {
      var postBody = null;

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling getVoucherMetadata_0");
      }

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getVoucherMetadata_0");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getVoucherMetadata_0");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getVoucherMetadata_0");
      }


      var pathParams = {
        'voucherId': voucherId,
        'menuId': menuId,
        'storeId': storeId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultMetadata;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{voucherId}/menu/{menuId}/store/{storeId}/metadata/{key}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVouchers operation.
     * @callback module:api/VouchersApi~getVouchersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultVoucher} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vouchers
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {module:model/String} opts.sortOrder 
     * @param {module:model/String} opts.orderBy 
     * @param {module:model/String} opts.subType 
     * @param {module:model/String} opts.status 
     * @param {String} opts.code 
     * @param {Date} opts.validFromBegin 
     * @param {Date} opts.validFromEnd 
     * @param {Date} opts.expiryBegin 
     * @param {Date} opts.expiryEnd 
     * @param {Number} opts.amount 
     * @param {module:model/String} opts.voucherType 
     * @param {String} opts.description 
     * @param {module:api/VouchersApi~getVouchersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultVoucher}
     */
    this.getVouchers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
        'sortOrder': opts['sortOrder'],
        'orderBy': opts['orderBy'],
        'subType': opts['subType'],
        'status': opts['status'],
        'code': opts['code'],
        'validFromBegin': opts['validFromBegin'],
        'validFromEnd': opts['validFromEnd'],
        'expiryBegin': opts['expiryBegin'],
        'expiryEnd': opts['expiryEnd'],
        'amount': opts['amount'],
        'voucherType': opts['voucherType'],
        'description': opts['description'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultVoucher;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setVoucherMetadata operation.
     * @callback module:api/VouchersApi~setVoucherMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add voucher metadata
     * @param {Number} voucherId 
     * @param {Number} menuId 
     * @param {Number} storeId 
     * @param {String} key 
     * @param {String} value 
     * @param {module:api/VouchersApi~setVoucherMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setVoucherMetadata = function(voucherId, menuId, storeId, key, value, callback) {
      var postBody = value;

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling setVoucherMetadata");
      }

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setVoucherMetadata");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setVoucherMetadata");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling setVoucherMetadata");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling setVoucherMetadata");
      }


      var pathParams = {
        'voucherId': voucherId,
        'menuId': menuId,
        'storeId': storeId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/vouchers/{voucherId}/menu/{menuId}/store/{storeId}/metadata/{key}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
