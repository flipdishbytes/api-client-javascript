/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MenuItemOptionSetBase', 'model/RestApiArrayResultMenuItemOptionSet', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultMenuItemOptionSet', 'model/RestApiStringResult', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/MenuItemOptionSetBase'), require('../model/RestApiArrayResultMenuItemOptionSet'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultMenuItemOptionSet'), require('../model/RestApiStringResult'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.FlipdishOpenApiV10) {
      root.FlipdishOpenApiV10 = {};
    }
    root.FlipdishOpenApiV10.MenuOptionSetsApi = factory(root.FlipdishOpenApiV10.ApiClient, root.FlipdishOpenApiV10.MenuItemOptionSetBase, root.FlipdishOpenApiV10.RestApiArrayResultMenuItemOptionSet, root.FlipdishOpenApiV10.RestApiErrorResult, root.FlipdishOpenApiV10.RestApiForbiddenResult, root.FlipdishOpenApiV10.RestApiResultMenuItemOptionSet, root.FlipdishOpenApiV10.RestApiStringResult, root.FlipdishOpenApiV10.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, MenuItemOptionSetBase, RestApiArrayResultMenuItemOptionSet, RestApiErrorResult, RestApiForbiddenResult, RestApiResultMenuItemOptionSet, RestApiStringResult, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * MenuOptionSets service.
   * @module api/MenuOptionSetsApi
   * @version v1.0
   */

  /**
   * Constructs a new MenuOptionSetsApi. 
   * @alias module:api/MenuOptionSetsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createMenuItemOptionSet operation.
     * @callback module:api/MenuOptionSetsApi~createMenuItemOptionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create menu item option set
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {module:model/MenuItemOptionSetBase} menuItemOptionSet Menu item option set
     * @param {module:api/MenuOptionSetsApi~createMenuItemOptionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createMenuItemOptionSet = function(menuId, menuSectionId, menuSectionItemId, menuItemOptionSet, callback) {
      var postBody = menuItemOptionSet;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling createMenuItemOptionSet");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling createMenuItemOptionSet");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling createMenuItemOptionSet");
      }

      // verify the required parameter 'menuItemOptionSet' is set
      if (menuItemOptionSet === undefined || menuItemOptionSet === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSet' when calling createMenuItemOptionSet");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuItemOptionSet operation.
     * @callback module:api/MenuOptionSetsApi~deleteMenuItemOptionSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu item option set
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} optionSetId Option set identifier
     * @param {module:api/MenuOptionSetsApi~deleteMenuItemOptionSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMenuItemOptionSet = function(menuId, menuSectionItemId, menuSectionId, optionSetId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuItemOptionSet");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling deleteMenuItemOptionSet");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling deleteMenuItemOptionSet");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling deleteMenuItemOptionSet");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionItemId': menuSectionItemId,
        'menuSectionId': menuSectionId,
        'optionSetId': optionSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOptionSetImage operation.
     * @callback module:api/MenuOptionSetsApi~deleteOptionSetImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete option set image
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {module:api/MenuOptionSetsApi~deleteOptionSetImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOptionSetImage = function(menuId, menuSectionId, menuSectionItemId, optionSetId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteOptionSetImage");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling deleteOptionSetImage");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling deleteOptionSetImage");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling deleteOptionSetImage");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemOptionSetById operation.
     * @callback module:api/MenuOptionSetsApi~getMenuItemOptionSetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenuItemOptionSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item option set by identifier
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Menu item option set identifier
     * @param {module:api/MenuOptionSetsApi~getMenuItemOptionSetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenuItemOptionSet}
     */
    this.getMenuItemOptionSetById = function(menuId, menuSectionId, menuSectionItemId, optionSetId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemOptionSetById");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling getMenuItemOptionSetById");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling getMenuItemOptionSetById");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling getMenuItemOptionSetById");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultMenuItemOptionSet;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemOptionSets operation.
     * @callback module:api/MenuOptionSetsApi~getMenuItemOptionSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuItemOptionSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item option sets
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {module:api/MenuOptionSetsApi~getMenuItemOptionSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuItemOptionSet}
     */
    this.getMenuItemOptionSets = function(menuId, menuSectionId, menuSectionItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemOptionSets");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling getMenuItemOptionSets");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling getMenuItemOptionSets");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMenuItemOptionSet;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMenuItemOptionSet operation.
     * @callback module:api/MenuOptionSetsApi~updateMenuItemOptionSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu item option set
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {module:model/MenuItemOptionSetBase} menuItemOptionSet Menu item option set (delta)
     * @param {module:api/MenuOptionSetsApi~updateMenuItemOptionSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateMenuItemOptionSet = function(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSet, callback) {
      var postBody = menuItemOptionSet;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling updateMenuItemOptionSet");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling updateMenuItemOptionSet");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling updateMenuItemOptionSet");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling updateMenuItemOptionSet");
      }

      // verify the required parameter 'menuItemOptionSet' is set
      if (menuItemOptionSet === undefined || menuItemOptionSet === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSet' when calling updateMenuItemOptionSet");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadOptionSetImage operation.
     * @callback module:api/MenuOptionSetsApi~uploadOptionSetImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload menu item option set image
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {File} image Option set image
     * @param {module:api/MenuOptionSetsApi~uploadOptionSetImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.uploadOptionSetImage = function(menuId, menuSectionId, menuSectionItemId, optionSetId, image, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling uploadOptionSetImage");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling uploadOptionSetImage");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling uploadOptionSetImage");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling uploadOptionSetImage");
      }

      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling uploadOptionSetImage");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Image': image
      };

      var authNames = ['oauth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
