/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CatalogItem from '../model/CatalogItem';
import CreateCatalogItem from '../model/CreateCatalogItem';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultCatalogItem from '../model/RestApiPaginationResultCatalogItem';
import RestApiResultCatalogItem from '../model/RestApiResultCatalogItem';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import UpdateCatalogItem from '../model/UpdateCatalogItem';

/**
* CatalogItems service.
* @module api/CatalogItemsApi
* @version 1.0.0
*/
export default class CatalogItemsApi {

    /**
    * Constructs a new CatalogItemsApi. 
    * @alias module:api/CatalogItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the archiveCatalogItem operation.
     * @callback module:api/CatalogItemsApi~archiveCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:api/CatalogItemsApi~archiveCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archiveCatalogItem(appId, catalogItemId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling archiveCatalogItem");
      }
      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling archiveCatalogItem");
      }

      let pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/items/{catalogItemId}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCatalogItem operation.
     * @callback module:api/CatalogItemsApi~createCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultCatalogItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {module:model/CreateCatalogItem} createCatalogItem 
     * @param {module:api/CatalogItemsApi~createCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultCatalogItem}
     */
    createCatalogItem(appId, createCatalogItem, callback) {
      let postBody = createCatalogItem;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createCatalogItem");
      }
      // verify the required parameter 'createCatalogItem' is set
      if (createCatalogItem === undefined || createCatalogItem === null) {
        throw new Error("Missing the required parameter 'createCatalogItem' when calling createCatalogItem");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'CatalogItemId', 'IsArchived', 'Groups', 'ItemType', 'Sku', 'Name', 'Description', 'Price', 'ImageFileName', 'Alcohol'];
      let returnType = RestApiResultCatalogItem;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateCatalogItem operation.
     * @callback module:api/CatalogItemsApi~duplicateCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:api/CatalogItemsApi~duplicateCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    duplicateCatalogItem(appId, catalogItemId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling duplicateCatalogItem");
      }
      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling duplicateCatalogItem");
      }

      let pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/items/{catalogItemId}/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCatalogItemById operation.
     * @callback module:api/CatalogItemsApi~getCatalogItemByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item by Id
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:api/CatalogItemsApi~getCatalogItemByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogItem}
     */
    getCatalogItemById(appId, catalogItemId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCatalogItemById");
      }
      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling getCatalogItemById");
      }

      let pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'CatalogItemId', 'IsArchived', 'Groups', 'ItemType', 'Sku', 'Name', 'Description', 'Price', 'ImageFileName', 'Alcohol'];
      let returnType = CatalogItem;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/items/{catalogItemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItems operation.
     * @callback module:api/CatalogItemsApi~getItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultCatalogItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get paginated items by app name id filtered by types
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {Array.<module:model/String>} itemTypes 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/CatalogItemsApi~getItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultCatalogItem}
     */
    getItems(appId, itemTypes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getItems");
      }
      // verify the required parameter 'itemTypes' is set
      if (itemTypes === undefined || itemTypes === null) {
        throw new Error("Missing the required parameter 'itemTypes' when calling getItems");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'itemTypes': this.apiClient.buildCollectionParam(itemTypes, 'multi'),
        'searchTerm': opts['searchTerm'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultCatalogItem;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCatalogItem operation.
     * @callback module:api/CatalogItemsApi~updateCatalogItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Catalog Item
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:model/UpdateCatalogItem} updateCatalogItem 
     * @param {module:api/CatalogItemsApi~updateCatalogItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCatalogItem(appId, catalogItemId, updateCatalogItem, callback) {
      let postBody = updateCatalogItem;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateCatalogItem");
      }
      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling updateCatalogItem");
      }
      // verify the required parameter 'updateCatalogItem' is set
      if (updateCatalogItem === undefined || updateCatalogItem === null) {
        throw new Error("Missing the required parameter 'updateCatalogItem' when calling updateCatalogItem");
      }

      let pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/items/{catalogItemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
