/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultJobResponse', 'model/RestApiResultStuartSettings', 'model/RestApiUnauthorizedResult', 'model/StuartSettings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultJobResponse'), require('../model/RestApiResultStuartSettings'), require('../model/RestApiUnauthorizedResult'), require('../model/StuartSettings'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.StuartApi = factory(root.Flipdish.ApiClient, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultJobResponse, root.Flipdish.RestApiResultStuartSettings, root.Flipdish.RestApiUnauthorizedResult, root.Flipdish.StuartSettings);
  }
}(this, function(ApiClient, RestApiErrorResult, RestApiForbiddenResult, RestApiResultJobResponse, RestApiResultStuartSettings, RestApiUnauthorizedResult, StuartSettings) {
  'use strict';

  /**
   * Stuart service.
   * @module api/StuartApi
   * @version 1.0.0
   */

  /**
   * Constructs a new StuartApi. 
   * @alias module:api/StuartApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the stuartCancelJob operation.
     * @callback module:api/StuartApi~stuartCancelJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a stuart job
     * @param {Number} jobId Stuart job identifier
     * @param {Number} storeId Store identifier
     * @param {module:api/StuartApi~stuartCancelJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stuartCancelJob = function(jobId, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling stuartCancelJob");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling stuartCancelJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'storeId': storeId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1.0/stuart/jobs/{jobId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stuartGetJob operation.
     * @callback module:api/StuartApi~stuartGetJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get start job details
     * @param {Number} jobId Stuart job identifier
     * @param {Number} storeId Store identifier
     * @param {module:api/StuartApi~stuartGetJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultJobResponse}
     */
    this.stuartGetJob = function(jobId, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling stuartGetJob");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling stuartGetJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'storeId': storeId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultJobResponse;

      return this.apiClient.callApi(
        '/api/v1.0/stuart/jobs/{jobId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stuartGetStuartSettings operation.
     * @callback module:api/StuartApi~stuartGetStuartSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStuartSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stuart settings for a store
     * @param {Number} storeId Store Identifier
     * @param {module:api/StuartApi~stuartGetStuartSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStuartSettings}
     */
    this.stuartGetStuartSettings = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling stuartGetStuartSettings");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStuartSettings;

      return this.apiClient.callApi(
        '/api/v1.0/stuart/settings/{storeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stuartPostStuartSettings operation.
     * @callback module:api/StuartApi~stuartPostStuartSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set stuart settings for a store
     * @param {Number} storeId Store Identifier
     * @param {module:model/StuartSettings} stuartSettings Stuart settings model
     * @param {module:api/StuartApi~stuartPostStuartSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stuartPostStuartSettings = function(storeId, stuartSettings, callback) {
      var postBody = stuartSettings;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling stuartPostStuartSettings");
      }

      // verify the required parameter 'stuartSettings' is set
      if (stuartSettings === undefined || stuartSettings === null) {
        throw new Error("Missing the required parameter 'stuartSettings' when calling stuartPostStuartSettings");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1.0/stuart/settings/{storeId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
