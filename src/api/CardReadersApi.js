/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultBluetoothTerminalStatus', 'model/RestApiResultStripeTerminalPrivateKey', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultBluetoothTerminalStatus'), require('../model/RestApiResultStripeTerminalPrivateKey'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.FlipdishOpenApiV10) {
      root.FlipdishOpenApiV10 = {};
    }
    root.FlipdishOpenApiV10.CardReadersApi = factory(root.FlipdishOpenApiV10.ApiClient, root.FlipdishOpenApiV10.RestApiErrorResult, root.FlipdishOpenApiV10.RestApiForbiddenResult, root.FlipdishOpenApiV10.RestApiResultBluetoothTerminalStatus, root.FlipdishOpenApiV10.RestApiResultStripeTerminalPrivateKey, root.FlipdishOpenApiV10.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, RestApiErrorResult, RestApiForbiddenResult, RestApiResultBluetoothTerminalStatus, RestApiResultStripeTerminalPrivateKey, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * CardReaders service.
   * @module api/CardReadersApi
   * @version v1.0
   */

  /**
   * Constructs a new CardReadersApi. 
   * @alias module:api/CardReadersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authorizeStripeTerminal operation.
     * @callback module:api/CardReadersApi~authorizeStripeTerminalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStripeTerminalPrivateKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Authorization Key for Stripe Terminal
     * Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
     * @param {module:api/CardReadersApi~authorizeStripeTerminalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStripeTerminalPrivateKey}
     */
    this.authorizeStripeTerminal = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStripeTerminalPrivateKey;

      return this.apiClient.callApi(
        '/api/v1.0/cardreaders/authorize/stripe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizeStripeTerminal_0 operation.
     * @callback module:api/CardReadersApi~authorizeStripeTerminal_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStripeTerminalPrivateKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Authorization Key for Stripe Terminal
     * Can only be called by Kiosk  [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {module:api/CardReadersApi~authorizeStripeTerminal_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStripeTerminalPrivateKey}
     */
    this.authorizeStripeTerminal_0 = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling authorizeStripeTerminal_0");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStripeTerminalPrivateKey;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stripeterminal/authorize', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBluetoothTerminalStatus operation.
     * @callback module:api/CardReadersApi~getBluetoothTerminalStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultBluetoothTerminalStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of the bluetooth terminal
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:api/CardReadersApi~getBluetoothTerminalStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultBluetoothTerminalStatus}
     */
    this.getBluetoothTerminalStatus = function(appId, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBluetoothTerminalStatus");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getBluetoothTerminalStatus");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultBluetoothTerminalStatus;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateKioskBluetoothPairingMode operation.
     * @callback module:api/CardReadersApi~initiateKioskBluetoothPairingModeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate stripe terminal pairing mode
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:model/String} terminalType 
     * @param {module:api/CardReadersApi~initiateKioskBluetoothPairingModeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.initiateKioskBluetoothPairingMode = function(appId, deviceId, terminalType, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling initiateKioskBluetoothPairingMode");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling initiateKioskBluetoothPairingMode");
      }

      // verify the required parameter 'terminalType' is set
      if (terminalType === undefined || terminalType === null) {
        throw new Error("Missing the required parameter 'terminalType' when calling initiateKioskBluetoothPairingMode");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId,
        'terminalType': terminalType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/pair', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateKioskUpdateInstallForBluetoothTerminal operation.
     * @callback module:api/CardReadersApi~initiateKioskUpdateInstallForBluetoothTerminalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Kiosk Update Install for bluetooth terminal
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:model/String} terminalType 
     * @param {module:api/CardReadersApi~initiateKioskUpdateInstallForBluetoothTerminalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.initiateKioskUpdateInstallForBluetoothTerminal = function(appId, deviceId, terminalType, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling initiateKioskUpdateInstallForBluetoothTerminal");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling initiateKioskUpdateInstallForBluetoothTerminal");
      }

      // verify the required parameter 'terminalType' is set
      if (terminalType === undefined || terminalType === null) {
        throw new Error("Missing the required parameter 'terminalType' when calling initiateKioskUpdateInstallForBluetoothTerminal");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId,
        'terminalType': terminalType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/installUpdate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unpairCurrentlyPairedBluetoothDevice operation.
     * @callback module:api/CardReadersApi~unpairCurrentlyPairedBluetoothDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpair the currently paired stripe terminal
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:api/CardReadersApi~unpairCurrentlyPairedBluetoothDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unpairCurrentlyPairedBluetoothDevice = function(appId, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling unpairCurrentlyPairedBluetoothDevice");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling unpairCurrentlyPairedBluetoothDevice");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/unpair', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
