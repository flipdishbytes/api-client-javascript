/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CardReaderRegistrationRequest', 'model/GeoPointRequest', 'model/ProcessPaymentIntentRequest', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultBluetoothTerminalStatus', 'model/RestApiResultCardReader', 'model/RestApiResultStripeTerminalConnectionToken', 'model/RestApiResultStripeTerminalLocation', 'model/RestApiUnauthorizedResult', 'model/UnRegisterCardReaderRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CardReaderRegistrationRequest'), require('../model/GeoPointRequest'), require('../model/ProcessPaymentIntentRequest'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultBluetoothTerminalStatus'), require('../model/RestApiResultCardReader'), require('../model/RestApiResultStripeTerminalConnectionToken'), require('../model/RestApiResultStripeTerminalLocation'), require('../model/RestApiUnauthorizedResult'), require('../model/UnRegisterCardReaderRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.CardReadersApi = factory(root.Flipdish.ApiClient, root.Flipdish.CardReaderRegistrationRequest, root.Flipdish.GeoPointRequest, root.Flipdish.ProcessPaymentIntentRequest, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultBluetoothTerminalStatus, root.Flipdish.RestApiResultCardReader, root.Flipdish.RestApiResultStripeTerminalConnectionToken, root.Flipdish.RestApiResultStripeTerminalLocation, root.Flipdish.RestApiUnauthorizedResult, root.Flipdish.UnRegisterCardReaderRequest);
  }
}(this, function(ApiClient, CardReaderRegistrationRequest, GeoPointRequest, ProcessPaymentIntentRequest, RestApiErrorResult, RestApiForbiddenResult, RestApiResultBluetoothTerminalStatus, RestApiResultCardReader, RestApiResultStripeTerminalConnectionToken, RestApiResultStripeTerminalLocation, RestApiUnauthorizedResult, UnRegisterCardReaderRequest) {
  'use strict';

  /**
   * CardReaders service.
   * @module api/CardReadersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CardReadersApi. 
   * @alias module:api/CardReadersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelCurrentlyInitiatedBluetoothDeviceUpdate operation.
     * @callback module:api/CardReadersApi~cancelCurrentlyInitiatedBluetoothDeviceUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:model/String} terminalType 
     * @param {module:api/CardReadersApi~cancelCurrentlyInitiatedBluetoothDeviceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.cancelCurrentlyInitiatedBluetoothDeviceUpdate = function(appId, deviceId, terminalType, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling cancelCurrentlyInitiatedBluetoothDeviceUpdate");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling cancelCurrentlyInitiatedBluetoothDeviceUpdate");
      }

      // verify the required parameter 'terminalType' is set
      if (terminalType === undefined || terminalType === null) {
        throw new Error("Missing the required parameter 'terminalType' when calling cancelCurrentlyInitiatedBluetoothDeviceUpdate");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId,
        'terminalType': terminalType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/cancelUpdate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelReaderAction operation.
     * @callback module:api/CardReadersApi~cancelReaderActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultCardReader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} readerId 
     * @param {String} appId 
     * @param {module:api/CardReadersApi~cancelReaderActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultCardReader}
     */
    this.cancelReaderAction = function(readerId, appId, callback) {
      var postBody = null;

      // verify the required parameter 'readerId' is set
      if (readerId === undefined || readerId === null) {
        throw new Error("Missing the required parameter 'readerId' when calling cancelReaderAction");
      }

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling cancelReaderAction");
      }


      var pathParams = {
        'readerId': readerId,
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultCardReader;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/payments/terminals/stripe/{readerId}/cancel_action', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cardReadersGetReader operation.
     * @callback module:api/CardReadersApi~cardReadersGetReaderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultCardReader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} readerId 
     * @param {String} appId 
     * @param {module:api/CardReadersApi~cardReadersGetReaderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultCardReader}
     */
    this.cardReadersGetReader = function(readerId, appId, callback) {
      var postBody = null;

      // verify the required parameter 'readerId' is set
      if (readerId === undefined || readerId === null) {
        throw new Error("Missing the required parameter 'readerId' when calling cardReadersGetReader");
      }

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling cardReadersGetReader");
      }


      var pathParams = {
        'readerId': readerId,
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultCardReader;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/payments/terminals/stripe/{readerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the generateStripeTerminalLocation operation.
     * @callback module:api/CardReadersApi~generateStripeTerminalLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStripeTerminalLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GeoPointRequest} geoPointRequest 
     * @param {String} appId 
     * @param {module:api/CardReadersApi~generateStripeTerminalLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStripeTerminalLocation}
     */
    this.generateStripeTerminalLocation = function(geoPointRequest, appId, callback) {
      var postBody = geoPointRequest;

      // verify the required parameter 'geoPointRequest' is set
      if (geoPointRequest === undefined || geoPointRequest === null) {
        throw new Error("Missing the required parameter 'geoPointRequest' when calling generateStripeTerminalLocation");
      }

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling generateStripeTerminalLocation");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStripeTerminalLocation;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stripeterminal/location', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBluetoothTerminalStatus operation.
     * @callback module:api/CardReadersApi~getBluetoothTerminalStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultBluetoothTerminalStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:api/CardReadersApi~getBluetoothTerminalStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultBluetoothTerminalStatus}
     */
    this.getBluetoothTerminalStatus = function(appId, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBluetoothTerminalStatus");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getBluetoothTerminalStatus");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultBluetoothTerminalStatus;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStripeConnectionToken operation.
     * @callback module:api/CardReadersApi~getStripeConnectionTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStripeTerminalConnectionToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/CardReadersApi~getStripeConnectionTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStripeTerminalConnectionToken}
     */
    this.getStripeConnectionToken = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStripeConnectionToken");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStripeTerminalConnectionToken;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stripeterminal/connectiontoken', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateBluetoothTerminalDeviceUpdateCheck operation.
     * @callback module:api/CardReadersApi~initiateBluetoothTerminalDeviceUpdateCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {String} terminalType 
     * @param {module:api/CardReadersApi~initiateBluetoothTerminalDeviceUpdateCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.initiateBluetoothTerminalDeviceUpdateCheck = function(appId, deviceId, terminalType, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling initiateBluetoothTerminalDeviceUpdateCheck");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling initiateBluetoothTerminalDeviceUpdateCheck");
      }

      // verify the required parameter 'terminalType' is set
      if (terminalType === undefined || terminalType === null) {
        throw new Error("Missing the required parameter 'terminalType' when calling initiateBluetoothTerminalDeviceUpdateCheck");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId,
        'terminalType': terminalType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/checkForUpdate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateKioskBluetoothPairingMode operation.
     * @callback module:api/CardReadersApi~initiateKioskBluetoothPairingModeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:model/String} terminalType 
     * @param {module:api/CardReadersApi~initiateKioskBluetoothPairingModeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.initiateKioskBluetoothPairingMode = function(appId, deviceId, terminalType, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling initiateKioskBluetoothPairingMode");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling initiateKioskBluetoothPairingMode");
      }

      // verify the required parameter 'terminalType' is set
      if (terminalType === undefined || terminalType === null) {
        throw new Error("Missing the required parameter 'terminalType' when calling initiateKioskBluetoothPairingMode");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId,
        'terminalType': terminalType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/pair', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateKioskBluetoothUpdateInstall operation.
     * @callback module:api/CardReadersApi~initiateKioskBluetoothUpdateInstallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:model/String} terminalType 
     * @param {module:api/CardReadersApi~initiateKioskBluetoothUpdateInstallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.initiateKioskBluetoothUpdateInstall = function(appId, deviceId, terminalType, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling initiateKioskBluetoothUpdateInstall");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling initiateKioskBluetoothUpdateInstall");
      }

      // verify the required parameter 'terminalType' is set
      if (terminalType === undefined || terminalType === null) {
        throw new Error("Missing the required parameter 'terminalType' when calling initiateKioskBluetoothUpdateInstall");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId,
        'terminalType': terminalType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/{terminalType}/installUpdate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateReaderProcessPaymentIntent operation.
     * @callback module:api/CardReadersApi~initiateReaderProcessPaymentIntentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultCardReader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProcessPaymentIntentRequest} request 
     * @param {String} readerId 
     * @param {String} appId 
     * @param {module:api/CardReadersApi~initiateReaderProcessPaymentIntentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultCardReader}
     */
    this.initiateReaderProcessPaymentIntent = function(request, readerId, appId, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling initiateReaderProcessPaymentIntent");
      }

      // verify the required parameter 'readerId' is set
      if (readerId === undefined || readerId === null) {
        throw new Error("Missing the required parameter 'readerId' when calling initiateReaderProcessPaymentIntent");
      }

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling initiateReaderProcessPaymentIntent");
      }


      var pathParams = {
        'readerId': readerId,
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultCardReader;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/payments/terminals/stripe/{readerId}/processPaymentIntent', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerStripeTerminal operation.
     * @callback module:api/CardReadersApi~registerStripeTerminalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultCardReader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CardReaderRegistrationRequest} request 
     * @param {String} appId 
     * @param {module:api/CardReadersApi~registerStripeTerminalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultCardReader}
     */
    this.registerStripeTerminal = function(request, appId, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling registerStripeTerminal");
      }

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling registerStripeTerminal");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultCardReader;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/payments/terminals/stripe/register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unRegisterTerminal operation.
     * @callback module:api/CardReadersApi~unRegisterTerminalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultCardReader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UnRegisterCardReaderRequest} request 
     * @param {String} appId 
     * @param {module:api/CardReadersApi~unRegisterTerminalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultCardReader}
     */
    this.unRegisterTerminal = function(request, appId, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling unRegisterTerminal");
      }

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling unRegisterTerminal");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultCardReader;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/payments/terminals/stripe/unregister', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unpairCurrentlyPairedBluetoothDevice operation.
     * @callback module:api/CardReadersApi~unpairCurrentlyPairedBluetoothDeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:api/CardReadersApi~unpairCurrentlyPairedBluetoothDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unpairCurrentlyPairedBluetoothDevice = function(appId, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling unpairCurrentlyPairedBluetoothDevice");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling unpairCurrentlyPairedBluetoothDevice");
      }


      var pathParams = {
        'appId': appId,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/cardreaders/kiosk/{deviceId}/bluetooth/unpair', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
