/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EmvTerminal from '../model/EmvTerminal';
import HydraRegistrationRequest from '../model/HydraRegistrationRequest';
import KioskSettings from '../model/KioskSettings';
import RestApiArrayResultEmvTerminalWithAssignments from '../model/RestApiArrayResultEmvTerminalWithAssignments';
import RestApiArrayResultKioskCashPaymentSettings from '../model/RestApiArrayResultKioskCashPaymentSettings';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultHydraDeviceDetails from '../model/RestApiPaginationResultHydraDeviceDetails';
import RestApiResultHydraConfig from '../model/RestApiResultHydraConfig';
import RestApiResultHydraDeviceDetails from '../model/RestApiResultHydraDeviceDetails';
import RestApiResultHydraStatus from '../model/RestApiResultHydraStatus';
import RestApiResultKioskSettings from '../model/RestApiResultKioskSettings';
import RestApiResultPaymentTerminalDetails from '../model/RestApiResultPaymentTerminalDetails';
import RestApiResultPaymentTerminalTransactionDetails from '../model/RestApiResultPaymentTerminalTransactionDetails';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Hydra service.
* @module api/HydraApi
* @version 1.0.0
*/
export default class HydraApi {

    /**
    * Constructs a new HydraApi. 
    * @alias module:api/HydraApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignEmv operation.
     * @callback module:api/HydraApi~assignEmvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} hydraConfigId 
     * @param {Number} emvTerminalId 
     * @param {module:api/HydraApi~assignEmvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assignEmv(appId, hydraConfigId, emvTerminalId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling assignEmv");
      }
      // verify the required parameter 'hydraConfigId' is set
      if (hydraConfigId === undefined || hydraConfigId === null) {
        throw new Error("Missing the required parameter 'hydraConfigId' when calling assignEmv");
      }
      // verify the required parameter 'emvTerminalId' is set
      if (emvTerminalId === undefined || emvTerminalId === null) {
        throw new Error("Missing the required parameter 'emvTerminalId' when calling assignEmv");
      }

      let pathParams = {
        'appId': appId,
        'hydraConfigId': hydraConfigId,
        'emvTerminalId': emvTerminalId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/emvterminal/assign/{hydraConfigId}/{emvTerminalId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachStoreToKiosk operation.
     * @callback module:api/HydraApi~attachStoreToKioskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultHydraStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {String} deviceId 
     * @param {module:api/HydraApi~attachStoreToKioskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultHydraStatus}
     */
    attachStoreToKiosk(appId, storeId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling attachStoreToKiosk");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling attachStoreToKiosk");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling attachStoreToKiosk");
      }

      let pathParams = {
        'appId': appId,
        'storeId': storeId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultHydraStatus;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/AttachStoreToKiosk/{deviceId}/store/{storeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachStoreToTerminal operation.
     * @callback module:api/HydraApi~attachStoreToTerminalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultHydraStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {Number} storeId 
     * @param {module:api/HydraApi~attachStoreToTerminalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultHydraStatus}
     */
    attachStoreToTerminal(appId, deviceId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling attachStoreToTerminal");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling attachStoreToTerminal");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling attachStoreToTerminal");
      }

      let pathParams = {
        'appId': appId,
        'deviceId': deviceId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultHydraStatus;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/{deviceId}/attach/{storeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelEmvPayment operation.
     * @callback module:api/HydraApi~cancelEmvPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {String} appId 
     * @param {module:api/HydraApi~cancelEmvPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelEmvPayment(orderId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelEmvPayment");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling cancelEmvPayment");
      }

      let pathParams = {
        'orderId': orderId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/cancelemvpayment/{orderId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detachStoreFromTerminal operation.
     * @callback module:api/HydraApi~detachStoreFromTerminalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultHydraStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {Number} storeId 
     * @param {module:api/HydraApi~detachStoreFromTerminalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultHydraStatus}
     */
    detachStoreFromTerminal(appId, deviceId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling detachStoreFromTerminal");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling detachStoreFromTerminal");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling detachStoreFromTerminal");
      }

      let pathParams = {
        'appId': appId,
        'deviceId': deviceId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultHydraStatus;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/{deviceId}/detach/{storeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAblyToken operation.
     * @callback module:api/HydraApi~getAblyTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/HydraApi~getAblyTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAblyToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/hydra/ably_token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachedDevice operation.
     * @callback module:api/HydraApi~getAttachedDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultHydraDeviceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} deviceType 
     * @param {String} deviceId 
     * @param {module:api/HydraApi~getAttachedDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultHydraDeviceDetails}
     */
    getAttachedDevice(appId, deviceType, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAttachedDevice");
      }
      // verify the required parameter 'deviceType' is set
      if (deviceType === undefined || deviceType === null) {
        throw new Error("Missing the required parameter 'deviceType' when calling getAttachedDevice");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getAttachedDevice");
      }

      let pathParams = {
        'appId': appId,
        'deviceType': deviceType,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultHydraDeviceDetails;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/{deviceType}/{deviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachedDevices operation.
     * @callback module:api/HydraApi~getAttachedDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultHydraDeviceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} deviceType 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageIndex 
     * @param {Number} opts.pageSize 
     * @param {Number} opts.storeId 
     * @param {String} opts.deviceName 
     * @param {String} opts.deviceSerial 
     * @param {module:api/HydraApi~getAttachedDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultHydraDeviceDetails}
     */
    getAttachedDevices(appId, deviceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAttachedDevices");
      }
      // verify the required parameter 'deviceType' is set
      if (deviceType === undefined || deviceType === null) {
        throw new Error("Missing the required parameter 'deviceType' when calling getAttachedDevices");
      }

      let pathParams = {
        'appId': appId,
        'deviceType': deviceType
      };
      let queryParams = {
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize'],
        'storeId': opts['storeId'],
        'deviceName': opts['deviceName'],
        'deviceSerial': opts['deviceSerial']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultHydraDeviceDetails;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/{deviceType}/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEMVTerminalDetails operation.
     * @callback module:api/HydraApi~getEMVTerminalDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultPaymentTerminalDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/HydraApi~getEMVTerminalDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultPaymentTerminalDetails}
     */
    getEMVTerminalDetails(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getEMVTerminalDetails");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultPaymentTerminalDetails;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/emvterminal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmvOrderState operation.
     * @callback module:api/HydraApi~getEmvOrderStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultPaymentTerminalTransactionDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {String} appId 
     * @param {module:api/HydraApi~getEmvOrderStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultPaymentTerminalTransactionDetails}
     */
    getEmvOrderState(orderId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getEmvOrderState");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getEmvOrderState");
      }

      let pathParams = {
        'orderId': orderId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultPaymentTerminalTransactionDetails;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/emvorderstate/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKioskCashPaymentSettings operation.
     * @callback module:api/HydraApi~getKioskCashPaymentSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultKioskCashPaymentSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:api/HydraApi~getKioskCashPaymentSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultKioskCashPaymentSettings}
     */
    getKioskCashPaymentSettings(appId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getKioskCashPaymentSettings");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getKioskCashPaymentSettings");
      }

      let pathParams = {
        'appId': appId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultKioskCashPaymentSettings;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/kioskcashsettings/{deviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKioskSettings operation.
     * @callback module:api/HydraApi~getKioskSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultKioskSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:api/HydraApi~getKioskSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultKioskSettings}
     */
    getKioskSettings(appId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getKioskSettings");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getKioskSettings");
      }

      let pathParams = {
        'appId': appId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultKioskSettings;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/kiosksettings/{deviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistration operation.
     * @callback module:api/HydraApi~getRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultHydraStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/HydraApi~getRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultHydraStatus}
     */
    getRegistration(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultHydraStatus;
      return this.apiClient.callApi(
        '/api/v1.0/hydra/registration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSettings operation.
     * @callback module:api/HydraApi~getSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultHydraConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/HydraApi~getSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultHydraConfig}
     */
    getSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultHydraConfig;
      return this.apiClient.callApi(
        '/api/v1.0/hydra/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hydraCreateEmv operation.
     * @callback module:api/HydraApi~hydraCreateEmvCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/EmvTerminal} emv 
     * @param {module:api/HydraApi~hydraCreateEmvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hydraCreateEmv(appId, emv, callback) {
      let postBody = emv;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling hydraCreateEmv");
      }
      // verify the required parameter 'emv' is set
      if (emv === undefined || emv === null) {
        throw new Error("Missing the required parameter 'emv' when calling hydraCreateEmv");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/emvterminals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hydraDeleteEmv operation.
     * @callback module:api/HydraApi~hydraDeleteEmvCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} id 
     * @param {module:api/HydraApi~hydraDeleteEmvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hydraDeleteEmv(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling hydraDeleteEmv");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling hydraDeleteEmv");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/emvterminals/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hydraDetachStoreFromKiosk operation.
     * @callback module:api/HydraApi~hydraDetachStoreFromKioskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultHydraStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {String} deviceId 
     * @param {module:api/HydraApi~hydraDetachStoreFromKioskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultHydraStatus}
     */
    hydraDetachStoreFromKiosk(appId, storeId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling hydraDetachStoreFromKiosk");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling hydraDetachStoreFromKiosk");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling hydraDetachStoreFromKiosk");
      }

      let pathParams = {
        'appId': appId,
        'storeId': storeId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultHydraStatus;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/DetachStoreFromKiosk/{deviceId}/store/{storeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hydraGetEmvsForAppId operation.
     * @callback module:api/HydraApi~hydraGetEmvsForAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultEmvTerminalWithAssignments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/HydraApi~hydraGetEmvsForAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultEmvTerminalWithAssignments}
     */
    hydraGetEmvsForAppId(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling hydraGetEmvsForAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultEmvTerminalWithAssignments;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/emvterminals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginWithDeviceId operation.
     * @callback module:api/HydraApi~loginWithDeviceIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deviceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.hydraUserType 
     * @param {String} opts.serialNumber 
     * @param {module:api/HydraApi~loginWithDeviceIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginWithDeviceId(deviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling loginWithDeviceId");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
        'hydraUserType': opts['hydraUserType'],
        'serialNumber': opts['serialNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/hydra/{deviceId}/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/HydraApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultHydraStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/HydraRegistrationRequest} hydraRegistration 
     * @param {module:api/HydraApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultHydraStatus}
     */
    register(appId, hydraRegistration, callback) {
      let postBody = hydraRegistration;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling register");
      }
      // verify the required parameter 'hydraRegistration' is set
      if (hydraRegistration === undefined || hydraRegistration === null) {
        throw new Error("Missing the required parameter 'hydraRegistration' when calling register");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultHydraStatus;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/registration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unAssign operation.
     * @callback module:api/HydraApi~unAssignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:api/HydraApi~unAssignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unAssign(appId, deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling unAssign");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling unAssign");
      }

      let pathParams = {
        'appId': appId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/{deviceId}/registration', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignEmv operation.
     * @callback module:api/HydraApi~unassignEmvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} hydraConfigId 
     * @param {module:api/HydraApi~unassignEmvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unassignEmv(appId, hydraConfigId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling unassignEmv");
      }
      // verify the required parameter 'hydraConfigId' is set
      if (hydraConfigId === undefined || hydraConfigId === null) {
        throw new Error("Missing the required parameter 'hydraConfigId' when calling unassignEmv");
      }

      let pathParams = {
        'appId': appId,
        'hydraConfigId': hydraConfigId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/hydra/emvterminal/unassign/{hydraConfigId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKioskCashVisibilitySettings operation.
     * @callback module:api/HydraApi~updateKioskCashVisibilitySettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {Boolean} isCashEnabled 
     * @param {module:api/HydraApi~updateKioskCashVisibilitySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateKioskCashVisibilitySettings(appId, deviceId, isCashEnabled, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateKioskCashVisibilitySettings");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling updateKioskCashVisibilitySettings");
      }
      // verify the required parameter 'isCashEnabled' is set
      if (isCashEnabled === undefined || isCashEnabled === null) {
        throw new Error("Missing the required parameter 'isCashEnabled' when calling updateKioskCashVisibilitySettings");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'deviceId': deviceId,
        'isCashEnabled': isCashEnabled
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/kioskupdatecashsettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKioskSettings operation.
     * @callback module:api/HydraApi~updateKioskSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} deviceId 
     * @param {module:model/KioskSettings} settings 
     * @param {module:api/HydraApi~updateKioskSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateKioskSettings(appId, deviceId, settings, callback) {
      let postBody = settings;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateKioskSettings");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling updateKioskSettings");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling updateKioskSettings");
      }

      let pathParams = {
        'appId': appId,
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/kiosksettings/{deviceId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
