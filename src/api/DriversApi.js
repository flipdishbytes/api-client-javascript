/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DriverLoginModel', 'model/DriverRequestLoginPinModel', 'model/RestApiArrayResultDriverStore', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultDriver', 'model/RestApiStringResult', 'model/RestApiUnauthorizedResult', 'model/UpdateDriverNotificationToken', 'model/UpdateDriverProfileModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DriverLoginModel'), require('../model/DriverRequestLoginPinModel'), require('../model/RestApiArrayResultDriverStore'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultDriver'), require('../model/RestApiStringResult'), require('../model/RestApiUnauthorizedResult'), require('../model/UpdateDriverNotificationToken'), require('../model/UpdateDriverProfileModel'));
  } else {
    // Browser globals (root is window)
    if (!root.FlipdishOpenApiV10) {
      root.FlipdishOpenApiV10 = {};
    }
    root.FlipdishOpenApiV10.DriversApi = factory(root.FlipdishOpenApiV10.ApiClient, root.FlipdishOpenApiV10.DriverLoginModel, root.FlipdishOpenApiV10.DriverRequestLoginPinModel, root.FlipdishOpenApiV10.RestApiArrayResultDriverStore, root.FlipdishOpenApiV10.RestApiErrorResult, root.FlipdishOpenApiV10.RestApiForbiddenResult, root.FlipdishOpenApiV10.RestApiResultDriver, root.FlipdishOpenApiV10.RestApiStringResult, root.FlipdishOpenApiV10.RestApiUnauthorizedResult, root.FlipdishOpenApiV10.UpdateDriverNotificationToken, root.FlipdishOpenApiV10.UpdateDriverProfileModel);
  }
}(this, function(ApiClient, DriverLoginModel, DriverRequestLoginPinModel, RestApiArrayResultDriverStore, RestApiErrorResult, RestApiForbiddenResult, RestApiResultDriver, RestApiStringResult, RestApiUnauthorizedResult, UpdateDriverNotificationToken, UpdateDriverProfileModel) {
  'use strict';

  /**
   * Drivers service.
   * @module api/DriversApi
   * @version v1.0
   */

  /**
   * Constructs a new DriversApi. 
   * @alias module:api/DriversApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addDriverNotificationToken operation.
     * @callback module:api/DriversApi~addDriverNotificationTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add driver token
     * @param {module:model/UpdateDriverNotificationToken} updateDriverToken 
     * @param {module:api/DriversApi~addDriverNotificationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addDriverNotificationToken = function(updateDriverToken, callback) {
      var postBody = updateDriverToken;

      // verify the required parameter 'updateDriverToken' is set
      if (updateDriverToken === undefined || updateDriverToken === null) {
        throw new Error("Missing the required parameter 'updateDriverToken' when calling addDriverNotificationToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDriverProfileImage operation.
     * @callback module:api/DriversApi~deleteDriverProfileImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete driver profile image
     * @param {module:api/DriversApi~deleteDriverProfileImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDriverProfileImage = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/profile/image', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the driverLogin operation.
     * @callback module:api/DriversApi~driverLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE] Login with phone number and pin
     * @param {module:model/DriverLoginModel} driverLoginModel Driver request login code model
     * @param {module:api/DriversApi~driverLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.driverLogin = function(driverLoginModel, callback) {
      var postBody = driverLoginModel;

      // verify the required parameter 'driverLoginModel' is set
      if (driverLoginModel === undefined || driverLoginModel === null) {
        throw new Error("Missing the required parameter 'driverLoginModel' when calling driverLogin");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the driverRequestLoginCodeSms operation.
     * @callback module:api/DriversApi~driverRequestLoginCodeSmsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE] Request an SMS to be sent to the driver with their login code
     * @param {module:model/DriverRequestLoginPinModel} driverRequestLoginPinModel Driver request login code model
     * @param {module:api/DriversApi~driverRequestLoginCodeSmsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.driverRequestLoginCodeSms = function(driverRequestLoginPinModel, callback) {
      var postBody = driverRequestLoginPinModel;

      // verify the required parameter 'driverRequestLoginPinModel' is set
      if (driverRequestLoginPinModel === undefined || driverRequestLoginPinModel === null) {
        throw new Error("Missing the required parameter 'driverRequestLoginPinModel' when calling driverRequestLoginCodeSms");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/pin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDriverProfile operation.
     * @callback module:api/DriversApi~getDriverProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultDriver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get driver profile
     * @param {module:api/DriversApi~getDriverProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultDriver}
     */
    this.getDriverProfile = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultDriver;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/profile', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoresForDriver operation.
     * @callback module:api/DriversApi~getStoresForDriverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultDriverStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stores for driver
     * @param {module:api/DriversApi~getStoresForDriverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultDriverStore}
     */
    this.getStoresForDriver = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultDriverStore;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/assignedstores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDriverNotificationToken operation.
     * @callback module:api/DriversApi~removeDriverNotificationTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete driver token
     * @param {module:model/UpdateDriverNotificationToken} removeDriverToken 
     * @param {module:api/DriversApi~removeDriverNotificationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeDriverNotificationToken = function(removeDriverToken, callback) {
      var postBody = removeDriverToken;

      // verify the required parameter 'removeDriverToken' is set
      if (removeDriverToken === undefined || removeDriverToken === null) {
        throw new Error("Missing the required parameter 'removeDriverToken' when calling removeDriverNotificationToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/token', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDriverPresenceForStore operation.
     * @callback module:api/DriversApi~setDriverPresenceForStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/String} presence 
     * @param {module:api/DriversApi~setDriverPresenceForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setDriverPresenceForStore = function(storeId, presence, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setDriverPresenceForStore");
      }

      // verify the required parameter 'presence' is set
      if (presence === undefined || presence === null) {
        throw new Error("Missing the required parameter 'presence' when calling setDriverPresenceForStore");
      }


      var pathParams = {
        'storeId': storeId,
        'presence': presence
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/stores/{storeId}/presence/{presence}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setDriverProfileImage operation.
     * @callback module:api/DriversApi~setDriverProfileImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set driver profile image and returns it's url
     * @param {module:api/DriversApi~setDriverProfileImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.setDriverProfileImage = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/profile/image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeliveryTrackingStatus operation.
     * @callback module:api/DriversApi~updateDeliveryTrackingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change delivery tracking status and return the updated status.
     * ...
     * @param {Number} orderId Order identifier
     * @param {module:model/String} deliveryTrackingStatus 
     * @param {module:api/DriversApi~updateDeliveryTrackingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.updateDeliveryTrackingStatus = function(orderId, deliveryTrackingStatus, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateDeliveryTrackingStatus");
      }

      // verify the required parameter 'deliveryTrackingStatus' is set
      if (deliveryTrackingStatus === undefined || deliveryTrackingStatus === null) {
        throw new Error("Missing the required parameter 'deliveryTrackingStatus' when calling updateDeliveryTrackingStatus");
      }


      var pathParams = {
        'orderId': orderId,
        'deliveryTrackingStatus': deliveryTrackingStatus
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/orders/{orderId}/tracking/{deliveryTrackingStatus}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDriverProfile operation.
     * @callback module:api/DriversApi~updateDriverProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update driver profile
     * @param {module:model/UpdateDriverProfileModel} updateDriverProfile Update the driver profile (i.e Name)
     * @param {module:api/DriversApi~updateDriverProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateDriverProfile = function(updateDriverProfile, callback) {
      var postBody = updateDriverProfile;

      // verify the required parameter 'updateDriverProfile' is set
      if (updateDriverProfile === undefined || updateDriverProfile === null) {
        throw new Error("Missing the required parameter 'updateDriverProfile' when calling updateDriverProfile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/drivers/profile', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
