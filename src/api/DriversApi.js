/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DriverLoginModel from '../model/DriverLoginModel';
import DriverRequestLoginPinModel from '../model/DriverRequestLoginPinModel';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import UpdateDriverNotificationToken from '../model/UpdateDriverNotificationToken';
import UpdateDriverProfileModel from '../model/UpdateDriverProfileModel';

/**
* Drivers service.
* @module api/DriversApi
* @version 1.0.0
*/
export default class DriversApi {

    /**
    * Constructs a new DriversApi. 
    * @alias module:api/DriversApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the driversAddDriverNotificationToken operation.
     * @callback module:api/DriversApi~driversAddDriverNotificationTokenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateDriverNotificationToken} updateDriverToken 
     * @param {module:api/DriversApi~driversAddDriverNotificationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversAddDriverNotificationToken(updateDriverToken, callback) {
      let postBody = updateDriverToken;
      // verify the required parameter 'updateDriverToken' is set
      if (updateDriverToken === undefined || updateDriverToken === null) {
        throw new Error("Missing the required parameter 'updateDriverToken' when calling driversAddDriverNotificationToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversDeleteDriverProfileImage operation.
     * @callback module:api/DriversApi~driversDeleteDriverProfileImageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DriversApi~driversDeleteDriverProfileImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversDeleteDriverProfileImage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/profile/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversDriverLogin operation.
     * @callback module:api/DriversApi~driversDriverLoginCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DriverLoginModel} driverLoginModel 
     * @param {module:api/DriversApi~driversDriverLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversDriverLogin(driverLoginModel, callback) {
      let postBody = driverLoginModel;
      // verify the required parameter 'driverLoginModel' is set
      if (driverLoginModel === undefined || driverLoginModel === null) {
        throw new Error("Missing the required parameter 'driverLoginModel' when calling driversDriverLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversDriverRequestLoginCodeSms operation.
     * @callback module:api/DriversApi~driversDriverRequestLoginCodeSmsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DriverRequestLoginPinModel} driverRequestLoginPinModel 
     * @param {module:api/DriversApi~driversDriverRequestLoginCodeSmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversDriverRequestLoginCodeSms(driverRequestLoginPinModel, callback) {
      let postBody = driverRequestLoginPinModel;
      // verify the required parameter 'driverRequestLoginPinModel' is set
      if (driverRequestLoginPinModel === undefined || driverRequestLoginPinModel === null) {
        throw new Error("Missing the required parameter 'driverRequestLoginPinModel' when calling driversDriverRequestLoginCodeSms");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/pin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversGetDriverProfile operation.
     * @callback module:api/DriversApi~driversGetDriverProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DriversApi~driversGetDriverProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversGetDriverProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversGetStoresForDriver operation.
     * @callback module:api/DriversApi~driversGetStoresForDriverCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DriversApi~driversGetStoresForDriverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversGetStoresForDriver(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/assignedstores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversRemoveDriverNotificationToken operation.
     * @callback module:api/DriversApi~driversRemoveDriverNotificationTokenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateDriverNotificationToken} removeDriverToken 
     * @param {module:api/DriversApi~driversRemoveDriverNotificationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversRemoveDriverNotificationToken(removeDriverToken, callback) {
      let postBody = removeDriverToken;
      // verify the required parameter 'removeDriverToken' is set
      if (removeDriverToken === undefined || removeDriverToken === null) {
        throw new Error("Missing the required parameter 'removeDriverToken' when calling driversRemoveDriverNotificationToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/token', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversSetDriverPresenceForStore operation.
     * @callback module:api/DriversApi~driversSetDriverPresenceForStoreCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeId 
     * @param {module:model/String} presence 
     * @param {module:api/DriversApi~driversSetDriverPresenceForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversSetDriverPresenceForStore(storeId, presence, callback) {
      let postBody = null;
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling driversSetDriverPresenceForStore");
      }
      // verify the required parameter 'presence' is set
      if (presence === undefined || presence === null) {
        throw new Error("Missing the required parameter 'presence' when calling driversSetDriverPresenceForStore");
      }

      let pathParams = {
        'storeId': storeId,
        'presence': presence
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/stores/{storeId}/presence/{presence}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversSetDriverProfileImage operation.
     * @callback module:api/DriversApi~driversSetDriverProfileImageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DriversApi~driversSetDriverProfileImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversSetDriverProfileImage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/profile/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversUpdateDeliveryTrackingStatus operation.
     * @callback module:api/DriversApi~driversUpdateDeliveryTrackingStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} orderId 
     * @param {module:model/String} deliveryTrackingStatus 
     * @param {module:api/DriversApi~driversUpdateDeliveryTrackingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversUpdateDeliveryTrackingStatus(orderId, deliveryTrackingStatus, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling driversUpdateDeliveryTrackingStatus");
      }
      // verify the required parameter 'deliveryTrackingStatus' is set
      if (deliveryTrackingStatus === undefined || deliveryTrackingStatus === null) {
        throw new Error("Missing the required parameter 'deliveryTrackingStatus' when calling driversUpdateDeliveryTrackingStatus");
      }

      let pathParams = {
        'orderId': orderId,
        'deliveryTrackingStatus': deliveryTrackingStatus
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/orders/{orderId}/tracking/{deliveryTrackingStatus}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driversUpdateDriverProfile operation.
     * @callback module:api/DriversApi~driversUpdateDriverProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateDriverProfileModel} updateDriverProfile 
     * @param {module:api/DriversApi~driversUpdateDriverProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    driversUpdateDriverProfile(updateDriverProfile, callback) {
      let postBody = updateDriverProfile;
      // verify the required parameter 'updateDriverProfile' is set
      if (updateDriverProfile === undefined || updateDriverProfile === null) {
        throw new Error("Missing the required parameter 'updateDriverProfile' when calling driversUpdateDriverProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/drivers/profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
