/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BankAccountCreate from '../model/BankAccountCreate';
import RestApiArrayResultBankAccountSummary from '../model/RestApiArrayResultBankAccountSummary';
import RestApiArrayResultCountryWithAccountFieldsDefinitions from '../model/RestApiArrayResultCountryWithAccountFieldsDefinitions';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultAccountFieldsDefinitions from '../model/RestApiResultAccountFieldsDefinitions';
import RestApiResultBankAccountDetail from '../model/RestApiResultBankAccountDetail';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* BankAccount service.
* @module api/BankAccountApi
* @version 1.0.0
*/
export default class BankAccountApi {

    /**
    * Constructs a new BankAccountApi. 
    * @alias module:api/BankAccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attachBankAccountToStore operation.
     * @callback module:api/BankAccountApi~attachBankAccountToStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} storeId 
     * @param {module:api/BankAccountApi~attachBankAccountToStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attachBankAccountToStore(appId, bankAccountId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling attachBankAccountToStore");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling attachBankAccountToStore");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling attachBankAccountToStore");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/store/{storeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBankAccount operation.
     * @callback module:api/BankAccountApi~createBankAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultBankAccountDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/BankAccountCreate} account 
     * @param {module:api/BankAccountApi~createBankAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultBankAccountDetail}
     */
    createBankAccount(appId, account, callback) {
      let postBody = account;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createBankAccount");
      }
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling createBankAccount");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultBankAccountDetail;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankAccount operation.
     * @callback module:api/BankAccountApi~deleteBankAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {module:api/BankAccountApi~deleteBankAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBankAccount(appId, bankAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteBankAccount");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling deleteBankAccount");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankAccountById operation.
     * @callback module:api/BankAccountApi~getBankAccountByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultBankAccountDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bankAccountId 
     * @param {String} appId 
     * @param {module:api/BankAccountApi~getBankAccountByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultBankAccountDetail}
     */
    getBankAccountById(bankAccountId, appId, callback) {
      let postBody = null;
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getBankAccountById");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBankAccountById");
      }

      let pathParams = {
        'bankAccountId': bankAccountId,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultBankAccountDetail;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankAccounts operation.
     * @callback module:api/BankAccountApi~getBankAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultBankAccountSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/BankAccountApi~getBankAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultBankAccountSummary}
     */
    getBankAccounts(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getBankAccounts");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultBankAccountSummary;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountriesWithFieldDefinitions operation.
     * @callback module:api/BankAccountApi~getCountriesWithFieldDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultCountryWithAccountFieldsDefinitions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/BankAccountApi~getCountriesWithFieldDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultCountryWithAccountFieldsDefinitions}
     */
    getCountriesWithFieldDefinitions(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCountriesWithFieldDefinitions");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultCountryWithAccountFieldsDefinitions;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/countries-field-definitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldDefinitions operation.
     * @callback module:api/BankAccountApi~getFieldDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAccountFieldsDefinitions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/BankAccountApi~getFieldDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAccountFieldsDefinitions}
     */
    getFieldDefinitions(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getFieldDefinitions");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultAccountFieldsDefinitions;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/field-definitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankAccount operation.
     * @callback module:api/BankAccountApi~updateBankAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {module:model/BankAccountCreate} account 
     * @param {module:api/BankAccountApi~updateBankAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBankAccount(appId, bankAccountId, account, callback) {
      let postBody = account;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateBankAccount");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling updateBankAccount");
      }
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling updateBankAccount");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankAccountState operation.
     * @callback module:api/BankAccountApi~updateBankAccountStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {String} state 
     * @param {String} reason 
     * @param {module:api/BankAccountApi~updateBankAccountStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBankAccountState(appId, bankAccountId, state, reason, callback) {
      let postBody = reason;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateBankAccountState");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling updateBankAccountState");
      }
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling updateBankAccountState");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling updateBankAccountState");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'state': state
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/bankaccounts/{bankAccountId}/state/{state}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
