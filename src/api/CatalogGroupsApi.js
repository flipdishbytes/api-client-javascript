/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGroup from '../model/CreateGroup';
import Group from '../model/Group';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultGroup from '../model/RestApiPaginationResultGroup';
import RestApiResultGroup from '../model/RestApiResultGroup';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import UpdateGroup from '../model/UpdateGroup';

/**
* CatalogGroups service.
* @module api/CatalogGroupsApi
* @version 1.0.0
*/
export default class CatalogGroupsApi {

    /**
    * Constructs a new CatalogGroupsApi. 
    * @alias module:api/CatalogGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the archiveGroup operation.
     * @callback module:api/CatalogGroupsApi~archiveGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:api/CatalogGroupsApi~archiveGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archiveGroup(appId, catalogItemId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling archiveGroup");
      }
      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling archiveGroup");
      }

      let pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups/{catalogItemId}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/CatalogGroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {module:model/CreateGroup} createGroup 
     * @param {module:api/CatalogGroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultGroup}
     */
    createGroup(appId, createGroup, callback) {
      let postBody = createGroup;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createGroup");
      }
      // verify the required parameter 'createGroup' is set
      if (createGroup === undefined || createGroup === null) {
        throw new Error("Missing the required parameter 'createGroup' when calling createGroup");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'MinSelectCount', 'MaxSelectCount', 'Products', 'GroupType', 'Sku', 'Name', 'AutogenerateDisplayText', 'ImageFileName'];
      let returnType = RestApiResultGroup;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateGroup operation.
     * @callback module:api/CatalogGroupsApi~duplicateGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:api/CatalogGroupsApi~duplicateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    duplicateGroup(appId, catalogItemId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling duplicateGroup");
      }
      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling duplicateGroup");
      }

      let pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups/{catalogItemId}/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupById operation.
     * @callback module:api/CatalogGroupsApi~getGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group by Id
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:api/CatalogGroupsApi~getGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    getGroupById(appId, catalogItemId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getGroupById");
      }
      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling getGroupById");
      }

      let pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'CatalogGroupId', 'CatalogItemId', 'IsArchived', 'MinSelectCount', 'Products', 'GroupType', 'Sku', 'Name', 'AutogenerateDisplayText', 'ImageFileName'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups/{catalogItemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroups operation.
     * @callback module:api/CatalogGroupsApi~getGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get paginated groups by app name id filtered by types
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {Array.<module:model/String>} groupTypes 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/CatalogGroupsApi~getGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultGroup}
     */
    getGroups(appId, groupTypes, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getGroups");
      }
      // verify the required parameter 'groupTypes' is set
      if (groupTypes === undefined || groupTypes === null) {
        throw new Error("Missing the required parameter 'groupTypes' when calling getGroups");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'groupTypes': this.apiClient.buildCollectionParam(groupTypes, 'multi'),
        'searchTerm': opts['searchTerm'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultGroup;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback module:api/CatalogGroupsApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:model/UpdateGroup} updateGroup 
     * @param {module:api/CatalogGroupsApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGroup(appId, catalogItemId, updateGroup, callback) {
      let postBody = updateGroup;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateGroup");
      }
      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling updateGroup");
      }
      // verify the required parameter 'updateGroup' is set
      if (updateGroup === undefined || updateGroup === null) {
        throw new Error("Missing the required parameter 'updateGroup' when calling updateGroup");
      }

      let pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups/{catalogItemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
