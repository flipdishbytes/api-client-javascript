/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateGroup', 'model/Group', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultGroup', 'model/RestApiResultGroup', 'model/RestApiUnauthorizedResult', 'model/UpdateGroup'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateGroup'), require('../model/Group'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultGroup'), require('../model/RestApiResultGroup'), require('../model/RestApiUnauthorizedResult'), require('../model/UpdateGroup'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.CatalogGroupsApi = factory(root.Flipdish.ApiClient, root.Flipdish.CreateGroup, root.Flipdish.Group, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiPaginationResultGroup, root.Flipdish.RestApiResultGroup, root.Flipdish.RestApiUnauthorizedResult, root.Flipdish.UpdateGroup);
  }
}(this, function(ApiClient, CreateGroup, Group, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultGroup, RestApiResultGroup, RestApiUnauthorizedResult, UpdateGroup) {
  'use strict';

  /**
   * CatalogGroups service.
   * @module api/CatalogGroupsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CatalogGroupsApi. 
   * @alias module:api/CatalogGroupsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the archiveGroup operation.
     * @callback module:api/CatalogGroupsApi~archiveGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:api/CatalogGroupsApi~archiveGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.archiveGroup = function(appId, catalogItemId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling archiveGroup");
      }

      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling archiveGroup");
      }


      var pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups/{catalogItemId}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/CatalogGroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {module:model/CreateGroup} createGroup 
     * @param {module:api/CatalogGroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultGroup}
     */
    this.createGroup = function(appId, createGroup, callback) {
      var postBody = createGroup;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createGroup");
      }

      // verify the required parameter 'createGroup' is set
      if (createGroup === undefined || createGroup === null) {
        throw new Error("Missing the required parameter 'createGroup' when calling createGroup");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultGroup;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateGroup operation.
     * @callback module:api/CatalogGroupsApi~duplicateGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:api/CatalogGroupsApi~duplicateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.duplicateGroup = function(appId, catalogItemId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling duplicateGroup");
      }

      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling duplicateGroup");
      }


      var pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups/{catalogItemId}/duplicate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupById operation.
     * @callback module:api/CatalogGroupsApi~getGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group by Id
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:api/CatalogGroupsApi~getGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    this.getGroupById = function(appId, catalogItemId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getGroupById");
      }

      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling getGroupById");
      }


      var pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Group;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups/{catalogItemId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroups operation.
     * @callback module:api/CatalogGroupsApi~getGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get paginated groups by app name id filtered by types
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {Array.<module:model/String>} groupTypes 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/CatalogGroupsApi~getGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultGroup}
     */
    this.getGroups = function(appId, groupTypes, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getGroups");
      }

      // verify the required parameter 'groupTypes' is set
      if (groupTypes === undefined || groupTypes === null) {
        throw new Error("Missing the required parameter 'groupTypes' when calling getGroups");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'searchTerm': opts['searchTerm'],
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'groupTypes': {
          value: groupTypes,
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultGroup;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback module:api/CatalogGroupsApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Catalog Group
     * [BETA - this endpoint is under development, do not use it in your production system]
     * @param {String} appId 
     * @param {String} catalogItemId 
     * @param {module:model/UpdateGroup} updateGroup 
     * @param {module:api/CatalogGroupsApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateGroup = function(appId, catalogItemId, updateGroup, callback) {
      var postBody = updateGroup;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateGroup");
      }

      // verify the required parameter 'catalogItemId' is set
      if (catalogItemId === undefined || catalogItemId === null) {
        throw new Error("Missing the required parameter 'catalogItemId' when calling updateGroup");
      }

      // verify the required parameter 'updateGroup' is set
      if (updateGroup === undefined || updateGroup === null) {
        throw new Error("Missing the required parameter 'updateGroup' when calling updateGroup");
      }


      var pathParams = {
        'appId': appId,
        'catalogItemId': catalogItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/catalog/groups/{catalogItemId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
