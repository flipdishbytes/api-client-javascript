/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultPayoutReport3RefundedOrder from '../model/RestApiPaginationResultPayoutReport3RefundedOrder';
import RestApiResultFileCreationResult from '../model/RestApiResultFileCreationResult';
import RestApiResultPayoutReport3Details from '../model/RestApiResultPayoutReport3Details';
import RestApiResultPayoutReport3Overview from '../model/RestApiResultPayoutReport3Overview';

/**
* PayoutReports service.
* @module api/PayoutReportsApi
* @version 1.0.0
*/
export default class PayoutReportsApi {

    /**
    * Constructs a new PayoutReportsApi. 
    * @alias module:api/PayoutReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPayoutReport3Details operation.
     * @callback module:api/PayoutReportsApi~getPayoutReport3DetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultPayoutReport3Details} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeIds 
     * @param {module:api/PayoutReportsApi~getPayoutReport3DetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultPayoutReport3Details}
     */
    getPayoutReport3Details(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutReport3Details");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutReport3Details");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutReport3Details");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'storeIds': this.apiClient.buildCollectionParam(opts['storeIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultPayoutReport3Details;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutReport3Overview operation.
     * @callback module:api/PayoutReportsApi~getPayoutReport3OverviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultPayoutReport3Overview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {module:api/PayoutReportsApi~getPayoutReport3OverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultPayoutReport3Overview}
     */
    getPayoutReport3Overview(appId, bankAccountId, payoutId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutReport3Overview");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutReport3Overview");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutReport3Overview");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultPayoutReport3Overview;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayoutReport3RefundedOrders operation.
     * @callback module:api/PayoutReportsApi~getPayoutReport3RefundedOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultPayoutReport3RefundedOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.storeIds 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/PayoutReportsApi~getPayoutReport3RefundedOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultPayoutReport3RefundedOrder}
     */
    getPayoutReport3RefundedOrders(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPayoutReport3RefundedOrders");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling getPayoutReport3RefundedOrders");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling getPayoutReport3RefundedOrders");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'storeIds': this.apiClient.buildCollectionParam(opts['storeIds'], 'multi'),
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiPaginationResultPayoutReport3RefundedOrder;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/refundedOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payoutReport3ExportPayoutChargebacks operation.
     * @callback module:api/PayoutReportsApi~payoutReport3ExportPayoutChargebacksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultFileCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.stores 
     * @param {module:api/PayoutReportsApi~payoutReport3ExportPayoutChargebacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultFileCreationResult}
     */
    payoutReport3ExportPayoutChargebacks(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutChargebacks");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutChargebacks");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutChargebacks");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'stores': this.apiClient.buildCollectionParam(opts['stores'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultFileCreationResult;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/chargebacks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payoutReport3ExportPayoutLedgerEntries operation.
     * @callback module:api/PayoutReportsApi~payoutReport3ExportPayoutLedgerEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultFileCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.stores 
     * @param {module:api/PayoutReportsApi~payoutReport3ExportPayoutLedgerEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultFileCreationResult}
     */
    payoutReport3ExportPayoutLedgerEntries(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutLedgerEntries");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutLedgerEntries");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutLedgerEntries");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'stores': this.apiClient.buildCollectionParam(opts['stores'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultFileCreationResult;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/ledgerentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payoutReport3ExportPayoutOrders operation.
     * @callback module:api/PayoutReportsApi~payoutReport3ExportPayoutOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultFileCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.stores 
     * @param {module:api/PayoutReportsApi~payoutReport3ExportPayoutOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultFileCreationResult}
     */
    payoutReport3ExportPayoutOrders(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutOrders");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutOrders");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutOrders");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'stores': this.apiClient.buildCollectionParam(opts['stores'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultFileCreationResult;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payoutReport3ExportPayoutPosSales operation.
     * @callback module:api/PayoutReportsApi~payoutReport3ExportPayoutPosSalesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultFileCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.stores 
     * @param {module:api/PayoutReportsApi~payoutReport3ExportPayoutPosSalesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultFileCreationResult}
     */
    payoutReport3ExportPayoutPosSales(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutPosSales");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutPosSales");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutPosSales");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'stores': this.apiClient.buildCollectionParam(opts['stores'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultFileCreationResult;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/possales', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the payoutReport3ExportPayoutRefundedOrders operation.
     * @callback module:api/PayoutReportsApi~payoutReport3ExportPayoutRefundedOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultFileCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} bankAccountId 
     * @param {Number} payoutId 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.stores 
     * @param {module:api/PayoutReportsApi~payoutReport3ExportPayoutRefundedOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultFileCreationResult}
     */
    payoutReport3ExportPayoutRefundedOrders(appId, bankAccountId, payoutId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling payoutReport3ExportPayoutRefundedOrders");
      }
      // verify the required parameter 'bankAccountId' is set
      if (bankAccountId === undefined || bankAccountId === null) {
        throw new Error("Missing the required parameter 'bankAccountId' when calling payoutReport3ExportPayoutRefundedOrders");
      }
      // verify the required parameter 'payoutId' is set
      if (payoutId === undefined || payoutId === null) {
        throw new Error("Missing the required parameter 'payoutId' when calling payoutReport3ExportPayoutRefundedOrders");
      }

      let pathParams = {
        'appId': appId,
        'bankAccountId': bankAccountId,
        'payoutId': payoutId
      };
      let queryParams = {
        'stores': this.apiClient.buildCollectionParam(opts['stores'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultFileCreationResult;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/reporting/reports/payouts3/{bankAccountId}/{payoutId}/export/refundedOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
