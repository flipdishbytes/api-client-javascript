/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateFullMenu', 'model/MenuBase', 'model/MenuElementHide', 'model/MenuObjectDisplayOrders', 'model/MenuTaxRate', 'model/Metadata', 'model/RestApiArrayResultAllMetadataResult', 'model/RestApiArrayResultMenuCheckpoint', 'model/RestApiArrayResultMenuElementEditResponse', 'model/RestApiArrayResultMenuStoreNames', 'model/RestApiArrayResultMenuSummary', 'model/RestApiArrayResultMenuTaxDetails', 'model/RestApiArrayResultMetadata', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultMenu', 'model/RestApiResultMetadata', 'model/RestApiStringResult', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateFullMenu'), require('../model/MenuBase'), require('../model/MenuElementHide'), require('../model/MenuObjectDisplayOrders'), require('../model/MenuTaxRate'), require('../model/Metadata'), require('../model/RestApiArrayResultAllMetadataResult'), require('../model/RestApiArrayResultMenuCheckpoint'), require('../model/RestApiArrayResultMenuElementEditResponse'), require('../model/RestApiArrayResultMenuStoreNames'), require('../model/RestApiArrayResultMenuSummary'), require('../model/RestApiArrayResultMenuTaxDetails'), require('../model/RestApiArrayResultMetadata'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultMenu'), require('../model/RestApiResultMetadata'), require('../model/RestApiStringResult'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.MenusApi = factory(root.Flipdish.ApiClient, root.Flipdish.CreateFullMenu, root.Flipdish.MenuBase, root.Flipdish.MenuElementHide, root.Flipdish.MenuObjectDisplayOrders, root.Flipdish.MenuTaxRate, root.Flipdish.Metadata, root.Flipdish.RestApiArrayResultAllMetadataResult, root.Flipdish.RestApiArrayResultMenuCheckpoint, root.Flipdish.RestApiArrayResultMenuElementEditResponse, root.Flipdish.RestApiArrayResultMenuStoreNames, root.Flipdish.RestApiArrayResultMenuSummary, root.Flipdish.RestApiArrayResultMenuTaxDetails, root.Flipdish.RestApiArrayResultMetadata, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultMenu, root.Flipdish.RestApiResultMetadata, root.Flipdish.RestApiStringResult, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, CreateFullMenu, MenuBase, MenuElementHide, MenuObjectDisplayOrders, MenuTaxRate, Metadata, RestApiArrayResultAllMetadataResult, RestApiArrayResultMenuCheckpoint, RestApiArrayResultMenuElementEditResponse, RestApiArrayResultMenuStoreNames, RestApiArrayResultMenuSummary, RestApiArrayResultMenuTaxDetails, RestApiArrayResultMetadata, RestApiErrorResult, RestApiForbiddenResult, RestApiResultMenu, RestApiResultMetadata, RestApiStringResult, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * Menus service.
   * @module api/MenusApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MenusApi. 
   * @alias module:api/MenusApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDraftMenuFromExistingMenu operation.
     * @callback module:api/MenusApi~createDraftMenuFromExistingMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenu} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Clone a menu, (without attaching stores)
     * @param {Number} menuId Menu identifier
     * @param {String} newName Name of the new Menu
     * @param {module:api/MenusApi~createDraftMenuFromExistingMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenu}
     */
    this.createDraftMenuFromExistingMenu = function(menuId, newName, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling createDraftMenuFromExistingMenu");
      }

      // verify the required parameter 'newName' is set
      if (newName === undefined || newName === null) {
        throw new Error("Missing the required parameter 'newName' when calling createDraftMenuFromExistingMenu");
      }


      var pathParams = {
        'menuId': menuId,
        'newName': newName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultMenu;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/clone/{newName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNewMenuForApp operation.
     * @callback module:api/MenusApi~createNewMenuForAppCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new menu. If request body is empty, the system will create a menu with default items.
     * @param {String} appId App identifier
     * @param {module:model/CreateFullMenu} menu Menu
     * @param {module:api/MenusApi~createNewMenuForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.createNewMenuForApp = function(appId, menu, callback) {
      var postBody = menu;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createNewMenuForApp");
      }

      // verify the required parameter 'menu' is set
      if (menu === undefined || menu === null) {
        throw new Error("Missing the required parameter 'menu' when calling createNewMenuForApp");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/menus', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenu operation.
     * @callback module:api/MenusApi~deleteMenuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Mark a Menu as Deleted
     * @param {Number} menuId Menu Identifier
     * @param {module:api/MenusApi~deleteMenuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMenu = function(menuId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenu");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuImage operation.
     * @callback module:api/MenusApi~deleteMenuImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu image
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~deleteMenuImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMenuImage = function(menuId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuImage");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/image', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuItemMetadata operation.
     * @callback module:api/MenusApi~deleteMenuItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu item metadata
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} menuItemId Menu item identifier
     * @param {String} key Metadata key
     * @param {module:api/MenusApi~deleteMenuItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMenuItemMetadata = function(menuId, storeId, menuItemId, key, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuItemMetadata");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteMenuItemMetadata");
      }

      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling deleteMenuItemMetadata");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteMenuItemMetadata");
      }


      var pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'menuItemId': menuItemId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMenuMetadataByMenuIdAndStoreId operation.
     * @callback module:api/MenusApi~getAllMenuMetadataByMenuIdAndStoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultAllMetadataResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all menu metadata by menu ID and store ID
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {module:api/MenusApi~getAllMenuMetadataByMenuIdAndStoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultAllMetadataResult}
     */
    this.getAllMenuMetadataByMenuIdAndStoreId = function(menuId, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getAllMenuMetadataByMenuIdAndStoreId");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getAllMenuMetadataByMenuIdAndStoreId");
      }


      var pathParams = {
        'menuId': menuId,
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultAllMetadataResult;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/metadata/store/{storeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuById operation.
     * @callback module:api/MenusApi~getMenuByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenu} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu by identifier
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~getMenuByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenu}
     */
    this.getMenuById = function(menuId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuById");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultMenu;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemMetadata operation.
     * @callback module:api/MenusApi~getMenuItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item metadata
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} menuItemId Menu item identifier
     * @param {module:api/MenusApi~getMenuItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMetadata}
     */
    this.getMenuItemMetadata = function(menuId, storeId, menuItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemMetadata");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMenuItemMetadata");
      }

      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling getMenuItemMetadata");
      }


      var pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'menuItemId': menuItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMetadata;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemMetadataByKey operation.
     * @callback module:api/MenusApi~getMenuItemMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item metadata by key
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} menuItemId Menu item identifier
     * @param {String} key Metadata key
     * @param {module:api/MenusApi~getMenuItemMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getMenuItemMetadataByKey = function(menuId, storeId, menuItemId, key, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemMetadataByKey");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMenuItemMetadataByKey");
      }

      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling getMenuItemMetadataByKey");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMenuItemMetadataByKey");
      }


      var pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'menuItemId': menuItemId,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemOptionSetItemMetadata operation.
     * @callback module:api/MenusApi~getMenuItemOptionSetItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item option set item metadata by key
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} optionSetItemId Menu item option set item identifier
     * @param {module:api/MenusApi~getMenuItemOptionSetItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMetadata}
     */
    this.getMenuItemOptionSetItemMetadata = function(menuId, storeId, optionSetItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemOptionSetItemMetadata");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMenuItemOptionSetItemMetadata");
      }

      // verify the required parameter 'optionSetItemId' is set
      if (optionSetItemId === undefined || optionSetItemId === null) {
        throw new Error("Missing the required parameter 'optionSetItemId' when calling getMenuItemOptionSetItemMetadata");
      }


      var pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'optionSetItemId': optionSetItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultMetadata;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuStoreNames operation.
     * @callback module:api/MenusApi~getMenuStoreNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuStoreNames} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Get menus store names
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~getMenuStoreNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuStoreNames}
     */
    this.getMenuStoreNames = function(menuId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuStoreNames");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMenuStoreNames;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/stores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuTaxDetails operation.
     * @callback module:api/MenusApi~getMenuTaxDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuTaxDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Get menus tax details
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~getMenuTaxDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuTaxDetails}
     */
    this.getMenuTaxDetails = function(menuId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuTaxDetails");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMenuTaxDetails;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/tax', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenusByAppId operation.
     * @callback module:api/MenusApi~getMenusByAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Get menus by appId
     * @param {String} appId Get Menus for this appId
     * @param {module:api/MenusApi~getMenusByAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuSummary}
     */
    this.getMenusByAppId = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getMenusByAppId");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMenuSummary;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/menus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenusCheckpoints operation.
     * @callback module:api/MenusApi~getMenusCheckpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuCheckpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Get a Menus Checkpoints
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~getMenusCheckpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuCheckpoint}
     */
    this.getMenusCheckpoints = function(menuId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenusCheckpoints");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMenuCheckpoint;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/checkpoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the menusDeleteTaxRate operation.
     * @callback module:api/MenusApi~menusDeleteTaxRateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Remove a Menus Tax Rate, can only remove a tax rate that does not have items/optionSetItems attached
     * @param {Number} menuId Menu identifier
     * @param {Number} taxId Id of Menu Tax to be removed
     * @param {module:api/MenusApi~menusDeleteTaxRateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.menusDeleteTaxRate = function(menuId, taxId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusDeleteTaxRate");
      }

      // verify the required parameter 'taxId' is set
      if (taxId === undefined || taxId === null) {
        throw new Error("Missing the required parameter 'taxId' when calling menusDeleteTaxRate");
      }


      var pathParams = {
        'menuId': menuId,
        'taxId': taxId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/tax/{taxId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the menusSetDisplayOnMenuTax operation.
     * @callback module:api/MenusApi~menusSetDisplayOnMenuTaxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Set if tax shows for a Menu
     * @param {Number} menuId Menu identifier
     * @param {Boolean} show Boolean show or dont show tax (Exclusive tax type can only ever be TRUE)
     * @param {module:api/MenusApi~menusSetDisplayOnMenuTaxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.menusSetDisplayOnMenuTax = function(menuId, show, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusSetDisplayOnMenuTax");
      }

      // verify the required parameter 'show' is set
      if (show === undefined || show === null) {
        throw new Error("Missing the required parameter 'show' when calling menusSetDisplayOnMenuTax");
      }


      var pathParams = {
        'menuId': menuId,
        'show': show
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/tax/show/{show}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the menusSetItemDisplayOrders operation.
     * @callback module:api/MenusApi~menusSetItemDisplayOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Re-arrange Sections within a Menu
     * @param {Number} menuId Menu identifier
     * @param {module:model/MenuObjectDisplayOrders} displayOrders Section Ids and their new display order
     * @param {module:api/MenusApi~menusSetItemDisplayOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.menusSetItemDisplayOrders = function(menuId, displayOrders, callback) {
      var postBody = displayOrders;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusSetItemDisplayOrders");
      }

      // verify the required parameter 'displayOrders' is set
      if (displayOrders === undefined || displayOrders === null) {
        throw new Error("Missing the required parameter 'displayOrders' when calling menusSetItemDisplayOrders");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sectiondisplayorders', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the menusShowHideBulkItems operation.
     * @callback module:api/MenusApi~menusShowHideBulkItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuElementEditResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} menuId 
     * @param {Array.<module:model/MenuElementHide>} menuElements 
     * @param {Boolean} hide 
     * @param {Number} undoAfter 
     * @param {module:api/MenusApi~menusShowHideBulkItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuElementEditResponse}
     */
    this.menusShowHideBulkItems = function(menuId, menuElements, hide, undoAfter, callback) {
      var postBody = menuElements;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusShowHideBulkItems");
      }

      // verify the required parameter 'menuElements' is set
      if (menuElements === undefined || menuElements === null) {
        throw new Error("Missing the required parameter 'menuElements' when calling menusShowHideBulkItems");
      }

      // verify the required parameter 'hide' is set
      if (hide === undefined || hide === null) {
        throw new Error("Missing the required parameter 'hide' when calling menusShowHideBulkItems");
      }

      // verify the required parameter 'undoAfter' is set
      if (undoAfter === undefined || undoAfter === null) {
        throw new Error("Missing the required parameter 'undoAfter' when calling menusShowHideBulkItems");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
        'hide': hide,
        'undoAfter': undoAfter,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMenuElementEditResponse;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/bulkshowhide', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the menusUpdateTaxType operation.
     * @callback module:api/MenusApi~menusUpdateTaxTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Set the type of Tax on a Menu
     * @param {Number} menuId Menu identifier
     * @param {module:model/String} type Type of Tax
     * @param {module:api/MenusApi~menusUpdateTaxTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.menusUpdateTaxType = function(menuId, type, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusUpdateTaxType");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling menusUpdateTaxType");
      }


      var pathParams = {
        'menuId': menuId,
        'type': type
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/tax/type/{type}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the menusUpsertTaxRate operation.
     * @callback module:api/MenusApi~menusUpsertTaxRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MenuTaxRate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Add/Update a Tax Rate
     * @param {Number} menuId Menu identifier
     * @param {module:model/MenuTaxRate} taxRate Tax Rate to Add/Update
     * @param {module:api/MenusApi~menusUpsertTaxRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MenuTaxRate}
     */
    this.menusUpsertTaxRate = function(menuId, taxRate, callback) {
      var postBody = taxRate;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusUpsertTaxRate");
      }

      // verify the required parameter 'taxRate' is set
      if (taxRate === undefined || taxRate === null) {
        throw new Error("Missing the required parameter 'taxRate' when calling menusUpsertTaxRate");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = MenuTaxRate;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/taxrate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreAMenuCheckpoint operation.
     * @callback module:api/MenusApi~restoreAMenuCheckpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Restore a Menu to a checkpoint
     * @param {Number} menuId Menu identifier
     * @param {Number} checkpointId Checkpoint to restore menu to
     * @param {module:api/MenusApi~restoreAMenuCheckpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.restoreAMenuCheckpoint = function(menuId, checkpointId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling restoreAMenuCheckpoint");
      }

      // verify the required parameter 'checkpointId' is set
      if (checkpointId === undefined || checkpointId === null) {
        throw new Error("Missing the required parameter 'checkpointId' when calling restoreAMenuCheckpoint");
      }


      var pathParams = {
        'menuId': menuId,
        'checkpointId': checkpointId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/checkpoints/{checkpointId}/restore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuItemMetadata operation.
     * @callback module:api/MenusApi~setMenuItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu item metadata
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} menuItemId Menu item identifier
     * @param {module:model/Metadata} metadata Metadata object
     * @param {module:api/MenusApi~setMenuItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setMenuItemMetadata = function(menuId, storeId, menuItemId, metadata, callback) {
      var postBody = metadata;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuItemMetadata");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setMenuItemMetadata");
      }

      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling setMenuItemMetadata");
      }

      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling setMenuItemMetadata");
      }


      var pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'menuItemId': menuItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuItemOptionSetItemMetadata operation.
     * @callback module:api/MenusApi~setMenuItemOptionSetItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu item option set item metadata
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} optionSetItemId Menu item option set item identifier
     * @param {module:model/Metadata} metadata Metadata object
     * @param {module:api/MenusApi~setMenuItemOptionSetItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setMenuItemOptionSetItemMetadata = function(menuId, storeId, optionSetItemId, metadata, callback) {
      var postBody = metadata;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuItemOptionSetItemMetadata");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setMenuItemOptionSetItemMetadata");
      }

      // verify the required parameter 'optionSetItemId' is set
      if (optionSetItemId === undefined || optionSetItemId === null) {
        throw new Error("Missing the required parameter 'optionSetItemId' when calling setMenuItemOptionSetItemMetadata");
      }

      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling setMenuItemOptionSetItemMetadata");
      }


      var pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'optionSetItemId': optionSetItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuLock operation.
     * @callback module:api/MenusApi~setMenuLockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Lock/Unlock a Menu for Editing
     * @param {Number} menuId Menu identifier
     * @param {Boolean} locked True: Locks menu for editing, False: Unlocks for editing
     * @param {module:api/MenusApi~setMenuLockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setMenuLock = function(menuId, locked, callback) {
      var postBody = locked;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuLock");
      }

      // verify the required parameter 'locked' is set
      if (locked === undefined || locked === null) {
        throw new Error("Missing the required parameter 'locked' when calling setMenuLock");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/lock', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuName operation.
     * @callback module:api/MenusApi~setMenuNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API]Set Menus Name
     * @param {Number} menuId Menu identifier
     * @param {String} name Name to set for this Menu
     * @param {module:api/MenusApi~setMenuNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setMenuName = function(menuId, name, callback) {
      var postBody = name;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuName");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling setMenuName");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/name', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMenu operation.
     * @callback module:api/MenusApi~updateMenuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu
     * @param {Number} menuId Menu identifier
     * @param {module:model/MenuBase} menu Menu (delta)
     * @param {module:api/MenusApi~updateMenuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateMenu = function(menuId, menu, callback) {
      var postBody = menu;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling updateMenu");
      }

      // verify the required parameter 'menu' is set
      if (menu === undefined || menu === null) {
        throw new Error("Missing the required parameter 'menu' when calling updateMenu");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMenuImage operation.
     * @callback module:api/MenusApi~uploadMenuImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload menu image
     * @param {Number} menuId Menu identifier
     * @param {File} Image Menu image
     * @param {module:api/MenusApi~uploadMenuImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.uploadMenuImage = function(menuId, Image, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling uploadMenuImage");
      }

      // verify the required parameter 'Image' is set
      if (Image === undefined || Image === null) {
        throw new Error("Missing the required parameter 'Image' when calling uploadMenuImage");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Image': Image
      };

      var authNames = ['oauth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadNewMenuForApp operation.
     * @callback module:api/MenusApi~uploadNewMenuForAppCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new menu from xlsx file.
     * @param {String} appId App identifier
     * @param {File} Menu Uploaded xlsx menu
     * @param {module:api/MenusApi~uploadNewMenuForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.uploadNewMenuForApp = function(appId, Menu, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling uploadNewMenuForApp");
      }

      // verify the required parameter 'Menu' is set
      if (Menu === undefined || Menu === null) {
        throw new Error("Missing the required parameter 'Menu' when calling uploadNewMenuForApp");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Menu': Menu
      };

      var authNames = ['oauth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/menus/xlsx', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
