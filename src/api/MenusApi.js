/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateFullMenu from '../model/CreateFullMenu';
import MenuBase from '../model/MenuBase';
import MenuElementHide from '../model/MenuElementHide';
import MenuObjectDisplayOrders from '../model/MenuObjectDisplayOrders';
import MenuTaxRate from '../model/MenuTaxRate';
import Metadata from '../model/Metadata';
import RestApiArrayResultAllMetadataResult from '../model/RestApiArrayResultAllMetadataResult';
import RestApiArrayResultMenuCheckpoint from '../model/RestApiArrayResultMenuCheckpoint';
import RestApiArrayResultMenuElementEditResponse from '../model/RestApiArrayResultMenuElementEditResponse';
import RestApiArrayResultMenuElementListResponse from '../model/RestApiArrayResultMenuElementListResponse';
import RestApiArrayResultMenuStoreNames from '../model/RestApiArrayResultMenuStoreNames';
import RestApiArrayResultMenuSummary from '../model/RestApiArrayResultMenuSummary';
import RestApiArrayResultMenuTaxDetails from '../model/RestApiArrayResultMenuTaxDetails';
import RestApiArrayResultMetadata from '../model/RestApiArrayResultMetadata';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultMenu from '../model/RestApiResultMenu';
import RestApiResultMetadata from '../model/RestApiResultMetadata';
import RestApiStringResult from '../model/RestApiStringResult';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Menus service.
* @module api/MenusApi
* @version 1.0.0
*/
export default class MenusApi {

    /**
    * Constructs a new MenusApi. 
    * @alias module:api/MenusApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDraftMenuFromExistingMenu operation.
     * @callback module:api/MenusApi~createDraftMenuFromExistingMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenu} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone a menu, (without attaching stores)
     * @param {Number} menuId Menu identifier
     * @param {String} newName Name of the new Menu
     * @param {module:api/MenusApi~createDraftMenuFromExistingMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenu}
     */
    createDraftMenuFromExistingMenu(menuId, newName, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling createDraftMenuFromExistingMenu");
      }
      // verify the required parameter 'newName' is set
      if (newName === undefined || newName === null) {
        throw new Error("Missing the required parameter 'newName' when calling createDraftMenuFromExistingMenu");
      }

      let pathParams = {
        'menuId': menuId,
        'newName': newName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultMenu;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/clone/{newName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNewMenuAsync operation.
     * @callback module:api/MenusApi~createNewMenuAsyncCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new menu asynchronously
     * You must listen to the webhook menu.async_creation.completed to know when the menu is ready
     * @param {String} appId App id
     * @param {module:model/CreateFullMenu} menu Menu
     * @param {module:api/MenusApi~createNewMenuAsyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createNewMenuAsync(appId, menu, callback) {
      let postBody = menu;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createNewMenuAsync");
      }
      // verify the required parameter 'menu' is set
      if (menu === undefined || menu === null) {
        throw new Error("Missing the required parameter 'menu' when calling createNewMenuAsync");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/menus/async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNewMenuForApp operation.
     * @callback module:api/MenusApi~createNewMenuForAppCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new menu
     * [DEPRECATED] - Please use the async version as this endpoint may timeout for large menus
     * @param {String} appId App identifier
     * @param {module:model/CreateFullMenu} menu Menu. If empty the system will create a menu with default items
     * @param {module:api/MenusApi~createNewMenuForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    createNewMenuForApp(appId, menu, callback) {
      let postBody = menu;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createNewMenuForApp");
      }
      // verify the required parameter 'menu' is set
      if (menu === undefined || menu === null) {
        throw new Error("Missing the required parameter 'menu' when calling createNewMenuForApp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/menus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenu operation.
     * @callback module:api/MenusApi~deleteMenuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a Menu as Deleted
     * @param {Number} menuId Menu Identifier
     * @param {module:api/MenusApi~deleteMenuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMenu(menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenu");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuImage operation.
     * @callback module:api/MenusApi~deleteMenuImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu image
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~deleteMenuImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMenuImage(menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuImage");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuItemMetadata operation.
     * @callback module:api/MenusApi~deleteMenuItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu item metadata
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} menuItemId Menu item identifier
     * @param {String} key Metadata key
     * @param {module:api/MenusApi~deleteMenuItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMenuItemMetadata(menuId, storeId, menuItemId, key, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuItemMetadata");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteMenuItemMetadata");
      }
      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling deleteMenuItemMetadata");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteMenuItemMetadata");
      }

      let pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'menuItemId': menuItemId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllMenuMetadataByMenuIdAndStoreId operation.
     * @callback module:api/MenusApi~getAllMenuMetadataByMenuIdAndStoreIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultAllMetadataResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all menu metadata by menu ID and store ID
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {module:api/MenusApi~getAllMenuMetadataByMenuIdAndStoreIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultAllMetadataResult}
     */
    getAllMenuMetadataByMenuIdAndStoreId(menuId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getAllMenuMetadataByMenuIdAndStoreId");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getAllMenuMetadataByMenuIdAndStoreId");
      }

      let pathParams = {
        'menuId': menuId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultAllMetadataResult;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/metadata/store/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuById operation.
     * @callback module:api/MenusApi~getMenuByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenu} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu by identifier
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~getMenuByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenu}
     */
    getMenuById(menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuById");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultMenu;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemMetadata operation.
     * @callback module:api/MenusApi~getMenuItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item metadata
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} menuItemId Menu item identifier
     * @param {module:api/MenusApi~getMenuItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMetadata}
     */
    getMenuItemMetadata(menuId, storeId, menuItemId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemMetadata");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMenuItemMetadata");
      }
      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling getMenuItemMetadata");
      }

      let pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'menuItemId': menuItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultMetadata;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemMetadataByKey operation.
     * @callback module:api/MenusApi~getMenuItemMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item metadata by key
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} menuItemId Menu item identifier
     * @param {String} key Metadata key
     * @param {module:api/MenusApi~getMenuItemMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMetadata}
     */
    getMenuItemMetadataByKey(menuId, storeId, menuItemId, key, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemMetadataByKey");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMenuItemMetadataByKey");
      }
      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling getMenuItemMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMenuItemMetadataByKey");
      }

      let pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'menuItemId': menuItemId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultMetadata;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/{key}/store/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemOptionSetItemMetadata operation.
     * @callback module:api/MenusApi~getMenuItemOptionSetItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item option set item metadata by key
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} optionSetItemId Menu item option set item identifier
     * @param {module:api/MenusApi~getMenuItemOptionSetItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMetadata}
     */
    getMenuItemOptionSetItemMetadata(menuId, storeId, optionSetItemId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemOptionSetItemMetadata");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getMenuItemOptionSetItemMetadata");
      }
      // verify the required parameter 'optionSetItemId' is set
      if (optionSetItemId === undefined || optionSetItemId === null) {
        throw new Error("Missing the required parameter 'optionSetItemId' when calling getMenuItemOptionSetItemMetadata");
      }

      let pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'optionSetItemId': optionSetItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultMetadata;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuName operation.
     * @callback module:api/MenusApi~getMenuNameCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Menus Name
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~getMenuNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getMenuName(menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuName");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuStoreNames operation.
     * @callback module:api/MenusApi~getMenuStoreNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuStoreNames} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menus store names
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~getMenuStoreNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuStoreNames}
     */
    getMenuStoreNames(menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuStoreNames");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultMenuStoreNames;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuTaxDetails operation.
     * @callback module:api/MenusApi~getMenuTaxDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuTaxDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menus tax details
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~getMenuTaxDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuTaxDetails}
     */
    getMenuTaxDetails(menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuTaxDetails");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultMenuTaxDetails;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/tax', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenusByAppId operation.
     * @callback module:api/MenusApi~getMenusByAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menus by appId
     * @param {String} appId Get Menus for this appId
     * @param {module:api/MenusApi~getMenusByAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuSummary}
     */
    getMenusByAppId(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getMenusByAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultMenuSummary;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/menus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenusCheckpoints operation.
     * @callback module:api/MenusApi~getMenusCheckpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuCheckpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Menus Checkpoints
     * @param {Number} menuId Menu identifier
     * @param {module:api/MenusApi~getMenusCheckpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuCheckpoint}
     */
    getMenusCheckpoints(menuId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenusCheckpoints");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultMenuCheckpoint;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/checkpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusDeleteTaxRate operation.
     * @callback module:api/MenusApi~menusDeleteTaxRateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Menus Tax Rate, can only remove a tax rate that does not have items/optionSetItems attached
     * @param {Number} menuId Menu identifier
     * @param {Number} taxId Id of Menu Tax to be removed
     * @param {module:api/MenusApi~menusDeleteTaxRateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    menusDeleteTaxRate(menuId, taxId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusDeleteTaxRate");
      }
      // verify the required parameter 'taxId' is set
      if (taxId === undefined || taxId === null) {
        throw new Error("Missing the required parameter 'taxId' when calling menusDeleteTaxRate");
      }

      let pathParams = {
        'menuId': menuId,
        'taxId': taxId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/tax/{taxId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusGetMenuBulkShowHide operation.
     * @callback module:api/MenusApi~menusGetMenuBulkShowHideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuElementListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bulk show/hide menu items and option set items
     * @param {Number} menuId Menu id
     * @param {Boolean} isAvailable Is available flag
     * @param {module:api/MenusApi~menusGetMenuBulkShowHideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuElementListResponse}
     */
    menusGetMenuBulkShowHide(menuId, isAvailable, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusGetMenuBulkShowHide");
      }
      // verify the required parameter 'isAvailable' is set
      if (isAvailable === undefined || isAvailable === null) {
        throw new Error("Missing the required parameter 'isAvailable' when calling menusGetMenuBulkShowHide");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
        'isAvailable': isAvailable
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultMenuElementListResponse;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/bulkshowhide/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusIsWhiteLabelMigratedToRms operation.
     * @callback module:api/MenusApi~menusIsWhiteLabelMigratedToRmsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PRIVATE API, TEMPORARY ENDPOINT  RMS can check if a white label is migrated to RMS
     * @param {Object} opts Optional parameters
     * @param {Number} opts.whiteLabelId white label id (integer)
     * @param {String} opts.appId appId (string)
     * @param {module:api/MenusApi~menusIsWhiteLabelMigratedToRmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    menusIsWhiteLabelMigratedToRms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'whiteLabelId': opts['whiteLabelId'],
        'appId': opts['appId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/menus/isWhiteLabelMigratedToRms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusMarkWhiteLabelAsMigratedToRms operation.
     * @callback module:api/MenusApi~menusMarkWhiteLabelAsMigratedToRmsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PRIVATE API, TEMPORARY ENDPOINT  RMS can set the white label as migrated to RMS, which will block all Menu editing operations via Zeus
     * @param {Object} opts Optional parameters
     * @param {Number} opts.whiteLabelId white label id (integer)
     * @param {String} opts.appId appId (string)
     * @param {module:api/MenusApi~menusMarkWhiteLabelAsMigratedToRmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    menusMarkWhiteLabelAsMigratedToRms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'whiteLabelId': opts['whiteLabelId'],
        'appId': opts['appId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/menus/markWhiteLabelAsMigratedToRms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusMarkWhiteLabelAsNotMigratedToRms operation.
     * @callback module:api/MenusApi~menusMarkWhiteLabelAsNotMigratedToRmsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PRIVATE API, TEMPORARY ENDPOINT  RMS can set the white label as NOT migrated to RMS, which will unblock all Menu editing operations via Zeus
     * @param {Object} opts Optional parameters
     * @param {Number} opts.whiteLabelId white label id (integer)
     * @param {String} opts.appId appId (string)
     * @param {module:api/MenusApi~menusMarkWhiteLabelAsNotMigratedToRmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    menusMarkWhiteLabelAsNotMigratedToRms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'whiteLabelId': opts['whiteLabelId'],
        'appId': opts['appId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/menus/markWhiteLabelAsNotMigratedToRms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusSetDisplayOnMenuTax operation.
     * @callback module:api/MenusApi~menusSetDisplayOnMenuTaxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set if tax shows for a Menu
     * @param {Number} menuId Menu identifier
     * @param {Boolean} show Boolean show or dont show tax (Exclusive tax type can only ever be TRUE)
     * @param {module:api/MenusApi~menusSetDisplayOnMenuTaxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    menusSetDisplayOnMenuTax(menuId, show, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusSetDisplayOnMenuTax");
      }
      // verify the required parameter 'show' is set
      if (show === undefined || show === null) {
        throw new Error("Missing the required parameter 'show' when calling menusSetDisplayOnMenuTax");
      }

      let pathParams = {
        'menuId': menuId,
        'show': show
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/tax/show/{show}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusSetItemDisplayOrders operation.
     * @callback module:api/MenusApi~menusSetItemDisplayOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-arrange Sections within a Menu
     * @param {Number} menuId Menu identifier
     * @param {module:model/MenuObjectDisplayOrders} displayOrders Section Ids and their new display order
     * @param {module:api/MenusApi~menusSetItemDisplayOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    menusSetItemDisplayOrders(menuId, displayOrders, callback) {
      let postBody = displayOrders;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusSetItemDisplayOrders");
      }
      // verify the required parameter 'displayOrders' is set
      if (displayOrders === undefined || displayOrders === null) {
        throw new Error("Missing the required parameter 'displayOrders' when calling menusSetItemDisplayOrders");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sectiondisplayorders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusShowHideBulkItems operation.
     * @callback module:api/MenusApi~menusShowHideBulkItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuElementEditResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk show/hide menu items or option set items
     * @param {Number} menuId Menu id
     * @param {Boolean} isAvailable Is available flag
     * @param {Array.<module:model/MenuElementHide>} menuElements Elements to be show/hide
     * @param {module:api/MenusApi~menusShowHideBulkItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuElementEditResponse}
     */
    menusShowHideBulkItems(menuId, isAvailable, menuElements, callback) {
      let postBody = menuElements;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusShowHideBulkItems");
      }
      // verify the required parameter 'isAvailable' is set
      if (isAvailable === undefined || isAvailable === null) {
        throw new Error("Missing the required parameter 'isAvailable' when calling menusShowHideBulkItems");
      }
      // verify the required parameter 'menuElements' is set
      if (menuElements === undefined || menuElements === null) {
        throw new Error("Missing the required parameter 'menuElements' when calling menusShowHideBulkItems");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
        'isAvailable': isAvailable
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultMenuElementEditResponse;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/bulkshowhide', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusUpdateTaxType operation.
     * @callback module:api/MenusApi~menusUpdateTaxTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the type of Tax on a Menu
     * @param {Number} menuId Menu identifier
     * @param {module:model/String} type Type of Tax
     * @param {module:api/MenusApi~menusUpdateTaxTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    menusUpdateTaxType(menuId, type, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusUpdateTaxType");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling menusUpdateTaxType");
      }

      let pathParams = {
        'menuId': menuId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/tax/type/{type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the menusUpsertTaxRate operation.
     * @callback module:api/MenusApi~menusUpsertTaxRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MenuTaxRate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add/Update a Tax Rate
     * @param {Number} menuId Menu identifier
     * @param {module:model/MenuTaxRate} taxRate Tax rate to add/update
     * @param {module:api/MenusApi~menusUpsertTaxRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MenuTaxRate}
     */
    menusUpsertTaxRate(menuId, taxRate, callback) {
      let postBody = taxRate;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling menusUpsertTaxRate");
      }
      // verify the required parameter 'taxRate' is set
      if (taxRate === undefined || taxRate === null) {
        throw new Error("Missing the required parameter 'taxRate' when calling menusUpsertTaxRate");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = MenuTaxRate;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/taxrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreAMenuCheckpoint operation.
     * @callback module:api/MenusApi~restoreAMenuCheckpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore a Menu to a checkpoint
     * @param {Number} menuId Menu identifier
     * @param {Number} checkpointId Checkpoint to restore menu to
     * @param {module:api/MenusApi~restoreAMenuCheckpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restoreAMenuCheckpoint(menuId, checkpointId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling restoreAMenuCheckpoint");
      }
      // verify the required parameter 'checkpointId' is set
      if (checkpointId === undefined || checkpointId === null) {
        throw new Error("Missing the required parameter 'checkpointId' when calling restoreAMenuCheckpoint");
      }

      let pathParams = {
        'menuId': menuId,
        'checkpointId': checkpointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/checkpoints/{checkpointId}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuItemMetadata operation.
     * @callback module:api/MenusApi~setMenuItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu item metadata
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} menuItemId Menu item identifier
     * @param {module:model/Metadata} metadata Metadata object
     * @param {module:api/MenusApi~setMenuItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setMenuItemMetadata(menuId, storeId, menuItemId, metadata, callback) {
      let postBody = metadata;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuItemMetadata");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setMenuItemMetadata");
      }
      // verify the required parameter 'menuItemId' is set
      if (menuItemId === undefined || menuItemId === null) {
        throw new Error("Missing the required parameter 'menuItemId' when calling setMenuItemMetadata");
      }
      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling setMenuItemMetadata");
      }

      let pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'menuItemId': menuItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/menuitem/{menuItemId}/metadata/store/{storeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuItemOptionSetItemMetadata operation.
     * @callback module:api/MenusApi~setMenuItemOptionSetItemMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu item option set item metadata
     * @param {Number} menuId Menu identifier
     * @param {Number} storeId Store identifier
     * @param {Number} optionSetItemId Menu item option set item identifier
     * @param {module:model/Metadata} metadata Metadata object
     * @param {module:api/MenusApi~setMenuItemOptionSetItemMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setMenuItemOptionSetItemMetadata(menuId, storeId, optionSetItemId, metadata, callback) {
      let postBody = metadata;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuItemOptionSetItemMetadata");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling setMenuItemOptionSetItemMetadata");
      }
      // verify the required parameter 'optionSetItemId' is set
      if (optionSetItemId === undefined || optionSetItemId === null) {
        throw new Error("Missing the required parameter 'optionSetItemId' when calling setMenuItemOptionSetItemMetadata");
      }
      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling setMenuItemOptionSetItemMetadata");
      }

      let pathParams = {
        'menuId': menuId,
        'storeId': storeId,
        'optionSetItemId': optionSetItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/optionsetitem/{optionSetItemId}/metadata/store/{storeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuLock operation.
     * @callback module:api/MenusApi~setMenuLockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lock/Unlock a Menu for Editing
     * @param {Number} menuId Menu identifier
     * @param {Boolean} locked True: Locks menu for editing, False: Unlocks for editing
     * @param {module:api/MenusApi~setMenuLockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setMenuLock(menuId, locked, callback) {
      let postBody = locked;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuLock");
      }
      // verify the required parameter 'locked' is set
      if (locked === undefined || locked === null) {
        throw new Error("Missing the required parameter 'locked' when calling setMenuLock");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuName operation.
     * @callback module:api/MenusApi~setMenuNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Menus Name
     * @param {Number} menuId Menu identifier
     * @param {String} name Name to set for this Menu
     * @param {module:api/MenusApi~setMenuNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setMenuName(menuId, name, callback) {
      let postBody = name;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setMenuName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling setMenuName");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/name', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMenu operation.
     * @callback module:api/MenusApi~updateMenuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu
     * @param {Number} menuId Menu identifier
     * @param {module:model/MenuBase} menu Full menu data
     * @param {module:api/MenusApi~updateMenuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMenu(menuId, menu, callback) {
      let postBody = menu;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling updateMenu");
      }
      // verify the required parameter 'menu' is set
      if (menu === undefined || menu === null) {
        throw new Error("Missing the required parameter 'menu' when calling updateMenu");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMenuImage operation.
     * @callback module:api/MenusApi~uploadMenuImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload menu image
     * @param {Number} menuId Menu identifier
     * @param {File} Image Menu image
     * @param {module:api/MenusApi~uploadMenuImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    uploadMenuImage(menuId, Image, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling uploadMenuImage");
      }
      // verify the required parameter 'Image' is set
      if (Image === undefined || Image === null) {
        throw new Error("Missing the required parameter 'Image' when calling uploadMenuImage");
      }

      let pathParams = {
        'menuId': menuId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Image': Image
      };

      let authNames = ['oauth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadNewMenuForApp operation.
     * @callback module:api/MenusApi~uploadNewMenuForAppCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new menu from xlsx file.
     * @param {String} appId App identifier
     * @param {File} Menu Uploaded xlsx menu
     * @param {module:api/MenusApi~uploadNewMenuForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    uploadNewMenuForApp(appId, Menu, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling uploadNewMenuForApp");
      }
      // verify the required parameter 'Menu' is set
      if (Menu === undefined || Menu === null) {
        throw new Error("Missing the required parameter 'Menu' when calling uploadNewMenuForApp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Menu': Menu
      };

      let authNames = ['oauth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/menus/xlsx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
