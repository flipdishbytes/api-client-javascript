/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ExecuteConfigurationActionRequest', 'model/RestApiArrayResultAppStoreAppConfigurationSummary', 'model/RestApiArrayResultAppStoreAppSummary', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultAppStoreAppConfiguration', 'model/RestApiResultExecuteConfigurationActionResult', 'model/RestApiStringResult', 'model/RestApiUnauthorizedResult', 'model/UpdateAppStoreAppConfiguration', 'model/UpdateAppStoreAppConfigurationValuesBatch'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ExecuteConfigurationActionRequest'), require('../model/RestApiArrayResultAppStoreAppConfigurationSummary'), require('../model/RestApiArrayResultAppStoreAppSummary'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultAppStoreAppConfiguration'), require('../model/RestApiResultExecuteConfigurationActionResult'), require('../model/RestApiStringResult'), require('../model/RestApiUnauthorizedResult'), require('../model/UpdateAppStoreAppConfiguration'), require('../model/UpdateAppStoreAppConfigurationValuesBatch'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.AppStoreConfigurationsApi = factory(root.Flipdish.ApiClient, root.Flipdish.ExecuteConfigurationActionRequest, root.Flipdish.RestApiArrayResultAppStoreAppConfigurationSummary, root.Flipdish.RestApiArrayResultAppStoreAppSummary, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultAppStoreAppConfiguration, root.Flipdish.RestApiResultExecuteConfigurationActionResult, root.Flipdish.RestApiStringResult, root.Flipdish.RestApiUnauthorizedResult, root.Flipdish.UpdateAppStoreAppConfiguration, root.Flipdish.UpdateAppStoreAppConfigurationValuesBatch);
  }
}(this, function(ApiClient, ExecuteConfigurationActionRequest, RestApiArrayResultAppStoreAppConfigurationSummary, RestApiArrayResultAppStoreAppSummary, RestApiErrorResult, RestApiForbiddenResult, RestApiResultAppStoreAppConfiguration, RestApiResultExecuteConfigurationActionResult, RestApiStringResult, RestApiUnauthorizedResult, UpdateAppStoreAppConfiguration, UpdateAppStoreAppConfigurationValuesBatch) {
  'use strict';

  /**
   * AppStoreConfigurations service.
   * @module api/AppStoreConfigurationsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AppStoreConfigurationsApi. 
   * @alias module:api/AppStoreConfigurationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the appStoreConfigurationsAppStoreHandleOauthResponseCode operation.
     * @callback module:api/AppStoreConfigurationsApi~appStoreConfigurationsAppStoreHandleOauthResponseCodeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appStoreAppId 
     * @param {module:api/AppStoreConfigurationsApi~appStoreConfigurationsAppStoreHandleOauthResponseCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.appStoreConfigurationsAppStoreHandleOauthResponseCode = function(appStoreAppId, callback) {
      var postBody = null;

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling appStoreConfigurationsAppStoreHandleOauthResponseCode");
      }


      var pathParams = {
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1.0/appstore/oauthresponse/{appStoreAppId}/responsecode', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppStoreConfig operation.
     * @callback module:api/AppStoreConfigurationsApi~createAppStoreConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAppStoreAppConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} appStoreAppId 
     * @param {module:api/AppStoreConfigurationsApi~createAppStoreConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAppStoreAppConfiguration}
     */
    this.createAppStoreConfig = function(appId, appStoreAppId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createAppStoreConfig");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling createAppStoreConfig");
      }


      var pathParams = {
        'appId': appId,
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultAppStoreAppConfiguration;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppStoreConfig operation.
     * @callback module:api/AppStoreConfigurationsApi~deleteAppStoreConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} appStoreAppId 
     * @param {String} configId 
     * @param {module:api/AppStoreConfigurationsApi~deleteAppStoreConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.deleteAppStoreConfig = function(appId, appStoreAppId, configId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteAppStoreConfig");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling deleteAppStoreConfig");
      }

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling deleteAppStoreConfig");
      }


      var pathParams = {
        'appId': appId,
        'appStoreAppId': appStoreAppId,
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the executeConfigurationAction operation.
     * @callback module:api/AppStoreConfigurationsApi~executeConfigurationActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultExecuteConfigurationActionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} appStoreAppId 
     * @param {String} configId 
     * @param {module:model/ExecuteConfigurationActionRequest} executeConfigurationActionRequest 
     * @param {module:api/AppStoreConfigurationsApi~executeConfigurationActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultExecuteConfigurationActionResult}
     */
    this.executeConfigurationAction = function(appId, appStoreAppId, configId, executeConfigurationActionRequest, callback) {
      var postBody = executeConfigurationActionRequest;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling executeConfigurationAction");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling executeConfigurationAction");
      }

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling executeConfigurationAction");
      }

      // verify the required parameter 'executeConfigurationActionRequest' is set
      if (executeConfigurationActionRequest === undefined || executeConfigurationActionRequest === null) {
        throw new Error("Missing the required parameter 'executeConfigurationActionRequest' when calling executeConfigurationAction");
      }


      var pathParams = {
        'appId': appId,
        'appStoreAppId': appStoreAppId,
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultExecuteConfigurationActionResult;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}/action', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppStoreConfig operation.
     * @callback module:api/AppStoreConfigurationsApi~getAppStoreConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAppStoreAppConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} appStoreAppId 
     * @param {String} configId 
     * @param {module:api/AppStoreConfigurationsApi~getAppStoreConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAppStoreAppConfiguration}
     */
    this.getAppStoreConfig = function(appId, appStoreAppId, configId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAppStoreConfig");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling getAppStoreConfig");
      }

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling getAppStoreConfig");
      }


      var pathParams = {
        'appId': appId,
        'appStoreAppId': appStoreAppId,
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultAppStoreAppConfiguration;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguredAppSingleApp operation.
     * @callback module:api/AppStoreConfigurationsApi~getConfiguredAppSingleAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultAppStoreAppConfigurationSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} appStoreAppId 
     * @param {module:api/AppStoreConfigurationsApi~getConfiguredAppSingleAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultAppStoreAppConfigurationSummary}
     */
    this.getConfiguredAppSingleApp = function(appId, appStoreAppId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getConfiguredAppSingleApp");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling getConfiguredAppSingleApp");
      }


      var pathParams = {
        'appId': appId,
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultAppStoreAppConfigurationSummary;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/appstore/apps/{appStoreAppId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguredApps operation.
     * @callback module:api/AppStoreConfigurationsApi~getConfiguredAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultAppStoreAppSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AppStoreConfigurationsApi~getConfiguredAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultAppStoreAppSummary}
     */
    this.getConfiguredApps = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getConfiguredApps");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultAppStoreAppSummary;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/appstore/apps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppStoreConfig operation.
     * @callback module:api/AppStoreConfigurationsApi~updateAppStoreConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} appStoreAppId 
     * @param {String} configId 
     * @param {module:model/UpdateAppStoreAppConfiguration} updateAppStoreAppConfiguration 
     * @param {module:api/AppStoreConfigurationsApi~updateAppStoreConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateAppStoreConfig = function(appId, appStoreAppId, configId, updateAppStoreAppConfiguration, callback) {
      var postBody = updateAppStoreAppConfiguration;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateAppStoreConfig");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling updateAppStoreConfig");
      }

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling updateAppStoreConfig");
      }

      // verify the required parameter 'updateAppStoreAppConfiguration' is set
      if (updateAppStoreAppConfiguration === undefined || updateAppStoreAppConfiguration === null) {
        throw new Error("Missing the required parameter 'updateAppStoreAppConfiguration' when calling updateAppStoreConfig");
      }


      var pathParams = {
        'appId': appId,
        'appStoreAppId': appStoreAppId,
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppStoreConfigSettingValues operation.
     * @callback module:api/AppStoreConfigurationsApi~updateAppStoreConfigSettingValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} appStoreAppId 
     * @param {String} configId 
     * @param {module:model/UpdateAppStoreAppConfigurationValuesBatch} updateAppStoreAppConfigurationValues 
     * @param {module:api/AppStoreConfigurationsApi~updateAppStoreConfigSettingValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateAppStoreConfigSettingValues = function(appId, appStoreAppId, configId, updateAppStoreAppConfigurationValues, callback) {
      var postBody = updateAppStoreAppConfigurationValues;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateAppStoreConfigSettingValues");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling updateAppStoreConfigSettingValues");
      }

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling updateAppStoreConfigSettingValues");
      }

      // verify the required parameter 'updateAppStoreAppConfigurationValues' is set
      if (updateAppStoreAppConfigurationValues === undefined || updateAppStoreAppConfigurationValues === null) {
        throw new Error("Missing the required parameter 'updateAppStoreAppConfigurationValues' when calling updateAppStoreConfigSettingValues");
      }


      var pathParams = {
        'appId': appId,
        'appStoreAppId': appStoreAppId,
        'configId': configId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/appstore/apps/{appStoreAppId}/config/{configId}/updatesettings', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
