/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoogleAddress from '../model/GoogleAddress';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultAddressFormResponse from '../model/RestApiResultAddressFormResponse';
import RestApiResultCountryFormResponse from '../model/RestApiResultCountryFormResponse';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Address service.
* @module api/AddressApi
* @version 1.0.0
*/
export default class AddressApi {

    /**
    * Constructs a new AddressApi. 
    * @alias module:api/AddressApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the formByApp operation.
     * @callback module:api/AddressApi~formByAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAddressFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.language 
     * @param {module:api/AddressApi~formByAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAddressFormResponse}
     */
    formByApp(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling formByApp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultAddressFormResponse;
      return this.apiClient.callApi(
        '/api/v1.0/app/{appId}/address/form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formByCountry operation.
     * @callback module:api/AddressApi~formByCountryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAddressFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} countryCode 
     * @param {Object} opts Optional parameters
     * @param {String} opts.language 
     * @param {module:api/AddressApi~formByCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAddressFormResponse}
     */
    formByCountry(countryCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling formByCountry");
      }

      let pathParams = {
        'countryCode': countryCode
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultAddressFormResponse;
      return this.apiClient.callApi(
        '/api/v1.0/address/country/{countryCode}/form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the formatGoogleAddress operation.
     * @callback module:api/AddressApi~formatGoogleAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAddressFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GoogleAddress} googleAddress 
     * @param {Object} opts Optional parameters
     * @param {String} opts.language 
     * @param {module:api/AddressApi~formatGoogleAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAddressFormResponse}
     */
    formatGoogleAddress(googleAddress, opts, callback) {
      opts = opts || {};
      let postBody = googleAddress;
      // verify the required parameter 'googleAddress' is set
      if (googleAddress === undefined || googleAddress === null) {
        throw new Error("Missing the required parameter 'googleAddress' when calling formatGoogleAddress");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultAddressFormResponse;
      return this.apiClient.callApi(
        '/api/v1.0/address/google', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountries operation.
     * @callback module:api/AddressApi~getCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultCountryFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.language 
     * @param {module:api/AddressApi~getCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultCountryFormResponse}
     */
    getCountries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultCountryFormResponse;
      return this.apiClient.callApi(
        '/api/v1.0/address/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
