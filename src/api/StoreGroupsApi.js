/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultStoreGroup from '../model/RestApiPaginationResultStoreGroup';
import RestApiPaginationResultStoreGroupExtended from '../model/RestApiPaginationResultStoreGroupExtended';
import RestApiResultStoreGroup from '../model/RestApiResultStoreGroup';
import RestApiResultStoreGroupBase from '../model/RestApiResultStoreGroupBase';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import StoreGroupBase from '../model/StoreGroupBase';

/**
* StoreGroups service.
* @module api/StoreGroupsApi
* @version 1.0.0
*/
export default class StoreGroupsApi {

    /**
    * Constructs a new StoreGroupsApi. 
    * @alias module:api/StoreGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assignStoresToStoreGroup operation.
     * @callback module:api/StoreGroupsApi~assignStoresToStoreGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeGroupId 
     * @param {Array.<Number>} storeIds 
     * @param {module:api/StoreGroupsApi~assignStoresToStoreGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assignStoresToStoreGroup(appId, storeGroupId, storeIds, callback) {
      let postBody = storeIds;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling assignStoresToStoreGroup");
      }
      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling assignStoresToStoreGroup");
      }
      // verify the required parameter 'storeIds' is set
      if (storeIds === undefined || storeIds === null) {
        throw new Error("Missing the required parameter 'storeIds' when calling assignStoresToStoreGroup");
      }

      let pathParams = {
        'appId': appId,
        'storeGroupId': storeGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/storegroups/{storeGroupId}/assignStores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStoreGroup operation.
     * @callback module:api/StoreGroupsApi~createStoreGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appNameId 
     * @param {module:model/StoreGroupBase} storeGroup 
     * @param {module:api/StoreGroupsApi~createStoreGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreGroup}
     */
    createStoreGroup(appNameId, storeGroup, callback) {
      let postBody = storeGroup;
      // verify the required parameter 'appNameId' is set
      if (appNameId === undefined || appNameId === null) {
        throw new Error("Missing the required parameter 'appNameId' when calling createStoreGroup");
      }
      // verify the required parameter 'storeGroup' is set
      if (storeGroup === undefined || storeGroup === null) {
        throw new Error("Missing the required parameter 'storeGroup' when calling createStoreGroup");
      }

      let pathParams = {
        'appNameId': appNameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStoreGroup;
      return this.apiClient.callApi(
        '/api/v1.0/{appNameId}/storegroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreGroup operation.
     * @callback module:api/StoreGroupsApi~getStoreGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeGroupId 
     * @param {module:api/StoreGroupsApi~getStoreGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreGroup}
     */
    getStoreGroup(storeGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling getStoreGroup");
      }

      let pathParams = {
        'storeGroupId': storeGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStoreGroup;
      return this.apiClient.callApi(
        '/api/v1.0/storegroups/{storeGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreGroups operation.
     * @callback module:api/StoreGroupsApi~getStoreGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStoreGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appNameId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/StoreGroupsApi~getStoreGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStoreGroup}
     */
    getStoreGroups(appNameId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appNameId' is set
      if (appNameId === undefined || appNameId === null) {
        throw new Error("Missing the required parameter 'appNameId' when calling getStoreGroups");
      }

      let pathParams = {
        'appNameId': appNameId
      };
      let queryParams = {
        'searchQuery': opts['searchQuery'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultStoreGroup;
      return this.apiClient.callApi(
        '/api/v1.0/{appNameId}/storegroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreGroupsExtended operation.
     * @callback module:api/StoreGroupsApi~getStoreGroupsExtendedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStoreGroupExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appNameId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {Number} opts.groupingRadius 
     * @param {module:api/StoreGroupsApi~getStoreGroupsExtendedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStoreGroupExtended}
     */
    getStoreGroupsExtended(appNameId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appNameId' is set
      if (appNameId === undefined || appNameId === null) {
        throw new Error("Missing the required parameter 'appNameId' when calling getStoreGroupsExtended");
      }

      let pathParams = {
        'appNameId': appNameId
      };
      let queryParams = {
        'searchQuery': opts['searchQuery'],
        'page': opts['page'],
        'limit': opts['limit'],
        'groupingRadius': opts['groupingRadius']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultStoreGroupExtended;
      return this.apiClient.callApi(
        '/api/v1.0/{appNameId}/storegroups/extended', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeStoreGroup operation.
     * @callback module:api/StoreGroupsApi~removeStoreGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeGroupId 
     * @param {module:api/StoreGroupsApi~removeStoreGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeStoreGroup(storeGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling removeStoreGroup");
      }

      let pathParams = {
        'storeGroupId': storeGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/storegroups/{storeGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMenuMessagePerDeliveryType operation.
     * @callback module:api/StoreGroupsApi~setMenuMessagePerDeliveryTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeGroupId 
     * @param {module:model/String} deliveryType 
     * @param {String} menuMessage 
     * @param {module:api/StoreGroupsApi~setMenuMessagePerDeliveryTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setMenuMessagePerDeliveryType(storeGroupId, deliveryType, menuMessage, callback) {
      let postBody = menuMessage;
      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling setMenuMessagePerDeliveryType");
      }
      // verify the required parameter 'deliveryType' is set
      if (deliveryType === undefined || deliveryType === null) {
        throw new Error("Missing the required parameter 'deliveryType' when calling setMenuMessagePerDeliveryType");
      }
      // verify the required parameter 'menuMessage' is set
      if (menuMessage === undefined || menuMessage === null) {
        throw new Error("Missing the required parameter 'menuMessage' when calling setMenuMessagePerDeliveryType");
      }

      let pathParams = {
        'storeGroupId': storeGroupId,
        'deliveryType': deliveryType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/storegroups/{storeGroupId}/{deliveryType}/MenuMessagePerDeliveryType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStoreGroup operation.
     * @callback module:api/StoreGroupsApi~updateStoreGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreGroupBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} storeGroupId 
     * @param {module:model/StoreGroupBase} storeGroup 
     * @param {module:api/StoreGroupsApi~updateStoreGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreGroupBase}
     */
    updateStoreGroup(storeGroupId, storeGroup, callback) {
      let postBody = storeGroup;
      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling updateStoreGroup");
      }
      // verify the required parameter 'storeGroup' is set
      if (storeGroup === undefined || storeGroup === null) {
        throw new Error("Missing the required parameter 'storeGroup' when calling updateStoreGroup");
      }

      let pathParams = {
        'storeGroupId': storeGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultStoreGroupBase;
      return this.apiClient.callApi(
        '/api/v1.0/storegroups/{storeGroupId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
