/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultStoreGroup', 'model/RestApiPaginationResultStoreGroupExtended', 'model/RestApiResultStoreGroup', 'model/RestApiResultStoreGroupBase', 'model/RestApiUnauthorizedResult', 'model/StoreGroupBase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultStoreGroup'), require('../model/RestApiPaginationResultStoreGroupExtended'), require('../model/RestApiResultStoreGroup'), require('../model/RestApiResultStoreGroupBase'), require('../model/RestApiUnauthorizedResult'), require('../model/StoreGroupBase'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.StoreGroupsApi = factory(root.Flipdish.ApiClient, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiPaginationResultStoreGroup, root.Flipdish.RestApiPaginationResultStoreGroupExtended, root.Flipdish.RestApiResultStoreGroup, root.Flipdish.RestApiResultStoreGroupBase, root.Flipdish.RestApiUnauthorizedResult, root.Flipdish.StoreGroupBase);
  }
}(this, function(ApiClient, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultStoreGroup, RestApiPaginationResultStoreGroupExtended, RestApiResultStoreGroup, RestApiResultStoreGroupBase, RestApiUnauthorizedResult, StoreGroupBase) {
  'use strict';

  /**
   * StoreGroups service.
   * @module api/StoreGroupsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new StoreGroupsApi. 
   * @alias module:api/StoreGroupsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createStoreGroup operation.
     * @callback module:api/StoreGroupsApi~createStoreGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Store Group  It will be attached to an existing App
     * @param {String} appNameId App Name Id
     * @param {module:model/StoreGroupBase} storeGroup Store group definition
     * @param {module:api/StoreGroupsApi~createStoreGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreGroup}
     */
    this.createStoreGroup = function(appNameId, storeGroup, callback) {
      var postBody = storeGroup;

      // verify the required parameter 'appNameId' is set
      if (appNameId === undefined || appNameId === null) {
        throw new Error("Missing the required parameter 'appNameId' when calling createStoreGroup");
      }

      // verify the required parameter 'storeGroup' is set
      if (storeGroup === undefined || storeGroup === null) {
        throw new Error("Missing the required parameter 'storeGroup' when calling createStoreGroup");
      }


      var pathParams = {
        'appNameId': appNameId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStoreGroup;

      return this.apiClient.callApi(
        '/api/v1.0/{appNameId}/storegroups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreGroup operation.
     * @callback module:api/StoreGroupsApi~getStoreGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Store Groups
     * @param {Number} storeGroupId Store Group Id
     * @param {module:api/StoreGroupsApi~getStoreGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreGroup}
     */
    this.getStoreGroup = function(storeGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling getStoreGroup");
      }


      var pathParams = {
        'storeGroupId': storeGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStoreGroup;

      return this.apiClient.callApi(
        '/api/v1.0/storegroups/{storeGroupId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreGroups operation.
     * @callback module:api/StoreGroupsApi~getStoreGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStoreGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of Store Groups
     * @param {String} appNameId App Name Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery Search query
     * @param {Number} opts.page Requested page index
     * @param {Number} opts.limit Requested page limit
     * @param {module:api/StoreGroupsApi~getStoreGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStoreGroup}
     */
    this.getStoreGroups = function(appNameId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appNameId' is set
      if (appNameId === undefined || appNameId === null) {
        throw new Error("Missing the required parameter 'appNameId' when calling getStoreGroups");
      }


      var pathParams = {
        'appNameId': appNameId
      };
      var queryParams = {
        'searchQuery': opts['searchQuery'],
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultStoreGroup;

      return this.apiClient.callApi(
        '/api/v1.0/{appNameId}/storegroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreGroupsExtended operation.
     * @callback module:api/StoreGroupsApi~getStoreGroupsExtendedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultStoreGroupExtended} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API] Returns a paginated list of Extended Store Groups
     * @param {String} appNameId App Name Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchQuery Search query
     * @param {Number} opts.page Requested page index
     * @param {Number} opts.limit Requested page limit
     * @param {Number} opts.groupingRadius 
     * @param {module:api/StoreGroupsApi~getStoreGroupsExtendedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultStoreGroupExtended}
     */
    this.getStoreGroupsExtended = function(appNameId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appNameId' is set
      if (appNameId === undefined || appNameId === null) {
        throw new Error("Missing the required parameter 'appNameId' when calling getStoreGroupsExtended");
      }


      var pathParams = {
        'appNameId': appNameId
      };
      var queryParams = {
        'searchQuery': opts['searchQuery'],
        'page': opts['page'],
        'limit': opts['limit'],
        'groupingRadius': opts['groupingRadius'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultStoreGroupExtended;

      return this.apiClient.callApi(
        '/api/v1.0/{appNameId}/storegroups/extended', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeStoreGroup operation.
     * @callback module:api/StoreGroupsApi~removeStoreGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Store Group  Can only remove a store group if there is no stores attached to the group
     * @param {Number} storeGroupId Store Group Id
     * @param {module:api/StoreGroupsApi~removeStoreGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeStoreGroup = function(storeGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling removeStoreGroup");
      }


      var pathParams = {
        'storeGroupId': storeGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/storegroups/{storeGroupId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStoreGroup operation.
     * @callback module:api/StoreGroupsApi~updateStoreGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultStoreGroupBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Store Group
     * @param {Number} storeGroupId Store Group Id
     * @param {module:model/StoreGroupBase} storeGroup Store Group Delta
     * @param {module:api/StoreGroupsApi~updateStoreGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultStoreGroupBase}
     */
    this.updateStoreGroup = function(storeGroupId, storeGroup, callback) {
      var postBody = storeGroup;

      // verify the required parameter 'storeGroupId' is set
      if (storeGroupId === undefined || storeGroupId === null) {
        throw new Error("Missing the required parameter 'storeGroupId' when calling updateStoreGroup");
      }

      // verify the required parameter 'storeGroup' is set
      if (storeGroup === undefined || storeGroup === null) {
        throw new Error("Missing the required parameter 'storeGroup' when calling updateStoreGroup");
      }


      var pathParams = {
        'storeGroupId': storeGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultStoreGroupBase;

      return this.apiClient.callApi(
        '/api/v1.0/storegroups/{storeGroupId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
