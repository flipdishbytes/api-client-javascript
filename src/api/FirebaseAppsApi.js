/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FirebaseApp from '../model/FirebaseApp';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* FirebaseApps service.
* @module api/FirebaseAppsApi
* @version 1.0.0
*/
export default class FirebaseAppsApi {

    /**
    * Constructs a new FirebaseAppsApi. 
    * @alias module:api/FirebaseAppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the firebaseAppsAddFirebaseApp operation.
     * @callback module:api/FirebaseAppsApi~firebaseAppsAddFirebaseAppCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/FirebaseApp} firebaseApp 
     * @param {module:api/FirebaseAppsApi~firebaseAppsAddFirebaseAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    firebaseAppsAddFirebaseApp(firebaseApp, callback) {
      let postBody = firebaseApp;
      // verify the required parameter 'firebaseApp' is set
      if (firebaseApp === undefined || firebaseApp === null) {
        throw new Error("Missing the required parameter 'firebaseApp' when calling firebaseAppsAddFirebaseApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/FirebaseApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the firebaseAppsGetFirebaseApp operation.
     * @callback module:api/FirebaseAppsApi~firebaseAppsGetFirebaseAppCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} whitelabelId 
     * @param {module:api/FirebaseAppsApi~firebaseAppsGetFirebaseAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    firebaseAppsGetFirebaseApp(whitelabelId, callback) {
      let postBody = null;
      // verify the required parameter 'whitelabelId' is set
      if (whitelabelId === undefined || whitelabelId === null) {
        throw new Error("Missing the required parameter 'whitelabelId' when calling firebaseAppsGetFirebaseApp");
      }

      let pathParams = {
        'whitelabelId': whitelabelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/FirebaseApp/{whitelabelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
