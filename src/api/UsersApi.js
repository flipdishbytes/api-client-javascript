/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestApiArrayResultUserFlipdishAccount from '../model/RestApiArrayResultUserFlipdishAccount';
import RestApiArrayResultUserNote from '../model/RestApiArrayResultUserNote';
import RestApiArrayResultUserStoreInfo from '../model/RestApiArrayResultUserStoreInfo';
import RestApiDefaultResponse from '../model/RestApiDefaultResponse';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultUserSearch from '../model/RestApiPaginationResultUserSearch';
import RestApiResultUserInfo from '../model/RestApiResultUserInfo';
import RestApiResultUserRole from '../model/RestApiResultUserRole';
import RestApiStringArrayResult from '../model/RestApiStringArrayResult';
import RestApiStringResult from '../model/RestApiStringResult';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUserNote operation.
     * @callback module:api/UsersApi~addUserNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {String} note 
     * @param {module:api/UsersApi~addUserNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiDefaultResponse}
     */
    addUserNote(userId, note, callback) {
      let postBody = note;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserNote");
      }
      // verify the required parameter 'note' is set
      if (note === undefined || note === null) {
        throw new Error("Missing the required parameter 'note' when calling addUserNote");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/AddUserNote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addUserToRole operation.
     * @callback module:api/UsersApi~addUserToRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultUserRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {String} roleName 
     * @param {module:api/UsersApi~addUserToRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultUserRole}
     */
    addUserToRole(userId, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addUserToRole");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling addUserToRole");
      }

      let pathParams = {
        'userId': userId,
        'roleName': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiResultUserRole;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/AddUserToRole/{roleName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the anonymizeUser operation.
     * @callback module:api/UsersApi~anonymizeUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~anonymizeUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiDefaultResponse}
     */
    anonymizeUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling anonymizeUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/AnonymizeUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the blockUserPhoneNumber operation.
     * @callback module:api/UsersApi~blockUserPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~blockUserPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiDefaultResponse}
     */
    blockUserPhoneNumber(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling blockUserPhoneNumber");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/BlockUserPhoneNumber', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPreviousOrderCountForStore operation.
     * @callback module:api/UsersApi~getPreviousOrderCountForStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {Number} storeId 
     * @param {module:api/UsersApi~getPreviousOrderCountForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    getPreviousOrderCountForStore(userId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPreviousOrderCountForStore");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getPreviousOrderCountForStore");
      }

      let pathParams = {
        'userId': userId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/previousordercount/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRestaurantUserAccounts operation.
     * @callback module:api/UsersApi~getRestaurantUserAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultUserFlipdishAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~getRestaurantUserAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultUserFlipdishAccount}
     */
    getRestaurantUserAccounts(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRestaurantUserAccounts");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiArrayResultUserFlipdishAccount;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/RestaurantUserAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRestaurantUserStores operation.
     * @callback module:api/UsersApi~getRestaurantUserStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultUserStoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~getRestaurantUserStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultUserStoreInfo}
     */
    getRestaurantUserStores(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRestaurantUserStores");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiArrayResultUserStoreInfo;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/RestaurantUserStores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoles operation.
     * @callback module:api/UsersApi~getRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringArrayResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UsersApi~getRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringArrayResult}
     */
    getRoles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiStringArrayResult;
      return this.apiClient.callApi(
        '/api/v1.0/users/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRolesAndUnassignedRoles operation.
     * @callback module:api/UsersApi~getRolesAndUnassignedRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultUserRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~getRolesAndUnassignedRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultUserRole}
     */
    getRolesAndUnassignedRoles(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRolesAndUnassignedRoles");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiResultUserRole;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/UsersApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultUserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultUserInfo}
     */
    getUserById(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserById");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiResultUserInfo;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserNotes operation.
     * @callback module:api/UsersApi~getUserNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultUserNote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~getUserNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultUserNote}
     */
    getUserNotes(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserNotes");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiArrayResultUserNote;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/UserNotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markUserAsFraudulent operation.
     * @callback module:api/UsersApi~markUserAsFraudulentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~markUserAsFraudulentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiDefaultResponse}
     */
    markUserAsFraudulent(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling markUserAsFraudulent");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/MarkUserAsFraudulent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markUserAsSuspicious operation.
     * @callback module:api/UsersApi~markUserAsSuspiciousCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~markUserAsSuspiciousCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiDefaultResponse}
     */
    markUserAsSuspicious(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling markUserAsSuspicious");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/MarkUserAsSuspicious', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserFromRole operation.
     * @callback module:api/UsersApi~removeUserFromRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultUserRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {String} roleName 
     * @param {module:api/UsersApi~removeUserFromRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultUserRole}
     */
    removeUserFromRole(userId, roleName, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeUserFromRole");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling removeUserFromRole");
      }

      let pathParams = {
        'userId': userId,
        'roleName': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiResultUserRole;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/RemoveUserFromRole/{roleName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetMfa operation.
     * @callback module:api/UsersApi~resetMfaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~resetMfaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiDefaultResponse}
     */
    resetMfa(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling resetMfa");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/ResetMfa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsers operation.
     * @callback module:api/UsersApi~searchUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultUserSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} searchQuery 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.hasUserLoggedIn 
     * @param {module:model/String} opts.userDiscriminator 
     * @param {module:model/String} opts.searchIn 
     * @param {Number} opts.pageIndex 
     * @param {Number} opts.pageSize 
     * @param {module:api/UsersApi~searchUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultUserSearch}
     */
    searchUsers(searchQuery, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling searchUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchQuery': searchQuery,
        'hasUserLoggedIn': opts['hasUserLoggedIn'],
        'userDiscriminator': opts['userDiscriminator'],
        'searchIn': opts['searchIn'],
        'pageIndex': opts['pageIndex'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiPaginationResultUserSearch;
      return this.apiClient.callApi(
        '/api/v1.0/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setCustomerName operation.
     * @callback module:api/UsersApi~setCustomerNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {String} customerName 
     * @param {module:api/UsersApi~setCustomerNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiDefaultResponse}
     */
    setCustomerName(userId, customerName, callback) {
      let postBody = customerName;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setCustomerName");
      }
      // verify the required parameter 'customerName' is set
      if (customerName === undefined || customerName === null) {
        throw new Error("Missing the required parameter 'customerName' when calling setCustomerName");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/SetCustomerName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserLanguage operation.
     * @callback module:api/UsersApi~setUserLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {String} languageId 
     * @param {module:api/UsersApi~setUserLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiDefaultResponse}
     */
    setUserLanguage(userId, languageId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUserLanguage");
      }
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling setUserLanguage");
      }

      let pathParams = {
        'userId': userId,
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/SetLanguage/{languageId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unblockUserPhoneNumber operation.
     * @callback module:api/UsersApi~unblockUserPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiDefaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/UsersApi~unblockUserPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiDefaultResponse}
     */
    unblockUserPhoneNumber(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unblockUserPhoneNumber");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message'];
      let returnType = RestApiDefaultResponse;
      return this.apiClient.callApi(
        '/api/v1.0/users/{userId}/UnblockUserPhoneNumber', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
