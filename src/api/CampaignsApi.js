/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LoyaltyCampaignBase', 'model/RestApiArrayResultLoyaltyCampaign', 'model/RestApiArrayResultRetentionCampaign', 'model/RestApiArrayResultStoreListItem', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultLoyaltyCampaign', 'model/RestApiResultRetentionCampaign', 'model/RestApiUnauthorizedResult', 'model/RetentionCampaignBase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LoyaltyCampaignBase'), require('../model/RestApiArrayResultLoyaltyCampaign'), require('../model/RestApiArrayResultRetentionCampaign'), require('../model/RestApiArrayResultStoreListItem'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultLoyaltyCampaign'), require('../model/RestApiResultRetentionCampaign'), require('../model/RestApiUnauthorizedResult'), require('../model/RetentionCampaignBase'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.CampaignsApi = factory(root.Flipdish.ApiClient, root.Flipdish.LoyaltyCampaignBase, root.Flipdish.RestApiArrayResultLoyaltyCampaign, root.Flipdish.RestApiArrayResultRetentionCampaign, root.Flipdish.RestApiArrayResultStoreListItem, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultLoyaltyCampaign, root.Flipdish.RestApiResultRetentionCampaign, root.Flipdish.RestApiUnauthorizedResult, root.Flipdish.RetentionCampaignBase);
  }
}(this, function(ApiClient, LoyaltyCampaignBase, RestApiArrayResultLoyaltyCampaign, RestApiArrayResultRetentionCampaign, RestApiArrayResultStoreListItem, RestApiErrorResult, RestApiForbiddenResult, RestApiResultLoyaltyCampaign, RestApiResultRetentionCampaign, RestApiUnauthorizedResult, RetentionCampaignBase) {
  'use strict';

  /**
   * Campaigns service.
   * @module api/CampaignsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CampaignsApi. 
   * @alias module:api/CampaignsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createLoyaltyCampaign operation.
     * @callback module:api/CampaignsApi~createLoyaltyCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultLoyaltyCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/LoyaltyCampaignBase} campaign 
     * @param {module:api/CampaignsApi~createLoyaltyCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultLoyaltyCampaign}
     */
    this.createLoyaltyCampaign = function(appId, campaign, callback) {
      var postBody = campaign;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createLoyaltyCampaign");
      }

      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling createLoyaltyCampaign");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultLoyaltyCampaign;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/loyalty', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRetentionCampaign operation.
     * @callback module:api/CampaignsApi~createRetentionCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultRetentionCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/RetentionCampaignBase} campaign 
     * @param {module:api/CampaignsApi~createRetentionCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultRetentionCampaign}
     */
    this.createRetentionCampaign = function(appId, campaign, callback) {
      var postBody = campaign;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createRetentionCampaign");
      }

      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling createRetentionCampaign");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultRetentionCampaign;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/retention', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoyaltyCampaignsForApp operation.
     * @callback module:api/CampaignsApi~getLoyaltyCampaignsForAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultLoyaltyCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/CampaignsApi~getLoyaltyCampaignsForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultLoyaltyCampaign}
     */
    this.getLoyaltyCampaignsForApp = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getLoyaltyCampaignsForApp");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultLoyaltyCampaign;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/loyalty', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoyaltyCampaignsForStore operation.
     * @callback module:api/CampaignsApi~getLoyaltyCampaignsForStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultLoyaltyCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:api/CampaignsApi~getLoyaltyCampaignsForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultLoyaltyCampaign}
     */
    this.getLoyaltyCampaignsForStore = function(appId, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getLoyaltyCampaignsForStore");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getLoyaltyCampaignsForStore");
      }


      var pathParams = {
        'appId': appId,
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultLoyaltyCampaign;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/loyalty/{storeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRetentionCampaignsForApp operation.
     * @callback module:api/CampaignsApi~getRetentionCampaignsForAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRetentionCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/CampaignsApi~getRetentionCampaignsForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRetentionCampaign}
     */
    this.getRetentionCampaignsForApp = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRetentionCampaignsForApp");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultRetentionCampaign;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/retention', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRetentionCampaignsForStore operation.
     * @callback module:api/CampaignsApi~getRetentionCampaignsForStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRetentionCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:api/CampaignsApi~getRetentionCampaignsForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRetentionCampaign}
     */
    this.getRetentionCampaignsForStore = function(appId, storeId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRetentionCampaignsForStore");
      }

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getRetentionCampaignsForStore");
      }


      var pathParams = {
        'appId': appId,
        'storeId': storeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultRetentionCampaign;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/retention/{storeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreList operation.
     * @callback module:api/CampaignsApi~getStoreListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultStoreListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.onlyPublished 
     * @param {module:api/CampaignsApi~getStoreListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultStoreListItem}
     */
    this.getStoreList = function(appId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoreList");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'onlyPublished': opts['onlyPublished'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultStoreListItem;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/stores', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCampaign operation.
     * @callback module:api/CampaignsApi~removeCampaignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} campaignId 
     * @param {module:api/CampaignsApi~removeCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeCampaign = function(appId, campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling removeCampaign");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling removeCampaign");
      }


      var pathParams = {
        'appId': appId,
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoyaltyCampaign operation.
     * @callback module:api/CampaignsApi~updateLoyaltyCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultLoyaltyCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} campaignId 
     * @param {module:model/LoyaltyCampaignBase} campaign 
     * @param {module:api/CampaignsApi~updateLoyaltyCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultLoyaltyCampaign}
     */
    this.updateLoyaltyCampaign = function(appId, campaignId, campaign, callback) {
      var postBody = campaign;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateLoyaltyCampaign");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateLoyaltyCampaign");
      }

      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling updateLoyaltyCampaign");
      }


      var pathParams = {
        'appId': appId,
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultLoyaltyCampaign;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/loyalty/{campaignId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRetentionCampaign operation.
     * @callback module:api/CampaignsApi~updateRetentionCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultRetentionCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} campaignId 
     * @param {module:model/RetentionCampaignBase} campaign 
     * @param {module:api/CampaignsApi~updateRetentionCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultRetentionCampaign}
     */
    this.updateRetentionCampaign = function(appId, campaignId, campaign, callback) {
      var postBody = campaign;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateRetentionCampaign");
      }

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateRetentionCampaign");
      }

      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling updateRetentionCampaign");
      }


      var pathParams = {
        'appId': appId,
        'campaignId': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultRetentionCampaign;

      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/retention/{campaignId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
