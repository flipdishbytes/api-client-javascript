/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoyaltyCampaignBase from '../model/LoyaltyCampaignBase';
import RestApiArrayResultLoyaltyCampaign from '../model/RestApiArrayResultLoyaltyCampaign';
import RestApiArrayResultRetentionCampaign from '../model/RestApiArrayResultRetentionCampaign';
import RestApiArrayResultStoreListItem from '../model/RestApiArrayResultStoreListItem';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultLoyaltyCampaign from '../model/RestApiResultLoyaltyCampaign';
import RestApiResultRetentionCampaign from '../model/RestApiResultRetentionCampaign';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import RetentionCampaignBase from '../model/RetentionCampaignBase';

/**
* Campaigns service.
* @module api/CampaignsApi
* @version 1.0.0
*/
export default class CampaignsApi {

    /**
    * Constructs a new CampaignsApi. 
    * @alias module:api/CampaignsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLoyaltyCampaign operation.
     * @callback module:api/CampaignsApi~createLoyaltyCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultLoyaltyCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/LoyaltyCampaignBase} campaign 
     * @param {module:api/CampaignsApi~createLoyaltyCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultLoyaltyCampaign}
     */
    createLoyaltyCampaign(appId, campaign, callback) {
      let postBody = campaign;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createLoyaltyCampaign");
      }
      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling createLoyaltyCampaign");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultLoyaltyCampaign;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/loyalty', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRetentionCampaign operation.
     * @callback module:api/CampaignsApi~createRetentionCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultRetentionCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/RetentionCampaignBase} campaign 
     * @param {module:api/CampaignsApi~createRetentionCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultRetentionCampaign}
     */
    createRetentionCampaign(appId, campaign, callback) {
      let postBody = campaign;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createRetentionCampaign");
      }
      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling createRetentionCampaign");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultRetentionCampaign;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/retention', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoyaltyCampaignsForApp operation.
     * @callback module:api/CampaignsApi~getLoyaltyCampaignsForAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultLoyaltyCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/CampaignsApi~getLoyaltyCampaignsForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultLoyaltyCampaign}
     */
    getLoyaltyCampaignsForApp(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getLoyaltyCampaignsForApp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultLoyaltyCampaign;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/loyalty', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoyaltyCampaignsForStore operation.
     * @callback module:api/CampaignsApi~getLoyaltyCampaignsForStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultLoyaltyCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:api/CampaignsApi~getLoyaltyCampaignsForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultLoyaltyCampaign}
     */
    getLoyaltyCampaignsForStore(appId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getLoyaltyCampaignsForStore");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getLoyaltyCampaignsForStore");
      }

      let pathParams = {
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultLoyaltyCampaign;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/loyalty/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRetentionCampaignsForApp operation.
     * @callback module:api/CampaignsApi~getRetentionCampaignsForAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRetentionCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/CampaignsApi~getRetentionCampaignsForAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRetentionCampaign}
     */
    getRetentionCampaignsForApp(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRetentionCampaignsForApp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultRetentionCampaign;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/retention', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRetentionCampaignsForStore operation.
     * @callback module:api/CampaignsApi~getRetentionCampaignsForStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRetentionCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:api/CampaignsApi~getRetentionCampaignsForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRetentionCampaign}
     */
    getRetentionCampaignsForStore(appId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getRetentionCampaignsForStore");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getRetentionCampaignsForStore");
      }

      let pathParams = {
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultRetentionCampaign;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/retention/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreList operation.
     * @callback module:api/CampaignsApi~getStoreListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultStoreListItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.onlyPublished 
     * @param {module:api/CampaignsApi~getStoreListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultStoreListItem}
     */
    getStoreList(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getStoreList");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'onlyPublished': opts['onlyPublished']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiArrayResultStoreListItem;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCampaign operation.
     * @callback module:api/CampaignsApi~removeCampaignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} campaignId 
     * @param {module:api/CampaignsApi~removeCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeCampaign(appId, campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling removeCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling removeCampaign");
      }

      let pathParams = {
        'appId': appId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLoyaltyCampaign operation.
     * @callback module:api/CampaignsApi~updateLoyaltyCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultLoyaltyCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} campaignId 
     * @param {module:model/LoyaltyCampaignBase} campaign 
     * @param {module:api/CampaignsApi~updateLoyaltyCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultLoyaltyCampaign}
     */
    updateLoyaltyCampaign(appId, campaignId, campaign, callback) {
      let postBody = campaign;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateLoyaltyCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateLoyaltyCampaign");
      }
      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling updateLoyaltyCampaign");
      }

      let pathParams = {
        'appId': appId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultLoyaltyCampaign;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/loyalty/{campaignId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRetentionCampaign operation.
     * @callback module:api/CampaignsApi~updateRetentionCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultRetentionCampaign} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} campaignId 
     * @param {module:model/RetentionCampaignBase} campaign 
     * @param {module:api/CampaignsApi~updateRetentionCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultRetentionCampaign}
     */
    updateRetentionCampaign(appId, campaignId, campaign, callback) {
      let postBody = campaign;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateRetentionCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateRetentionCampaign");
      }
      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling updateRetentionCampaign");
      }

      let pathParams = {
        'appId': appId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultRetentionCampaign;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/campaigns/retention/{campaignId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
