/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateAppStoreApp', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultAppStoreApp', 'model/RestApiStringResult', 'model/RestApiUnauthorizedResult', 'model/UpdateAppStoreApp', 'model/UpdateAppStoreAppExternalProduct'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateAppStoreApp'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultAppStoreApp'), require('../model/RestApiStringResult'), require('../model/RestApiUnauthorizedResult'), require('../model/UpdateAppStoreApp'), require('../model/UpdateAppStoreAppExternalProduct'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.AppStoreDeveloperApi = factory(root.Flipdish.ApiClient, root.Flipdish.CreateAppStoreApp, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultAppStoreApp, root.Flipdish.RestApiStringResult, root.Flipdish.RestApiUnauthorizedResult, root.Flipdish.UpdateAppStoreApp, root.Flipdish.UpdateAppStoreAppExternalProduct);
  }
}(this, function(ApiClient, CreateAppStoreApp, RestApiErrorResult, RestApiForbiddenResult, RestApiResultAppStoreApp, RestApiStringResult, RestApiUnauthorizedResult, UpdateAppStoreApp, UpdateAppStoreAppExternalProduct) {
  'use strict';

  /**
   * AppStoreDeveloper service.
   * @module api/AppStoreDeveloperApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AppStoreDeveloperApi. 
   * @alias module:api/AppStoreDeveloperApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the appVerificationUpdate operation.
     * @callback module:api/AppStoreDeveloperApi~appVerificationUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:model/String} verificationStatus 
     * @param {module:api/AppStoreDeveloperApi~appVerificationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.appVerificationUpdate = function(oauthAppId, appStoreAppId, verificationStatus, callback) {
      var postBody = null;

      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling appVerificationUpdate");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling appVerificationUpdate");
      }

      // verify the required parameter 'verificationStatus' is set
      if (verificationStatus === undefined || verificationStatus === null) {
        throw new Error("Missing the required parameter 'verificationStatus' when calling appVerificationUpdate");
      }


      var pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
        'verificationStatus': verificationStatus,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/verification', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppStoreApp operation.
     * @callback module:api/AppStoreDeveloperApi~createAppStoreAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAppStoreApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {module:model/CreateAppStoreApp} createAppStoreApp 
     * @param {module:api/AppStoreDeveloperApi~createAppStoreAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAppStoreApp}
     */
    this.createAppStoreApp = function(oauthAppId, createAppStoreApp, callback) {
      var postBody = createAppStoreApp;

      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling createAppStoreApp");
      }

      // verify the required parameter 'createAppStoreApp' is set
      if (createAppStoreApp === undefined || createAppStoreApp === null) {
        throw new Error("Missing the required parameter 'createAppStoreApp' when calling createAppStoreApp");
      }


      var pathParams = {
        'oauthAppId': oauthAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultAppStoreApp;

      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppStoreApp operation.
     * @callback module:api/AppStoreDeveloperApi~deleteAppStoreAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:api/AppStoreDeveloperApi~deleteAppStoreAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.deleteAppStoreApp = function(oauthAppId, appStoreAppId, callback) {
      var postBody = null;

      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling deleteAppStoreApp");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling deleteAppStoreApp");
      }


      var pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppExternalProduct operation.
     * @callback module:api/AppStoreDeveloperApi~getAppExternalProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:api/AppStoreDeveloperApi~getAppExternalProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAppExternalProduct = function(oauthAppId, appStoreAppId, callback) {
      var postBody = null;

      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling getAppExternalProduct");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling getAppExternalProduct");
      }


      var pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_product', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExternalFunctionSigningKey operation.
     * @callback module:api/AppStoreDeveloperApi~getExternalFunctionSigningKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:api/AppStoreDeveloperApi~getExternalFunctionSigningKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.getExternalFunctionSigningKey = function(oauthAppId, appStoreAppId, callback) {
      var postBody = null;

      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling getExternalFunctionSigningKey");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling getExternalFunctionSigningKey");
      }


      var pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_function_signing_key', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppStoreApp operation.
     * @callback module:api/AppStoreDeveloperApi~updateAppStoreAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:model/UpdateAppStoreApp} appStoreApp 
     * @param {module:api/AppStoreDeveloperApi~updateAppStoreAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateAppStoreApp = function(oauthAppId, appStoreAppId, appStoreApp, callback) {
      var postBody = appStoreApp;

      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling updateAppStoreApp");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling updateAppStoreApp");
      }

      // verify the required parameter 'appStoreApp' is set
      if (appStoreApp === undefined || appStoreApp === null) {
        throw new Error("Missing the required parameter 'appStoreApp' when calling updateAppStoreApp");
      }


      var pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExternalProduct operation.
     * @callback module:api/AppStoreDeveloperApi~updateExternalProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:model/UpdateAppStoreAppExternalProduct} appStoreAppExternalProduct 
     * @param {module:api/AppStoreDeveloperApi~updateExternalProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateExternalProduct = function(oauthAppId, appStoreAppId, appStoreAppExternalProduct, callback) {
      var postBody = appStoreAppExternalProduct;

      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling updateExternalProduct");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling updateExternalProduct");
      }

      // verify the required parameter 'appStoreAppExternalProduct' is set
      if (appStoreAppExternalProduct === undefined || appStoreAppExternalProduct === null) {
        throw new Error("Missing the required parameter 'appStoreAppExternalProduct' when calling updateExternalProduct");
      }


      var pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_product', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadAppStoreAppLogo operation.
     * @callback module:api/AppStoreDeveloperApi~uploadAppStoreAppLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {File} Image App Store App Logo
     * @param {module:api/AppStoreDeveloperApi~uploadAppStoreAppLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.uploadAppStoreAppLogo = function(oauthAppId, appStoreAppId, Image, callback) {
      var postBody = null;

      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling uploadAppStoreAppLogo");
      }

      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling uploadAppStoreAppLogo");
      }

      // verify the required parameter 'Image' is set
      if (Image === undefined || Image === null) {
        throw new Error("Missing the required parameter 'Image' when calling uploadAppStoreAppLogo");
      }


      var pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Image': Image
      };

      var authNames = ['oauth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/logo', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
