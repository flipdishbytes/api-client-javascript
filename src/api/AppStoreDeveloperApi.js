/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAppStoreApp from '../model/CreateAppStoreApp';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultAppStoreApp from '../model/RestApiResultAppStoreApp';
import RestApiStringResult from '../model/RestApiStringResult';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import UpdateAppStoreApp from '../model/UpdateAppStoreApp';
import UpdateAppStoreAppExternalProduct from '../model/UpdateAppStoreAppExternalProduct';

/**
* AppStoreDeveloper service.
* @module api/AppStoreDeveloperApi
* @version 1.0.0
*/
export default class AppStoreDeveloperApi {

    /**
    * Constructs a new AppStoreDeveloperApi. 
    * @alias module:api/AppStoreDeveloperApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appVerificationUpdate operation.
     * @callback module:api/AppStoreDeveloperApi~appVerificationUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:model/String} verificationStatus 
     * @param {module:api/AppStoreDeveloperApi~appVerificationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appVerificationUpdate(oauthAppId, appStoreAppId, verificationStatus, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling appVerificationUpdate");
      }
      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling appVerificationUpdate");
      }
      // verify the required parameter 'verificationStatus' is set
      if (verificationStatus === undefined || verificationStatus === null) {
        throw new Error("Missing the required parameter 'verificationStatus' when calling appVerificationUpdate");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      let queryParams = {
        'verificationStatus': verificationStatus
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['Data', 'application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/verification', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppStoreApp operation.
     * @callback module:api/AppStoreDeveloperApi~createAppStoreAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAppStoreApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {module:model/CreateAppStoreApp} createAppStoreApp 
     * @param {module:api/AppStoreDeveloperApi~createAppStoreAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAppStoreApp}
     */
    createAppStoreApp(oauthAppId, createAppStoreApp, callback) {
      let postBody = createAppStoreApp;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling createAppStoreApp");
      }
      // verify the required parameter 'createAppStoreApp' is set
      if (createAppStoreApp === undefined || createAppStoreApp === null) {
        throw new Error("Missing the required parameter 'createAppStoreApp' when calling createAppStoreApp");
      }

      let pathParams = {
        'oauthAppId': oauthAppId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultAppStoreApp;
      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppStoreApp operation.
     * @callback module:api/AppStoreDeveloperApi~deleteAppStoreAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:api/AppStoreDeveloperApi~deleteAppStoreAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    deleteAppStoreApp(oauthAppId, appStoreAppId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling deleteAppStoreApp");
      }
      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling deleteAppStoreApp");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppExternalProduct operation.
     * @callback module:api/AppStoreDeveloperApi~getAppExternalProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:api/AppStoreDeveloperApi~getAppExternalProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAppExternalProduct(oauthAppId, appStoreAppId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling getAppExternalProduct");
      }
      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling getAppExternalProduct");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_product', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExternalFunctionSigningKey operation.
     * @callback module:api/AppStoreDeveloperApi~getExternalFunctionSigningKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:api/AppStoreDeveloperApi~getExternalFunctionSigningKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    getExternalFunctionSigningKey(oauthAppId, appStoreAppId, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling getExternalFunctionSigningKey");
      }
      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling getExternalFunctionSigningKey");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_function_signing_key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppStoreApp operation.
     * @callback module:api/AppStoreDeveloperApi~updateAppStoreAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:model/UpdateAppStoreApp} appStoreApp 
     * @param {module:api/AppStoreDeveloperApi~updateAppStoreAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAppStoreApp(oauthAppId, appStoreAppId, appStoreApp, callback) {
      let postBody = appStoreApp;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling updateAppStoreApp");
      }
      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling updateAppStoreApp");
      }
      // verify the required parameter 'appStoreApp' is set
      if (appStoreApp === undefined || appStoreApp === null) {
        throw new Error("Missing the required parameter 'appStoreApp' when calling updateAppStoreApp");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExternalProduct operation.
     * @callback module:api/AppStoreDeveloperApi~updateExternalProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {module:model/UpdateAppStoreAppExternalProduct} appStoreAppExternalProduct 
     * @param {module:api/AppStoreDeveloperApi~updateExternalProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateExternalProduct(oauthAppId, appStoreAppId, appStoreAppExternalProduct, callback) {
      let postBody = appStoreAppExternalProduct;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling updateExternalProduct");
      }
      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling updateExternalProduct");
      }
      // verify the required parameter 'appStoreAppExternalProduct' is set
      if (appStoreAppExternalProduct === undefined || appStoreAppExternalProduct === null) {
        throw new Error("Missing the required parameter 'appStoreAppExternalProduct' when calling updateExternalProduct");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['Data', 'application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/external_product', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadAppStoreAppLogo operation.
     * @callback module:api/AppStoreDeveloperApi~uploadAppStoreAppLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oauthAppId 
     * @param {String} appStoreAppId 
     * @param {File} Image App Store App Logo
     * @param {module:api/AppStoreDeveloperApi~uploadAppStoreAppLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadAppStoreAppLogo(oauthAppId, appStoreAppId, Image, callback) {
      let postBody = null;
      // verify the required parameter 'oauthAppId' is set
      if (oauthAppId === undefined || oauthAppId === null) {
        throw new Error("Missing the required parameter 'oauthAppId' when calling uploadAppStoreAppLogo");
      }
      // verify the required parameter 'appStoreAppId' is set
      if (appStoreAppId === undefined || appStoreAppId === null) {
        throw new Error("Missing the required parameter 'appStoreAppId' when calling uploadAppStoreAppLogo");
      }
      // verify the required parameter 'Image' is set
      if (Image === undefined || Image === null) {
        throw new Error("Missing the required parameter 'Image' when calling uploadAppStoreAppLogo");
      }

      let pathParams = {
        'oauthAppId': oauthAppId,
        'appStoreAppId': appStoreAppId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Image': Image
      };

      let authNames = ['oauth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/oauthclients/{oauthAppId}/appstore/apps/{appStoreAppId}/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
