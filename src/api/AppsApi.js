/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AppConfigUpdateModel', 'model/AppLookup', 'model/CreateAppInOrg', 'model/CreateAppParameters', 'model/Language', 'model/RestApiArrayResultSupportedCountry', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiPaginationResultApp', 'model/RestApiResultApp', 'model/RestApiResultAppCompliance', 'model/RestApiResultDnsRecordInformation', 'model/RestApiStringResult', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AppConfigUpdateModel'), require('../model/AppLookup'), require('../model/CreateAppInOrg'), require('../model/CreateAppParameters'), require('../model/Language'), require('../model/RestApiArrayResultSupportedCountry'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiPaginationResultApp'), require('../model/RestApiResultApp'), require('../model/RestApiResultAppCompliance'), require('../model/RestApiResultDnsRecordInformation'), require('../model/RestApiStringResult'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.AppsApi = factory(root.Flipdish.ApiClient, root.Flipdish.AppConfigUpdateModel, root.Flipdish.AppLookup, root.Flipdish.CreateAppInOrg, root.Flipdish.CreateAppParameters, root.Flipdish.Language, root.Flipdish.RestApiArrayResultSupportedCountry, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiPaginationResultApp, root.Flipdish.RestApiResultApp, root.Flipdish.RestApiResultAppCompliance, root.Flipdish.RestApiResultDnsRecordInformation, root.Flipdish.RestApiStringResult, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, AppConfigUpdateModel, AppLookup, CreateAppInOrg, CreateAppParameters, Language, RestApiArrayResultSupportedCountry, RestApiErrorResult, RestApiForbiddenResult, RestApiPaginationResultApp, RestApiResultApp, RestApiResultAppCompliance, RestApiResultDnsRecordInformation, RestApiStringResult, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * Apps service.
   * @module api/AppsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AppsApi. 
   * @alias module:api/AppsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/AppsApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAppParameters} parameters 
     * @param {module:api/AppsApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.createApp = function(parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling createApp");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/apps', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppInOrg operation.
     * @callback module:api/AppsApi~createAppInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} orgId 
     * @param {module:model/CreateAppInOrg} createAppInOrgRequest 
     * @param {module:api/AppsApi~createAppInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApp}
     */
    this.createAppInOrg = function(orgId, createAppInOrgRequest, callback) {
      var postBody = createAppInOrgRequest;

      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling createAppInOrg");
      }

      // verify the required parameter 'createAppInOrgRequest' is set
      if (createAppInOrgRequest === undefined || createAppInOrgRequest === null) {
        throw new Error("Missing the required parameter 'createAppInOrgRequest' when calling createAppInOrg");
      }


      var pathParams = {
        'orgId': orgId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultApp;

      return this.apiClient.callApi(
        '/api/v1.0/orgs/{orgId}/apps', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/AppsApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AppsApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApp}
     */
    this.getApp = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getApp");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultApp;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppHostnameStatus operation.
     * @callback module:api/AppsApi~getAppHostnameStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultDnsRecordInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AppsApi~getAppHostnameStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultDnsRecordInformation}
     */
    this.getAppHostnameStatus = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAppHostnameStatus");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultDnsRecordInformation;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/hostnamestatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApps operation.
     * @callback module:api/AppsApi~getAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameFilter 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/AppsApi~getAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultApp}
     */
    this.getApps = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'nameFilter': opts['nameFilter'],
        'page': opts['page'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiPaginationResultApp;

      return this.apiClient.callApi(
        '/api/v1.0/apps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompliance operation.
     * @callback module:api/AppsApi~getComplianceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAppCompliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AppsApi~getComplianceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAppCompliance}
     */
    this.getCompliance = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCompliance");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultAppCompliance;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/compliance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPanaceaVanityUrl operation.
     * @callback module:api/AppsApi~getPanaceaVanityUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AppsApi~getPanaceaVanityUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.getPanaceaVanityUrl = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPanaceaVanityUrl");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/panacea/url', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedCountries operation.
     * @callback module:api/AppsApi~getSupportedCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultSupportedCountry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AppsApi~getSupportedCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultSupportedCountry}
     */
    this.getSupportedCountries = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultSupportedCountry;

      return this.apiClient.callApi(
        '/api/v1.0/apps/supportedcountries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isPanaceaVanityUrlAvailable operation.
     * @callback module:api/AppsApi~isPanaceaVanityUrlAvailableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} vanityUrl 
     * @param {String} appId 
     * @param {module:api/AppsApi~isPanaceaVanityUrlAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.isPanaceaVanityUrlAvailable = function(vanityUrl, appId, callback) {
      var postBody = null;

      // verify the required parameter 'vanityUrl' is set
      if (vanityUrl === undefined || vanityUrl === null) {
        throw new Error("Missing the required parameter 'vanityUrl' when calling isPanaceaVanityUrlAvailable");
      }

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling isPanaceaVanityUrlAvailable");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'vanityUrl': vanityUrl,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/panacea/url/available', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lookupByWhitelabelId operation.
     * @callback module:api/AppsApi~lookupByWhitelabelIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppLookup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} whitelabelId 
     * @param {module:api/AppsApi~lookupByWhitelabelIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppLookup}
     */
    this.lookupByWhitelabelId = function(whitelabelId, callback) {
      var postBody = null;

      // verify the required parameter 'whitelabelId' is set
      if (whitelabelId === undefined || whitelabelId === null) {
        throw new Error("Missing the required parameter 'whitelabelId' when calling lookupByWhitelabelId");
      }


      var pathParams = {
        'whitelabelId': whitelabelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AppLookup;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{whitelabelId}/lookup', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setAppConfig operation.
     * @callback module:api/AppsApi~setAppConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/AppConfigUpdateModel} appConfigUpdate 
     * @param {module:api/AppsApi~setAppConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApp}
     */
    this.setAppConfig = function(appId, appConfigUpdate, callback) {
      var postBody = appConfigUpdate;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setAppConfig");
      }

      // verify the required parameter 'appConfigUpdate' is set
      if (appConfigUpdate === undefined || appConfigUpdate === null) {
        throw new Error("Missing the required parameter 'appConfigUpdate' when calling setAppConfig");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultApp;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/config', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setAppHostname operation.
     * @callback module:api/AppsApi~setAppHostnameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} hostname 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isEmbed 
     * @param {module:api/AppsApi~setAppHostnameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.setAppHostname = function(appId, hostname, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setAppHostname");
      }

      // verify the required parameter 'hostname' is set
      if (hostname === undefined || hostname === null) {
        throw new Error("Missing the required parameter 'hostname' when calling setAppHostname");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'hostname': hostname,
        'isEmbed': opts['isEmbed'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/hostname', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setAppLanguages operation.
     * @callback module:api/AppsApi~setAppLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Array.<module:model/Language>} languages 
     * @param {module:api/AppsApi~setAppLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApp}
     */
    this.setAppLanguages = function(appId, languages, callback) {
      var postBody = languages;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setAppLanguages");
      }

      // verify the required parameter 'languages' is set
      if (languages === undefined || languages === null) {
        throw new Error("Missing the required parameter 'languages' when calling setAppLanguages");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultApp;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/config/languages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setAppStoreName operation.
     * @callback module:api/AppsApi~setAppStoreNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} appStoreName 
     * @param {module:api/AppsApi~setAppStoreNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setAppStoreName = function(appId, appStoreName, callback) {
      var postBody = appStoreName;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setAppStoreName");
      }

      // verify the required parameter 'appStoreName' is set
      if (appStoreName === undefined || appStoreName === null) {
        throw new Error("Missing the required parameter 'appStoreName' when calling setAppStoreName");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/appstorename', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCompliance operation.
     * @callback module:api/AppsApi~setComplianceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAppCompliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} complianceType 
     * @param {module:api/AppsApi~setComplianceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAppCompliance}
     */
    this.setCompliance = function(appId, complianceType, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setCompliance");
      }

      // verify the required parameter 'complianceType' is set
      if (complianceType === undefined || complianceType === null) {
        throw new Error("Missing the required parameter 'complianceType' when calling setCompliance");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'complianceType': complianceType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultAppCompliance;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/compliance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setPanaceaVanityUrl operation.
     * @callback module:api/AppsApi~setPanaceaVanityUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} vanityUrl 
     * @param {module:api/AppsApi~setPanaceaVanityUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.setPanaceaVanityUrl = function(appId, vanityUrl, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setPanaceaVanityUrl");
      }

      // verify the required parameter 'vanityUrl' is set
      if (vanityUrl === undefined || vanityUrl === null) {
        throw new Error("Missing the required parameter 'vanityUrl' when calling setPanaceaVanityUrl");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'vanityUrl': vanityUrl,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/panacea/url', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleNextGenWeb operation.
     * @callback module:api/AppsApi~toggleNextGenWebCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} hostname 
     * @param {String} vanityUrl 
     * @param {Boolean} isNextGenWeb 
     * @param {module:api/AppsApi~toggleNextGenWebCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.toggleNextGenWeb = function(appId, hostname, vanityUrl, isNextGenWeb, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling toggleNextGenWeb");
      }

      // verify the required parameter 'hostname' is set
      if (hostname === undefined || hostname === null) {
        throw new Error("Missing the required parameter 'hostname' when calling toggleNextGenWeb");
      }

      // verify the required parameter 'vanityUrl' is set
      if (vanityUrl === undefined || vanityUrl === null) {
        throw new Error("Missing the required parameter 'vanityUrl' when calling toggleNextGenWeb");
      }

      // verify the required parameter 'isNextGenWeb' is set
      if (isNextGenWeb === undefined || isNextGenWeb === null) {
        throw new Error("Missing the required parameter 'isNextGenWeb' when calling toggleNextGenWeb");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'hostname': hostname,
        'vanityUrl': vanityUrl,
        'isNextGenWeb': isNextGenWeb,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/nextgenweb', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadAppLogo operation.
     * @callback module:api/AppsApi~uploadAppLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {File} Image App Logo
     * @param {module:api/AppsApi~uploadAppLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.uploadAppLogo = function(appId, Image, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling uploadAppLogo");
      }

      // verify the required parameter 'Image' is set
      if (Image === undefined || Image === null) {
        throw new Error("Missing the required parameter 'Image' when calling uploadAppLogo");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Image': Image
      };

      var authNames = ['oauth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/logo', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
