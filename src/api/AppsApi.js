/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppConfigUpdateModel from '../model/AppConfigUpdateModel';
import AppLookup from '../model/AppLookup';
import CreateAppParameters from '../model/CreateAppParameters';
import Language from '../model/Language';
import RestApiArrayResultSupportedCountry from '../model/RestApiArrayResultSupportedCountry';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiPaginationResultApp from '../model/RestApiPaginationResultApp';
import RestApiResultApp from '../model/RestApiResultApp';
import RestApiResultAppCompliance from '../model/RestApiResultAppCompliance';
import RestApiResultDnsRecordInformation from '../model/RestApiResultDnsRecordInformation';
import RestApiStringResult from '../model/RestApiStringResult';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Apps service.
* @module api/AppsApi
* @version 1.0.0
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsSetPropertyId operation.
     * @callback module:api/AppsApi~appsSetPropertyIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} orgId 
     * @param {module:api/AppsApi~appsSetPropertyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    appsSetPropertyId(appId, orgId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling appsSetPropertyId");
      }
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling appsSetPropertyId");
      }

      let pathParams = {
        'appId': appId,
        'orgId': orgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/orgId/{orgId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/AppsApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAppParameters} parameters 
     * @param {module:api/AppsApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    createApp(parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling createApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/AppsApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AppsApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApp}
     */
    getApp(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getApp");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultApp;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppHostnameStatus operation.
     * @callback module:api/AppsApi~getAppHostnameStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultDnsRecordInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AppsApi~getAppHostnameStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultDnsRecordInformation}
     */
    getAppHostnameStatus(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAppHostnameStatus");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultDnsRecordInformation;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/hostnamestatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApps operation.
     * @callback module:api/AppsApi~getAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiPaginationResultApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameFilter 
     * @param {Number} opts.page 
     * @param {Number} opts.limit 
     * @param {module:api/AppsApi~getAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiPaginationResultApp}
     */
    getApps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nameFilter': opts['nameFilter'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiPaginationResultApp;
      return this.apiClient.callApi(
        '/api/v1.0/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompliance operation.
     * @callback module:api/AppsApi~getComplianceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAppCompliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AppsApi~getComplianceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAppCompliance}
     */
    getCompliance(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCompliance");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultAppCompliance;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/compliance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPanaceaVanityUrl operation.
     * @callback module:api/AppsApi~getPanaceaVanityUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/AppsApi~getPanaceaVanityUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    getPanaceaVanityUrl(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getPanaceaVanityUrl");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/panacea/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportedCountries operation.
     * @callback module:api/AppsApi~getSupportedCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultSupportedCountry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AppsApi~getSupportedCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultSupportedCountry}
     */
    getSupportedCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultSupportedCountry;
      return this.apiClient.callApi(
        '/api/v1.0/apps/supportedcountries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the isPanaceaVanityUrlAvailable operation.
     * @callback module:api/AppsApi~isPanaceaVanityUrlAvailableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} vanityUrl 
     * @param {String} appId 
     * @param {module:api/AppsApi~isPanaceaVanityUrlAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    isPanaceaVanityUrlAvailable(vanityUrl, appId, callback) {
      let postBody = null;
      // verify the required parameter 'vanityUrl' is set
      if (vanityUrl === undefined || vanityUrl === null) {
        throw new Error("Missing the required parameter 'vanityUrl' when calling isPanaceaVanityUrlAvailable");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling isPanaceaVanityUrlAvailable");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'vanityUrl': vanityUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/panacea/url/available', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lookupByWhitelabelId operation.
     * @callback module:api/AppsApi~lookupByWhitelabelIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppLookup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} whitelabelId 
     * @param {module:api/AppsApi~lookupByWhitelabelIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppLookup}
     */
    lookupByWhitelabelId(whitelabelId, callback) {
      let postBody = null;
      // verify the required parameter 'whitelabelId' is set
      if (whitelabelId === undefined || whitelabelId === null) {
        throw new Error("Missing the required parameter 'whitelabelId' when calling lookupByWhitelabelId");
      }

      let pathParams = {
        'whitelabelId': whitelabelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = AppLookup;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{whitelabelId}/lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAppConfig operation.
     * @callback module:api/AppsApi~setAppConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/AppConfigUpdateModel} appConfigUpdate 
     * @param {module:api/AppsApi~setAppConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApp}
     */
    setAppConfig(appId, appConfigUpdate, callback) {
      let postBody = appConfigUpdate;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setAppConfig");
      }
      // verify the required parameter 'appConfigUpdate' is set
      if (appConfigUpdate === undefined || appConfigUpdate === null) {
        throw new Error("Missing the required parameter 'appConfigUpdate' when calling setAppConfig");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultApp;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAppHostname operation.
     * @callback module:api/AppsApi~setAppHostnameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} hostname 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isEmbed 
     * @param {module:api/AppsApi~setAppHostnameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    setAppHostname(appId, hostname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setAppHostname");
      }
      // verify the required parameter 'hostname' is set
      if (hostname === undefined || hostname === null) {
        throw new Error("Missing the required parameter 'hostname' when calling setAppHostname");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'hostname': hostname,
        'isEmbed': opts['isEmbed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/hostname', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAppLanguages operation.
     * @callback module:api/AppsApi~setAppLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultApp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Array.<module:model/Language>} languages 
     * @param {module:api/AppsApi~setAppLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultApp}
     */
    setAppLanguages(appId, languages, callback) {
      let postBody = languages;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setAppLanguages");
      }
      // verify the required parameter 'languages' is set
      if (languages === undefined || languages === null) {
        throw new Error("Missing the required parameter 'languages' when calling setAppLanguages");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultApp;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/config/languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAppStoreName operation.
     * @callback module:api/AppsApi~setAppStoreNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} appStoreName 
     * @param {module:api/AppsApi~setAppStoreNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setAppStoreName(appId, appStoreName, callback) {
      let postBody = appStoreName;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setAppStoreName");
      }
      // verify the required parameter 'appStoreName' is set
      if (appStoreName === undefined || appStoreName === null) {
        throw new Error("Missing the required parameter 'appStoreName' when calling setAppStoreName");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/appstorename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setCompliance operation.
     * @callback module:api/AppsApi~setComplianceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAppCompliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/String} complianceType 
     * @param {module:api/AppsApi~setComplianceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAppCompliance}
     */
    setCompliance(appId, complianceType, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setCompliance");
      }
      // verify the required parameter 'complianceType' is set
      if (complianceType === undefined || complianceType === null) {
        throw new Error("Missing the required parameter 'complianceType' when calling setCompliance");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'complianceType': complianceType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultAppCompliance;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/compliance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPanaceaVanityUrl operation.
     * @callback module:api/AppsApi~setPanaceaVanityUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} vanityUrl 
     * @param {module:api/AppsApi~setPanaceaVanityUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    setPanaceaVanityUrl(appId, vanityUrl, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setPanaceaVanityUrl");
      }
      // verify the required parameter 'vanityUrl' is set
      if (vanityUrl === undefined || vanityUrl === null) {
        throw new Error("Missing the required parameter 'vanityUrl' when calling setPanaceaVanityUrl");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'vanityUrl': vanityUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/panacea/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleNextGenWeb operation.
     * @callback module:api/AppsApi~toggleNextGenWebCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} hostname 
     * @param {String} vanityUrl 
     * @param {Boolean} isNextGenWeb 
     * @param {module:api/AppsApi~toggleNextGenWebCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    toggleNextGenWeb(appId, hostname, vanityUrl, isNextGenWeb, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling toggleNextGenWeb");
      }
      // verify the required parameter 'hostname' is set
      if (hostname === undefined || hostname === null) {
        throw new Error("Missing the required parameter 'hostname' when calling toggleNextGenWeb");
      }
      // verify the required parameter 'vanityUrl' is set
      if (vanityUrl === undefined || vanityUrl === null) {
        throw new Error("Missing the required parameter 'vanityUrl' when calling toggleNextGenWeb");
      }
      // verify the required parameter 'isNextGenWeb' is set
      if (isNextGenWeb === undefined || isNextGenWeb === null) {
        throw new Error("Missing the required parameter 'isNextGenWeb' when calling toggleNextGenWeb");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'hostname': hostname,
        'vanityUrl': vanityUrl,
        'isNextGenWeb': isNextGenWeb
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/nextgenweb', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadAppLogo operation.
     * @callback module:api/AppsApi~uploadAppLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {File} Image App Logo
     * @param {module:api/AppsApi~uploadAppLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadAppLogo(appId, Image, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling uploadAppLogo");
      }
      // verify the required parameter 'Image' is set
      if (Image === undefined || Image === null) {
        throw new Error("Missing the required parameter 'Image' when calling uploadAppLogo");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Image': Image
      };

      let authNames = ['oauth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/apps/{appId}/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
