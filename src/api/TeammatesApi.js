/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTeammate from '../model/CreateTeammate';
import RestApiArrayResultPendingInvitation from '../model/RestApiArrayResultPendingInvitation';
import RestApiArrayResultRedeemInvitationResult from '../model/RestApiArrayResultRedeemInvitationResult';
import RestApiArrayResultTeammate from '../model/RestApiArrayResultTeammate';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultAcceptInvitationResult from '../model/RestApiResultAcceptInvitationResult';
import RestApiResultRedeemInvitationResult from '../model/RestApiResultRedeemInvitationResult';
import RestApiResultTeammate from '../model/RestApiResultTeammate';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import TeammateBase from '../model/TeammateBase';

/**
* Teammates service.
* @module api/TeammatesApi
* @version 1.0.0
*/
export default class TeammatesApi {

    /**
    * Constructs a new TeammatesApi. 
    * @alias module:api/TeammatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTeammate operation.
     * @callback module:api/TeammatesApi~createTeammateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultTeammate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/CreateTeammate} teammate 
     * @param {module:api/TeammatesApi~createTeammateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultTeammate}
     */
    createTeammate(appId, teammate, callback) {
      let postBody = teammate;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createTeammate");
      }
      // verify the required parameter 'teammate' is set
      if (teammate === undefined || teammate === null) {
        throw new Error("Missing the required parameter 'teammate' when calling createTeammate");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultTeammate;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/teammates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTeammate operation.
     * @callback module:api/TeammatesApi~deleteTeammateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/TeammatesApi~deleteTeammateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTeammate(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteTeammate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTeammate");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/teammates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeammateByAppIdAndTeammateId operation.
     * @callback module:api/TeammatesApi~getTeammateByAppIdAndTeammateIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultTeammate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:api/TeammatesApi~getTeammateByAppIdAndTeammateIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultTeammate}
     */
    getTeammateByAppIdAndTeammateId(appId, id, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getTeammateByAppIdAndTeammateId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTeammateByAppIdAndTeammateId");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultTeammate;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/teammates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeammatesByAppId operation.
     * @callback module:api/TeammatesApi~getTeammatesByAppIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultTeammate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/TeammatesApi~getTeammatesByAppIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultTeammate}
     */
    getTeammatesByAppId(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getTeammatesByAppId");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultTeammate;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/teammates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the grantaccess operation.
     * @callback module:api/TeammatesApi~grantaccessCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/CreateTeammate} teammate 
     * @param {module:api/TeammatesApi~grantaccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    grantaccess(appId, teammate, callback) {
      let postBody = teammate;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling grantaccess");
      }
      // verify the required parameter 'teammate' is set
      if (teammate === undefined || teammate === null) {
        throw new Error("Missing the required parameter 'teammate' when calling grantaccess");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/teammates/grantaccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the redeemInvitation operation.
     * @callback module:api/TeammatesApi~redeemInvitationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultRedeemInvitationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} otc 
     * @param {String} appId 
     * @param {module:api/TeammatesApi~redeemInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultRedeemInvitationResult}
     */
    redeemInvitation(otc, appId, callback) {
      let postBody = null;
      // verify the required parameter 'otc' is set
      if (otc === undefined || otc === null) {
        throw new Error("Missing the required parameter 'otc' when calling redeemInvitation");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling redeemInvitation");
      }

      let pathParams = {
        'otc': otc,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultRedeemInvitationResult;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/teammates/redeem/{otc}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teammatesAcceptInvitation operation.
     * @callback module:api/TeammatesApi~teammatesAcceptInvitationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAcceptInvitationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} otc 
     * @param {String} appId 
     * @param {module:api/TeammatesApi~teammatesAcceptInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAcceptInvitationResult}
     */
    teammatesAcceptInvitation(otc, appId, callback) {
      let postBody = null;
      // verify the required parameter 'otc' is set
      if (otc === undefined || otc === null) {
        throw new Error("Missing the required parameter 'otc' when calling teammatesAcceptInvitation");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling teammatesAcceptInvitation");
      }

      let pathParams = {
        'otc': otc,
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultAcceptInvitationResult;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/teammates/accept/{otc}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teammatesAcceptInvitations operation.
     * @callback module:api/TeammatesApi~teammatesAcceptInvitationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultRedeemInvitationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TeammatesApi~teammatesAcceptInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultRedeemInvitationResult}
     */
    teammatesAcceptInvitations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultRedeemInvitationResult;
      return this.apiClient.callApi(
        '/api/v1.0/teammates/acceptInvitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teammatesPendingInvitations operation.
     * @callback module:api/TeammatesApi~teammatesPendingInvitationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultPendingInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TeammatesApi~teammatesPendingInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultPendingInvitation}
     */
    teammatesPendingInvitations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultPendingInvitation;
      return this.apiClient.callApi(
        '/api/v1.0/teammates/pending-invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTeammate operation.
     * @callback module:api/TeammatesApi~updateTeammateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultTeammate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {String} id 
     * @param {module:model/TeammateBase} teammate 
     * @param {module:api/TeammatesApi~updateTeammateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultTeammate}
     */
    updateTeammate(appId, id, teammate, callback) {
      let postBody = teammate;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateTeammate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTeammate");
      }
      // verify the required parameter 'teammate' is set
      if (teammate === undefined || teammate === null) {
        throw new Error("Missing the required parameter 'teammate' when calling updateTeammate");
      }

      let pathParams = {
        'appId': appId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultTeammate;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/teammates/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
