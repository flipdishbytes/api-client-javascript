/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OnboardingConfigUpdate from '../model/OnboardingConfigUpdate';
import OnboardingItemUpdate from '../model/OnboardingItemUpdate';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* Onboarding service.
* @module api/OnboardingApi
* @version 1.0.0
*/
export default class OnboardingApi {

    /**
    * Constructs a new OnboardingApi. 
    * @alias module:api/OnboardingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the onboardingGetOnboardingConfig operation.
     * @callback module:api/OnboardingApi~onboardingGetOnboardingConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/OnboardingApi~onboardingGetOnboardingConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    onboardingGetOnboardingConfig(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling onboardingGetOnboardingConfig");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/clients/{appId}/onboarding/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onboardingGetOnboardingConfigs operation.
     * @callback module:api/OnboardingApi~onboardingGetOnboardingConfigsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:api/OnboardingApi~onboardingGetOnboardingConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    onboardingGetOnboardingConfigs(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling onboardingGetOnboardingConfigs");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/clients/{appId}/onboarding/configs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onboardingGetOnboardingItems operation.
     * @callback module:api/OnboardingApi~onboardingGetOnboardingItemsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.milestoneId 
     * @param {module:api/OnboardingApi~onboardingGetOnboardingItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    onboardingGetOnboardingItems(appId, storeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling onboardingGetOnboardingItems");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling onboardingGetOnboardingItems");
      }

      let pathParams = {
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
        'milestoneId': opts['milestoneId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/clients/{appId}/onboarding/stores/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onboardingGetOnboardingItemsV2 operation.
     * @callback module:api/OnboardingApi~onboardingGetOnboardingItemsV2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.storeId 
     * @param {Number} opts.milestoneId 
     * @param {module:api/OnboardingApi~onboardingGetOnboardingItemsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    onboardingGetOnboardingItemsV2(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling onboardingGetOnboardingItemsV2");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
        'storeId': opts['storeId'],
        'milestoneId': opts['milestoneId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/clients/{appId}/onboarding/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onboardingUpdateOnboardingConfig operation.
     * @callback module:api/OnboardingApi~onboardingUpdateOnboardingConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {module:model/OnboardingConfigUpdate} configUpdate 
     * @param {module:api/OnboardingApi~onboardingUpdateOnboardingConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    onboardingUpdateOnboardingConfig(appId, configUpdate, callback) {
      let postBody = configUpdate;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling onboardingUpdateOnboardingConfig");
      }
      // verify the required parameter 'configUpdate' is set
      if (configUpdate === undefined || configUpdate === null) {
        throw new Error("Missing the required parameter 'configUpdate' when calling onboardingUpdateOnboardingConfig");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/clients/{appId}/onboarding/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onboardingUpdateOnboardingConfigById operation.
     * @callback module:api/OnboardingApi~onboardingUpdateOnboardingConfigByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} configId 
     * @param {module:model/OnboardingConfigUpdate} configUpdate 
     * @param {module:api/OnboardingApi~onboardingUpdateOnboardingConfigByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    onboardingUpdateOnboardingConfigById(appId, configId, configUpdate, callback) {
      let postBody = configUpdate;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling onboardingUpdateOnboardingConfigById");
      }
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling onboardingUpdateOnboardingConfigById");
      }
      // verify the required parameter 'configUpdate' is set
      if (configUpdate === undefined || configUpdate === null) {
        throw new Error("Missing the required parameter 'configUpdate' when calling onboardingUpdateOnboardingConfigById");
      }

      let pathParams = {
        'appId': appId,
        'configId': configId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/clients/{appId}/onboarding/config/{configId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onboardingUpdateOnboardingItem operation.
     * @callback module:api/OnboardingApi~onboardingUpdateOnboardingItemCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {Number} onboardingItemId 
     * @param {module:model/OnboardingItemUpdate} itemUpdate 
     * @param {module:api/OnboardingApi~onboardingUpdateOnboardingItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    onboardingUpdateOnboardingItem(appId, storeId, onboardingItemId, itemUpdate, callback) {
      let postBody = itemUpdate;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling onboardingUpdateOnboardingItem");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling onboardingUpdateOnboardingItem");
      }
      // verify the required parameter 'onboardingItemId' is set
      if (onboardingItemId === undefined || onboardingItemId === null) {
        throw new Error("Missing the required parameter 'onboardingItemId' when calling onboardingUpdateOnboardingItem");
      }
      // verify the required parameter 'itemUpdate' is set
      if (itemUpdate === undefined || itemUpdate === null) {
        throw new Error("Missing the required parameter 'itemUpdate' when calling onboardingUpdateOnboardingItem");
      }

      let pathParams = {
        'appId': appId,
        'storeId': storeId,
        'onboardingItemId': onboardingItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/clients/{appId}/onboarding/stores/{storeId}/items/{onboardingItemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onboardingUpdateOnboardingItemV2 operation.
     * @callback module:api/OnboardingApi~onboardingUpdateOnboardingItemV2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} onboardingItemId 
     * @param {module:model/OnboardingItemUpdate} itemUpdate 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.storeId 
     * @param {module:api/OnboardingApi~onboardingUpdateOnboardingItemV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    onboardingUpdateOnboardingItemV2(appId, onboardingItemId, itemUpdate, opts, callback) {
      opts = opts || {};
      let postBody = itemUpdate;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling onboardingUpdateOnboardingItemV2");
      }
      // verify the required parameter 'onboardingItemId' is set
      if (onboardingItemId === undefined || onboardingItemId === null) {
        throw new Error("Missing the required parameter 'onboardingItemId' when calling onboardingUpdateOnboardingItemV2");
      }
      // verify the required parameter 'itemUpdate' is set
      if (itemUpdate === undefined || itemUpdate === null) {
        throw new Error("Missing the required parameter 'itemUpdate' when calling onboardingUpdateOnboardingItemV2");
      }

      let pathParams = {
        'appId': appId,
        'onboardingItemId': onboardingItemId
      };
      let queryParams = {
        'storeId': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/clients/{appId}/onboarding/stores/items/{onboardingItemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
