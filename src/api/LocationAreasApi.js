/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLocationArea from '../model/CreateLocationArea';
import RestApiArrayResultLocationAreaWithLocations from '../model/RestApiArrayResultLocationAreaWithLocations';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultLocationArea from '../model/RestApiResultLocationArea';
import RestApiResultLocationAreaWithLocations from '../model/RestApiResultLocationAreaWithLocations';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import UpdateLocationArea from '../model/UpdateLocationArea';

/**
* LocationAreas service.
* @module api/LocationAreasApi
* @version 1.0.0
*/
export default class LocationAreasApi {

    /**
    * Constructs a new LocationAreasApi. 
    * @alias module:api/LocationAreasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLocationArea operation.
     * @callback module:api/LocationAreasApi~createLocationAreaCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:model/CreateLocationArea} locationAreaInput 
     * @param {module:api/LocationAreasApi~createLocationAreaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createLocationArea(appId, storeId, locationAreaInput, callback) {
      let postBody = locationAreaInput;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createLocationArea");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling createLocationArea");
      }
      // verify the required parameter 'locationAreaInput' is set
      if (locationAreaInput === undefined || locationAreaInput === null) {
        throw new Error("Missing the required parameter 'locationAreaInput' when calling createLocationArea");
      }

      let pathParams = {
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/{storeId}/location-areas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocationArea operation.
     * @callback module:api/LocationAreasApi~getLocationAreaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultLocationAreaWithLocations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} locationAreaId 
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:api/LocationAreasApi~getLocationAreaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultLocationAreaWithLocations}
     */
    getLocationArea(locationAreaId, appId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'locationAreaId' is set
      if (locationAreaId === undefined || locationAreaId === null) {
        throw new Error("Missing the required parameter 'locationAreaId' when calling getLocationArea");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getLocationArea");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getLocationArea");
      }

      let pathParams = {
        'locationAreaId': locationAreaId,
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultLocationAreaWithLocations;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocationAreasForStore operation.
     * @callback module:api/LocationAreasApi~getLocationAreasForStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultLocationAreaWithLocations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {module:api/LocationAreasApi~getLocationAreasForStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultLocationAreaWithLocations}
     */
    getLocationAreasForStore(appId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getLocationAreasForStore");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getLocationAreasForStore");
      }

      let pathParams = {
        'appId': appId,
        'storeId': storeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultLocationAreaWithLocations;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/{storeId}/location-areas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLocationArea operation.
     * @callback module:api/LocationAreasApi~updateLocationAreaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultLocationArea} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appId 
     * @param {Number} storeId 
     * @param {String} locationAreaId 
     * @param {module:model/UpdateLocationArea} locationAreaInput 
     * @param {module:api/LocationAreasApi~updateLocationAreaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultLocationArea}
     */
    updateLocationArea(appId, storeId, locationAreaId, locationAreaInput, callback) {
      let postBody = locationAreaInput;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateLocationArea");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateLocationArea");
      }
      // verify the required parameter 'locationAreaId' is set
      if (locationAreaId === undefined || locationAreaId === null) {
        throw new Error("Missing the required parameter 'locationAreaId' when calling updateLocationArea");
      }
      // verify the required parameter 'locationAreaInput' is set
      if (locationAreaInput === undefined || locationAreaInput === null) {
        throw new Error("Missing the required parameter 'locationAreaInput' when calling updateLocationArea");
      }

      let pathParams = {
        'appId': appId,
        'storeId': storeId,
        'locationAreaId': locationAreaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultLocationArea;
      return this.apiClient.callApi(
        '/api/v1.0/{appId}/stores/{storeId}/location-areas/{locationAreaId}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
