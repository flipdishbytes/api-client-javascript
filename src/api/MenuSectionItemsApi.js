/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMenuSectionItemFromCatalogItems from '../model/CreateMenuSectionItemFromCatalogItems';
import MenuSectionItemBase from '../model/MenuSectionItemBase';
import RestApiArrayResultMenuSectionItem from '../model/RestApiArrayResultMenuSectionItem';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultCreatedMenuSectionItems from '../model/RestApiResultCreatedMenuSectionItems';
import RestApiResultMenuSectionItem from '../model/RestApiResultMenuSectionItem';
import RestApiStringResult from '../model/RestApiStringResult';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';

/**
* MenuSectionItems service.
* @module api/MenuSectionItemsApi
* @version 1.0.0
*/
export default class MenuSectionItemsApi {

    /**
    * Constructs a new MenuSectionItemsApi. 
    * @alias module:api/MenuSectionItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cloneMenuSectionItem operation.
     * @callback module:api/MenuSectionItemsApi~cloneMenuSectionItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenuSectionItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone menu section item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {module:api/MenuSectionItemsApi~cloneMenuSectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenuSectionItem}
     */
    cloneMenuSectionItem(menuId, menuSectionId, menuSectionItemId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling cloneMenuSectionItem");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling cloneMenuSectionItem");
      }
      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling cloneMenuSectionItem");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiResultMenuSectionItem;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMenuSectionItem operation.
     * @callback module:api/MenuSectionItemsApi~createMenuSectionItemCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create menu section item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {module:model/MenuSectionItemBase} menuSectionItem Menu section item
     * @param {module:api/MenuSectionItemsApi~createMenuSectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createMenuSectionItem(menuId, menuSectionId, menuSectionItem, callback) {
      let postBody = menuSectionItem;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling createMenuSectionItem");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling createMenuSectionItem");
      }
      // verify the required parameter 'menuSectionItem' is set
      if (menuSectionItem === undefined || menuSectionItem === null) {
        throw new Error("Missing the required parameter 'menuSectionItem' when calling createMenuSectionItem");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMenuSectionItemFromCatalogItems operation.
     * @callback module:api/MenuSectionItemsApi~createMenuSectionItemFromCatalogItemsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create menu section items from a list of Catalog Items
     * BETA - this endpoint is under development, do not use it in your production system
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {module:model/CreateMenuSectionItemFromCatalogItems} createFromCatalogItems Information to create the new MenuSectionItems
     * @param {module:api/MenuSectionItemsApi~createMenuSectionItemFromCatalogItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createMenuSectionItemFromCatalogItems(menuId, menuSectionId, createFromCatalogItems, callback) {
      let postBody = createFromCatalogItems;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling createMenuSectionItemFromCatalogItems");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling createMenuSectionItemFromCatalogItems");
      }
      // verify the required parameter 'createFromCatalogItems' is set
      if (createFromCatalogItems === undefined || createFromCatalogItems === null) {
        throw new Error("Missing the required parameter 'createFromCatalogItems' when calling createMenuSectionItemFromCatalogItems");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/add-catalogitems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuSectionItem operation.
     * @callback module:api/MenuSectionItemsApi~deleteMenuSectionItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu section item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {module:api/MenuSectionItemsApi~deleteMenuSectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMenuSectionItem(menuId, menuSectionId, menuSectionItemId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuSectionItem");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling deleteMenuSectionItem");
      }
      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling deleteMenuSectionItem");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuSectionItemImage operation.
     * @callback module:api/MenuSectionItemsApi~deleteMenuSectionItemImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu section item image
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {module:api/MenuSectionItemsApi~deleteMenuSectionItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMenuSectionItemImage(menuId, menuSectionId, menuSectionItemId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuSectionItemImage");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling deleteMenuSectionItemImage");
      }
      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling deleteMenuSectionItemImage");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemById operation.
     * @callback module:api/MenuSectionItemsApi~getMenuItemByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenuSectionItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item by identifier
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu item identifier
     * @param {module:api/MenuSectionItemsApi~getMenuItemByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenuSectionItem}
     */
    getMenuItemById(menuId, menuSectionId, menuSectionItemId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemById");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling getMenuItemById");
      }
      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling getMenuItemById");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiResultMenuSectionItem;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItems operation.
     * @callback module:api/MenuSectionItemsApi~getMenuItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuSectionItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu items
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {module:api/MenuSectionItemsApi~getMenuItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuSectionItem}
     */
    getMenuItems(menuId, menuSectionId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItems");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling getMenuItems");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiArrayResultMenuSectionItem;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveMenuItem operation.
     * @callback module:api/MenuSectionItemsApi~moveMenuItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move an Item within a menu
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Section to put item in (will usually be original section)
     * @param {Number} menuSectionItemId ID of Item to be moved
     * @param {Number} destinationDisplayOrder New Display Order of item
     * @param {module:api/MenuSectionItemsApi~moveMenuItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveMenuItem(menuId, menuSectionId, menuSectionItemId, destinationDisplayOrder, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling moveMenuItem");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling moveMenuItem");
      }
      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling moveMenuItem");
      }
      // verify the required parameter 'destinationDisplayOrder' is set
      if (destinationDisplayOrder === undefined || destinationDisplayOrder === null) {
        throw new Error("Missing the required parameter 'destinationDisplayOrder' when calling moveMenuItem");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'destinationDisplayOrder': destinationDisplayOrder
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/setorder/{destinationDisplayOrder}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setSectionItemTax operation.
     * @callback module:api/MenuSectionItemsApi~setSectionItemTaxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set tax rate for menu item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Section to put item in (will usually be original section)
     * @param {Number} menuSectionItemId ID of Item to be moved
     * @param {Number} taxRateId tax rate to be set against item
     * @param {module:api/MenuSectionItemsApi~setSectionItemTaxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setSectionItemTax(menuId, menuSectionId, menuSectionItemId, taxRateId, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setSectionItemTax");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling setSectionItemTax");
      }
      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling setSectionItemTax");
      }
      // verify the required parameter 'taxRateId' is set
      if (taxRateId === undefined || taxRateId === null) {
        throw new Error("Missing the required parameter 'taxRateId' when calling setSectionItemTax");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'taxRateId': taxRateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/taxrate/{taxRateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMenuSectionItem operation.
     * @callback module:api/MenuSectionItemsApi~updateMenuSectionItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu section item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {module:model/MenuSectionItemBase} menuSectionItem Menu section item (delta)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.undoAfter An optional time period, in hours, after which the hide-section operation will be undone
     * @param {module:api/MenuSectionItemsApi~updateMenuSectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMenuSectionItem(menuId, menuSectionId, menuSectionItemId, menuSectionItem, opts, callback) {
      opts = opts || {};
      let postBody = menuSectionItem;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling updateMenuSectionItem");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling updateMenuSectionItem");
      }
      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling updateMenuSectionItem");
      }
      // verify the required parameter 'menuSectionItem' is set
      if (menuSectionItem === undefined || menuSectionItem === null) {
        throw new Error("Missing the required parameter 'menuSectionItem' when calling updateMenuSectionItem");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      let queryParams = {
        'undoAfter': opts['undoAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMenuSectionItemImage operation.
     * @callback module:api/MenuSectionItemsApi~uploadMenuSectionItemImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload menu section item image
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {File} Image Menu section item image
     * @param {module:api/MenuSectionItemsApi~uploadMenuSectionItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    uploadMenuSectionItemImage(menuId, menuSectionId, menuSectionItemId, Image, callback) {
      let postBody = null;
      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling uploadMenuSectionItemImage");
      }
      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling uploadMenuSectionItemImage");
      }
      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling uploadMenuSectionItemImage");
      }
      // verify the required parameter 'Image' is set
      if (Image === undefined || Image === null) {
        throw new Error("Missing the required parameter 'Image' when calling uploadMenuSectionItemImage");
      }

      let pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'Image': Image
      };

      let authNames = ['oauth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data'];
      let returnType = RestApiStringResult;
      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
