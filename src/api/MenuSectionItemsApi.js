/**
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MenuSectionItemBase', 'model/RestApiArrayResultMenuSectionItem', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultMenuSectionItem', 'model/RestApiStringResult', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/MenuSectionItemBase'), require('../model/RestApiArrayResultMenuSectionItem'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultMenuSectionItem'), require('../model/RestApiStringResult'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.MenuSectionItemsApi = factory(root.Flipdish.ApiClient, root.Flipdish.MenuSectionItemBase, root.Flipdish.RestApiArrayResultMenuSectionItem, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultMenuSectionItem, root.Flipdish.RestApiStringResult, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, MenuSectionItemBase, RestApiArrayResultMenuSectionItem, RestApiErrorResult, RestApiForbiddenResult, RestApiResultMenuSectionItem, RestApiStringResult, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * MenuSectionItems service.
   * @module api/MenuSectionItemsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MenuSectionItemsApi. 
   * @alias module:api/MenuSectionItemsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createMenuSectionItem operation.
     * @callback module:api/MenuSectionItemsApi~createMenuSectionItemCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create menu section item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {module:model/MenuSectionItemBase} menuSectionItem Menu section item
     * @param {module:api/MenuSectionItemsApi~createMenuSectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createMenuSectionItem = function(menuId, menuSectionId, menuSectionItem, callback) {
      var postBody = menuSectionItem;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling createMenuSectionItem");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling createMenuSectionItem");
      }

      // verify the required parameter 'menuSectionItem' is set
      if (menuSectionItem === undefined || menuSectionItem === null) {
        throw new Error("Missing the required parameter 'menuSectionItem' when calling createMenuSectionItem");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuSectionItem operation.
     * @callback module:api/MenuSectionItemsApi~deleteMenuSectionItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu section item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {module:api/MenuSectionItemsApi~deleteMenuSectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMenuSectionItem = function(menuId, menuSectionId, menuSectionItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuSectionItem");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling deleteMenuSectionItem");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling deleteMenuSectionItem");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMenuSectionItemImage operation.
     * @callback module:api/MenuSectionItemsApi~deleteMenuSectionItemImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu section item image
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {module:api/MenuSectionItemsApi~deleteMenuSectionItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMenuSectionItemImage = function(menuId, menuSectionId, menuSectionItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteMenuSectionItemImage");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling deleteMenuSectionItemImage");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling deleteMenuSectionItemImage");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemById operation.
     * @callback module:api/MenuSectionItemsApi~getMenuItemByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenuSectionItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item by identifier
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu item identifier
     * @param {module:api/MenuSectionItemsApi~getMenuItemByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenuSectionItem}
     */
    this.getMenuItemById = function(menuId, menuSectionId, menuSectionItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemById");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling getMenuItemById");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling getMenuItemById");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultMenuSectionItem;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItems operation.
     * @callback module:api/MenuSectionItemsApi~getMenuItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuSectionItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu items
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {module:api/MenuSectionItemsApi~getMenuItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuSectionItem}
     */
    this.getMenuItems = function(menuId, menuSectionId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItems");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling getMenuItems");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMenuSectionItem;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMenuSectionItem operation.
     * @callback module:api/MenuSectionItemsApi~updateMenuSectionItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu section item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {module:model/MenuSectionItemBase} menuSectionItem Menu section item (delta)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.undoAfter An optional time period, in hours, after which the hide-section operaton will be undone.
     * @param {module:api/MenuSectionItemsApi~updateMenuSectionItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateMenuSectionItem = function(menuId, menuSectionId, menuSectionItemId, menuSectionItem, opts, callback) {
      opts = opts || {};
      var postBody = menuSectionItem;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling updateMenuSectionItem");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling updateMenuSectionItem");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling updateMenuSectionItem");
      }

      // verify the required parameter 'menuSectionItem' is set
      if (menuSectionItem === undefined || menuSectionItem === null) {
        throw new Error("Missing the required parameter 'menuSectionItem' when calling updateMenuSectionItem");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      var queryParams = {
        'undoAfter': opts['undoAfter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMenuSectionItemImage operation.
     * @callback module:api/MenuSectionItemsApi~uploadMenuSectionItemImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload menu section item image
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {File} image Menu section item image
     * @param {module:api/MenuSectionItemsApi~uploadMenuSectionItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.uploadMenuSectionItemImage = function(menuId, menuSectionId, menuSectionItemId, image, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling uploadMenuSectionItemImage");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling uploadMenuSectionItemImage");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling uploadMenuSectionItemImage");
      }

      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling uploadMenuSectionItemImage");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Image': image
      };

      var authNames = ['oauth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
