/**
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EventSearchResult', 'model/RestApiErrorResult', 'model/RestApiEventSearchPaginationResult', 'model/RestApiForbiddenResult', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EventSearchResult'), require('../model/RestApiErrorResult'), require('../model/RestApiEventSearchPaginationResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.EventsApi = factory(root.Flipdish.ApiClient, root.Flipdish.EventSearchResult, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiEventSearchPaginationResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, EventSearchResult, RestApiErrorResult, RestApiEventSearchPaginationResult, RestApiForbiddenResult, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * Events service.
   * @module api/EventsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new EventsApi. 
   * @alias module:api/EventsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCustomerEvents operation.
     * @callback module:api/EventsApi~getCustomerEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiEventSearchPaginationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer events
     * @param {Number} customerId Customer identifier identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum elements to return
     * @param {Number} opts.page The index of the page to return, starting by 1
     * @param {Date} opts.start Start date
     * @param {Date} opts.end End date
     * @param {Array.<String>} opts.name Event names to filter in
     * @param {module:api/EventsApi~getCustomerEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiEventSearchPaginationResult}
     */
    this.getCustomerEvents = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerEvents");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
        'name': {
          value: opts['name'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiEventSearchPaginationResult;

      return this.apiClient.callApi(
        '/api/v1.0/events/customer/{customerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback module:api/EventsApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiEventSearchPaginationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events
     * @param {Object} opts Optional parameters
     * @param {Number} opts.storeId Store Id
     * @param {Number} opts.whiteLabelId White Label Id
     * @param {Number} opts.customerId Customer Id
     * @param {Number} opts.limit The maximum elements to return
     * @param {Number} opts.page The index of the page to return, starting by 1
     * @param {Date} opts.start Start date
     * @param {Date} opts.end End date
     * @param {Array.<String>} opts.name Event names to filter in
     * @param {module:api/EventsApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiEventSearchPaginationResult}
     */
    this.getEvents = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'storeId': opts['storeId'],
        'whiteLabelId': opts['whiteLabelId'],
        'customerId': opts['customerId'],
        'limit': opts['limit'],
        'page': opts['page'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
        'name': {
          value: opts['name'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiEventSearchPaginationResult;

      return this.apiClient.callApi(
        '/api/v1.0/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventsById operation.
     * @callback module:api/EventsApi~getEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event by Id
     * @param {String} eventId Event identifier (Guid)
     * @param {module:api/EventsApi~getEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSearchResult}
     */
    this.getEventsById = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getEventsById");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = EventSearchResult;

      return this.apiClient.callApi(
        '/api/v1.0/events/{eventId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuEvents operation.
     * @callback module:api/EventsApi~getMenuEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiEventSearchPaginationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu events
     * @param {Number} menuId Menu Identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum elements to return
     * @param {Number} opts.page The index of the page to return, starting by 1
     * @param {Date} opts.start Start date
     * @param {Date} opts.end End date
     * @param {Array.<String>} opts.name Event names to filter in
     * @param {module:api/EventsApi~getMenuEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiEventSearchPaginationResult}
     */
    this.getMenuEvents = function(menuId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuEvents");
      }


      var pathParams = {
        'menuId': menuId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
        'name': {
          value: opts['name'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiEventSearchPaginationResult;

      return this.apiClient.callApi(
        '/api/v1.0/events/menu/{menuId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderEvents operation.
     * @callback module:api/EventsApi~getOrderEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiEventSearchPaginationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order events
     * @param {Number} orderId Order identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum elements to return
     * @param {Number} opts.page The index of the page to return, starting by 1
     * @param {Date} opts.start Start date
     * @param {Date} opts.end End date
     * @param {Array.<String>} opts.name Event names to filter in
     * @param {module:api/EventsApi~getOrderEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiEventSearchPaginationResult}
     */
    this.getOrderEvents = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderEvents");
      }


      var pathParams = {
        'orderId': orderId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
        'name': {
          value: opts['name'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiEventSearchPaginationResult;

      return this.apiClient.callApi(
        '/api/v1.0/events/order/{orderId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderEventsByCustomer operation.
     * @callback module:api/EventsApi~getOrderEventsByCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiEventSearchPaginationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order events by customer
     * @param {Number} customerId Customer identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum elements to return
     * @param {Number} opts.page The index of the page to return, starting by 1
     * @param {Date} opts.start Start date
     * @param {Date} opts.end End date
     * @param {Array.<String>} opts.name Event names to filter in
     * @param {module:api/EventsApi~getOrderEventsByCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiEventSearchPaginationResult}
     */
    this.getOrderEventsByCustomer = function(customerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getOrderEventsByCustomer");
      }


      var pathParams = {
      };
      var queryParams = {
        'customerId': customerId,
        'limit': opts['limit'],
        'page': opts['page'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
        'name': {
          value: opts['name'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiEventSearchPaginationResult;

      return this.apiClient.callApi(
        '/api/v1.0/events/order', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreEvents operation.
     * @callback module:api/EventsApi~getStoreEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiEventSearchPaginationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get store events
     * @param {Number} storeId Id of the store
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum elements to return
     * @param {Number} opts.page The index of the page to return, starting by 1
     * @param {Date} opts.start Start date
     * @param {Date} opts.end End date
     * @param {Array.<String>} opts.name Event names to filter in
     * @param {module:api/EventsApi~getStoreEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiEventSearchPaginationResult}
     */
    this.getStoreEvents = function(storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreEvents");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
        'name': {
          value: opts['name'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiEventSearchPaginationResult;

      return this.apiClient.callApi(
        '/api/v1.0/events/store/{storeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserEvents operation.
     * @callback module:api/EventsApi~getUserEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiEventSearchPaginationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user events
     * @param {Number} userId User identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum elements to return
     * @param {Number} opts.page The index of the page to return, starting by 1
     * @param {Date} opts.start Start date
     * @param {Date} opts.end End date
     * @param {Array.<String>} opts.name Event names to filter in
     * @param {module:api/EventsApi~getUserEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiEventSearchPaginationResult}
     */
    this.getUserEvents = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserEvents");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
        'name': {
          value: opts['name'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiEventSearchPaginationResult;

      return this.apiClient.callApi(
        '/api/v1.0/events/user/{userId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWhiteLabelEvents operation.
     * @callback module:api/EventsApi~getWhiteLabelEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiEventSearchPaginationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WhiteLabel events
     * @param {Number} whitelabelId White Label Identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum elements to return
     * @param {Number} opts.page The index of the page to return, starting by 1
     * @param {Date} opts.start Start date
     * @param {Date} opts.end End date
     * @param {Array.<String>} opts.name Event names to filter in
     * @param {module:api/EventsApi~getWhiteLabelEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiEventSearchPaginationResult}
     */
    this.getWhiteLabelEvents = function(whitelabelId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'whitelabelId' is set
      if (whitelabelId === undefined || whitelabelId === null) {
        throw new Error("Missing the required parameter 'whitelabelId' when calling getWhiteLabelEvents");
      }


      var pathParams = {
        'whitelabelId': whitelabelId
      };
      var queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
        'name': {
          value: opts['name'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiEventSearchPaginationResult;

      return this.apiClient.callApi(
        '/api/v1.0/events/whitelabel/{whitelabelId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
