/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountDetailBase from '../model/AccountDetailBase';
import ChangePasswordModel from '../model/ChangePasswordModel';
import CreateAccountModel from '../model/CreateAccountModel';
import CreateBasicAccountModel from '../model/CreateBasicAccountModel';
import LoginModel from '../model/LoginModel';
import LoginWithPinModel from '../model/LoginWithPinModel';
import PasswordResetModel from '../model/PasswordResetModel';
import RequestLoginPinModel from '../model/RequestLoginPinModel';
import RequestLoginPinResponse from '../model/RequestLoginPinResponse';
import RequestPasswordResetModel from '../model/RequestPasswordResetModel';
import RequestPasswordResetPinResponse from '../model/RequestPasswordResetPinResponse';
import RestApiArrayResultLocalisedTimeZone from '../model/RestApiArrayResultLocalisedTimeZone';
import RestApiErrorResult from '../model/RestApiErrorResult';
import RestApiForbiddenResult from '../model/RestApiForbiddenResult';
import RestApiResultAccountDetail from '../model/RestApiResultAccountDetail';
import RestApiUnauthorizedResult from '../model/RestApiUnauthorizedResult';
import SetPasswordWithPinModel from '../model/SetPasswordWithPinModel';

/**
* Accounts service.
* @module api/AccountsApi
* @version 1.0.0
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the answerSignUpQuestion operation.
     * @callback module:api/AccountsApi~answerSignUpQuestionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} signupStepAction 
     * @param {Number} answerId 
     * @param {module:api/AccountsApi~answerSignUpQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    answerSignUpQuestion(signupStepAction, answerId, callback) {
      let postBody = answerId;
      // verify the required parameter 'signupStepAction' is set
      if (signupStepAction === undefined || signupStepAction === null) {
        throw new Error("Missing the required parameter 'signupStepAction' when calling answerSignUpQuestion");
      }
      // verify the required parameter 'answerId' is set
      if (answerId === undefined || answerId === null) {
        throw new Error("Missing the required parameter 'answerId' when calling answerSignUpQuestion");
      }

      let pathParams = {
        'signupStepAction': signupStepAction
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/signupstep/{signupStepAction}/answer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/AccountsApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ChangePasswordModel} changePasswordModel 
     * @param {module:api/AccountsApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePassword(changePasswordModel, callback) {
      let postBody = changePasswordModel;
      // verify the required parameter 'changePasswordModel' is set
      if (changePasswordModel === undefined || changePasswordModel === null) {
        throw new Error("Missing the required parameter 'changePasswordModel' when calling changePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePasswordWithPin operation.
     * @callback module:api/AccountsApi~changePasswordWithPinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SetPasswordWithPinModel} changePasswordModel 
     * @param {module:api/AccountsApi~changePasswordWithPinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePasswordWithPin(changePasswordModel, callback) {
      let postBody = changePasswordModel;
      // verify the required parameter 'changePasswordModel' is set
      if (changePasswordModel === undefined || changePasswordModel === null) {
        throw new Error("Missing the required parameter 'changePasswordModel' when calling changePasswordWithPin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/password/pin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccount operation.
     * @callback module:api/AccountsApi~createAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAccountModel} createAccountModel 
     * @param {module:api/AccountsApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAccount(createAccountModel, callback) {
      let postBody = createAccountModel;
      // verify the required parameter 'createAccountModel' is set
      if (createAccountModel === undefined || createAccountModel === null) {
        throw new Error("Missing the required parameter 'createAccountModel' when calling createAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['Message', 'ErrorCode', 'StackTrace', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBasicAccount operation.
     * @callback module:api/AccountsApi~createBasicAccountCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateBasicAccountModel} basicAccountModel 
     * @param {module:api/AccountsApi~createBasicAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createBasicAccount(basicAccountModel, callback) {
      let postBody = basicAccountModel;
      // verify the required parameter 'basicAccountModel' is set
      if (basicAccountModel === undefined || basicAccountModel === null) {
        throw new Error("Missing the required parameter 'basicAccountModel' when calling createBasicAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1.0/accounts/basic-account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountDetails operation.
     * @callback module:api/AccountsApi~getAccountDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAccountDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountsApi~getAccountDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAccountDetail}
     */
    getAccountDetails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RestApiResultAccountDetail;
      return this.apiClient.callApi(
        '/api/v1.0/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocalisedTimeZones operation.
     * @callback module:api/AccountsApi~getLocalisedTimeZonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultLocalisedTimeZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountsApi~getLocalisedTimeZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultLocalisedTimeZone}
     */
    getLocalisedTimeZones(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestApiArrayResultLocalisedTimeZone;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/timezones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AccountsApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/LoginModel} loginModel 
     * @param {module:api/AccountsApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(loginModel, callback) {
      let postBody = loginModel;
      // verify the required parameter 'loginModel' is set
      if (loginModel === undefined || loginModel === null) {
        throw new Error("Missing the required parameter 'loginModel' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginSso operation.
     * @callback module:api/AccountsApi~loginSsoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountsApi~loginSsoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginSso(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/login/sso', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginWithPin operation.
     * @callback module:api/AccountsApi~loginWithPinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/LoginWithPinModel} loginModel 
     * @param {module:api/AccountsApi~loginWithPinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginWithPin(loginModel, callback) {
      let postBody = loginModel;
      // verify the required parameter 'loginModel' is set
      if (loginModel === undefined || loginModel === null) {
        throw new Error("Missing the required parameter 'loginModel' when calling loginWithPin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/login/pin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/AccountsApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountsApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordResetWithToken operation.
     * @callback module:api/AccountsApi~passwordResetWithTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PasswordResetModel} passwordResetModel 
     * @param {module:api/AccountsApi~passwordResetWithTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    passwordResetWithToken(passwordResetModel, callback) {
      let postBody = passwordResetModel;
      // verify the required parameter 'passwordResetModel' is set
      if (passwordResetModel === undefined || passwordResetModel === null) {
        throw new Error("Missing the required parameter 'passwordResetModel' when calling passwordResetWithToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['Message', 'ErrorCode', 'StackTrace', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recaptchaValidate operation.
     * @callback module:api/AccountsApi~recaptchaValidateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/AccountsApi~recaptchaValidateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recaptchaValidate(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling recaptchaValidate");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['Message', 'ErrorCode', 'StackTrace', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/recaptcha', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestLoginPin operation.
     * @callback module:api/AccountsApi~requestLoginPinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestLoginPinResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestLoginPinModel} requestLoginPinRequest 
     * @param {module:api/AccountsApi~requestLoginPinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestLoginPinResponse}
     */
    requestLoginPin(requestLoginPinRequest, callback) {
      let postBody = requestLoginPinRequest;
      // verify the required parameter 'requestLoginPinRequest' is set
      if (requestLoginPinRequest === undefined || requestLoginPinRequest === null) {
        throw new Error("Missing the required parameter 'requestLoginPinRequest' when calling requestLoginPin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RequestLoginPinResponse;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/pin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordReset operation.
     * @callback module:api/AccountsApi~requestPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestPasswordResetModel} requestPasswordResetModel 
     * @param {module:api/AccountsApi~requestPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestPasswordReset(requestPasswordResetModel, callback) {
      let postBody = requestPasswordResetModel;
      // verify the required parameter 'requestPasswordResetModel' is set
      if (requestPasswordResetModel === undefined || requestPasswordResetModel === null) {
        throw new Error("Missing the required parameter 'requestPasswordResetModel' when calling requestPasswordReset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['Message', 'ErrorCode', 'StackTrace', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/passwordreset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPinForPasswordReset operation.
     * @callback module:api/AccountsApi~sendPinForPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestPasswordResetPinResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestPasswordResetModel} requestPasswordResetRequest 
     * @param {module:api/AccountsApi~sendPinForPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestPasswordResetPinResponse}
     */
    sendPinForPasswordReset(requestPasswordResetRequest, callback) {
      let postBody = requestPasswordResetRequest;
      // verify the required parameter 'requestPasswordResetRequest' is set
      if (requestPasswordResetRequest === undefined || requestPasswordResetRequest === null) {
        throw new Error("Missing the required parameter 'requestPasswordResetRequest' when calling sendPinForPasswordReset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml', 'Data', 'Message', 'ErrorCode', 'StackTrace'];
      let returnType = RequestPasswordResetPinResponse;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/password/resetpin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skipSignupStep operation.
     * @callback module:api/AccountsApi~skipSignupStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} signupStepAction 
     * @param {module:api/AccountsApi~skipSignupStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    skipSignupStep(signupStepAction, callback) {
      let postBody = null;
      // verify the required parameter 'signupStepAction' is set
      if (signupStepAction === undefined || signupStepAction === null) {
        throw new Error("Missing the required parameter 'signupStepAction' when calling skipSignupStep");
      }

      let pathParams = {
        'signupStepAction': signupStepAction
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts/signupstep/{signupStepAction}/skip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/AccountsApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AccountDetailBase} updateAccountModel 
     * @param {module:api/AccountsApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAccount(updateAccountModel, callback) {
      let postBody = updateAccountModel;
      // verify the required parameter 'updateAccountModel' is set
      if (updateAccountModel === undefined || updateAccountModel === null) {
        throw new Error("Missing the required parameter 'updateAccountModel' when calling updateAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['Message', 'ErrorCode', 'StackTrace', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1.0/accounts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
