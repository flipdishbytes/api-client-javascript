/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountDetailBase', 'model/ChangePasswordModel', 'model/CreateAccountModel', 'model/LoginModel', 'model/LoginWithPinModel', 'model/PasswordResetModel', 'model/RequestLoginPinModel', 'model/RequestLoginPinResponse', 'model/RequestPasswordResetModel', 'model/RequestPasswordResetPinResponse', 'model/RestApiArrayResultLocalisedTimeZone', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultAccountDetail', 'model/RestApiUnauthorizedResult', 'model/SetPasswordWithPinModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountDetailBase'), require('../model/ChangePasswordModel'), require('../model/CreateAccountModel'), require('../model/LoginModel'), require('../model/LoginWithPinModel'), require('../model/PasswordResetModel'), require('../model/RequestLoginPinModel'), require('../model/RequestLoginPinResponse'), require('../model/RequestPasswordResetModel'), require('../model/RequestPasswordResetPinResponse'), require('../model/RestApiArrayResultLocalisedTimeZone'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultAccountDetail'), require('../model/RestApiUnauthorizedResult'), require('../model/SetPasswordWithPinModel'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.AccountsApi = factory(root.Flipdish.ApiClient, root.Flipdish.AccountDetailBase, root.Flipdish.ChangePasswordModel, root.Flipdish.CreateAccountModel, root.Flipdish.LoginModel, root.Flipdish.LoginWithPinModel, root.Flipdish.PasswordResetModel, root.Flipdish.RequestLoginPinModel, root.Flipdish.RequestLoginPinResponse, root.Flipdish.RequestPasswordResetModel, root.Flipdish.RequestPasswordResetPinResponse, root.Flipdish.RestApiArrayResultLocalisedTimeZone, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultAccountDetail, root.Flipdish.RestApiUnauthorizedResult, root.Flipdish.SetPasswordWithPinModel);
  }
}(this, function(ApiClient, AccountDetailBase, ChangePasswordModel, CreateAccountModel, LoginModel, LoginWithPinModel, PasswordResetModel, RequestLoginPinModel, RequestLoginPinResponse, RequestPasswordResetModel, RequestPasswordResetPinResponse, RestApiArrayResultLocalisedTimeZone, RestApiErrorResult, RestApiForbiddenResult, RestApiResultAccountDetail, RestApiUnauthorizedResult, SetPasswordWithPinModel) {
  'use strict';

  /**
   * Accounts service.
   * @module api/AccountsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AccountsApi. 
   * @alias module:api/AccountsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the answerSignUpQuestion operation.
     * @callback module:api/AccountsApi~answerSignUpQuestionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Answer a signup question
     * @param {module:model/String} signupStepAction Signup step action
     * @param {Number} answerId Identifier of the answer
     * @param {module:api/AccountsApi~answerSignUpQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.answerSignUpQuestion = function(signupStepAction, answerId, callback) {
      var postBody = answerId;

      // verify the required parameter 'signupStepAction' is set
      if (signupStepAction === undefined || signupStepAction === null) {
        throw new Error("Missing the required parameter 'signupStepAction' when calling answerSignUpQuestion");
      }

      // verify the required parameter 'answerId' is set
      if (answerId === undefined || answerId === null) {
        throw new Error("Missing the required parameter 'answerId' when calling answerSignUpQuestion");
      }


      var pathParams = {
        'signupStepAction': signupStepAction
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/signupstep/{signupStepAction}/answer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/AccountsApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * @param {module:model/ChangePasswordModel} changePasswordModel Change password model
     * @param {module:api/AccountsApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changePassword = function(changePasswordModel, callback) {
      var postBody = changePasswordModel;

      // verify the required parameter 'changePasswordModel' is set
      if (changePasswordModel === undefined || changePasswordModel === null) {
        throw new Error("Missing the required parameter 'changePasswordModel' when calling changePassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/password', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changePasswordWithPin operation.
     * @callback module:api/AccountsApi~changePasswordWithPinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password
     * @param {module:model/SetPasswordWithPinModel} changePasswordModel Change password model
     * @param {module:api/AccountsApi~changePasswordWithPinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changePasswordWithPin = function(changePasswordModel, callback) {
      var postBody = changePasswordModel;

      // verify the required parameter 'changePasswordModel' is set
      if (changePasswordModel === undefined || changePasswordModel === null) {
        throw new Error("Missing the required parameter 'changePasswordModel' when calling changePasswordWithPin");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/password/pin', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccount operation.
     * @callback module:api/AccountsApi~createAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create account with email address and store name
     * @param {module:model/CreateAccountModel} createAccountModel Create account model
     * @param {module:api/AccountsApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createAccount = function(createAccountModel, callback) {
      var postBody = createAccountModel;

      // verify the required parameter 'createAccountModel' is set
      if (createAccountModel === undefined || createAccountModel === null) {
        throw new Error("Missing the required parameter 'createAccountModel' when calling createAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountDetails operation.
     * @callback module:api/AccountsApi~getAccountDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultAccountDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the current account detail
     * @param {module:api/AccountsApi~getAccountDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultAccountDetail}
     */
    this.getAccountDetails = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultAccountDetail;

      return this.apiClient.callApi(
        '/api/v1.0/accounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocalisedTimeZones operation.
     * @callback module:api/AccountsApi~getLocalisedTimeZonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultLocalisedTimeZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [PRIVATE API] Get timezones localised to users language
     * @param {module:api/AccountsApi~getLocalisedTimeZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultLocalisedTimeZone}
     */
    this.getLocalisedTimeZones = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultLocalisedTimeZone;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/timezones', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AccountsApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with username and password
     * @param {module:model/LoginModel} loginModel Login model
     * @param {module:api/AccountsApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.login = function(loginModel, callback) {
      var postBody = loginModel;

      // verify the required parameter 'loginModel' is set
      if (loginModel === undefined || loginModel === null) {
        throw new Error("Missing the required parameter 'loginModel' when calling login");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginSso operation.
     * @callback module:api/AccountsApi~loginSsoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with SSO token
     * @param {module:api/AccountsApi~loginSsoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.loginSso = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/login/sso', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginWithPin operation.
     * @callback module:api/AccountsApi~loginWithPinCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with email and pin
     * @param {module:model/LoginWithPinModel} loginModel Login with pin model
     * @param {module:api/AccountsApi~loginWithPinCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.loginWithPin = function(loginModel, callback) {
      var postBody = loginModel;

      // verify the required parameter 'loginModel' is set
      if (loginModel === undefined || loginModel === null) {
        throw new Error("Missing the required parameter 'loginModel' when calling loginWithPin");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/login/pin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/AccountsApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log out. It removes Flipdish authorization Cookie.
     * @param {module:api/AccountsApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.logout = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/logout', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordResetWithToken operation.
     * @callback module:api/AccountsApi~passwordResetWithTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password with token.
     * @param {module:model/PasswordResetModel} passwordResetModel Password reset model
     * @param {module:api/AccountsApi~passwordResetWithTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.passwordResetWithToken = function(passwordResetModel, callback) {
      var postBody = passwordResetModel;

      // verify the required parameter 'passwordResetModel' is set
      if (passwordResetModel === undefined || passwordResetModel === null) {
        throw new Error("Missing the required parameter 'passwordResetModel' when calling passwordResetWithToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the recaptchaValidate operation.
     * @callback module:api/AccountsApi~recaptchaValidateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate recaptcha from flipdish portal
     * @param {String} token Request token
     * @param {module:api/AccountsApi~recaptchaValidateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.recaptchaValidate = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling recaptchaValidate");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/recaptcha', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestLoginPin operation.
     * @callback module:api/AccountsApi~requestLoginPinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestLoginPinResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request login PIN. The server sends the PIN to the email address.
     * @param {module:model/RequestLoginPinModel} requestLoginPinRequest Request login PIN request
     * @param {module:api/AccountsApi~requestLoginPinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestLoginPinResponse}
     */
    this.requestLoginPin = function(requestLoginPinRequest, callback) {
      var postBody = requestLoginPinRequest;

      // verify the required parameter 'requestLoginPinRequest' is set
      if (requestLoginPinRequest === undefined || requestLoginPinRequest === null) {
        throw new Error("Missing the required parameter 'requestLoginPinRequest' when calling requestLoginPin");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RequestLoginPinResponse;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/pin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordReset operation.
     * @callback module:api/AccountsApi~requestPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request password reset. Flipdish system will send a token via email.
     * @param {module:model/RequestPasswordResetModel} requestPasswordResetModel Request password reset model
     * @param {module:api/AccountsApi~requestPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.requestPasswordReset = function(requestPasswordResetModel, callback) {
      var postBody = requestPasswordResetModel;

      // verify the required parameter 'requestPasswordResetModel' is set
      if (requestPasswordResetModel === undefined || requestPasswordResetModel === null) {
        throw new Error("Missing the required parameter 'requestPasswordResetModel' when calling requestPasswordReset");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/passwordreset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPinForPasswordReset operation.
     * @callback module:api/AccountsApi~sendPinForPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestPasswordResetPinResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Password Reset PIN. The server sends the PIN to the email address.
     * @param {module:model/RequestPasswordResetModel} requestPasswordResetRequest 
     * @param {module:api/AccountsApi~sendPinForPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestPasswordResetPinResponse}
     */
    this.sendPinForPasswordReset = function(requestPasswordResetRequest, callback) {
      var postBody = requestPasswordResetRequest;

      // verify the required parameter 'requestPasswordResetRequest' is set
      if (requestPasswordResetRequest === undefined || requestPasswordResetRequest === null) {
        throw new Error("Missing the required parameter 'requestPasswordResetRequest' when calling sendPinForPasswordReset");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RequestPasswordResetPinResponse;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/password/resetpin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the skipSignupStep operation.
     * @callback module:api/AccountsApi~skipSignupStepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skip a signup question
     * @param {module:model/String} signupStepAction Signup step action
     * @param {module:api/AccountsApi~skipSignupStepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.skipSignupStep = function(signupStepAction, callback) {
      var postBody = null;

      // verify the required parameter 'signupStepAction' is set
      if (signupStepAction === undefined || signupStepAction === null) {
        throw new Error("Missing the required parameter 'signupStepAction' when calling skipSignupStep");
      }


      var pathParams = {
        'signupStepAction': signupStepAction
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts/signupstep/{signupStepAction}/skip', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/AccountsApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update account with name and language
     * @param {module:model/AccountDetailBase} updateAccountModel Update account model
     * @param {module:api/AccountsApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateAccount = function(updateAccountModel, callback) {
      var postBody = updateAccountModel;

      // verify the required parameter 'updateAccountModel' is set
      if (updateAccountModel === undefined || updateAccountModel === null) {
        throw new Error("Missing the required parameter 'updateAccountModel' when calling updateAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/accounts', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
