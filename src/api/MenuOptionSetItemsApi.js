/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MenuItemOptionSetItemBase', 'model/RestApiArrayResultMenuItemOptionSetItem', 'model/RestApiErrorResult', 'model/RestApiForbiddenResult', 'model/RestApiResultMenuItemOptionSetItem', 'model/RestApiStringResult', 'model/RestApiUnauthorizedResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/MenuItemOptionSetItemBase'), require('../model/RestApiArrayResultMenuItemOptionSetItem'), require('../model/RestApiErrorResult'), require('../model/RestApiForbiddenResult'), require('../model/RestApiResultMenuItemOptionSetItem'), require('../model/RestApiStringResult'), require('../model/RestApiUnauthorizedResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Flipdish) {
      root.Flipdish = {};
    }
    root.Flipdish.MenuOptionSetItemsApi = factory(root.Flipdish.ApiClient, root.Flipdish.MenuItemOptionSetItemBase, root.Flipdish.RestApiArrayResultMenuItemOptionSetItem, root.Flipdish.RestApiErrorResult, root.Flipdish.RestApiForbiddenResult, root.Flipdish.RestApiResultMenuItemOptionSetItem, root.Flipdish.RestApiStringResult, root.Flipdish.RestApiUnauthorizedResult);
  }
}(this, function(ApiClient, MenuItemOptionSetItemBase, RestApiArrayResultMenuItemOptionSetItem, RestApiErrorResult, RestApiForbiddenResult, RestApiResultMenuItemOptionSetItem, RestApiStringResult, RestApiUnauthorizedResult) {
  'use strict';

  /**
   * MenuOptionSetItems service.
   * @module api/MenuOptionSetItemsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MenuOptionSetItemsApi. 
   * @alias module:api/MenuOptionSetItemsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addMenuItemOptionSetItem operation.
     * @callback module:api/MenuOptionSetItemsApi~addMenuItemOptionSetItemCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create menu item option set item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {module:model/MenuItemOptionSetItemBase} menuItemOptionSetItem Option set item
     * @param {module:api/MenuOptionSetItemsApi~addMenuItemOptionSetItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.addMenuItemOptionSetItem = function(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItem, callback) {
      var postBody = menuItemOptionSetItem;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling addMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling addMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling addMenuItemOptionSetItem");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling addMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuItemOptionSetItem' is set
      if (menuItemOptionSetItem === undefined || menuItemOptionSetItem === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSetItem' when calling addMenuItemOptionSetItem");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOptionSetItemImage operation.
     * @callback module:api/MenuOptionSetItemsApi~deleteOptionSetItemImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu item option set item image
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {Number} menuItemOptionSetItemId Option set item identifier
     * @param {module:api/MenuOptionSetItemsApi~deleteOptionSetItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOptionSetItemImage = function(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling deleteOptionSetItemImage");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling deleteOptionSetItemImage");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling deleteOptionSetItemImage");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling deleteOptionSetItemImage");
      }

      // verify the required parameter 'menuItemOptionSetItemId' is set
      if (menuItemOptionSetItemId === undefined || menuItemOptionSetItemId === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSetItemId' when calling deleteOptionSetItemImage");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId,
        'menuItemOptionSetItemId': menuItemOptionSetItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemOptionSetItemById operation.
     * @callback module:api/MenuOptionSetItemsApi~getMenuItemOptionSetItemByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiResultMenuItemOptionSetItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item option set item by identifier
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {Number} menuItemOptionSetItemId Option set item identifier
     * @param {module:api/MenuOptionSetItemsApi~getMenuItemOptionSetItemByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiResultMenuItemOptionSetItem}
     */
    this.getMenuItemOptionSetItemById = function(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemOptionSetItemById");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling getMenuItemOptionSetItemById");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling getMenuItemOptionSetItemById");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling getMenuItemOptionSetItemById");
      }

      // verify the required parameter 'menuItemOptionSetItemId' is set
      if (menuItemOptionSetItemId === undefined || menuItemOptionSetItemId === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSetItemId' when calling getMenuItemOptionSetItemById");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId,
        'menuItemOptionSetItemId': menuItemOptionSetItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiResultMenuItemOptionSetItem;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMenuItemOptionSetItems operation.
     * @callback module:api/MenuOptionSetItemsApi~getMenuItemOptionSetItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiArrayResultMenuItemOptionSetItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get menu item option set items
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {module:api/MenuOptionSetItemsApi~getMenuItemOptionSetItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiArrayResultMenuItemOptionSetItem}
     */
    this.getMenuItemOptionSetItems = function(menuId, menuSectionId, menuSectionItemId, optionSetId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling getMenuItemOptionSetItems");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling getMenuItemOptionSetItems");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling getMenuItemOptionSetItems");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling getMenuItemOptionSetItems");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiArrayResultMenuItemOptionSetItem;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMenuItemOptionSetItem operation.
     * @callback module:api/MenuOptionSetItemsApi~removeMenuItemOptionSetItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete menu item option set item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {Number} menuItemOptionSetItemId Option set item identifier
     * @param {module:api/MenuOptionSetItemsApi~removeMenuItemOptionSetItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeMenuItemOptionSetItem = function(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling removeMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling removeMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling removeMenuItemOptionSetItem");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling removeMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuItemOptionSetItemId' is set
      if (menuItemOptionSetItemId === undefined || menuItemOptionSetItemId === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSetItemId' when calling removeMenuItemOptionSetItem");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId,
        'menuItemOptionSetItemId': menuItemOptionSetItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setOptionSetItemTax operation.
     * @callback module:api/MenuOptionSetItemsApi~setOptionSetItemTaxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Private API] Set Tax Rate on OptionSetItem
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId 
     * @param {Number} menuSectionItemId 
     * @param {Number} optionSetId 
     * @param {Number} menuItemOptionSetItemId Option set item identifier
     * @param {Number} taxRateId Tax Rate to use
     * @param {module:api/MenuOptionSetItemsApi~setOptionSetItemTaxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setOptionSetItemTax = function(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, taxRateId, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling setOptionSetItemTax");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling setOptionSetItemTax");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling setOptionSetItemTax");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling setOptionSetItemTax");
      }

      // verify the required parameter 'menuItemOptionSetItemId' is set
      if (menuItemOptionSetItemId === undefined || menuItemOptionSetItemId === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSetItemId' when calling setOptionSetItemTax");
      }

      // verify the required parameter 'taxRateId' is set
      if (taxRateId === undefined || taxRateId === null) {
        throw new Error("Missing the required parameter 'taxRateId' when calling setOptionSetItemTax");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId,
        'menuItemOptionSetItemId': menuItemOptionSetItemId,
        'taxRateId': taxRateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/taxrate/{taxRateId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMenuItemOptionSetItem operation.
     * @callback module:api/MenuOptionSetItemsApi~updateMenuItemOptionSetItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update menu item option set item
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {Number} menuItemOptionSetItemId Option set item identifier
     * @param {module:model/MenuItemOptionSetItemBase} menuItemOptionSetItem Option set item (delta)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.undoAfter An optional time period, in hours, after which the hide-section operaton will be undone.
     * @param {module:api/MenuOptionSetItemsApi~updateMenuItemOptionSetItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateMenuItemOptionSetItem = function(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, menuItemOptionSetItem, opts, callback) {
      opts = opts || {};
      var postBody = menuItemOptionSetItem;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling updateMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling updateMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling updateMenuItemOptionSetItem");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling updateMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuItemOptionSetItemId' is set
      if (menuItemOptionSetItemId === undefined || menuItemOptionSetItemId === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSetItemId' when calling updateMenuItemOptionSetItem");
      }

      // verify the required parameter 'menuItemOptionSetItem' is set
      if (menuItemOptionSetItem === undefined || menuItemOptionSetItem === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSetItem' when calling updateMenuItemOptionSetItem");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId,
        'menuItemOptionSetItemId': menuItemOptionSetItemId
      };
      var queryParams = {
        'undoAfter': opts['undoAfter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadOptionSetItemImage operation.
     * @callback module:api/MenuOptionSetItemsApi~uploadOptionSetItemImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApiStringResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload menu item option set item image
     * @param {Number} menuId Menu identifier
     * @param {Number} menuSectionId Menu section identifier
     * @param {Number} menuSectionItemId Menu section item identifier
     * @param {Number} optionSetId Option set identifier
     * @param {Number} menuItemOptionSetItemId Option set item identifier
     * @param {File} Image Option set item image
     * @param {module:api/MenuOptionSetItemsApi~uploadOptionSetItemImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApiStringResult}
     */
    this.uploadOptionSetItemImage = function(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, Image, callback) {
      var postBody = null;

      // verify the required parameter 'menuId' is set
      if (menuId === undefined || menuId === null) {
        throw new Error("Missing the required parameter 'menuId' when calling uploadOptionSetItemImage");
      }

      // verify the required parameter 'menuSectionId' is set
      if (menuSectionId === undefined || menuSectionId === null) {
        throw new Error("Missing the required parameter 'menuSectionId' when calling uploadOptionSetItemImage");
      }

      // verify the required parameter 'menuSectionItemId' is set
      if (menuSectionItemId === undefined || menuSectionItemId === null) {
        throw new Error("Missing the required parameter 'menuSectionItemId' when calling uploadOptionSetItemImage");
      }

      // verify the required parameter 'optionSetId' is set
      if (optionSetId === undefined || optionSetId === null) {
        throw new Error("Missing the required parameter 'optionSetId' when calling uploadOptionSetItemImage");
      }

      // verify the required parameter 'menuItemOptionSetItemId' is set
      if (menuItemOptionSetItemId === undefined || menuItemOptionSetItemId === null) {
        throw new Error("Missing the required parameter 'menuItemOptionSetItemId' when calling uploadOptionSetItemImage");
      }

      // verify the required parameter 'Image' is set
      if (Image === undefined || Image === null) {
        throw new Error("Missing the required parameter 'Image' when calling uploadOptionSetItemImage");
      }


      var pathParams = {
        'menuId': menuId,
        'menuSectionId': menuSectionId,
        'menuSectionItemId': menuSectionItemId,
        'optionSetId': optionSetId,
        'menuItemOptionSetItemId': menuItemOptionSetItemId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Image': Image
      };

      var authNames = ['oauth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RestApiStringResult;

      return this.apiClient.callApi(
        '/api/v1.0/menus/{menuId}/sections/{menuSectionId}/sectionitems/{menuSectionItemId}/optionsets/{optionSetId}/optionsetitems/{menuItemOptionSetItemId}/image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
