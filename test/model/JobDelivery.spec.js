/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('JobDelivery', function() {
      beforeEach(function() {
        instance = new Flipdish.JobDelivery();
      });

      it('should create an instance of JobDelivery', function() {
        // TODO: update the code to test JobDelivery
        expect(instance).to.be.a(Flipdish.JobDelivery);
      });

      it('should have the property Id (base name: "Id")', function() {
        // TODO: update the code to test the property Id
        expect(instance).to.have.property('Id');
        // expect(instance.Id).to.be(expectedValueLiteral);
      });

      it('should have the property Status (base name: "Status")', function() {
        // TODO: update the code to test the property Status
        expect(instance).to.have.property('Status');
        // expect(instance.Status).to.be(expectedValueLiteral);
      });

      it('should have the property PickedAt (base name: "PickedAt")', function() {
        // TODO: update the code to test the property PickedAt
        expect(instance).to.have.property('PickedAt');
        // expect(instance.PickedAt).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveredAt (base name: "DeliveredAt")', function() {
        // TODO: update the code to test the property DeliveredAt
        expect(instance).to.have.property('DeliveredAt');
        // expect(instance.DeliveredAt).to.be(expectedValueLiteral);
      });

      it('should have the property TrackingUrl (base name: "TrackingUrl")', function() {
        // TODO: update the code to test the property TrackingUrl
        expect(instance).to.have.property('TrackingUrl');
        // expect(instance.TrackingUrl).to.be(expectedValueLiteral);
      });

      it('should have the property ClientReference (base name: "ClientReference")', function() {
        // TODO: update the code to test the property ClientReference
        expect(instance).to.have.property('ClientReference');
        // expect(instance.ClientReference).to.be(expectedValueLiteral);
      });

      it('should have the property PackageDescription (base name: "PackageDescription")', function() {
        // TODO: update the code to test the property PackageDescription
        expect(instance).to.have.property('PackageDescription');
        // expect(instance.PackageDescription).to.be(expectedValueLiteral);
      });

      it('should have the property PackageType (base name: "PackageType")', function() {
        // TODO: update the code to test the property PackageType
        expect(instance).to.have.property('PackageType');
        // expect(instance.PackageType).to.be(expectedValueLiteral);
      });

      it('should have the property Pickup (base name: "Pickup")', function() {
        // TODO: update the code to test the property Pickup
        expect(instance).to.have.property('Pickup');
        // expect(instance.Pickup).to.be(expectedValueLiteral);
      });

      it('should have the property Dropoff (base name: "Dropoff")', function() {
        // TODO: update the code to test the property Dropoff
        expect(instance).to.have.property('Dropoff');
        // expect(instance.Dropoff).to.be(expectedValueLiteral);
      });

      it('should have the property Eta (base name: "Eta")', function() {
        // TODO: update the code to test the property Eta
        expect(instance).to.have.property('Eta');
        // expect(instance.Eta).to.be(expectedValueLiteral);
      });

      it('should have the property Cancellation (base name: "Cancellation")', function() {
        // TODO: update the code to test the property Cancellation
        expect(instance).to.have.property('Cancellation');
        // expect(instance.Cancellation).to.be(expectedValueLiteral);
      });

      it('should have the property Proof (base name: "Proof")', function() {
        // TODO: update the code to test the property Proof
        expect(instance).to.have.property('Proof');
        // expect(instance.Proof).to.be(expectedValueLiteral);
      });

    });
  });

}));
