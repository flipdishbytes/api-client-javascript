/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.PayoutOrder();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PayoutOrder', function() {
    it('should create an instance of PayoutOrder', function() {
      // uncomment below and update the code to test PayoutOrder
      //var instane = new Flipdish.PayoutOrder();
      //expect(instance).to.be.a(Flipdish.PayoutOrder);
    });

    it('should have the property OrderId (base name: "OrderId")', function() {
      // uncomment below and update the code to test the property OrderId
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property PayoutId (base name: "PayoutId")', function() {
      // uncomment below and update the code to test the property PayoutId
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property OrderDate (base name: "OrderDate")', function() {
      // uncomment below and update the code to test the property OrderDate
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property OrderType (base name: "OrderType")', function() {
      // uncomment below and update the code to test the property OrderType
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property OrderCurrency (base name: "OrderCurrency")', function() {
      // uncomment below and update the code to test the property OrderCurrency
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property Sales (base name: "Sales")', function() {
      // uncomment below and update the code to test the property Sales
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property SalesTax (base name: "SalesTax")', function() {
      // uncomment below and update the code to test the property SalesTax
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property DeliveryCharges (base name: "DeliveryCharges")', function() {
      // uncomment below and update the code to test the property DeliveryCharges
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property Tips (base name: "Tips")', function() {
      // uncomment below and update the code to test the property Tips
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property Voucher (base name: "Voucher")', function() {
      // uncomment below and update the code to test the property Voucher
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property FlatFeeExcludingVat (base name: "FlatFeeExcludingVat")', function() {
      // uncomment below and update the code to test the property FlatFeeExcludingVat
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property FlatFeeExcludingVAT (base name: "FlatFeeExcludingVAT")', function() {
      // uncomment below and update the code to test the property FlatFeeExcludingVAT
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property FlatFeeIncludingVat (base name: "FlatFeeIncludingVat")', function() {
      // uncomment below and update the code to test the property FlatFeeIncludingVat
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property PercentageFeeExcludingVat (base name: "PercentageFeeExcludingVat")', function() {
      // uncomment below and update the code to test the property PercentageFeeExcludingVat
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property PercentageFeeExcludingVAT (base name: "PercentageFeeExcludingVAT")', function() {
      // uncomment below and update the code to test the property PercentageFeeExcludingVAT
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property Vat (base name: "Vat")', function() {
      // uncomment below and update the code to test the property Vat
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property TotalFees (base name: "TotalFees")', function() {
      // uncomment below and update the code to test the property TotalFees
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property CashFeeChargedToCustomer (base name: "CashFeeChargedToCustomer")', function() {
      // uncomment below and update the code to test the property CashFeeChargedToCustomer
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property NetSales (base name: "NetSales")', function() {
      // uncomment below and update the code to test the property NetSales
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property StoreId (base name: "StoreId")', function() {
      // uncomment below and update the code to test the property StoreId
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property ServiceChargeAmount (base name: "ServiceChargeAmount")', function() {
      // uncomment below and update the code to test the property ServiceChargeAmount
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

    it('should have the property ServiceChargePercentage (base name: "ServiceChargePercentage")', function() {
      // uncomment below and update the code to test the property ServiceChargePercentage
      //var instance = new Flipdish.PayoutOrder();
      //expect(instance).to.be();
    });

  });

}));
