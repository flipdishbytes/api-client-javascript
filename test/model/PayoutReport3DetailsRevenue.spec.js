/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PayoutReport3DetailsRevenue', function() {
      beforeEach(function() {
        instance = new Flipdish.PayoutReport3DetailsRevenue();
      });

      it('should create an instance of PayoutReport3DetailsRevenue', function() {
        // TODO: update the code to test PayoutReport3DetailsRevenue
        expect(instance).to.be.a(Flipdish.PayoutReport3DetailsRevenue);
      });

      it('should have the property GrossSales (base name: "GrossSales")', function() {
        // TODO: update the code to test the property GrossSales
        expect(instance).to.have.property('GrossSales');
        // expect(instance.GrossSales).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryCharges (base name: "DeliveryCharges")', function() {
        // TODO: update the code to test the property DeliveryCharges
        expect(instance).to.have.property('DeliveryCharges');
        // expect(instance.DeliveryCharges).to.be(expectedValueLiteral);
      });

      it('should have the property OtherCharges (base name: "OtherCharges")', function() {
        // TODO: update the code to test the property OtherCharges
        expect(instance).to.have.property('OtherCharges');
        // expect(instance.OtherCharges).to.be(expectedValueLiteral);
      });

      it('should have the property Tips (base name: "Tips")', function() {
        // TODO: update the code to test the property Tips
        expect(instance).to.have.property('Tips');
        // expect(instance.Tips).to.be(expectedValueLiteral);
      });

      it('should have the property TotalNetSales (base name: "TotalNetSales")', function() {
        // TODO: update the code to test the property TotalNetSales
        expect(instance).to.have.property('TotalNetSales');
        // expect(instance.TotalNetSales).to.be(expectedValueLiteral);
      });

      it('should have the property TotalRevenue (base name: "TotalRevenue")', function() {
        // TODO: update the code to test the property TotalRevenue
        expect(instance).to.have.property('TotalRevenue');
        // expect(instance.TotalRevenue).to.be(expectedValueLiteral);
      });

      it('should have the property RevenueForFeeCalculations (base name: "RevenueForFeeCalculations")', function() {
        // TODO: update the code to test the property RevenueForFeeCalculations
        expect(instance).to.have.property('RevenueForFeeCalculations');
        // expect(instance.RevenueForFeeCalculations).to.be(expectedValueLiteral);
      });

    });
  });

}));
