/**
 * Flipdish Open API v1.0
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FlipdishOpenApiV10);
  }
}(this, function(expect, FlipdishOpenApiV10) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FlipdishOpenApiV10.VoucherWithStats();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VoucherWithStats', function() {
    it('should create an instance of VoucherWithStats', function() {
      // uncomment below and update the code to test VoucherWithStats
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be.a(FlipdishOpenApiV10.VoucherWithStats);
    });

    it('should have the property totalUsed (base name: "TotalUsed")', function() {
      // uncomment below and update the code to test the property totalUsed
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property totalCustomers (base name: "TotalCustomers")', function() {
      // uncomment below and update the code to test the property totalCustomers
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property totalAmountFromOrders (base name: "TotalAmountFromOrders")', function() {
      // uncomment below and update the code to test the property totalAmountFromOrders
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property totalDiscounted (base name: "TotalDiscounted")', function() {
      // uncomment below and update the code to test the property totalDiscounted
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property averageOrderSize (base name: "AverageOrderSize")', function() {
      // uncomment below and update the code to test the property averageOrderSize
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property voucherId (base name: "VoucherId")', function() {
      // uncomment below and update the code to test the property voucherId
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property voucherType (base name: "VoucherType")', function() {
      // uncomment below and update the code to test the property voucherType
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property voucherSubType (base name: "VoucherSubType")', function() {
      // uncomment below and update the code to test the property voucherSubType
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "Currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property stores (base name: "Stores")', function() {
      // uncomment below and update the code to test the property stores
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property storeNames (base name: "StoreNames")', function() {
      // uncomment below and update the code to test the property storeNames
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property addItemDetails (base name: "AddItemDetails")', function() {
      // uncomment below and update the code to test the property addItemDetails
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property creditNoteDetails (base name: "CreditNoteDetails")', function() {
      // uncomment below and update the code to test the property creditNoteDetails
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property lumpDiscountDetails (base name: "LumpDiscountDetails")', function() {
      // uncomment below and update the code to test the property lumpDiscountDetails
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property percentDiscountDetails (base name: "PercentDiscountDetails")', function() {
      // uncomment below and update the code to test the property percentDiscountDetails
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "Code")', function() {
      // uncomment below and update the code to test the property code
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property validOnOrdersOver (base name: "ValidOnOrdersOver")', function() {
      // uncomment below and update the code to test the property validOnOrdersOver
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property takesPriority (base name: "TakesPriority")', function() {
      // uncomment below and update the code to test the property takesPriority
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property isEnabled (base name: "IsEnabled")', function() {
      // uncomment below and update the code to test the property isEnabled
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property isAutomaticallyApplied (base name: "IsAutomaticallyApplied")', function() {
      // uncomment below and update the code to test the property isAutomaticallyApplied
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property includeDeliveryFee (base name: "IncludeDeliveryFee")', function() {
      // uncomment below and update the code to test the property includeDeliveryFee
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property isValidForDeliveryOrders (base name: "IsValidForDeliveryOrders")', function() {
      // uncomment below and update the code to test the property isValidForDeliveryOrders
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property isValidForPickupOrders (base name: "IsValidForPickupOrders")', function() {
      // uncomment below and update the code to test the property isValidForPickupOrders
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property isValidForOrdersPayedOnline (base name: "IsValidForOrdersPayedOnline")', function() {
      // uncomment below and update the code to test the property isValidForOrdersPayedOnline
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property isValidForOrdersPayedByCash (base name: "IsValidForOrdersPayedByCash")', function() {
      // uncomment below and update the code to test the property isValidForOrdersPayedByCash
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property isValidForFirstOrderOnly (base name: "IsValidForFirstOrderOnly")', function() {
      // uncomment below and update the code to test the property isValidForFirstOrderOnly
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property isValidOncePerCustomer (base name: "IsValidOncePerCustomer")', function() {
      // uncomment below and update the code to test the property isValidOncePerCustomer
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property isValidOnlyOnce (base name: "IsValidOnlyOnce")', function() {
      // uncomment below and update the code to test the property isValidOnlyOnce
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "StartDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property expiryDate (base name: "ExpiryDate")', function() {
      // uncomment below and update the code to test the property expiryDate
      //var instane = new FlipdishOpenApiV10.VoucherWithStats();
      //expect(instance).to.be();
    });

  });

}));
