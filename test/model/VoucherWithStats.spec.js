/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.VoucherWithStats();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VoucherWithStats', function() {
    it('should create an instance of VoucherWithStats', function() {
      // uncomment below and update the code to test VoucherWithStats
      //var instane = new Flipdish.VoucherWithStats();
      //expect(instance).to.be.a(Flipdish.VoucherWithStats);
    });

    it('should have the property TotalUsed (base name: "TotalUsed")', function() {
      // uncomment below and update the code to test the property TotalUsed
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property TotalCustomers (base name: "TotalCustomers")', function() {
      // uncomment below and update the code to test the property TotalCustomers
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property TotalAmountFromOrders (base name: "TotalAmountFromOrders")', function() {
      // uncomment below and update the code to test the property TotalAmountFromOrders
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property TotalDiscounted (base name: "TotalDiscounted")', function() {
      // uncomment below and update the code to test the property TotalDiscounted
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property AverageOrderSize (base name: "AverageOrderSize")', function() {
      // uncomment below and update the code to test the property AverageOrderSize
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property VoucherId (base name: "VoucherId")', function() {
      // uncomment below and update the code to test the property VoucherId
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property Status (base name: "Status")', function() {
      // uncomment below and update the code to test the property Status
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property VoucherType (base name: "VoucherType")', function() {
      // uncomment below and update the code to test the property VoucherType
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property Currency (base name: "Currency")', function() {
      // uncomment below and update the code to test the property Currency
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property StoreNames (base name: "StoreNames")', function() {
      // uncomment below and update the code to test the property StoreNames
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property PromotionDetails (base name: "PromotionDetails")', function() {
      // uncomment below and update the code to test the property PromotionDetails
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property CreditNoteDetails (base name: "CreditNoteDetails")', function() {
      // uncomment below and update the code to test the property CreditNoteDetails
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property LumpDiscountDetails (base name: "LumpDiscountDetails")', function() {
      // uncomment below and update the code to test the property LumpDiscountDetails
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property PercentDiscountDetails (base name: "PercentDiscountDetails")', function() {
      // uncomment below and update the code to test the property PercentDiscountDetails
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property Code (base name: "Code")', function() {
      // uncomment below and update the code to test the property Code
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property Description (base name: "Description")', function() {
      // uncomment below and update the code to test the property Description
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property Stores (base name: "Stores")', function() {
      // uncomment below and update the code to test the property Stores
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property ValidOnOrdersOver (base name: "ValidOnOrdersOver")', function() {
      // uncomment below and update the code to test the property ValidOnOrdersOver
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property TakesPriority (base name: "TakesPriority")', function() {
      // uncomment below and update the code to test the property TakesPriority
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsEnabled (base name: "IsEnabled")', function() {
      // uncomment below and update the code to test the property IsEnabled
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsAutomaticallyApplied (base name: "IsAutomaticallyApplied")', function() {
      // uncomment below and update the code to test the property IsAutomaticallyApplied
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IncludeDeliveryFee (base name: "IncludeDeliveryFee")', function() {
      // uncomment below and update the code to test the property IncludeDeliveryFee
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsValidForDeliveryOrders (base name: "IsValidForDeliveryOrders")', function() {
      // uncomment below and update the code to test the property IsValidForDeliveryOrders
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsValidForPickupOrders (base name: "IsValidForPickupOrders")', function() {
      // uncomment below and update the code to test the property IsValidForPickupOrders
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsValidForOrdersPayedOnline (base name: "IsValidForOrdersPayedOnline")', function() {
      // uncomment below and update the code to test the property IsValidForOrdersPayedOnline
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsValidForOrdersPayedByCash (base name: "IsValidForOrdersPayedByCash")', function() {
      // uncomment below and update the code to test the property IsValidForOrdersPayedByCash
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsValidForFirstOrderOnly (base name: "IsValidForFirstOrderOnly")', function() {
      // uncomment below and update the code to test the property IsValidForFirstOrderOnly
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsValidOncePerCustomer (base name: "IsValidOncePerCustomer")', function() {
      // uncomment below and update the code to test the property IsValidOncePerCustomer
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsValidOnlyOnce (base name: "IsValidOnlyOnce")', function() {
      // uncomment below and update the code to test the property IsValidOnlyOnce
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property IsDiscoverable (base name: "IsDiscoverable")', function() {
      // uncomment below and update the code to test the property IsDiscoverable
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property ForceDiscount (base name: "ForceDiscount")', function() {
      // uncomment below and update the code to test the property ForceDiscount
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property StartDate (base name: "StartDate")', function() {
      // uncomment below and update the code to test the property StartDate
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property ExpiryDate (base name: "ExpiryDate")', function() {
      // uncomment below and update the code to test the property ExpiryDate
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property ChannelRestrictions (base name: "ChannelRestrictions")', function() {
      // uncomment below and update the code to test the property ChannelRestrictions
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property ValidityPeriods (base name: "ValidityPeriods")', function() {
      // uncomment below and update the code to test the property ValidityPeriods
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property VoucherSubType (base name: "VoucherSubType")', function() {
      // uncomment below and update the code to test the property VoucherSubType
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property CustomerId (base name: "CustomerId")', function() {
      // uncomment below and update the code to test the property CustomerId
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

    it('should have the property MaxRedemptions (base name: "MaxRedemptions")', function() {
      // uncomment below and update the code to test the property MaxRedemptions
      //var instance = new Flipdish.VoucherWithStats();
      //expect(instance).to.be();
    });

  });

}));
