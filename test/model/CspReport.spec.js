/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CspReport', function() {
      beforeEach(function() {
        instance = new Flipdish.CspReport();
      });

      it('should create an instance of CspReport', function() {
        // TODO: update the code to test CspReport
        expect(instance).to.be.a(Flipdish.CspReport);
      });

      it('should have the property Document_uri (base name: "Document-uri")', function() {
        // TODO: update the code to test the property Document_uri
        expect(instance).to.have.property('Document_uri');
        // expect(instance.Document_uri).to.be(expectedValueLiteral);
      });

      it('should have the property Referrer (base name: "Referrer")', function() {
        // TODO: update the code to test the property Referrer
        expect(instance).to.have.property('Referrer');
        // expect(instance.Referrer).to.be(expectedValueLiteral);
      });

      it('should have the property Violated_directive (base name: "Violated-directive")', function() {
        // TODO: update the code to test the property Violated_directive
        expect(instance).to.have.property('Violated_directive');
        // expect(instance.Violated_directive).to.be(expectedValueLiteral);
      });

      it('should have the property Effective_directive (base name: "Effective-directive")', function() {
        // TODO: update the code to test the property Effective_directive
        expect(instance).to.have.property('Effective_directive');
        // expect(instance.Effective_directive).to.be(expectedValueLiteral);
      });

      it('should have the property Original_policy (base name: "Original-policy")', function() {
        // TODO: update the code to test the property Original_policy
        expect(instance).to.have.property('Original_policy');
        // expect(instance.Original_policy).to.be(expectedValueLiteral);
      });

      it('should have the property Blocked_uri (base name: "Blocked-uri")', function() {
        // TODO: update the code to test the property Blocked_uri
        expect(instance).to.have.property('Blocked_uri');
        // expect(instance.Blocked_uri).to.be(expectedValueLiteral);
      });

      it('should have the property Status_code (base name: "Status-code")', function() {
        // TODO: update the code to test the property Status_code
        expect(instance).to.have.property('Status_code');
        // expect(instance.Status_code).to.be(expectedValueLiteral);
      });

    });
  });

}));
