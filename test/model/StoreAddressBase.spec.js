/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('StoreAddressBase', function() {
      beforeEach(function() {
        instance = new Flipdish.StoreAddressBase();
      });

      it('should create an instance of StoreAddressBase', function() {
        // TODO: update the code to test StoreAddressBase
        expect(instance).to.be.a(Flipdish.StoreAddressBase);
      });

      it('should have the property Line1 (base name: "Line1")', function() {
        // TODO: update the code to test the property Line1
        expect(instance).to.have.property('Line1');
        // expect(instance.Line1).to.be(expectedValueLiteral);
      });

      it('should have the property Postcode (base name: "Postcode")', function() {
        // TODO: update the code to test the property Postcode
        expect(instance).to.have.property('Postcode');
        // expect(instance.Postcode).to.be(expectedValueLiteral);
      });

      it('should have the property City (base name: "City")', function() {
        // TODO: update the code to test the property City
        expect(instance).to.have.property('City');
        // expect(instance.City).to.be(expectedValueLiteral);
      });

      it('should have the property CountryCode (base name: "CountryCode")', function() {
        // TODO: update the code to test the property CountryCode
        expect(instance).to.have.property('CountryCode');
        // expect(instance.CountryCode).to.be(expectedValueLiteral);
      });

      it('should have the property DisplayForCustomer (base name: "DisplayForCustomer")', function() {
        // TODO: update the code to test the property DisplayForCustomer
        expect(instance).to.have.property('DisplayForCustomer');
        // expect(instance.DisplayForCustomer).to.be(expectedValueLiteral);
      });

      it('should have the property AddressFields (base name: "AddressFields")', function() {
        // TODO: update the code to test the property AddressFields
        expect(instance).to.have.property('AddressFields');
        // expect(instance.AddressFields).to.be(expectedValueLiteral);
      });

      it('should have the property SingleLineDisplay (base name: "SingleLineDisplay")', function() {
        // TODO: update the code to test the property SingleLineDisplay
        expect(instance).to.have.property('SingleLineDisplay');
        // expect(instance.SingleLineDisplay).to.be(expectedValueLiteral);
      });

      it('should have the property TwoLinesDisplay (base name: "TwoLinesDisplay")', function() {
        // TODO: update the code to test the property TwoLinesDisplay
        expect(instance).to.have.property('TwoLinesDisplay');
        // expect(instance.TwoLinesDisplay).to.be(expectedValueLiteral);
      });

    });
  });

}));
