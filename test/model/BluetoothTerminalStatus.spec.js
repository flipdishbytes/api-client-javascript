/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BluetoothTerminalStatus', function() {
      beforeEach(function() {
        instance = new Flipdish.BluetoothTerminalStatus();
      });

      it('should create an instance of BluetoothTerminalStatus', function() {
        // TODO: update the code to test BluetoothTerminalStatus
        expect(instance).to.be.a(Flipdish.BluetoothTerminalStatus);
      });

      it('should have the property SerialNumber (base name: "SerialNumber")', function() {
        // TODO: update the code to test the property SerialNumber
        expect(instance).to.have.property('SerialNumber');
        // expect(instance.SerialNumber).to.be(expectedValueLiteral);
      });

      it('should have the property SoftwareVersion (base name: "SoftwareVersion")', function() {
        // TODO: update the code to test the property SoftwareVersion
        expect(instance).to.have.property('SoftwareVersion');
        // expect(instance.SoftwareVersion).to.be(expectedValueLiteral);
      });

      it('should have the property DeviceType (base name: "DeviceType")', function() {
        // TODO: update the code to test the property DeviceType
        expect(instance).to.have.property('DeviceType');
        // expect(instance.DeviceType).to.be(expectedValueLiteral);
      });

      it('should have the property Status (base name: "Status")', function() {
        // TODO: update the code to test the property Status
        expect(instance).to.have.property('Status');
        // expect(instance.Status).to.be(expectedValueLiteral);
      });

      it('should have the property BatteryLevel (base name: "BatteryLevel")', function() {
        // TODO: update the code to test the property BatteryLevel
        expect(instance).to.have.property('BatteryLevel');
        // expect(instance.BatteryLevel).to.be(expectedValueLiteral);
      });

      it('should have the property UpdateTime (base name: "UpdateTime")', function() {
        // TODO: update the code to test the property UpdateTime
        expect(instance).to.have.property('UpdateTime');
        // expect(instance.UpdateTime).to.be(expectedValueLiteral);
      });

      it('should have the property ReaderId (base name: "ReaderId")', function() {
        // TODO: update the code to test the property ReaderId
        expect(instance).to.have.property('ReaderId');
        // expect(instance.ReaderId).to.be(expectedValueLiteral);
      });

    });
  });

}));
