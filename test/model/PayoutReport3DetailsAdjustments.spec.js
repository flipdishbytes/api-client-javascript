/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PayoutReport3DetailsAdjustments', function() {
      beforeEach(function() {
        instance = new Flipdish.PayoutReport3DetailsAdjustments();
      });

      it('should create an instance of PayoutReport3DetailsAdjustments', function() {
        // TODO: update the code to test PayoutReport3DetailsAdjustments
        expect(instance).to.be.a(Flipdish.PayoutReport3DetailsAdjustments);
      });

      it('should have the property OpeningBalanceDate (base name: "OpeningBalanceDate")', function() {
        // TODO: update the code to test the property OpeningBalanceDate
        expect(instance).to.have.property('OpeningBalanceDate');
        // expect(instance.OpeningBalanceDate).to.be(expectedValueLiteral);
      });

      it('should have the property ClosingBalanceDate (base name: "ClosingBalanceDate")', function() {
        // TODO: update the code to test the property ClosingBalanceDate
        expect(instance).to.have.property('ClosingBalanceDate');
        // expect(instance.ClosingBalanceDate).to.be(expectedValueLiteral);
      });

      it('should have the property OpeningBalance (base name: "OpeningBalance")', function() {
        // TODO: update the code to test the property OpeningBalance
        expect(instance).to.have.property('OpeningBalance');
        // expect(instance.OpeningBalance).to.be(expectedValueLiteral);
      });

      it('should have the property RefundsOnCardOrders (base name: "RefundsOnCardOrders")', function() {
        // TODO: update the code to test the property RefundsOnCardOrders
        expect(instance).to.have.property('RefundsOnCardOrders');
        // expect(instance.RefundsOnCardOrders).to.be(expectedValueLiteral);
      });

      it('should have the property RefundsOnCashOrders (base name: "RefundsOnCashOrders")', function() {
        // TODO: update the code to test the property RefundsOnCashOrders
        expect(instance).to.have.property('RefundsOnCashOrders');
        // expect(instance.RefundsOnCashOrders).to.be(expectedValueLiteral);
      });

      it('should have the property CashCustomerFees (base name: "CashCustomerFees")', function() {
        // TODO: update the code to test the property CashCustomerFees
        expect(instance).to.have.property('CashCustomerFees');
        // expect(instance.CashCustomerFees).to.be(expectedValueLiteral);
      });

      it('should have the property Chargebacks (base name: "Chargebacks")', function() {
        // TODO: update the code to test the property Chargebacks
        expect(instance).to.have.property('Chargebacks');
        // expect(instance.Chargebacks).to.be(expectedValueLiteral);
      });

      it('should have the property OtherTransactions (base name: "OtherTransactions")', function() {
        // TODO: update the code to test the property OtherTransactions
        expect(instance).to.have.property('OtherTransactions');
        // expect(instance.OtherTransactions).to.be(expectedValueLiteral);
      });

      it('should have the property ClosingBalance (base name: "ClosingBalance")', function() {
        // TODO: update the code to test the property ClosingBalance
        expect(instance).to.have.property('ClosingBalance');
        // expect(instance.ClosingBalance).to.be(expectedValueLiteral);
      });

      it('should have the property OpeningBalanceCredit (base name: "OpeningBalanceCredit")', function() {
        // TODO: update the code to test the property OpeningBalanceCredit
        expect(instance).to.have.property('OpeningBalanceCredit');
        // expect(instance.OpeningBalanceCredit).to.be(expectedValueLiteral);
      });

      it('should have the property OpeningBalanceDebit (base name: "OpeningBalanceDebit")', function() {
        // TODO: update the code to test the property OpeningBalanceDebit
        expect(instance).to.have.property('OpeningBalanceDebit');
        // expect(instance.OpeningBalanceDebit).to.be(expectedValueLiteral);
      });

      it('should have the property RefundsOnCardOrdersCredit (base name: "RefundsOnCardOrdersCredit")', function() {
        // TODO: update the code to test the property RefundsOnCardOrdersCredit
        expect(instance).to.have.property('RefundsOnCardOrdersCredit');
        // expect(instance.RefundsOnCardOrdersCredit).to.be(expectedValueLiteral);
      });

      it('should have the property RefundsOnCardOrdersDebit (base name: "RefundsOnCardOrdersDebit")', function() {
        // TODO: update the code to test the property RefundsOnCardOrdersDebit
        expect(instance).to.have.property('RefundsOnCardOrdersDebit');
        // expect(instance.RefundsOnCardOrdersDebit).to.be(expectedValueLiteral);
      });

      it('should have the property RefundsOnCashOrdersCredit (base name: "RefundsOnCashOrdersCredit")', function() {
        // TODO: update the code to test the property RefundsOnCashOrdersCredit
        expect(instance).to.have.property('RefundsOnCashOrdersCredit');
        // expect(instance.RefundsOnCashOrdersCredit).to.be(expectedValueLiteral);
      });

      it('should have the property RefundsOnCashOrdersDebit (base name: "RefundsOnCashOrdersDebit")', function() {
        // TODO: update the code to test the property RefundsOnCashOrdersDebit
        expect(instance).to.have.property('RefundsOnCashOrdersDebit');
        // expect(instance.RefundsOnCashOrdersDebit).to.be(expectedValueLiteral);
      });

      it('should have the property CashCustomerFeesCredit (base name: "CashCustomerFeesCredit")', function() {
        // TODO: update the code to test the property CashCustomerFeesCredit
        expect(instance).to.have.property('CashCustomerFeesCredit');
        // expect(instance.CashCustomerFeesCredit).to.be(expectedValueLiteral);
      });

      it('should have the property CashCustomerFeesDebit (base name: "CashCustomerFeesDebit")', function() {
        // TODO: update the code to test the property CashCustomerFeesDebit
        expect(instance).to.have.property('CashCustomerFeesDebit');
        // expect(instance.CashCustomerFeesDebit).to.be(expectedValueLiteral);
      });

      it('should have the property ChargebacksCredit (base name: "ChargebacksCredit")', function() {
        // TODO: update the code to test the property ChargebacksCredit
        expect(instance).to.have.property('ChargebacksCredit');
        // expect(instance.ChargebacksCredit).to.be(expectedValueLiteral);
      });

      it('should have the property ChargebacksDebit (base name: "ChargebacksDebit")', function() {
        // TODO: update the code to test the property ChargebacksDebit
        expect(instance).to.have.property('ChargebacksDebit');
        // expect(instance.ChargebacksDebit).to.be(expectedValueLiteral);
      });

      it('should have the property OtherTransactionsCredit (base name: "OtherTransactionsCredit")', function() {
        // TODO: update the code to test the property OtherTransactionsCredit
        expect(instance).to.have.property('OtherTransactionsCredit');
        // expect(instance.OtherTransactionsCredit).to.be(expectedValueLiteral);
      });

      it('should have the property OtherTransactionsDebit (base name: "OtherTransactionsDebit")', function() {
        // TODO: update the code to test the property OtherTransactionsDebit
        expect(instance).to.have.property('OtherTransactionsDebit');
        // expect(instance.OtherTransactionsDebit).to.be(expectedValueLiteral);
      });

      it('should have the property ClosingBalanceCredit (base name: "ClosingBalanceCredit")', function() {
        // TODO: update the code to test the property ClosingBalanceCredit
        expect(instance).to.have.property('ClosingBalanceCredit');
        // expect(instance.ClosingBalanceCredit).to.be(expectedValueLiteral);
      });

      it('should have the property ClosingBalanceDebit (base name: "ClosingBalanceDebit")', function() {
        // TODO: update the code to test the property ClosingBalanceDebit
        expect(instance).to.have.property('ClosingBalanceDebit');
        // expect(instance.ClosingBalanceDebit).to.be(expectedValueLiteral);
      });

    });
  });

}));
