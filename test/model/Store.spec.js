/**
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.Store();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Store', function() {
    it('should create an instance of Store', function() {
      // uncomment below and update the code to test Store
      //var instane = new Flipdish.Store();
      //expect(instance).to.be.a(Flipdish.Store);
    });

    it('should have the property storeId (base name: "StoreId")', function() {
      // uncomment below and update the code to test the property storeId
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property apmPhoneNumber (base name: "ApmPhoneNumber")', function() {
      // uncomment below and update the code to test the property apmPhoneNumber
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "PhoneNumber")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property emailAddress (base name: "EmailAddress")', function() {
      // uncomment below and update the code to test the property emailAddress
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "Address")', function() {
      // uncomment below and update the code to test the property address
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property preOrderEnabled (base name: "PreOrderEnabled")', function() {
      // uncomment below and update the code to test the property preOrderEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property takeOutEnabled (base name: "TakeOutEnabled")', function() {
      // uncomment below and update the code to test the property takeOutEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property tableServiceEnabled (base name: "TableServiceEnabled")', function() {
      // uncomment below and update the code to test the property tableServiceEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property dineInEnabled (base name: "DineInEnabled")', function() {
      // uncomment below and update the code to test the property dineInEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property allowPreOrdersAndTableService (base name: "AllowPreOrdersAndTableService")', function() {
      // uncomment below and update the code to test the property allowPreOrdersAndTableService
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property pickupEnabled (base name: "PickupEnabled")', function() {
      // uncomment below and update the code to test the property pickupEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property deliveryEnabled (base name: "DeliveryEnabled")', function() {
      // uncomment below and update the code to test the property deliveryEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property cardOrderDeliveryEnabled (base name: "CardOrderDeliveryEnabled")', function() {
      // uncomment below and update the code to test the property cardOrderDeliveryEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property cashOrdersDeliveryEnabled (base name: "CashOrdersDeliveryEnabled")', function() {
      // uncomment below and update the code to test the property cashOrdersDeliveryEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property cardOrdersPickupEnabled (base name: "CardOrdersPickupEnabled")', function() {
      // uncomment below and update the code to test the property cardOrdersPickupEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property cashOrdersPickupEnabled (base name: "CashOrdersPickupEnabled")', function() {
      // uncomment below and update the code to test the property cashOrdersPickupEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property tipsEnabled (base name: "TipsEnabled")', function() {
      // uncomment below and update the code to test the property tipsEnabled
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property automaticallyAcceptOrders (base name: "AutomaticallyAcceptOrders")', function() {
      // uncomment below and update the code to test the property automaticallyAcceptOrders
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property openForDelivery (base name: "OpenForDelivery")', function() {
      // uncomment below and update the code to test the property openForDelivery
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property openForPickup (base name: "OpenForPickup")', function() {
      // uncomment below and update the code to test the property openForPickup
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property minimumPickupOrderAmount (base name: "MinimumPickupOrderAmount")', function() {
      // uncomment below and update the code to test the property minimumPickupOrderAmount
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property deliveryFeeAreas (base name: "DeliveryFeeAreas")', function() {
      // uncomment below and update the code to test the property deliveryFeeAreas
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property requireCustomerNameForPickup (base name: "RequireCustomerNameForPickup")', function() {
      // uncomment below and update the code to test the property requireCustomerNameForPickup
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property requireCustomerNameForDelivery (base name: "RequireCustomerNameForDelivery")', function() {
      // uncomment below and update the code to test the property requireCustomerNameForDelivery
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property pickupHours (base name: "PickupHours")', function() {
      // uncomment below and update the code to test the property pickupHours
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property deliveryHours (base name: "DeliveryHours")', function() {
      // uncomment below and update the code to test the property deliveryHours
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property microsoftTimeZone (base name: "MicrosoftTimeZone")', function() {
      // uncomment below and update the code to test the property microsoftTimeZone
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property ianaTimeZone (base name: "IanaTimeZone")', function() {
      // uncomment below and update the code to test the property ianaTimeZone
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property menuId (base name: "MenuId")', function() {
      // uncomment below and update the code to test the property menuId
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property orderConfirmationMessageOverrideDelivery (base name: "OrderConfirmationMessageOverrideDelivery")', function() {
      // uncomment below and update the code to test the property orderConfirmationMessageOverrideDelivery
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property orderConfirmationMessageOverridePickup (base name: "OrderConfirmationMessageOverridePickup")', function() {
      // uncomment below and update the code to test the property orderConfirmationMessageOverridePickup
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property printoutLayoutType (base name: "PrintoutLayoutType")', function() {
      // uncomment below and update the code to test the property printoutLayoutType
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

    it('should have the property storeNotes (base name: "StoreNotes")', function() {
      // uncomment below and update the code to test the property storeNotes
      //var instane = new Flipdish.Store();
      //expect(instance).to.be();
    });

  });

}));
