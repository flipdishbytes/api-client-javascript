/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderIngestSubmitOrderRequest', function() {
      beforeEach(function() {
        instance = new Flipdish.OrderIngestSubmitOrderRequest();
      });

      it('should create an instance of OrderIngestSubmitOrderRequest', function() {
        // TODO: update the code to test OrderIngestSubmitOrderRequest
        expect(instance).to.be.a(Flipdish.OrderIngestSubmitOrderRequest);
      });

      it('should have the property AppType (base name: "AppType")', function() {
        // TODO: update the code to test the property AppType
        expect(instance).to.have.property('AppType');
        // expect(instance.AppType).to.be(expectedValueLiteral);
      });

      it('should have the property StoreId (base name: "StoreId")', function() {
        // TODO: update the code to test the property StoreId
        expect(instance).to.have.property('StoreId');
        // expect(instance.StoreId).to.be(expectedValueLiteral);
      });

      it('should have the property CurrencyCode (base name: "CurrencyCode")', function() {
        // TODO: update the code to test the property CurrencyCode
        expect(instance).to.have.property('CurrencyCode');
        // expect(instance.CurrencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property Cart (base name: "Cart")', function() {
        // TODO: update the code to test the property Cart
        expect(instance).to.have.property('Cart');
        // expect(instance.Cart).to.be(expectedValueLiteral);
      });

      it('should have the property FulfillmentInfo (base name: "FulfillmentInfo")', function() {
        // TODO: update the code to test the property FulfillmentInfo
        expect(instance).to.have.property('FulfillmentInfo');
        // expect(instance.FulfillmentInfo).to.be(expectedValueLiteral);
      });

      it('should have the property ChannelOrderId (base name: "ChannelOrderId")', function() {
        // TODO: update the code to test the property ChannelOrderId
        expect(instance).to.have.property('ChannelOrderId');
        // expect(instance.ChannelOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property ChannelPublicOrderId (base name: "ChannelPublicOrderId")', function() {
        // TODO: update the code to test the property ChannelPublicOrderId
        expect(instance).to.have.property('ChannelPublicOrderId');
        // expect(instance.ChannelPublicOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property OrderDateUtc (base name: "OrderDateUtc")', function() {
        // TODO: update the code to test the property OrderDateUtc
        expect(instance).to.have.property('OrderDateUtc');
        // expect(instance.OrderDateUtc).to.be(expectedValueLiteral);
      });

      it('should have the property PaymentInfo (base name: "PaymentInfo")', function() {
        // TODO: update the code to test the property PaymentInfo
        expect(instance).to.have.property('PaymentInfo');
        // expect(instance.PaymentInfo).to.be(expectedValueLiteral);
      });

      it('should have the property Contact (base name: "Contact")', function() {
        // TODO: update the code to test the property Contact
        expect(instance).to.have.property('Contact');
        // expect(instance.Contact).to.be(expectedValueLiteral);
      });

      it('should have the property TipAmount (base name: "TipAmount")', function() {
        // TODO: update the code to test the property TipAmount
        expect(instance).to.have.property('TipAmount');
        // expect(instance.TipAmount).to.be(expectedValueLiteral);
      });

    });
  });

}));
