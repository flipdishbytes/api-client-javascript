/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('LineItem', function() {
      beforeEach(function() {
        instance = new Flipdish.LineItem();
      });

      it('should create an instance of LineItem', function() {
        // TODO: update the code to test LineItem
        expect(instance).to.be.a(Flipdish.LineItem);
      });

      it('should have the property Id (base name: "Id")', function() {
        // TODO: update the code to test the property Id
        expect(instance).to.have.property('Id');
        // expect(instance.Id).to.be(expectedValueLiteral);
      });

      it('should have the property Name (base name: "Name")', function() {
        // TODO: update the code to test the property Name
        expect(instance).to.have.property('Name');
        // expect(instance.Name).to.be(expectedValueLiteral);
      });

      it('should have the property SectionName (base name: "SectionName")', function() {
        // TODO: update the code to test the property SectionName
        expect(instance).to.have.property('SectionName');
        // expect(instance.SectionName).to.be(expectedValueLiteral);
      });

      it('should have the property ExternalId (base name: "ExternalId")', function() {
        // TODO: update the code to test the property ExternalId
        expect(instance).to.have.property('ExternalId');
        // expect(instance.ExternalId).to.be(expectedValueLiteral);
      });

      it('should have the property Quantity (base name: "Quantity")', function() {
        // TODO: update the code to test the property Quantity
        expect(instance).to.have.property('Quantity');
        // expect(instance.Quantity).to.be(expectedValueLiteral);
      });

      it('should have the property Price (base name: "Price")', function() {
        // TODO: update the code to test the property Price
        expect(instance).to.have.property('Price');
        // expect(instance.Price).to.be(expectedValueLiteral);
      });

      it('should have the property Notes (base name: "Notes")', function() {
        // TODO: update the code to test the property Notes
        expect(instance).to.have.property('Notes');
        // expect(instance.Notes).to.be(expectedValueLiteral);
      });

      it('should have the property Options (base name: "Options")', function() {
        // TODO: update the code to test the property Options
        expect(instance).to.have.property('Options');
        // expect(instance.Options).to.be(expectedValueLiteral);
      });

      it('should have the property Metadata (base name: "Metadata")', function() {
        // TODO: update the code to test the property Metadata
        expect(instance).to.have.property('Metadata');
        // expect(instance.Metadata).to.be(expectedValueLiteral);
      });

    });
  });

}));
