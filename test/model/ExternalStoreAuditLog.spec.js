/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ExternalStoreAuditLog', function() {
      beforeEach(function() {
        instance = new Flipdish.ExternalStoreAuditLog();
      });

      it('should create an instance of ExternalStoreAuditLog', function() {
        // TODO: update the code to test ExternalStoreAuditLog
        expect(instance).to.be.a(Flipdish.ExternalStoreAuditLog);
      });

      it('should have the property ExternalCreateTime (base name: "ExternalCreateTime")', function() {
        // TODO: update the code to test the property ExternalCreateTime
        expect(instance).to.have.property('ExternalCreateTime');
        // expect(instance.ExternalCreateTime).to.be(expectedValueLiteral);
      });

      it('should have the property StoreId (base name: "StoreId")', function() {
        // TODO: update the code to test the property StoreId
        expect(instance).to.have.property('StoreId');
        // expect(instance.StoreId).to.be(expectedValueLiteral);
      });

      it('should have the property Description (base name: "Description")', function() {
        // TODO: update the code to test the property Description
        expect(instance).to.have.property('Description');
        // expect(instance.Description).to.be(expectedValueLiteral);
      });

      it('should have the property Source (base name: "Source")', function() {
        // TODO: update the code to test the property Source
        expect(instance).to.have.property('Source');
        // expect(instance.Source).to.be(expectedValueLiteral);
      });

      it('should have the property Version (base name: "Version")', function() {
        // TODO: update the code to test the property Version
        expect(instance).to.have.property('Version');
        // expect(instance.Version).to.be(expectedValueLiteral);
      });

      it('should have the property DescriptionFormat (base name: "DescriptionFormat")', function() {
        // TODO: update the code to test the property DescriptionFormat
        expect(instance).to.have.property('DescriptionFormat');
        // expect(instance.DescriptionFormat).to.be(expectedValueLiteral);
      });

      it('should have the property DescriptionFields (base name: "DescriptionFields")', function() {
        // TODO: update the code to test the property DescriptionFields
        expect(instance).to.have.property('DescriptionFields');
        // expect(instance.DescriptionFields).to.be(expectedValueLiteral);
      });

      it('should have the property DescriptionId (base name: "DescriptionId")', function() {
        // TODO: update the code to test the property DescriptionId
        expect(instance).to.have.property('DescriptionId');
        // expect(instance.DescriptionId).to.be(expectedValueLiteral);
      });

      it('should have the property Ref1 (base name: "Ref1")', function() {
        // TODO: update the code to test the property Ref1
        expect(instance).to.have.property('Ref1');
        // expect(instance.Ref1).to.be(expectedValueLiteral);
      });

      it('should have the property Ref2 (base name: "Ref2")', function() {
        // TODO: update the code to test the property Ref2
        expect(instance).to.have.property('Ref2');
        // expect(instance.Ref2).to.be(expectedValueLiteral);
      });

      it('should have the property Ref3 (base name: "Ref3")', function() {
        // TODO: update the code to test the property Ref3
        expect(instance).to.have.property('Ref3');
        // expect(instance.Ref3).to.be(expectedValueLiteral);
      });

      it('should have the property Ref4 (base name: "Ref4")', function() {
        // TODO: update the code to test the property Ref4
        expect(instance).to.have.property('Ref4');
        // expect(instance.Ref4).to.be(expectedValueLiteral);
      });

      it('should have the property OrderId (base name: "OrderId")', function() {
        // TODO: update the code to test the property OrderId
        expect(instance).to.have.property('OrderId');
        // expect(instance.OrderId).to.be(expectedValueLiteral);
      });

      it('should have the property Tags (base name: "Tags")', function() {
        // TODO: update the code to test the property Tags
        expect(instance).to.have.property('Tags');
        // expect(instance.Tags).to.be(expectedValueLiteral);
      });

      it('should have the property FieldChanges (base name: "FieldChanges")', function() {
        // TODO: update the code to test the property FieldChanges
        expect(instance).to.have.property('FieldChanges');
        // expect(instance.FieldChanges).to.be(expectedValueLiteral);
      });

    });
  });

}));
