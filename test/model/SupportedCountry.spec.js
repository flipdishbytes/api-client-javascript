/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SupportedCountry', function() {
      beforeEach(function() {
        instance = new Flipdish.SupportedCountry();
      });

      it('should create an instance of SupportedCountry', function() {
        // TODO: update the code to test SupportedCountry
        expect(instance).to.be.a(Flipdish.SupportedCountry);
      });

      it('should have the property CountryCode (base name: "CountryCode")', function() {
        // TODO: update the code to test the property CountryCode
        expect(instance).to.have.property('CountryCode');
        // expect(instance.CountryCode).to.be(expectedValueLiteral);
      });

      it('should have the property Name (base name: "Name")', function() {
        // TODO: update the code to test the property Name
        expect(instance).to.have.property('Name');
        // expect(instance.Name).to.be(expectedValueLiteral);
      });

      it('should have the property PhoneCode (base name: "PhoneCode")', function() {
        // TODO: update the code to test the property PhoneCode
        expect(instance).to.have.property('PhoneCode');
        // expect(instance.PhoneCode).to.be(expectedValueLiteral);
      });

      it('should have the property LanguageCode (base name: "LanguageCode")', function() {
        // TODO: update the code to test the property LanguageCode
        expect(instance).to.have.property('LanguageCode');
        // expect(instance.LanguageCode).to.be(expectedValueLiteral);
      });

      it('should have the property LanguageName (base name: "LanguageName")', function() {
        // TODO: update the code to test the property LanguageName
        expect(instance).to.have.property('LanguageName');
        // expect(instance.LanguageName).to.be(expectedValueLiteral);
      });

      it('should have the property OtpNumber (base name: "OtpNumber")', function() {
        // TODO: update the code to test the property OtpNumber
        expect(instance).to.have.property('OtpNumber');
        // expect(instance.OtpNumber).to.be(expectedValueLiteral);
      });

      it('should have the property SupportNumber (base name: "SupportNumber")', function() {
        // TODO: update the code to test the property SupportNumber
        expect(instance).to.have.property('SupportNumber');
        // expect(instance.SupportNumber).to.be(expectedValueLiteral);
      });

      it('should have the property AddressLayout (base name: "AddressLayout")', function() {
        // TODO: update the code to test the property AddressLayout
        expect(instance).to.have.property('AddressLayout');
        // expect(instance.AddressLayout).to.be(expectedValueLiteral);
      });

      it('should have the property PostCodeType (base name: "PostCodeType")', function() {
        // TODO: update the code to test the property PostCodeType
        expect(instance).to.have.property('PostCodeType');
        // expect(instance.PostCodeType).to.be(expectedValueLiteral);
      });

      it('should have the property SupportRegion (base name: "SupportRegion")', function() {
        // TODO: update the code to test the property SupportRegion
        expect(instance).to.have.property('SupportRegion');
        // expect(instance.SupportRegion).to.be(expectedValueLiteral);
      });

    });
  });

}));
