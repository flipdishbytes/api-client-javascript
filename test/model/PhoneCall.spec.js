/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PhoneCall', function() {
      beforeEach(function() {
        instance = new Flipdish.PhoneCall();
      });

      it('should create an instance of PhoneCall', function() {
        // TODO: update the code to test PhoneCall
        expect(instance).to.be.a(Flipdish.PhoneCall);
      });

      it('should have the property PhoneCallId (base name: "PhoneCallId")', function() {
        // TODO: update the code to test the property PhoneCallId
        expect(instance).to.have.property('PhoneCallId');
        // expect(instance.PhoneCallId).to.be(expectedValueLiteral);
      });

      it('should have the property TimeOfCall (base name: "TimeOfCall")', function() {
        // TODO: update the code to test the property TimeOfCall
        expect(instance).to.have.property('TimeOfCall');
        // expect(instance.TimeOfCall).to.be(expectedValueLiteral);
      });

      it('should have the property TimeOfCallLocal (base name: "TimeOfCallLocal")', function() {
        // TODO: update the code to test the property TimeOfCallLocal
        expect(instance).to.have.property('TimeOfCallLocal');
        // expect(instance.TimeOfCallLocal).to.be(expectedValueLiteral);
      });

      it('should have the property StoreId (base name: "StoreId")', function() {
        // TODO: update the code to test the property StoreId
        expect(instance).to.have.property('StoreId');
        // expect(instance.StoreId).to.be(expectedValueLiteral);
      });

      it('should have the property StoreName (base name: "StoreName")', function() {
        // TODO: update the code to test the property StoreName
        expect(instance).to.have.property('StoreName');
        // expect(instance.StoreName).to.be(expectedValueLiteral);
      });

      it('should have the property CallerName (base name: "CallerName")', function() {
        // TODO: update the code to test the property CallerName
        expect(instance).to.have.property('CallerName');
        // expect(instance.CallerName).to.be(expectedValueLiteral);
      });

      it('should have the property CallerUserId (base name: "CallerUserId")', function() {
        // TODO: update the code to test the property CallerUserId
        expect(instance).to.have.property('CallerUserId');
        // expect(instance.CallerUserId).to.be(expectedValueLiteral);
      });

      it('should have the property CallerNumber (base name: "CallerNumber")', function() {
        // TODO: update the code to test the property CallerNumber
        expect(instance).to.have.property('CallerNumber');
        // expect(instance.CallerNumber).to.be(expectedValueLiteral);
      });

      it('should have the property CallLengthInSeconds (base name: "CallLengthInSeconds")', function() {
        // TODO: update the code to test the property CallLengthInSeconds
        expect(instance).to.have.property('CallLengthInSeconds');
        // expect(instance.CallLengthInSeconds).to.be(expectedValueLiteral);
      });

      it('should have the property CallStatus (base name: "CallStatus")', function() {
        // TODO: update the code to test the property CallStatus
        expect(instance).to.have.property('CallStatus');
        // expect(instance.CallStatus).to.be(expectedValueLiteral);
      });

    });
  });

}));
