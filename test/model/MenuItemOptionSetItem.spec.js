/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MenuItemOptionSetItem', function() {
      beforeEach(function() {
        instance = new Flipdish.MenuItemOptionSetItem();
      });

      it('should create an instance of MenuItemOptionSetItem', function() {
        // TODO: update the code to test MenuItemOptionSetItem
        expect(instance).to.be.a(Flipdish.MenuItemOptionSetItem);
      });

      it('should have the property MenuItemOptionSetItemId (base name: "MenuItemOptionSetItemId")', function() {
        // TODO: update the code to test the property MenuItemOptionSetItemId
        expect(instance).to.have.property('MenuItemOptionSetItemId');
        // expect(instance.MenuItemOptionSetItemId).to.be(expectedValueLiteral);
      });

      it('should have the property PublicId (base name: "PublicId")', function() {
        // TODO: update the code to test the property PublicId
        expect(instance).to.have.property('PublicId');
        // expect(instance.PublicId).to.be(expectedValueLiteral);
      });

      it('should have the property Metadata (base name: "Metadata")', function() {
        // TODO: update the code to test the property Metadata
        expect(instance).to.have.property('Metadata');
        // expect(instance.Metadata).to.be(expectedValueLiteral);
      });

      it('should have the property NextMenuItemOptionSetId (base name: "NextMenuItemOptionSetId")', function() {
        // TODO: update the code to test the property NextMenuItemOptionSetId
        expect(instance).to.have.property('NextMenuItemOptionSetId');
        // expect(instance.NextMenuItemOptionSetId).to.be(expectedValueLiteral);
      });

      it('should have the property ProductId (base name: "ProductId")', function() {
        // TODO: update the code to test the property ProductId
        expect(instance).to.have.property('ProductId');
        // expect(instance.ProductId).to.be(expectedValueLiteral);
      });

      it('should have the property TaxRateName (base name: "TaxRateName")', function() {
        // TODO: update the code to test the property TaxRateName
        expect(instance).to.have.property('TaxRateName');
        // expect(instance.TaxRateName).to.be(expectedValueLiteral);
      });

      it('should have the property TaxRateId (base name: "TaxRateId")', function() {
        // TODO: update the code to test the property TaxRateId
        expect(instance).to.have.property('TaxRateId');
        // expect(instance.TaxRateId).to.be(expectedValueLiteral);
      });

      it('should have the property TaxValue (base name: "TaxValue")', function() {
        // TODO: update the code to test the property TaxValue
        expect(instance).to.have.property('TaxValue');
        // expect(instance.TaxValue).to.be(expectedValueLiteral);
      });

      it('should have the property Name (base name: "Name")', function() {
        // TODO: update the code to test the property Name
        expect(instance).to.have.property('Name');
        // expect(instance.Name).to.be(expectedValueLiteral);
      });

      it('should have the property Price (base name: "Price")', function() {
        // TODO: update the code to test the property Price
        expect(instance).to.have.property('Price');
        // expect(instance.Price).to.be(expectedValueLiteral);
      });

      it('should have the property IsAvailable (base name: "IsAvailable")', function() {
        // TODO: update the code to test the property IsAvailable
        expect(instance).to.have.property('IsAvailable');
        // expect(instance.IsAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property DisplayOrder (base name: "DisplayOrder")', function() {
        // TODO: update the code to test the property DisplayOrder
        expect(instance).to.have.property('DisplayOrder');
        // expect(instance.DisplayOrder).to.be(expectedValueLiteral);
      });

      it('should have the property CellLayoutType (base name: "CellLayoutType")', function() {
        // TODO: update the code to test the property CellLayoutType
        expect(instance).to.have.property('CellLayoutType');
        // expect(instance.CellLayoutType).to.be(expectedValueLiteral);
      });

      it('should have the property ImageUrl (base name: "ImageUrl")', function() {
        // TODO: update the code to test the property ImageUrl
        expect(instance).to.have.property('ImageUrl');
        // expect(instance.ImageUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
