/**
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.Voucher();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Voucher', function() {
    it('should create an instance of Voucher', function() {
      // uncomment below and update the code to test Voucher
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be.a(Flipdish.Voucher);
    });

    it('should have the property voucherId (base name: "VoucherId")', function() {
      // uncomment below and update the code to test the property voucherId
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property voucherType (base name: "VoucherType")', function() {
      // uncomment below and update the code to test the property voucherType
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isEnabled (base name: "IsEnabled")', function() {
      // uncomment below and update the code to test the property isEnabled
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isUsedUp (base name: "IsUsedUp")', function() {
      // uncomment below and update the code to test the property isUsedUp
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property voucherSubType (base name: "VoucherSubType")', function() {
      // uncomment below and update the code to test the property voucherSubType
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property publicDescription (base name: "PublicDescription")', function() {
      // uncomment below and update the code to test the property publicDescription
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property privateDescription (base name: "PrivateDescription")', function() {
      // uncomment below and update the code to test the property privateDescription
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property validFrom (base name: "ValidFrom")', function() {
      // uncomment below and update the code to test the property validFrom
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property expiry (base name: "Expiry")', function() {
      // uncomment below and update the code to test the property expiry
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property voucherPayer (base name: "VoucherPayer")', function() {
      // uncomment below and update the code to test the property voucherPayer
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isVisibleToStore (base name: "IsVisibleToStore")', function() {
      // uncomment below and update the code to test the property isVisibleToStore
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isReusable (base name: "IsReusable")', function() {
      // uncomment below and update the code to test the property isReusable
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isValidForDeliveryOrders (base name: "IsValidForDeliveryOrders")', function() {
      // uncomment below and update the code to test the property isValidForDeliveryOrders
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isValidForPickupOrders (base name: "IsValidForPickupOrders")', function() {
      // uncomment below and update the code to test the property isValidForPickupOrders
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isValidForCardOrders (base name: "IsValidForCardOrders")', function() {
      // uncomment below and update the code to test the property isValidForCardOrders
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isValidForCashOrders (base name: "IsValidForCashOrders")', function() {
      // uncomment below and update the code to test the property isValidForCashOrders
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isValidForFirstOrderOnly (base name: "IsValidForFirstOrderOnly")', function() {
      // uncomment below and update the code to test the property isValidForFirstOrderOnly
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property minimumOrderAmount (base name: "MinimumOrderAmount")', function() {
      // uncomment below and update the code to test the property minimumOrderAmount
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property isValidOncePerCustomer (base name: "IsValidOncePerCustomer")', function() {
      // uncomment below and update the code to test the property isValidOncePerCustomer
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property autoApply (base name: "AutoApply")', function() {
      // uncomment below and update the code to test the property autoApply
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property autoApplyOrder (base name: "AutoApplyOrder")', function() {
      // uncomment below and update the code to test the property autoApplyOrder
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property includeDeliveryFee (base name: "IncludeDeliveryFee")', function() {
      // uncomment below and update the code to test the property includeDeliveryFee
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "Code")', function() {
      // uncomment below and update the code to test the property code
      //var instane = new Flipdish.Voucher();
      //expect(instance).to.be();
    });

  });

}));
