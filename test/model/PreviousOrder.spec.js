/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.PreviousOrder();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PreviousOrder', function() {
    it('should create an instance of PreviousOrder', function() {
      // uncomment below and update the code to test PreviousOrder
      //var instane = new Flipdish.PreviousOrder();
      //expect(instance).to.be.a(Flipdish.PreviousOrder);
    });

    it('should have the property DeliveryType (base name: "DeliveryType")', function() {
      // uncomment below and update the code to test the property DeliveryType
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property DeliveryLocationAddressString (base name: "DeliveryLocationAddressString")', function() {
      // uncomment below and update the code to test the property DeliveryLocationAddressString
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property PaymentAccountType (base name: "PaymentAccountType")', function() {
      // uncomment below and update the code to test the property PaymentAccountType
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property OrderId (base name: "OrderId")', function() {
      // uncomment below and update the code to test the property OrderId
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property RestaurantName (base name: "RestaurantName")', function() {
      // uncomment below and update the code to test the property RestaurantName
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property LocalOrderId (base name: "LocalOrderId")', function() {
      // uncomment below and update the code to test the property LocalOrderId
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property TableServiceCategory (base name: "TableServiceCategory")', function() {
      // uncomment below and update the code to test the property TableServiceCategory
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property PickupLocationOptionValue (base name: "PickupLocationOptionValue")', function() {
      // uncomment below and update the code to test the property PickupLocationOptionValue
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property CustomerName (base name: "CustomerName")', function() {
      // uncomment below and update the code to test the property CustomerName
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property PhoneNumberInternationalFormatString (base name: "PhoneNumberInternationalFormatString")', function() {
      // uncomment below and update the code to test the property PhoneNumberInternationalFormatString
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property DeliveryInstructions (base name: "DeliveryInstructions")', function() {
      // uncomment below and update the code to test the property DeliveryInstructions
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property Currency (base name: "Currency")', function() {
      // uncomment below and update the code to test the property Currency
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property ProcessingFee (base name: "ProcessingFee")', function() {
      // uncomment below and update the code to test the property ProcessingFee
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property ServiceChargePercentage (base name: "ServiceChargePercentage")', function() {
      // uncomment below and update the code to test the property ServiceChargePercentage
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property ServiceChargeAmount (base name: "ServiceChargeAmount")', function() {
      // uncomment below and update the code to test the property ServiceChargeAmount
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property TipAmount (base name: "TipAmount")', function() {
      // uncomment below and update the code to test the property TipAmount
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property DeliveryAmount (base name: "DeliveryAmount")', function() {
      // uncomment below and update the code to test the property DeliveryAmount
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property DepositReturnFeeAmount (base name: "DepositReturnFeeAmount")', function() {
      // uncomment below and update the code to test the property DepositReturnFeeAmount
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property TotalTax (base name: "TotalTax")', function() {
      // uncomment below and update the code to test the property TotalTax
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property TotalAmount (base name: "TotalAmount")', function() {
      // uncomment below and update the code to test the property TotalAmount
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property Items (base name: "Items")', function() {
      // uncomment below and update the code to test the property Items
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property TaxRates (base name: "TaxRates")', function() {
      // uncomment below and update the code to test the property TaxRates
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

    it('should have the property WhiteLabelId (base name: "WhiteLabelId")', function() {
      // uncomment below and update the code to test the property WhiteLabelId
      //var instance = new Flipdish.PreviousOrder();
      //expect(instance).to.be();
    });

  });

}));
