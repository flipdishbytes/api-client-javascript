/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SubmitOrderResponseDm', function() {
      beforeEach(function() {
        instance = new Flipdish.SubmitOrderResponseDm();
      });

      it('should create an instance of SubmitOrderResponseDm', function() {
        // TODO: update the code to test SubmitOrderResponseDm
        expect(instance).to.be.a(Flipdish.SubmitOrderResponseDm);
      });

      it('should have the property OrderId (base name: "OrderId")', function() {
        // TODO: update the code to test the property OrderId
        expect(instance).to.have.property('OrderId');
        // expect(instance.OrderId).to.be(expectedValueLiteral);
      });

      it('should have the property LocalOrderId (base name: "LocalOrderId")', function() {
        // TODO: update the code to test the property LocalOrderId
        expect(instance).to.have.property('LocalOrderId');
        // expect(instance.LocalOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryTimeEstimateMinutes (base name: "DeliveryTimeEstimateMinutes")', function() {
        // TODO: update the code to test the property DeliveryTimeEstimateMinutes
        expect(instance).to.have.property('DeliveryTimeEstimateMinutes');
        // expect(instance.DeliveryTimeEstimateMinutes).to.be(expectedValueLiteral);
      });

      it('should have the property OrderPlacedMessage (base name: "OrderPlacedMessage")', function() {
        // TODO: update the code to test the property OrderPlacedMessage
        expect(instance).to.have.property('OrderPlacedMessage');
        // expect(instance.OrderPlacedMessage).to.be(expectedValueLiteral);
      });

      it('should have the property DisplayTipControl (base name: "DisplayTipControl")', function() {
        // TODO: update the code to test the property DisplayTipControl
        expect(instance).to.have.property('DisplayTipControl');
        // expect(instance.DisplayTipControl).to.be(expectedValueLiteral);
      });

      it('should have the property DisplayRateAppControl (base name: "DisplayRateAppControl")', function() {
        // TODO: update the code to test the property DisplayRateAppControl
        expect(instance).to.have.property('DisplayRateAppControl');
        // expect(instance.DisplayRateAppControl).to.be(expectedValueLiteral);
      });

      it('should have the property CancelOrderPeriodSeconds (base name: "CancelOrderPeriodSeconds")', function() {
        // TODO: update the code to test the property CancelOrderPeriodSeconds
        expect(instance).to.have.property('CancelOrderPeriodSeconds');
        // expect(instance.CancelOrderPeriodSeconds).to.be(expectedValueLiteral);
      });

      it('should have the property RestaurantName (base name: "RestaurantName")', function() {
        // TODO: update the code to test the property RestaurantName
        expect(instance).to.have.property('RestaurantName');
        // expect(instance.RestaurantName).to.be(expectedValueLiteral);
      });

      it('should have the property LinkText (base name: "LinkText")', function() {
        // TODO: update the code to test the property LinkText
        expect(instance).to.have.property('LinkText');
        // expect(instance.LinkText).to.be(expectedValueLiteral);
      });

      it('should have the property LinkUrl (base name: "LinkUrl")', function() {
        // TODO: update the code to test the property LinkUrl
        expect(instance).to.have.property('LinkUrl');
        // expect(instance.LinkUrl).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryType (base name: "DeliveryType")', function() {
        // TODO: update the code to test the property DeliveryType
        expect(instance).to.have.property('DeliveryType');
        // expect(instance.DeliveryType).to.be(expectedValueLiteral);
      });

      it('should have the property DuringOrderPromotionOptions (base name: "DuringOrderPromotionOptions")', function() {
        // TODO: update the code to test the property DuringOrderPromotionOptions
        expect(instance).to.have.property('DuringOrderPromotionOptions');
        // expect(instance.DuringOrderPromotionOptions).to.be(expectedValueLiteral);
      });

      it('should have the property RedirectUri (base name: "RedirectUri")', function() {
        // TODO: update the code to test the property RedirectUri
        expect(instance).to.have.property('RedirectUri');
        // expect(instance.RedirectUri).to.be(expectedValueLiteral);
      });

      it('should have the property PickupCode (base name: "PickupCode")', function() {
        // TODO: update the code to test the property PickupCode
        expect(instance).to.have.property('PickupCode');
        // expect(instance.PickupCode).to.be(expectedValueLiteral);
      });

      it('should have the property RestaurantAddress (base name: "RestaurantAddress")', function() {
        // TODO: update the code to test the property RestaurantAddress
        expect(instance).to.have.property('RestaurantAddress');
        // expect(instance.RestaurantAddress).to.be(expectedValueLiteral);
      });

      it('should have the property PaymentIntentClientSecret (base name: "PaymentIntentClientSecret")', function() {
        // TODO: update the code to test the property PaymentIntentClientSecret
        expect(instance).to.have.property('PaymentIntentClientSecret');
        // expect(instance.PaymentIntentClientSecret).to.be(expectedValueLiteral);
      });

    });
  });

}));
