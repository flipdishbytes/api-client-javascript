/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderSummary', function() {
      beforeEach(function() {
        instance = new Flipdish.OrderSummary();
      });

      it('should create an instance of OrderSummary', function() {
        // TODO: update the code to test OrderSummary
        expect(instance).to.be.a(Flipdish.OrderSummary);
      });

      it('should have the property OrderId (base name: "OrderId")', function() {
        // TODO: update the code to test the property OrderId
        expect(instance).to.have.property('OrderId');
        // expect(instance.OrderId).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryType (base name: "DeliveryType")', function() {
        // TODO: update the code to test the property DeliveryType
        expect(instance).to.have.property('DeliveryType');
        // expect(instance.DeliveryType).to.be(expectedValueLiteral);
      });

      it('should have the property PickupLocationType (base name: "PickupLocationType")', function() {
        // TODO: update the code to test the property PickupLocationType
        expect(instance).to.have.property('PickupLocationType');
        // expect(instance.PickupLocationType).to.be(expectedValueLiteral);
      });

      it('should have the property TableServiceCatagory (base name: "TableServiceCatagory")', function() {
        // TODO: update the code to test the property TableServiceCatagory
        expect(instance).to.have.property('TableServiceCatagory');
        // expect(instance.TableServiceCatagory).to.be(expectedValueLiteral);
      });

      it('should have the property OrderState (base name: "OrderState")', function() {
        // TODO: update the code to test the property OrderState
        expect(instance).to.have.property('OrderState');
        // expect(instance.OrderState).to.be(expectedValueLiteral);
      });

      it('should have the property RequestedForTime (base name: "RequestedForTime")', function() {
        // TODO: update the code to test the property RequestedForTime
        expect(instance).to.have.property('RequestedForTime');
        // expect(instance.RequestedForTime).to.be(expectedValueLiteral);
      });

      it('should have the property StoreName (base name: "StoreName")', function() {
        // TODO: update the code to test the property StoreName
        expect(instance).to.have.property('StoreName');
        // expect(instance.StoreName).to.be(expectedValueLiteral);
      });

      it('should have the property StoreIanaTimeZone (base name: "StoreIanaTimeZone")', function() {
        // TODO: update the code to test the property StoreIanaTimeZone
        expect(instance).to.have.property('StoreIanaTimeZone');
        // expect(instance.StoreIanaTimeZone).to.be(expectedValueLiteral);
      });

      it('should have the property CustomerName (base name: "CustomerName")', function() {
        // TODO: update the code to test the property CustomerName
        expect(instance).to.have.property('CustomerName');
        // expect(instance.CustomerName).to.be(expectedValueLiteral);
      });

      it('should have the property CustomerPhoneNumber (base name: "CustomerPhoneNumber")', function() {
        // TODO: update the code to test the property CustomerPhoneNumber
        expect(instance).to.have.property('CustomerPhoneNumber');
        // expect(instance.CustomerPhoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property Amount (base name: "Amount")', function() {
        // TODO: update the code to test the property Amount
        expect(instance).to.have.property('Amount');
        // expect(instance.Amount).to.be(expectedValueLiteral);
      });

      it('should have the property RefundedAmount (base name: "RefundedAmount")', function() {
        // TODO: update the code to test the property RefundedAmount
        expect(instance).to.have.property('RefundedAmount');
        // expect(instance.RefundedAmount).to.be(expectedValueLiteral);
      });

      it('should have the property PaymentAccountType (base name: "PaymentAccountType")', function() {
        // TODO: update the code to test the property PaymentAccountType
        expect(instance).to.have.property('PaymentAccountType');
        // expect(instance.PaymentAccountType).to.be(expectedValueLiteral);
      });

      it('should have the property PaymentStatus (base name: "PaymentStatus")', function() {
        // TODO: update the code to test the property PaymentStatus
        expect(instance).to.have.property('PaymentStatus');
        // expect(instance.PaymentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property Currency (base name: "Currency")', function() {
        // TODO: update the code to test the property Currency
        expect(instance).to.have.property('Currency');
        // expect(instance.Currency).to.be(expectedValueLiteral);
      });

      it('should have the property AppType (base name: "AppType")', function() {
        // TODO: update the code to test the property AppType
        expect(instance).to.have.property('AppType');
        // expect(instance.AppType).to.be(expectedValueLiteral);
      });

      it('should have the property LocalOrderId (base name: "LocalOrderId")', function() {
        // TODO: update the code to test the property LocalOrderId
        expect(instance).to.have.property('LocalOrderId');
        // expect(instance.LocalOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property DropOffLocationId (base name: "DropOffLocationId")', function() {
        // TODO: update the code to test the property DropOffLocationId
        expect(instance).to.have.property('DropOffLocationId');
        // expect(instance.DropOffLocationId).to.be(expectedValueLiteral);
      });

      it('should have the property DropOffLocation (base name: "DropOffLocation")', function() {
        // TODO: update the code to test the property DropOffLocation
        expect(instance).to.have.property('DropOffLocation');
        // expect(instance.DropOffLocation).to.be(expectedValueLiteral);
      });

      it('should have the property AcceptedFor (base name: "AcceptedFor")', function() {
        // TODO: update the code to test the property AcceptedFor
        expect(instance).to.have.property('AcceptedFor');
        // expect(instance.AcceptedFor).to.be(expectedValueLiteral);
      });

      it('should have the property Channel (base name: "Channel")', function() {
        // TODO: update the code to test the property Channel
        expect(instance).to.have.property('Channel');
        // expect(instance.Channel).to.be(expectedValueLiteral);
      });

      it('should have the property InFraudZone (base name: "InFraudZone")', function() {
        // TODO: update the code to test the property InFraudZone
        expect(instance).to.have.property('InFraudZone');
        // expect(instance.InFraudZone).to.be(expectedValueLiteral);
      });

      it('should have the property UnusualHighValueOrder (base name: "UnusualHighValueOrder")', function() {
        // TODO: update the code to test the property UnusualHighValueOrder
        expect(instance).to.have.property('UnusualHighValueOrder');
        // expect(instance.UnusualHighValueOrder).to.be(expectedValueLiteral);
      });

      it('should have the property ChannelOrderId (base name: "ChannelOrderId")', function() {
        // TODO: update the code to test the property ChannelOrderId
        expect(instance).to.have.property('ChannelOrderId');
        // expect(instance.ChannelOrderId).to.be(expectedValueLiteral);
      });

      it('should have the property ChannelOrderDisplayId (base name: "ChannelOrderDisplayId")', function() {
        // TODO: update the code to test the property ChannelOrderDisplayId
        expect(instance).to.have.property('ChannelOrderDisplayId');
        // expect(instance.ChannelOrderDisplayId).to.be(expectedValueLiteral);
      });

      it('should have the property OrderDropOffLocation (base name: "OrderDropOffLocation")', function() {
        // TODO: update the code to test the property OrderDropOffLocation
        expect(instance).to.have.property('OrderDropOffLocation');
        // expect(instance.OrderDropOffLocation).to.be(expectedValueLiteral);
      });

      it('should have the property OrderBatchInfo (base name: "OrderBatchInfo")', function() {
        // TODO: update the code to test the property OrderBatchInfo
        expect(instance).to.have.property('OrderBatchInfo');
        // expect(instance.OrderBatchInfo).to.be(expectedValueLiteral);
      });

    });
  });

}));
