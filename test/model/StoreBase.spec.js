/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('StoreBase', function() {
      beforeEach(function() {
        instance = new Flipdish.StoreBase();
      });

      it('should create an instance of StoreBase', function() {
        // TODO: update the code to test StoreBase
        expect(instance).to.be.a(Flipdish.StoreBase);
      });

      it('should have the property PhoneNumber (base name: "PhoneNumber")', function() {
        // TODO: update the code to test the property PhoneNumber
        expect(instance).to.have.property('PhoneNumber');
        // expect(instance.PhoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property AlwaysAppearOpen (base name: "AlwaysAppearOpen")', function() {
        // TODO: update the code to test the property AlwaysAppearOpen
        expect(instance).to.have.property('AlwaysAppearOpen');
        // expect(instance.AlwaysAppearOpen).to.be(expectedValueLiteral);
      });

      it('should have the property PreOrderEnabled (base name: "PreOrderEnabled")', function() {
        // TODO: update the code to test the property PreOrderEnabled
        expect(instance).to.have.property('PreOrderEnabled');
        // expect(instance.PreOrderEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property TakeOutEnabled (base name: "TakeOutEnabled")', function() {
        // TODO: update the code to test the property TakeOutEnabled
        expect(instance).to.have.property('TakeOutEnabled');
        // expect(instance.TakeOutEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property TableServiceEnabled (base name: "TableServiceEnabled")', function() {
        // TODO: update the code to test the property TableServiceEnabled
        expect(instance).to.have.property('TableServiceEnabled');
        // expect(instance.TableServiceEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property DineInEnabled (base name: "DineInEnabled")', function() {
        // TODO: update the code to test the property DineInEnabled
        expect(instance).to.have.property('DineInEnabled');
        // expect(instance.DineInEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property AllowPreOrdersAndTableService (base name: "AllowPreOrdersAndTableService")', function() {
        // TODO: update the code to test the property AllowPreOrdersAndTableService
        expect(instance).to.have.property('AllowPreOrdersAndTableService');
        // expect(instance.AllowPreOrdersAndTableService).to.be(expectedValueLiteral);
      });

      it('should have the property PickupEnabled (base name: "PickupEnabled")', function() {
        // TODO: update the code to test the property PickupEnabled
        expect(instance).to.have.property('PickupEnabled');
        // expect(instance.PickupEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryEnabled (base name: "DeliveryEnabled")', function() {
        // TODO: update the code to test the property DeliveryEnabled
        expect(instance).to.have.property('DeliveryEnabled');
        // expect(instance.DeliveryEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property CardOrderDeliveryEnabled (base name: "CardOrderDeliveryEnabled")', function() {
        // TODO: update the code to test the property CardOrderDeliveryEnabled
        expect(instance).to.have.property('CardOrderDeliveryEnabled');
        // expect(instance.CardOrderDeliveryEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property CashOrdersDeliveryEnabled (base name: "CashOrdersDeliveryEnabled")', function() {
        // TODO: update the code to test the property CashOrdersDeliveryEnabled
        expect(instance).to.have.property('CashOrdersDeliveryEnabled');
        // expect(instance.CashOrdersDeliveryEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property CardOrdersPickupEnabled (base name: "CardOrdersPickupEnabled")', function() {
        // TODO: update the code to test the property CardOrdersPickupEnabled
        expect(instance).to.have.property('CardOrdersPickupEnabled');
        // expect(instance.CardOrdersPickupEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property CashOrdersPickupEnabled (base name: "CashOrdersPickupEnabled")', function() {
        // TODO: update the code to test the property CashOrdersPickupEnabled
        expect(instance).to.have.property('CashOrdersPickupEnabled');
        // expect(instance.CashOrdersPickupEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property TipsEnabled (base name: "TipsEnabled")', function() {
        // TODO: update the code to test the property TipsEnabled
        expect(instance).to.have.property('TipsEnabled');
        // expect(instance.TipsEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property AutomaticallyAcceptOrders (base name: "AutomaticallyAcceptOrders")', function() {
        // TODO: update the code to test the property AutomaticallyAcceptOrders
        expect(instance).to.have.property('AutomaticallyAcceptOrders');
        // expect(instance.AutomaticallyAcceptOrders).to.be(expectedValueLiteral);
      });

      it('should have the property OpenForDelivery (base name: "OpenForDelivery")', function() {
        // TODO: update the code to test the property OpenForDelivery
        expect(instance).to.have.property('OpenForDelivery');
        // expect(instance.OpenForDelivery).to.be(expectedValueLiteral);
      });

      it('should have the property OpenForPickup (base name: "OpenForPickup")', function() {
        // TODO: update the code to test the property OpenForPickup
        expect(instance).to.have.property('OpenForPickup');
        // expect(instance.OpenForPickup).to.be(expectedValueLiteral);
      });

      it('should have the property MinimumPickupOrderAmount (base name: "MinimumPickupOrderAmount")', function() {
        // TODO: update the code to test the property MinimumPickupOrderAmount
        expect(instance).to.have.property('MinimumPickupOrderAmount');
        // expect(instance.MinimumPickupOrderAmount).to.be(expectedValueLiteral);
      });

      it('should have the property RequireCustomerNameForPickup (base name: "RequireCustomerNameForPickup")', function() {
        // TODO: update the code to test the property RequireCustomerNameForPickup
        expect(instance).to.have.property('RequireCustomerNameForPickup');
        // expect(instance.RequireCustomerNameForPickup).to.be(expectedValueLiteral);
      });

      it('should have the property GdprCustomerPhoneNumbers (base name: "GdprCustomerPhoneNumbers")', function() {
        // TODO: update the code to test the property GdprCustomerPhoneNumbers
        expect(instance).to.have.property('GdprCustomerPhoneNumbers');
        // expect(instance.GdprCustomerPhoneNumbers).to.be(expectedValueLiteral);
      });

      it('should have the property RequireCustomerNameForDelivery (base name: "RequireCustomerNameForDelivery")', function() {
        // TODO: update the code to test the property RequireCustomerNameForDelivery
        expect(instance).to.have.property('RequireCustomerNameForDelivery');
        // expect(instance.RequireCustomerNameForDelivery).to.be(expectedValueLiteral);
      });

      it('should have the property AllowChefNotes (base name: "AllowChefNotes")', function() {
        // TODO: update the code to test the property AllowChefNotes
        expect(instance).to.have.property('AllowChefNotes');
        // expect(instance.AllowChefNotes).to.be(expectedValueLiteral);
      });

      it('should have the property EtaInPickupConfirmationSmsEnabled (base name: "EtaInPickupConfirmationSmsEnabled")', function() {
        // TODO: update the code to test the property EtaInPickupConfirmationSmsEnabled
        expect(instance).to.have.property('EtaInPickupConfirmationSmsEnabled');
        // expect(instance.EtaInPickupConfirmationSmsEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property EtaInDeliveryConfirmationSmsEnabled (base name: "EtaInDeliveryConfirmationSmsEnabled")', function() {
        // TODO: update the code to test the property EtaInDeliveryConfirmationSmsEnabled
        expect(instance).to.have.property('EtaInDeliveryConfirmationSmsEnabled');
        // expect(instance.EtaInDeliveryConfirmationSmsEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property IsArchived (base name: "IsArchived")', function() {
        // TODO: update the code to test the property IsArchived
        expect(instance).to.have.property('IsArchived');
        // expect(instance.IsArchived).to.be(expectedValueLiteral);
      });

      it('should have the property IsPublished (base name: "IsPublished")', function() {
        // TODO: update the code to test the property IsPublished
        expect(instance).to.have.property('IsPublished');
        // expect(instance.IsPublished).to.be(expectedValueLiteral);
      });

      it('should have the property Name (base name: "Name")', function() {
        // TODO: update the code to test the property Name
        expect(instance).to.have.property('Name');
        // expect(instance.Name).to.be(expectedValueLiteral);
      });

      it('should have the property EmailAddress (base name: "EmailAddress")', function() {
        // TODO: update the code to test the property EmailAddress
        expect(instance).to.have.property('EmailAddress');
        // expect(instance.EmailAddress).to.be(expectedValueLiteral);
      });

      it('should have the property StaffLanguage (base name: "StaffLanguage")', function() {
        // TODO: update the code to test the property StaffLanguage
        expect(instance).to.have.property('StaffLanguage');
        // expect(instance.StaffLanguage).to.be(expectedValueLiteral);
      });

    });
  });

}));
