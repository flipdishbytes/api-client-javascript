/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('StoreEndOfDayReport', function() {
      beforeEach(function() {
        instance = new Flipdish.StoreEndOfDayReport();
      });

      it('should create an instance of StoreEndOfDayReport', function() {
        // TODO: update the code to test StoreEndOfDayReport
        expect(instance).to.be.a(Flipdish.StoreEndOfDayReport);
      });

      it('should have the property StoreId (base name: "StoreId")', function() {
        // TODO: update the code to test the property StoreId
        expect(instance).to.have.property('StoreId');
        // expect(instance.StoreId).to.be(expectedValueLiteral);
      });

      it('should have the property StoreName (base name: "StoreName")', function() {
        // TODO: update the code to test the property StoreName
        expect(instance).to.have.property('StoreName');
        // expect(instance.StoreName).to.be(expectedValueLiteral);
      });

      it('should have the property Currency (base name: "Currency")', function() {
        // TODO: update the code to test the property Currency
        expect(instance).to.have.property('Currency');
        // expect(instance.Currency).to.be(expectedValueLiteral);
      });

      it('should have the property OrderCount (base name: "OrderCount")', function() {
        // TODO: update the code to test the property OrderCount
        expect(instance).to.have.property('OrderCount');
        // expect(instance.OrderCount).to.be(expectedValueLiteral);
      });

      it('should have the property OrderValue (base name: "OrderValue")', function() {
        // TODO: update the code to test the property OrderValue
        expect(instance).to.have.property('OrderValue');
        // expect(instance.OrderValue).to.be(expectedValueLiteral);
      });

      it('should have the property OrderValueExcludingDeliveryFees (base name: "OrderValueExcludingDeliveryFees")', function() {
        // TODO: update the code to test the property OrderValueExcludingDeliveryFees
        expect(instance).to.have.property('OrderValueExcludingDeliveryFees');
        // expect(instance.OrderValueExcludingDeliveryFees).to.be(expectedValueLiteral);
      });

      it('should have the property CollectionOrderCount (base name: "CollectionOrderCount")', function() {
        // TODO: update the code to test the property CollectionOrderCount
        expect(instance).to.have.property('CollectionOrderCount');
        // expect(instance.CollectionOrderCount).to.be(expectedValueLiteral);
      });

      it('should have the property CollectionCashOrderCount (base name: "CollectionCashOrderCount")', function() {
        // TODO: update the code to test the property CollectionCashOrderCount
        expect(instance).to.have.property('CollectionCashOrderCount');
        // expect(instance.CollectionCashOrderCount).to.be(expectedValueLiteral);
      });

      it('should have the property CollectionPaidOnlineOrderCount (base name: "CollectionPaidOnlineOrderCount")', function() {
        // TODO: update the code to test the property CollectionPaidOnlineOrderCount
        expect(instance).to.have.property('CollectionPaidOnlineOrderCount');
        // expect(instance.CollectionPaidOnlineOrderCount).to.be(expectedValueLiteral);
      });

      it('should have the property CollectionOrderValue (base name: "CollectionOrderValue")', function() {
        // TODO: update the code to test the property CollectionOrderValue
        expect(instance).to.have.property('CollectionOrderValue');
        // expect(instance.CollectionOrderValue).to.be(expectedValueLiteral);
      });

      it('should have the property CollectionCashOrderValue (base name: "CollectionCashOrderValue")', function() {
        // TODO: update the code to test the property CollectionCashOrderValue
        expect(instance).to.have.property('CollectionCashOrderValue');
        // expect(instance.CollectionCashOrderValue).to.be(expectedValueLiteral);
      });

      it('should have the property CollectionPaidOnlineOrderValue (base name: "CollectionPaidOnlineOrderValue")', function() {
        // TODO: update the code to test the property CollectionPaidOnlineOrderValue
        expect(instance).to.have.property('CollectionPaidOnlineOrderValue');
        // expect(instance.CollectionPaidOnlineOrderValue).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryOrderCount (base name: "DeliveryOrderCount")', function() {
        // TODO: update the code to test the property DeliveryOrderCount
        expect(instance).to.have.property('DeliveryOrderCount');
        // expect(instance.DeliveryOrderCount).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryCashOrderCount (base name: "DeliveryCashOrderCount")', function() {
        // TODO: update the code to test the property DeliveryCashOrderCount
        expect(instance).to.have.property('DeliveryCashOrderCount');
        // expect(instance.DeliveryCashOrderCount).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryPaidOnlineOrderCount (base name: "DeliveryPaidOnlineOrderCount")', function() {
        // TODO: update the code to test the property DeliveryPaidOnlineOrderCount
        expect(instance).to.have.property('DeliveryPaidOnlineOrderCount');
        // expect(instance.DeliveryPaidOnlineOrderCount).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryOrderValue (base name: "DeliveryOrderValue")', function() {
        // TODO: update the code to test the property DeliveryOrderValue
        expect(instance).to.have.property('DeliveryOrderValue');
        // expect(instance.DeliveryOrderValue).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryCashOrderValue (base name: "DeliveryCashOrderValue")', function() {
        // TODO: update the code to test the property DeliveryCashOrderValue
        expect(instance).to.have.property('DeliveryCashOrderValue');
        // expect(instance.DeliveryCashOrderValue).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryPaidOnlineOrderValue (base name: "DeliveryPaidOnlineOrderValue")', function() {
        // TODO: update the code to test the property DeliveryPaidOnlineOrderValue
        expect(instance).to.have.property('DeliveryPaidOnlineOrderValue');
        // expect(instance.DeliveryPaidOnlineOrderValue).to.be(expectedValueLiteral);
      });

      it('should have the property PaidOnlineOrderCount (base name: "PaidOnlineOrderCount")', function() {
        // TODO: update the code to test the property PaidOnlineOrderCount
        expect(instance).to.have.property('PaidOnlineOrderCount');
        // expect(instance.PaidOnlineOrderCount).to.be(expectedValueLiteral);
      });

      it('should have the property CashOrderCount (base name: "CashOrderCount")', function() {
        // TODO: update the code to test the property CashOrderCount
        expect(instance).to.have.property('CashOrderCount');
        // expect(instance.CashOrderCount).to.be(expectedValueLiteral);
      });

      it('should have the property PaidOnlineOrderValue (base name: "PaidOnlineOrderValue")', function() {
        // TODO: update the code to test the property PaidOnlineOrderValue
        expect(instance).to.have.property('PaidOnlineOrderValue');
        // expect(instance.PaidOnlineOrderValue).to.be(expectedValueLiteral);
      });

      it('should have the property CashOrderValue (base name: "CashOrderValue")', function() {
        // TODO: update the code to test the property CashOrderValue
        expect(instance).to.have.property('CashOrderValue');
        // expect(instance.CashOrderValue).to.be(expectedValueLiteral);
      });

      it('should have the property PaidOnlineOrderValueExcludingDeliveryFees (base name: "PaidOnlineOrderValueExcludingDeliveryFees")', function() {
        // TODO: update the code to test the property PaidOnlineOrderValueExcludingDeliveryFees
        expect(instance).to.have.property('PaidOnlineOrderValueExcludingDeliveryFees');
        // expect(instance.PaidOnlineOrderValueExcludingDeliveryFees).to.be(expectedValueLiteral);
      });

      it('should have the property CashOrderValueExcludingDeliveryFees (base name: "CashOrderValueExcludingDeliveryFees")', function() {
        // TODO: update the code to test the property CashOrderValueExcludingDeliveryFees
        expect(instance).to.have.property('CashOrderValueExcludingDeliveryFees');
        // expect(instance.CashOrderValueExcludingDeliveryFees).to.be(expectedValueLiteral);
      });

      it('should have the property StartTime (base name: "StartTime")', function() {
        // TODO: update the code to test the property StartTime
        expect(instance).to.have.property('StartTime');
        // expect(instance.StartTime).to.be(expectedValueLiteral);
      });

      it('should have the property EndTime (base name: "EndTime")', function() {
        // TODO: update the code to test the property EndTime
        expect(instance).to.have.property('EndTime');
        // expect(instance.EndTime).to.be(expectedValueLiteral);
      });

    });
  });

}));
