/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('KioskBluetoothTerminalFirmwareVersionStatusEvent', function() {
      beforeEach(function() {
        instance = new Flipdish.KioskBluetoothTerminalFirmwareVersionStatusEvent();
      });

      it('should create an instance of KioskBluetoothTerminalFirmwareVersionStatusEvent', function() {
        // TODO: update the code to test KioskBluetoothTerminalFirmwareVersionStatusEvent
        expect(instance).to.be.a(Flipdish.KioskBluetoothTerminalFirmwareVersionStatusEvent);
      });

      it('should have the property DeviceId (base name: "DeviceId")', function() {
        // TODO: update the code to test the property DeviceId
        expect(instance).to.have.property('DeviceId');
        // expect(instance.DeviceId).to.be(expectedValueLiteral);
      });

      it('should have the property SerialNumber (base name: "SerialNumber")', function() {
        // TODO: update the code to test the property SerialNumber
        expect(instance).to.have.property('SerialNumber');
        // expect(instance.SerialNumber).to.be(expectedValueLiteral);
      });

      it('should have the property HasFirmwareUpdate (base name: "HasFirmwareUpdate")', function() {
        // TODO: update the code to test the property HasFirmwareUpdate
        expect(instance).to.have.property('HasFirmwareUpdate');
        // expect(instance.HasFirmwareUpdate).to.be(expectedValueLiteral);
      });

      it('should have the property HasConfigUpdate (base name: "HasConfigUpdate")', function() {
        // TODO: update the code to test the property HasConfigUpdate
        expect(instance).to.have.property('HasConfigUpdate');
        // expect(instance.HasConfigUpdate).to.be(expectedValueLiteral);
      });

      it('should have the property HasKeyUpdate (base name: "HasKeyUpdate")', function() {
        // TODO: update the code to test the property HasKeyUpdate
        expect(instance).to.have.property('HasKeyUpdate');
        // expect(instance.HasKeyUpdate).to.be(expectedValueLiteral);
      });

      it('should have the property UpdateTimeEstimate (base name: "UpdateTimeEstimate")', function() {
        // TODO: update the code to test the property UpdateTimeEstimate
        expect(instance).to.have.property('UpdateTimeEstimate');
        // expect(instance.UpdateTimeEstimate).to.be(expectedValueLiteral);
      });

      it('should have the property UserEventInfo (base name: "UserEventInfo")', function() {
        // TODO: update the code to test the property UserEventInfo
        expect(instance).to.have.property('UserEventInfo');
        // expect(instance.UserEventInfo).to.be(expectedValueLiteral);
      });

      it('should have the property EventName (base name: "EventName")', function() {
        // TODO: update the code to test the property EventName
        expect(instance).to.have.property('EventName');
        // expect(instance.EventName).to.be(expectedValueLiteral);
      });

      it('should have the property FlipdishEventId (base name: "FlipdishEventId")', function() {
        // TODO: update the code to test the property FlipdishEventId
        expect(instance).to.have.property('FlipdishEventId');
        // expect(instance.FlipdishEventId).to.be(expectedValueLiteral);
      });

      it('should have the property CreateTime (base name: "CreateTime")', function() {
        // TODO: update the code to test the property CreateTime
        expect(instance).to.have.property('CreateTime');
        // expect(instance.CreateTime).to.be(expectedValueLiteral);
      });

      it('should have the property Position (base name: "Position")', function() {
        // TODO: update the code to test the property Position
        expect(instance).to.have.property('Position');
        // expect(instance.Position).to.be(expectedValueLiteral);
      });

      it('should have the property AppId (base name: "AppId")', function() {
        // TODO: update the code to test the property AppId
        expect(instance).to.have.property('AppId');
        // expect(instance.AppId).to.be(expectedValueLiteral);
      });

    });
  });

}));
