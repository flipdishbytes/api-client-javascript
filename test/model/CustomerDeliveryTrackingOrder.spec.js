/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CustomerDeliveryTrackingOrder', function() {
      beforeEach(function() {
        instance = new Flipdish.CustomerDeliveryTrackingOrder();
      });

      it('should create an instance of CustomerDeliveryTrackingOrder', function() {
        // TODO: update the code to test CustomerDeliveryTrackingOrder
        expect(instance).to.be.a(Flipdish.CustomerDeliveryTrackingOrder);
      });

      it('should have the property OrderId (base name: "OrderId")', function() {
        // TODO: update the code to test the property OrderId
        expect(instance).to.have.property('OrderId');
        // expect(instance.OrderId).to.be(expectedValueLiteral);
      });

      it('should have the property Address (base name: "Address")', function() {
        // TODO: update the code to test the property Address
        expect(instance).to.have.property('Address');
        // expect(instance.Address).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryNotes (base name: "DeliveryNotes")', function() {
        // TODO: update the code to test the property DeliveryNotes
        expect(instance).to.have.property('DeliveryNotes');
        // expect(instance.DeliveryNotes).to.be(expectedValueLiteral);
      });

      it('should have the property StorePhoneNumber (base name: "StorePhoneNumber")', function() {
        // TODO: update the code to test the property StorePhoneNumber
        expect(instance).to.have.property('StorePhoneNumber');
        // expect(instance.StorePhoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property AppIconUrl (base name: "AppIconUrl")', function() {
        // TODO: update the code to test the property AppIconUrl
        expect(instance).to.have.property('AppIconUrl');
        // expect(instance.AppIconUrl).to.be(expectedValueLiteral);
      });

      it('should have the property OrderTrackingCode (base name: "OrderTrackingCode")', function() {
        // TODO: update the code to test the property OrderTrackingCode
        expect(instance).to.have.property('OrderTrackingCode');
        // expect(instance.OrderTrackingCode).to.be(expectedValueLiteral);
      });

      it('should have the property PaymentMethodDescription (base name: "PaymentMethodDescription")', function() {
        // TODO: update the code to test the property PaymentMethodDescription
        expect(instance).to.have.property('PaymentMethodDescription');
        // expect(instance.PaymentMethodDescription).to.be(expectedValueLiteral);
      });

      it('should have the property LastFourDigits (base name: "LastFourDigits")', function() {
        // TODO: update the code to test the property LastFourDigits
        expect(instance).to.have.property('LastFourDigits');
        // expect(instance.LastFourDigits).to.be(expectedValueLiteral);
      });

      it('should have the property OrderLines (base name: "OrderLines")', function() {
        // TODO: update the code to test the property OrderLines
        expect(instance).to.have.property('OrderLines');
        // expect(instance.OrderLines).to.be(expectedValueLiteral);
      });

      it('should have the property TotalAmount (base name: "TotalAmount")', function() {
        // TODO: update the code to test the property TotalAmount
        expect(instance).to.have.property('TotalAmount');
        // expect(instance.TotalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property Currency (base name: "Currency")', function() {
        // TODO: update the code to test the property Currency
        expect(instance).to.have.property('Currency');
        // expect(instance.Currency).to.be(expectedValueLiteral);
      });

      it('should have the property Latitude (base name: "Latitude")', function() {
        // TODO: update the code to test the property Latitude
        expect(instance).to.have.property('Latitude');
        // expect(instance.Latitude).to.be(expectedValueLiteral);
      });

      it('should have the property Longitude (base name: "Longitude")', function() {
        // TODO: update the code to test the property Longitude
        expect(instance).to.have.property('Longitude');
        // expect(instance.Longitude).to.be(expectedValueLiteral);
      });

      it('should have the property Placed (base name: "Placed")', function() {
        // TODO: update the code to test the property Placed
        expect(instance).to.have.property('Placed');
        // expect(instance.Placed).to.be(expectedValueLiteral);
      });

      it('should have the property RequestedFor (base name: "RequestedFor")', function() {
        // TODO: update the code to test the property RequestedFor
        expect(instance).to.have.property('RequestedFor');
        // expect(instance.RequestedFor).to.be(expectedValueLiteral);
      });

      it('should have the property DriverId (base name: "DriverId")', function() {
        // TODO: update the code to test the property DriverId
        expect(instance).to.have.property('DriverId');
        // expect(instance.DriverId).to.be(expectedValueLiteral);
      });

      it('should have the property DriverName (base name: "DriverName")', function() {
        // TODO: update the code to test the property DriverName
        expect(instance).to.have.property('DriverName');
        // expect(instance.DriverName).to.be(expectedValueLiteral);
      });

      it('should have the property DriverImage (base name: "DriverImage")', function() {
        // TODO: update the code to test the property DriverImage
        expect(instance).to.have.property('DriverImage');
        // expect(instance.DriverImage).to.be(expectedValueLiteral);
      });

      it('should have the property EstimatedMinutesForDelivery (base name: "EstimatedMinutesForDelivery")', function() {
        // TODO: update the code to test the property EstimatedMinutesForDelivery
        expect(instance).to.have.property('EstimatedMinutesForDelivery');
        // expect(instance.EstimatedMinutesForDelivery).to.be(expectedValueLiteral);
      });

    });
  });

}));
