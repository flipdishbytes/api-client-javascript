/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SearchCriteria', function() {
      beforeEach(function() {
        instance = new Flipdish.SearchCriteria();
      });

      it('should create an instance of SearchCriteria', function() {
        // TODO: update the code to test SearchCriteria
        expect(instance).to.be.a(Flipdish.SearchCriteria);
      });

      it('should have the property Limit (base name: "Limit")', function() {
        // TODO: update the code to test the property Limit
        expect(instance).to.have.property('Limit');
        // expect(instance.Limit).to.be(expectedValueLiteral);
      });

      it('should have the property Page (base name: "Page")', function() {
        // TODO: update the code to test the property Page
        expect(instance).to.have.property('Page');
        // expect(instance.Page).to.be(expectedValueLiteral);
      });

      it('should have the property Start (base name: "Start")', function() {
        // TODO: update the code to test the property Start
        expect(instance).to.have.property('Start');
        // expect(instance.Start).to.be(expectedValueLiteral);
      });

      it('should have the property End (base name: "End")', function() {
        // TODO: update the code to test the property End
        expect(instance).to.have.property('End');
        // expect(instance.End).to.be(expectedValueLiteral);
      });

      it('should have the property OrderId (base name: "OrderId")', function() {
        // TODO: update the code to test the property OrderId
        expect(instance).to.have.property('OrderId');
        // expect(instance.OrderId).to.be(expectedValueLiteral);
      });

      it('should have the property StoreId (base name: "StoreId")', function() {
        // TODO: update the code to test the property StoreId
        expect(instance).to.have.property('StoreId');
        // expect(instance.StoreId).to.be(expectedValueLiteral);
      });

      it('should have the property StoreGroupId (base name: "StoreGroupId")', function() {
        // TODO: update the code to test the property StoreGroupId
        expect(instance).to.have.property('StoreGroupId');
        // expect(instance.StoreGroupId).to.be(expectedValueLiteral);
      });

      it('should have the property UserId (base name: "UserId")', function() {
        // TODO: update the code to test the property UserId
        expect(instance).to.have.property('UserId');
        // expect(instance.UserId).to.be(expectedValueLiteral);
      });

      it('should have the property UserEmail (base name: "UserEmail")', function() {
        // TODO: update the code to test the property UserEmail
        expect(instance).to.have.property('UserEmail');
        // expect(instance.UserEmail).to.be(expectedValueLiteral);
      });

      it('should have the property UserName (base name: "UserName")', function() {
        // TODO: update the code to test the property UserName
        expect(instance).to.have.property('UserName');
        // expect(instance.UserName).to.be(expectedValueLiteral);
      });

      it('should have the property VoucherCode (base name: "VoucherCode")', function() {
        // TODO: update the code to test the property VoucherCode
        expect(instance).to.have.property('VoucherCode');
        // expect(instance.VoucherCode).to.be(expectedValueLiteral);
      });

      it('should have the property EventType (base name: "EventType")', function() {
        // TODO: update the code to test the property EventType
        expect(instance).to.have.property('EventType');
        // expect(instance.EventType).to.be(expectedValueLiteral);
      });

      it('should have the property FlipdishEventId (base name: "FlipdishEventId")', function() {
        // TODO: update the code to test the property FlipdishEventId
        expect(instance).to.have.property('FlipdishEventId');
        // expect(instance.FlipdishEventId).to.be(expectedValueLiteral);
      });

    });
  });

}));
