/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('EventSearchResult', function() {
      beforeEach(function() {
        instance = new Flipdish.EventSearchResult();
      });

      it('should create an instance of EventSearchResult', function() {
        // TODO: update the code to test EventSearchResult
        expect(instance).to.be.a(Flipdish.EventSearchResult);
      });

      it('should have the property AppCreatedEvent (base name: "AppCreatedEvent")', function() {
        // TODO: update the code to test the property AppCreatedEvent
        expect(instance).to.have.property('AppCreatedEvent');
        // expect(instance.AppCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property AppUpdatedEvent (base name: "AppUpdatedEvent")', function() {
        // TODO: update the code to test the property AppUpdatedEvent
        expect(instance).to.have.property('AppUpdatedEvent');
        // expect(instance.AppUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property AnalyticsClientEvent (base name: "AnalyticsClientEvent")', function() {
        // TODO: update the code to test the property AnalyticsClientEvent
        expect(instance).to.have.property('AnalyticsClientEvent');
        // expect(instance.AnalyticsClientEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderAcceptedEvent (base name: "OrderAcceptedEvent")', function() {
        // TODO: update the code to test the property OrderAcceptedEvent
        expect(instance).to.have.property('OrderAcceptedEvent');
        // expect(instance.OrderAcceptedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderDispatchedEvent (base name: "OrderDispatchedEvent")', function() {
        // TODO: update the code to test the property OrderDispatchedEvent
        expect(instance).to.have.property('OrderDispatchedEvent');
        // expect(instance.OrderDispatchedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderCustomerTrackingCreatedEvent (base name: "OrderCustomerTrackingCreatedEvent")', function() {
        // TODO: update the code to test the property OrderCustomerTrackingCreatedEvent
        expect(instance).to.have.property('OrderCustomerTrackingCreatedEvent');
        // expect(instance.OrderCustomerTrackingCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderDeliveryTrackingStatusUpdatedEvent (base name: "OrderDeliveryTrackingStatusUpdatedEvent")', function() {
        // TODO: update the code to test the property OrderDeliveryTrackingStatusUpdatedEvent
        expect(instance).to.have.property('OrderDeliveryTrackingStatusUpdatedEvent');
        // expect(instance.OrderDeliveryTrackingStatusUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderBatchPublishedEvent (base name: "OrderBatchPublishedEvent")', function() {
        // TODO: update the code to test the property OrderBatchPublishedEvent
        expect(instance).to.have.property('OrderBatchPublishedEvent');
        // expect(instance.OrderBatchPublishedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderCreatedEvent (base name: "OrderCreatedEvent")', function() {
        // TODO: update the code to test the property OrderCreatedEvent
        expect(instance).to.have.property('OrderCreatedEvent');
        // expect(instance.OrderCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderRatingUpdatedEvent (base name: "OrderRatingUpdatedEvent")', function() {
        // TODO: update the code to test the property OrderRatingUpdatedEvent
        expect(instance).to.have.property('OrderRatingUpdatedEvent');
        // expect(instance.OrderRatingUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderRefundedEvent (base name: "OrderRefundedEvent")', function() {
        // TODO: update the code to test the property OrderRefundedEvent
        expect(instance).to.have.property('OrderRefundedEvent');
        // expect(instance.OrderRefundedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderRejectedEvent (base name: "OrderRejectedEvent")', function() {
        // TODO: update the code to test the property OrderRejectedEvent
        expect(instance).to.have.property('OrderRejectedEvent');
        // expect(instance.OrderRejectedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderTipUpdatedEvent (base name: "OrderTipUpdatedEvent")', function() {
        // TODO: update the code to test the property OrderTipUpdatedEvent
        expect(instance).to.have.property('OrderTipUpdatedEvent');
        // expect(instance.OrderTipUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderTerminalNotifications (base name: "OrderTerminalNotifications")', function() {
        // TODO: update the code to test the property OrderTerminalNotifications
        expect(instance).to.have.property('OrderTerminalNotifications');
        // expect(instance.OrderTerminalNotifications).to.be(expectedValueLiteral);
      });

      it('should have the property StoreCreatedEvent (base name: "StoreCreatedEvent")', function() {
        // TODO: update the code to test the property StoreCreatedEvent
        expect(instance).to.have.property('StoreCreatedEvent');
        // expect(instance.StoreCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreDeletedEvent (base name: "StoreDeletedEvent")', function() {
        // TODO: update the code to test the property StoreDeletedEvent
        expect(instance).to.have.property('StoreDeletedEvent');
        // expect(instance.StoreDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreAddressUpdatedEvent (base name: "StoreAddressUpdatedEvent")', function() {
        // TODO: update the code to test the property StoreAddressUpdatedEvent
        expect(instance).to.have.property('StoreAddressUpdatedEvent');
        // expect(instance.StoreAddressUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreKioskSettingUpdatedEvent (base name: "StoreKioskSettingUpdatedEvent")', function() {
        // TODO: update the code to test the property StoreKioskSettingUpdatedEvent
        expect(instance).to.have.property('StoreKioskSettingUpdatedEvent');
        // expect(instance.StoreKioskSettingUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryZoneCreatedEvent (base name: "DeliveryZoneCreatedEvent")', function() {
        // TODO: update the code to test the property DeliveryZoneCreatedEvent
        expect(instance).to.have.property('DeliveryZoneCreatedEvent');
        // expect(instance.DeliveryZoneCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryZoneUpdatedEvent (base name: "DeliveryZoneUpdatedEvent")', function() {
        // TODO: update the code to test the property DeliveryZoneUpdatedEvent
        expect(instance).to.have.property('DeliveryZoneUpdatedEvent');
        // expect(instance.DeliveryZoneUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryZoneDeletedEvent (base name: "DeliveryZoneDeletedEvent")', function() {
        // TODO: update the code to test the property DeliveryZoneDeletedEvent
        expect(instance).to.have.property('DeliveryZoneDeletedEvent');
        // expect(instance.DeliveryZoneDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreOpeningHoursUpdatedEvent (base name: "StoreOpeningHoursUpdatedEvent")', function() {
        // TODO: update the code to test the property StoreOpeningHoursUpdatedEvent
        expect(instance).to.have.property('StoreOpeningHoursUpdatedEvent');
        // expect(instance.StoreOpeningHoursUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreMenuAssignedEvent (base name: "StoreMenuAssignedEvent")', function() {
        // TODO: update the code to test the property StoreMenuAssignedEvent
        expect(instance).to.have.property('StoreMenuAssignedEvent');
        // expect(instance.StoreMenuAssignedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreBusinessHoursOverrideCreatedEvent (base name: "StoreBusinessHoursOverrideCreatedEvent")', function() {
        // TODO: update the code to test the property StoreBusinessHoursOverrideCreatedEvent
        expect(instance).to.have.property('StoreBusinessHoursOverrideCreatedEvent');
        // expect(instance.StoreBusinessHoursOverrideCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreBusinessHoursOverrideDeletedEvent (base name: "StoreBusinessHoursOverrideDeletedEvent")', function() {
        // TODO: update the code to test the property StoreBusinessHoursOverrideDeletedEvent
        expect(instance).to.have.property('StoreBusinessHoursOverrideDeletedEvent');
        // expect(instance.StoreBusinessHoursOverrideDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreArchivedEvent (base name: "StoreArchivedEvent")', function() {
        // TODO: update the code to test the property StoreArchivedEvent
        expect(instance).to.have.property('StoreArchivedEvent');
        // expect(instance.StoreArchivedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreUnarchivedEvent (base name: "StoreUnarchivedEvent")', function() {
        // TODO: update the code to test the property StoreUnarchivedEvent
        expect(instance).to.have.property('StoreUnarchivedEvent');
        // expect(instance.StoreUnarchivedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StorePublishedEvent (base name: "StorePublishedEvent")', function() {
        // TODO: update the code to test the property StorePublishedEvent
        expect(instance).to.have.property('StorePublishedEvent');
        // expect(instance.StorePublishedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreUnpublishedEvent (base name: "StoreUnpublishedEvent")', function() {
        // TODO: update the code to test the property StoreUnpublishedEvent
        expect(instance).to.have.property('StoreUnpublishedEvent');
        // expect(instance.StoreUnpublishedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreUpdatedEvent (base name: "StoreUpdatedEvent")', function() {
        // TODO: update the code to test the property StoreUpdatedEvent
        expect(instance).to.have.property('StoreUpdatedEvent');
        // expect(instance.StoreUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StorePreOrderConfigUpdatedEvent (base name: "StorePreOrderConfigUpdatedEvent")', function() {
        // TODO: update the code to test the property StorePreOrderConfigUpdatedEvent
        expect(instance).to.have.property('StorePreOrderConfigUpdatedEvent');
        // expect(instance.StorePreOrderConfigUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreLogoCreatedEvent (base name: "StoreLogoCreatedEvent")', function() {
        // TODO: update the code to test the property StoreLogoCreatedEvent
        expect(instance).to.have.property('StoreLogoCreatedEvent');
        // expect(instance.StoreLogoCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreLogoUpdatedEvent (base name: "StoreLogoUpdatedEvent")', function() {
        // TODO: update the code to test the property StoreLogoUpdatedEvent
        expect(instance).to.have.property('StoreLogoUpdatedEvent');
        // expect(instance.StoreLogoUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreLogoDeletedEvent (base name: "StoreLogoDeletedEvent")', function() {
        // TODO: update the code to test the property StoreLogoDeletedEvent
        expect(instance).to.have.property('StoreLogoDeletedEvent');
        // expect(instance.StoreLogoDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuCreatedEvent (base name: "MenuCreatedEvent")', function() {
        // TODO: update the code to test the property MenuCreatedEvent
        expect(instance).to.have.property('MenuCreatedEvent');
        // expect(instance.MenuCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuUpdatedEvent (base name: "MenuUpdatedEvent")', function() {
        // TODO: update the code to test the property MenuUpdatedEvent
        expect(instance).to.have.property('MenuUpdatedEvent');
        // expect(instance.MenuUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuUploadedEvent (base name: "MenuUploadedEvent")', function() {
        // TODO: update the code to test the property MenuUploadedEvent
        expect(instance).to.have.property('MenuUploadedEvent');
        // expect(instance.MenuUploadedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuBulkEditEvent (base name: "MenuBulkEditEvent")', function() {
        // TODO: update the code to test the property MenuBulkEditEvent
        expect(instance).to.have.property('MenuBulkEditEvent');
        // expect(instance.MenuBulkEditEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuSectionCreatedEvent (base name: "MenuSectionCreatedEvent")', function() {
        // TODO: update the code to test the property MenuSectionCreatedEvent
        expect(instance).to.have.property('MenuSectionCreatedEvent');
        // expect(instance.MenuSectionCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuSectionUpdatedEvent (base name: "MenuSectionUpdatedEvent")', function() {
        // TODO: update the code to test the property MenuSectionUpdatedEvent
        expect(instance).to.have.property('MenuSectionUpdatedEvent');
        // expect(instance.MenuSectionUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuSectionDeletedEvent (base name: "MenuSectionDeletedEvent")', function() {
        // TODO: update the code to test the property MenuSectionDeletedEvent
        expect(instance).to.have.property('MenuSectionDeletedEvent');
        // expect(instance.MenuSectionDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuSectionItemCreatedEvent (base name: "MenuSectionItemCreatedEvent")', function() {
        // TODO: update the code to test the property MenuSectionItemCreatedEvent
        expect(instance).to.have.property('MenuSectionItemCreatedEvent');
        // expect(instance.MenuSectionItemCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuSectionItemUpdatedEvent (base name: "MenuSectionItemUpdatedEvent")', function() {
        // TODO: update the code to test the property MenuSectionItemUpdatedEvent
        expect(instance).to.have.property('MenuSectionItemUpdatedEvent');
        // expect(instance.MenuSectionItemUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuSectionItemDeletedEvent (base name: "MenuSectionItemDeletedEvent")', function() {
        // TODO: update the code to test the property MenuSectionItemDeletedEvent
        expect(instance).to.have.property('MenuSectionItemDeletedEvent');
        // expect(instance.MenuSectionItemDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuItemOptionSetCreatedEvent (base name: "MenuItemOptionSetCreatedEvent")', function() {
        // TODO: update the code to test the property MenuItemOptionSetCreatedEvent
        expect(instance).to.have.property('MenuItemOptionSetCreatedEvent');
        // expect(instance.MenuItemOptionSetCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuItemOptionSetUpdatedEvent (base name: "MenuItemOptionSetUpdatedEvent")', function() {
        // TODO: update the code to test the property MenuItemOptionSetUpdatedEvent
        expect(instance).to.have.property('MenuItemOptionSetUpdatedEvent');
        // expect(instance.MenuItemOptionSetUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuItemOptionSetDeletedEvent (base name: "MenuItemOptionSetDeletedEvent")', function() {
        // TODO: update the code to test the property MenuItemOptionSetDeletedEvent
        expect(instance).to.have.property('MenuItemOptionSetDeletedEvent');
        // expect(instance.MenuItemOptionSetDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuItemOptionSetItemCreatedEvent (base name: "MenuItemOptionSetItemCreatedEvent")', function() {
        // TODO: update the code to test the property MenuItemOptionSetItemCreatedEvent
        expect(instance).to.have.property('MenuItemOptionSetItemCreatedEvent');
        // expect(instance.MenuItemOptionSetItemCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuItemOptionSetItemUpdatedEvent (base name: "MenuItemOptionSetItemUpdatedEvent")', function() {
        // TODO: update the code to test the property MenuItemOptionSetItemUpdatedEvent
        expect(instance).to.have.property('MenuItemOptionSetItemUpdatedEvent');
        // expect(instance.MenuItemOptionSetItemUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuItemOptionSetItemDeletedEvent (base name: "MenuItemOptionSetItemDeletedEvent")', function() {
        // TODO: update the code to test the property MenuItemOptionSetItemDeletedEvent
        expect(instance).to.have.property('MenuItemOptionSetItemDeletedEvent');
        // expect(instance.MenuItemOptionSetItemDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MenuCheckpointCreatedEvent (base name: "MenuCheckpointCreatedEvent")', function() {
        // TODO: update the code to test the property MenuCheckpointCreatedEvent
        expect(instance).to.have.property('MenuCheckpointCreatedEvent');
        // expect(instance.MenuCheckpointCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreGroupCreatedEvent (base name: "StoreGroupCreatedEvent")', function() {
        // TODO: update the code to test the property StoreGroupCreatedEvent
        expect(instance).to.have.property('StoreGroupCreatedEvent');
        // expect(instance.StoreGroupCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreGroupUpdatedEvent (base name: "StoreGroupUpdatedEvent")', function() {
        // TODO: update the code to test the property StoreGroupUpdatedEvent
        expect(instance).to.have.property('StoreGroupUpdatedEvent');
        // expect(instance.StoreGroupUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreGroupDeletedEvent (base name: "StoreGroupDeletedEvent")', function() {
        // TODO: update the code to test the property StoreGroupDeletedEvent
        expect(instance).to.have.property('StoreGroupDeletedEvent');
        // expect(instance.StoreGroupDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CustomerCreatedEvent (base name: "CustomerCreatedEvent")', function() {
        // TODO: update the code to test the property CustomerCreatedEvent
        expect(instance).to.have.property('CustomerCreatedEvent');
        // expect(instance.CustomerCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CustomerUpdatedEvent (base name: "CustomerUpdatedEvent")', function() {
        // TODO: update the code to test the property CustomerUpdatedEvent
        expect(instance).to.have.property('CustomerUpdatedEvent');
        // expect(instance.CustomerUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CustomerConsentUpdatedEvent (base name: "CustomerConsentUpdatedEvent")', function() {
        // TODO: update the code to test the property CustomerConsentUpdatedEvent
        expect(instance).to.have.property('CustomerConsentUpdatedEvent');
        // expect(instance.CustomerConsentUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property WebhookSubscriptionCreatedEvent (base name: "WebhookSubscriptionCreatedEvent")', function() {
        // TODO: update the code to test the property WebhookSubscriptionCreatedEvent
        expect(instance).to.have.property('WebhookSubscriptionCreatedEvent');
        // expect(instance.WebhookSubscriptionCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property WebhookSubscriptionUpdatedEvent (base name: "WebhookSubscriptionUpdatedEvent")', function() {
        // TODO: update the code to test the property WebhookSubscriptionUpdatedEvent
        expect(instance).to.have.property('WebhookSubscriptionUpdatedEvent');
        // expect(instance.WebhookSubscriptionUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property WebhookSubscriptionDeletedEvent (base name: "WebhookSubscriptionDeletedEvent")', function() {
        // TODO: update the code to test the property WebhookSubscriptionDeletedEvent
        expect(instance).to.have.property('WebhookSubscriptionDeletedEvent');
        // expect(instance.WebhookSubscriptionDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property PrinterTurnedOnEvent (base name: "PrinterTurnedOnEvent")', function() {
        // TODO: update the code to test the property PrinterTurnedOnEvent
        expect(instance).to.have.property('PrinterTurnedOnEvent');
        // expect(instance.PrinterTurnedOnEvent).to.be(expectedValueLiteral);
      });

      it('should have the property PrinterTurnedOffEvent (base name: "PrinterTurnedOffEvent")', function() {
        // TODO: update the code to test the property PrinterTurnedOffEvent
        expect(instance).to.have.property('PrinterTurnedOffEvent');
        // expect(instance.PrinterTurnedOffEvent).to.be(expectedValueLiteral);
      });

      it('should have the property PrinterAssignedToStoreEvent (base name: "PrinterAssignedToStoreEvent")', function() {
        // TODO: update the code to test the property PrinterAssignedToStoreEvent
        expect(instance).to.have.property('PrinterAssignedToStoreEvent');
        // expect(instance.PrinterAssignedToStoreEvent).to.be(expectedValueLiteral);
      });

      it('should have the property PrinterUnassignedFromStoreEvent (base name: "PrinterUnassignedFromStoreEvent")', function() {
        // TODO: update the code to test the property PrinterUnassignedFromStoreEvent
        expect(instance).to.have.property('PrinterUnassignedFromStoreEvent');
        // expect(instance.PrinterUnassignedFromStoreEvent).to.be(expectedValueLiteral);
      });

      it('should have the property PhoneCallStartedEvent (base name: "PhoneCallStartedEvent")', function() {
        // TODO: update the code to test the property PhoneCallStartedEvent
        expect(instance).to.have.property('PhoneCallStartedEvent');
        // expect(instance.PhoneCallStartedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property PhoneCallEndedEvent (base name: "PhoneCallEndedEvent")', function() {
        // TODO: update the code to test the property PhoneCallEndedEvent
        expect(instance).to.have.property('PhoneCallEndedEvent');
        // expect(instance.PhoneCallEndedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property LoyaltyCampaignCreatedEvent (base name: "LoyaltyCampaignCreatedEvent")', function() {
        // TODO: update the code to test the property LoyaltyCampaignCreatedEvent
        expect(instance).to.have.property('LoyaltyCampaignCreatedEvent');
        // expect(instance.LoyaltyCampaignCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property LoyaltyCampaignDeletedEvent (base name: "LoyaltyCampaignDeletedEvent")', function() {
        // TODO: update the code to test the property LoyaltyCampaignDeletedEvent
        expect(instance).to.have.property('LoyaltyCampaignDeletedEvent');
        // expect(instance.LoyaltyCampaignDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property LoyaltyCampaignUpdatedEvent (base name: "LoyaltyCampaignUpdatedEvent")', function() {
        // TODO: update the code to test the property LoyaltyCampaignUpdatedEvent
        expect(instance).to.have.property('LoyaltyCampaignUpdatedEvent');
        // expect(instance.LoyaltyCampaignUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property RetentionCampaignCreatedEvent (base name: "RetentionCampaignCreatedEvent")', function() {
        // TODO: update the code to test the property RetentionCampaignCreatedEvent
        expect(instance).to.have.property('RetentionCampaignCreatedEvent');
        // expect(instance.RetentionCampaignCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property RetentionCampaignDeletedEvent (base name: "RetentionCampaignDeletedEvent")', function() {
        // TODO: update the code to test the property RetentionCampaignDeletedEvent
        expect(instance).to.have.property('RetentionCampaignDeletedEvent');
        // expect(instance.RetentionCampaignDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property RetentionCampaignUpdatedEvent (base name: "RetentionCampaignUpdatedEvent")', function() {
        // TODO: update the code to test the property RetentionCampaignUpdatedEvent
        expect(instance).to.have.property('RetentionCampaignUpdatedEvent');
        // expect(instance.RetentionCampaignUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property SmsReceivedEvent (base name: "SmsReceivedEvent")', function() {
        // TODO: update the code to test the property SmsReceivedEvent
        expect(instance).to.have.property('SmsReceivedEvent');
        // expect(instance.SmsReceivedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property UserLoginEvent (base name: "UserLoginEvent")', function() {
        // TODO: update the code to test the property UserLoginEvent
        expect(instance).to.have.property('UserLoginEvent');
        // expect(instance.UserLoginEvent).to.be(expectedValueLiteral);
      });

      it('should have the property UserCreatedEvent (base name: "UserCreatedEvent")', function() {
        // TODO: update the code to test the property UserCreatedEvent
        expect(instance).to.have.property('UserCreatedEvent');
        // expect(instance.UserCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property UserUpdatedEvent (base name: "UserUpdatedEvent")', function() {
        // TODO: update the code to test the property UserUpdatedEvent
        expect(instance).to.have.property('UserUpdatedEvent');
        // expect(instance.UserUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property UserDeletedEvent (base name: "UserDeletedEvent")', function() {
        // TODO: update the code to test the property UserDeletedEvent
        expect(instance).to.have.property('UserDeletedEvent');
        // expect(instance.UserDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property UserCreatedPasswordEvent (base name: "UserCreatedPasswordEvent")', function() {
        // TODO: update the code to test the property UserCreatedPasswordEvent
        expect(instance).to.have.property('UserCreatedPasswordEvent');
        // expect(instance.UserCreatedPasswordEvent).to.be(expectedValueLiteral);
      });

      it('should have the property UserAnsweredSignupQuestionsEvent (base name: "UserAnsweredSignupQuestionsEvent")', function() {
        // TODO: update the code to test the property UserAnsweredSignupQuestionsEvent
        expect(instance).to.have.property('UserAnsweredSignupQuestionsEvent');
        // expect(instance.UserAnsweredSignupQuestionsEvent).to.be(expectedValueLiteral);
      });

      it('should have the property VoucherCreatedEvent (base name: "VoucherCreatedEvent")', function() {
        // TODO: update the code to test the property VoucherCreatedEvent
        expect(instance).to.have.property('VoucherCreatedEvent');
        // expect(instance.VoucherCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property VoucherUpdatedEvent (base name: "VoucherUpdatedEvent")', function() {
        // TODO: update the code to test the property VoucherUpdatedEvent
        expect(instance).to.have.property('VoucherUpdatedEvent');
        // expect(instance.VoucherUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property VoucherDeletedEvent (base name: "VoucherDeletedEvent")', function() {
        // TODO: update the code to test the property VoucherDeletedEvent
        expect(instance).to.have.property('VoucherDeletedEvent');
        // expect(instance.VoucherDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property TeammateInviteSentEvent (base name: "TeammateInviteSentEvent")', function() {
        // TODO: update the code to test the property TeammateInviteSentEvent
        expect(instance).to.have.property('TeammateInviteSentEvent');
        // expect(instance.TeammateInviteSentEvent).to.be(expectedValueLiteral);
      });

      it('should have the property TeammateInviteAcceptedEvent (base name: "TeammateInviteAcceptedEvent")', function() {
        // TODO: update the code to test the property TeammateInviteAcceptedEvent
        expect(instance).to.have.property('TeammateInviteAcceptedEvent');
        // expect(instance.TeammateInviteAcceptedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property TeammateUpdatedEvent (base name: "TeammateUpdatedEvent")', function() {
        // TODO: update the code to test the property TeammateUpdatedEvent
        expect(instance).to.have.property('TeammateUpdatedEvent');
        // expect(instance.TeammateUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property TeammateDeletedEvent (base name: "TeammateDeletedEvent")', function() {
        // TODO: update the code to test the property TeammateDeletedEvent
        expect(instance).to.have.property('TeammateDeletedEvent');
        // expect(instance.TeammateDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property BankAccountCreatedEvent (base name: "BankAccountCreatedEvent")', function() {
        // TODO: update the code to test the property BankAccountCreatedEvent
        expect(instance).to.have.property('BankAccountCreatedEvent');
        // expect(instance.BankAccountCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property BankAccountUpdatedEvent (base name: "BankAccountUpdatedEvent")', function() {
        // TODO: update the code to test the property BankAccountUpdatedEvent
        expect(instance).to.have.property('BankAccountUpdatedEvent');
        // expect(instance.BankAccountUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property BankAccountDeletedEvent (base name: "BankAccountDeletedEvent")', function() {
        // TODO: update the code to test the property BankAccountDeletedEvent
        expect(instance).to.have.property('BankAccountDeletedEvent');
        // expect(instance.BankAccountDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property BankAccountAssignedEvent (base name: "BankAccountAssignedEvent")', function() {
        // TODO: update the code to test the property BankAccountAssignedEvent
        expect(instance).to.have.property('BankAccountAssignedEvent');
        // expect(instance.BankAccountAssignedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property HydraAssignedEvent (base name: "HydraAssignedEvent")', function() {
        // TODO: update the code to test the property HydraAssignedEvent
        expect(instance).to.have.property('HydraAssignedEvent');
        // expect(instance.HydraAssignedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property HydraRequestResetEvent (base name: "HydraRequestResetEvent")', function() {
        // TODO: update the code to test the property HydraRequestResetEvent
        expect(instance).to.have.property('HydraRequestResetEvent');
        // expect(instance.HydraRequestResetEvent).to.be(expectedValueLiteral);
      });

      it('should have the property HydraStoreAssignedEvent (base name: "HydraStoreAssignedEvent")', function() {
        // TODO: update the code to test the property HydraStoreAssignedEvent
        expect(instance).to.have.property('HydraStoreAssignedEvent');
        // expect(instance.HydraStoreAssignedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property HydraStoreUnassignedEvent (base name: "HydraStoreUnassignedEvent")', function() {
        // TODO: update the code to test the property HydraStoreUnassignedEvent
        expect(instance).to.have.property('HydraStoreUnassignedEvent');
        // expect(instance.HydraStoreUnassignedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property HydraSettingChangedEvent (base name: "HydraSettingChangedEvent")', function() {
        // TODO: update the code to test the property HydraSettingChangedEvent
        expect(instance).to.have.property('HydraSettingChangedEvent');
        // expect(instance.HydraSettingChangedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property HydraUnAssignedEvent (base name: "HydraUnAssignedEvent")', function() {
        // TODO: update the code to test the property HydraUnAssignedEvent
        expect(instance).to.have.property('HydraUnAssignedEvent');
        // expect(instance.HydraUnAssignedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property HydraConnectionStatusChangedEvent (base name: "HydraConnectionStatusChangedEvent")', function() {
        // TODO: update the code to test the property HydraConnectionStatusChangedEvent
        expect(instance).to.have.property('HydraConnectionStatusChangedEvent');
        // expect(instance.HydraConnectionStatusChangedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskBluetoothPairingModeEvent (base name: "KioskBluetoothPairingModeEvent")', function() {
        // TODO: update the code to test the property KioskBluetoothPairingModeEvent
        expect(instance).to.have.property('KioskBluetoothPairingModeEvent');
        // expect(instance.KioskBluetoothPairingModeEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskBluetoothUnpairingModeEvent (base name: "KioskBluetoothUnpairingModeEvent")', function() {
        // TODO: update the code to test the property KioskBluetoothUnpairingModeEvent
        expect(instance).to.have.property('KioskBluetoothUnpairingModeEvent');
        // expect(instance.KioskBluetoothUnpairingModeEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskBluetoothTerminalUnpairedEvent (base name: "KioskBluetoothTerminalUnpairedEvent")', function() {
        // TODO: update the code to test the property KioskBluetoothTerminalUnpairedEvent
        expect(instance).to.have.property('KioskBluetoothTerminalUnpairedEvent');
        // expect(instance.KioskBluetoothTerminalUnpairedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskTerminalActionStateChangedEvent (base name: "KioskTerminalActionStateChangedEvent")', function() {
        // TODO: update the code to test the property KioskTerminalActionStateChangedEvent
        expect(instance).to.have.property('KioskTerminalActionStateChangedEvent');
        // expect(instance.KioskTerminalActionStateChangedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskBluetoothTerminalUpdatedEvent (base name: "KioskBluetoothTerminalUpdatedEvent")', function() {
        // TODO: update the code to test the property KioskBluetoothTerminalUpdatedEvent
        expect(instance).to.have.property('KioskBluetoothTerminalUpdatedEvent');
        // expect(instance.KioskBluetoothTerminalUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskBluetoothTerminalInitiateUpdateCheckEvent (base name: "KioskBluetoothTerminalInitiateUpdateCheckEvent")', function() {
        // TODO: update the code to test the property KioskBluetoothTerminalInitiateUpdateCheckEvent
        expect(instance).to.have.property('KioskBluetoothTerminalInitiateUpdateCheckEvent');
        // expect(instance.KioskBluetoothTerminalInitiateUpdateCheckEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskBluetoothInstallUpdateInitiateEvent (base name: "KioskBluetoothInstallUpdateInitiateEvent")', function() {
        // TODO: update the code to test the property KioskBluetoothInstallUpdateInitiateEvent
        expect(instance).to.have.property('KioskBluetoothInstallUpdateInitiateEvent');
        // expect(instance.KioskBluetoothInstallUpdateInitiateEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskBluetoothTerminalCancelUpdateEvent (base name: "KioskBluetoothTerminalCancelUpdateEvent")', function() {
        // TODO: update the code to test the property KioskBluetoothTerminalCancelUpdateEvent
        expect(instance).to.have.property('KioskBluetoothTerminalCancelUpdateEvent');
        // expect(instance.KioskBluetoothTerminalCancelUpdateEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskBluetoothTerminalFirmwareVersionStatusEvent (base name: "KioskBluetoothTerminalFirmwareVersionStatusEvent")', function() {
        // TODO: update the code to test the property KioskBluetoothTerminalFirmwareVersionStatusEvent
        expect(instance).to.have.property('KioskBluetoothTerminalFirmwareVersionStatusEvent');
        // expect(instance.KioskBluetoothTerminalFirmwareVersionStatusEvent).to.be(expectedValueLiteral);
      });

      it('should have the property KioskBluetoothTerminalInstallationStatusEvent (base name: "KioskBluetoothTerminalInstallationStatusEvent")', function() {
        // TODO: update the code to test the property KioskBluetoothTerminalInstallationStatusEvent
        expect(instance).to.have.property('KioskBluetoothTerminalInstallationStatusEvent');
        // expect(instance.KioskBluetoothTerminalInstallationStatusEvent).to.be(expectedValueLiteral);
      });

      it('should have the property PushNotificationScheduledEvent (base name: "PushNotificationScheduledEvent")', function() {
        // TODO: update the code to test the property PushNotificationScheduledEvent
        expect(instance).to.have.property('PushNotificationScheduledEvent');
        // expect(instance.PushNotificationScheduledEvent).to.be(expectedValueLiteral);
      });

      it('should have the property PushNotificationSentEvent (base name: "PushNotificationSentEvent")', function() {
        // TODO: update the code to test the property PushNotificationSentEvent
        expect(instance).to.have.property('PushNotificationSentEvent');
        // expect(instance.PushNotificationSentEvent).to.be(expectedValueLiteral);
      });

      it('should have the property PushNotificationDeletedEvent (base name: "PushNotificationDeletedEvent")', function() {
        // TODO: update the code to test the property PushNotificationDeletedEvent
        expect(instance).to.have.property('PushNotificationDeletedEvent');
        // expect(instance.PushNotificationDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property DnsVerifiedEvent (base name: "DnsVerifiedEvent")', function() {
        // TODO: update the code to test the property DnsVerifiedEvent
        expect(instance).to.have.property('DnsVerifiedEvent');
        // expect(instance.DnsVerifiedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CertificateCreatedEvent (base name: "CertificateCreatedEvent")', function() {
        // TODO: update the code to test the property CertificateCreatedEvent
        expect(instance).to.have.property('CertificateCreatedEvent');
        // expect(instance.CertificateCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CertificateRenewedEvent (base name: "CertificateRenewedEvent")', function() {
        // TODO: update the code to test the property CertificateRenewedEvent
        expect(instance).to.have.property('CertificateRenewedEvent');
        // expect(instance.CertificateRenewedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property WebsiteVanityUrlUpdatedEvent (base name: "WebsiteVanityUrlUpdatedEvent")', function() {
        // TODO: update the code to test the property WebsiteVanityUrlUpdatedEvent
        expect(instance).to.have.property('WebsiteVanityUrlUpdatedEvent');
        // expect(instance.WebsiteVanityUrlUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property WebsiteUpdatedEvent (base name: "WebsiteUpdatedEvent")', function() {
        // TODO: update the code to test the property WebsiteUpdatedEvent
        expect(instance).to.have.property('WebsiteUpdatedEvent');
        // expect(instance.WebsiteUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderCapacityUpdatedEvent (base name: "OrderCapacityUpdatedEvent")', function() {
        // TODO: update the code to test the property OrderCapacityUpdatedEvent
        expect(instance).to.have.property('OrderCapacityUpdatedEvent');
        // expect(instance.OrderCapacityUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property ExternalStoreEvent (base name: "ExternalStoreEvent")', function() {
        // TODO: update the code to test the property ExternalStoreEvent
        expect(instance).to.have.property('ExternalStoreEvent');
        // expect(instance.ExternalStoreEvent).to.be(expectedValueLiteral);
      });

      it('should have the property OrderFulfillmentStatusUpdatedEvent (base name: "OrderFulfillmentStatusUpdatedEvent")', function() {
        // TODO: update the code to test the property OrderFulfillmentStatusUpdatedEvent
        expect(instance).to.have.property('OrderFulfillmentStatusUpdatedEvent');
        // expect(instance.OrderFulfillmentStatusUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property AppStoreConfigCreatedEvent (base name: "AppStoreConfigCreatedEvent")', function() {
        // TODO: update the code to test the property AppStoreConfigCreatedEvent
        expect(instance).to.have.property('AppStoreConfigCreatedEvent');
        // expect(instance.AppStoreConfigCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property AppStoreConfigUpdatedEvent (base name: "AppStoreConfigUpdatedEvent")', function() {
        // TODO: update the code to test the property AppStoreConfigUpdatedEvent
        expect(instance).to.have.property('AppStoreConfigUpdatedEvent');
        // expect(instance.AppStoreConfigUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property AppStoreConfigDeletedEvent (base name: "AppStoreConfigDeletedEvent")', function() {
        // TODO: update the code to test the property AppStoreConfigDeletedEvent
        expect(instance).to.have.property('AppStoreConfigDeletedEvent');
        // expect(instance.AppStoreConfigDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CatalogItemCreatedEvent (base name: "CatalogItemCreatedEvent")', function() {
        // TODO: update the code to test the property CatalogItemCreatedEvent
        expect(instance).to.have.property('CatalogItemCreatedEvent');
        // expect(instance.CatalogItemCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CatalogItemUpdatedEvent (base name: "CatalogItemUpdatedEvent")', function() {
        // TODO: update the code to test the property CatalogItemUpdatedEvent
        expect(instance).to.have.property('CatalogItemUpdatedEvent');
        // expect(instance.CatalogItemUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CatalogItemArchivedEvent (base name: "CatalogItemArchivedEvent")', function() {
        // TODO: update the code to test the property CatalogItemArchivedEvent
        expect(instance).to.have.property('CatalogItemArchivedEvent');
        // expect(instance.CatalogItemArchivedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CatalogGroupCreatedEvent (base name: "CatalogGroupCreatedEvent")', function() {
        // TODO: update the code to test the property CatalogGroupCreatedEvent
        expect(instance).to.have.property('CatalogGroupCreatedEvent');
        // expect(instance.CatalogGroupCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CatalogGroupUpdatedEvent (base name: "CatalogGroupUpdatedEvent")', function() {
        // TODO: update the code to test the property CatalogGroupUpdatedEvent
        expect(instance).to.have.property('CatalogGroupUpdatedEvent');
        // expect(instance.CatalogGroupUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property CatalogGroupArchivedEvent (base name: "CatalogGroupArchivedEvent")', function() {
        // TODO: update the code to test the property CatalogGroupArchivedEvent
        expect(instance).to.have.property('CatalogGroupArchivedEvent');
        // expect(instance.CatalogGroupArchivedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreTipUpdatedEvent (base name: "StoreTipUpdatedEvent")', function() {
        // TODO: update the code to test the property StoreTipUpdatedEvent
        expect(instance).to.have.property('StoreTipUpdatedEvent');
        // expect(instance.StoreTipUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property LocationAreaCreatedEvent (base name: "LocationAreaCreatedEvent")', function() {
        // TODO: update the code to test the property LocationAreaCreatedEvent
        expect(instance).to.have.property('LocationAreaCreatedEvent');
        // expect(instance.LocationAreaCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property LocationAreaUpdatedEvent (base name: "LocationAreaUpdatedEvent")', function() {
        // TODO: update the code to test the property LocationAreaUpdatedEvent
        expect(instance).to.have.property('LocationAreaUpdatedEvent');
        // expect(instance.LocationAreaUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property LocationCreatedEvent (base name: "LocationCreatedEvent")', function() {
        // TODO: update the code to test the property LocationCreatedEvent
        expect(instance).to.have.property('LocationCreatedEvent');
        // expect(instance.LocationCreatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property LocationDeletedEvent (base name: "LocationDeletedEvent")', function() {
        // TODO: update the code to test the property LocationDeletedEvent
        expect(instance).to.have.property('LocationDeletedEvent');
        // expect(instance.LocationDeletedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreServiceChargeUpdatedEvent (base name: "StoreServiceChargeUpdatedEvent")', function() {
        // TODO: update the code to test the property StoreServiceChargeUpdatedEvent
        expect(instance).to.have.property('StoreServiceChargeUpdatedEvent');
        // expect(instance.StoreServiceChargeUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MobileAppsSubmissionStatusUpdatedEvent (base name: "MobileAppsSubmissionStatusUpdatedEvent")', function() {
        // TODO: update the code to test the property MobileAppsSubmissionStatusUpdatedEvent
        expect(instance).to.have.property('MobileAppsSubmissionStatusUpdatedEvent');
        // expect(instance.MobileAppsSubmissionStatusUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property MobileAppsSubmissionUpdatedEvent (base name: "MobileAppsSubmissionUpdatedEvent")', function() {
        // TODO: update the code to test the property MobileAppsSubmissionUpdatedEvent
        expect(instance).to.have.property('MobileAppsSubmissionUpdatedEvent');
        // expect(instance.MobileAppsSubmissionUpdatedEvent).to.be(expectedValueLiteral);
      });

      it('should have the property StoreFeeConfigUpdatedEvent (base name: "StoreFeeConfigUpdatedEvent")', function() {
        // TODO: update the code to test the property StoreFeeConfigUpdatedEvent
        expect(instance).to.have.property('StoreFeeConfigUpdatedEvent');
        // expect(instance.StoreFeeConfigUpdatedEvent).to.be(expectedValueLiteral);
      });

    });
  });

}));
