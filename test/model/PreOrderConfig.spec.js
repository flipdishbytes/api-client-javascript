/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PreOrderConfig', function() {
      beforeEach(function() {
        instance = new Flipdish.PreOrderConfig();
      });

      it('should create an instance of PreOrderConfig', function() {
        // TODO: update the code to test PreOrderConfig
        expect(instance).to.be.a(Flipdish.PreOrderConfig);
      });

      it('should have the property LeadTimeMinutes (base name: "LeadTimeMinutes")', function() {
        // TODO: update the code to test the property LeadTimeMinutes
        expect(instance).to.have.property('LeadTimeMinutes');
        // expect(instance.LeadTimeMinutes).to.be(expectedValueLiteral);
      });

      it('should have the property IntervalMinutes (base name: "IntervalMinutes")', function() {
        // TODO: update the code to test the property IntervalMinutes
        expect(instance).to.have.property('IntervalMinutes');
        // expect(instance.IntervalMinutes).to.be(expectedValueLiteral);
      });

      it('should have the property MaxOrderAheadDays (base name: "MaxOrderAheadDays")', function() {
        // TODO: update the code to test the property MaxOrderAheadDays
        expect(instance).to.have.property('MaxOrderAheadDays');
        // expect(instance.MaxOrderAheadDays).to.be(expectedValueLiteral);
      });

      it('should have the property IncludeAsap (base name: "IncludeAsap")', function() {
        // TODO: update the code to test the property IncludeAsap
        expect(instance).to.have.property('IncludeAsap');
        // expect(instance.IncludeAsap).to.be(expectedValueLiteral);
      });

      it('should have the property IncludeMoreGranularInitialTime (base name: "IncludeMoreGranularInitialTime")', function() {
        // TODO: update the code to test the property IncludeMoreGranularInitialTime
        expect(instance).to.have.property('IncludeMoreGranularInitialTime');
        // expect(instance.IncludeMoreGranularInitialTime).to.be(expectedValueLiteral);
      });

      it('should have the property CutOffTimePreviousDayBasic (base name: "CutOffTimePreviousDayBasic")', function() {
        // TODO: update the code to test the property CutOffTimePreviousDayBasic
        expect(instance).to.have.property('CutOffTimePreviousDayBasic');
        // expect(instance.CutOffTimePreviousDayBasic).to.be(expectedValueLiteral);
      });

      it('should have the property CutOffTimeCurrentDayBasic (base name: "CutOffTimeCurrentDayBasic")', function() {
        // TODO: update the code to test the property CutOffTimeCurrentDayBasic
        expect(instance).to.have.property('CutOffTimeCurrentDayBasic');
        // expect(instance.CutOffTimeCurrentDayBasic).to.be(expectedValueLiteral);
      });

      it('should have the property PreOrderTimeDisplayType (base name: "PreOrderTimeDisplayType")', function() {
        // TODO: update the code to test the property PreOrderTimeDisplayType
        expect(instance).to.have.property('PreOrderTimeDisplayType');
        // expect(instance.PreOrderTimeDisplayType).to.be(expectedValueLiteral);
      });

      it('should have the property AlwaysAppearOpen (base name: "AlwaysAppearOpen")', function() {
        // TODO: update the code to test the property AlwaysAppearOpen
        expect(instance).to.have.property('AlwaysAppearOpen');
        // expect(instance.AlwaysAppearOpen).to.be(expectedValueLiteral);
      });

      it('should have the property RequireExplicitSelectAlways (base name: "RequireExplicitSelectAlways")', function() {
        // TODO: update the code to test the property RequireExplicitSelectAlways
        expect(instance).to.have.property('RequireExplicitSelectAlways');
        // expect(instance.RequireExplicitSelectAlways).to.be(expectedValueLiteral);
      });

    });
  });

}));
