/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OAuthApp', function() {
      beforeEach(function() {
        instance = new Flipdish.OAuthApp();
      });

      it('should create an instance of OAuthApp', function() {
        // TODO: update the code to test OAuthApp
        expect(instance).to.be.a(Flipdish.OAuthApp);
      });

      it('should have the property OauthAppId (base name: "OauthAppId")', function() {
        // TODO: update the code to test the property OauthAppId
        expect(instance).to.have.property('OauthAppId');
        // expect(instance.OauthAppId).to.be(expectedValueLiteral);
      });

      it('should have the property OauthAppName (base name: "OauthAppName")', function() {
        // TODO: update the code to test the property OauthAppName
        expect(instance).to.have.property('OauthAppName');
        // expect(instance.OauthAppName).to.be(expectedValueLiteral);
      });

      it('should have the property OwnerUserId (base name: "OwnerUserId")', function() {
        // TODO: update the code to test the property OwnerUserId
        expect(instance).to.have.property('OwnerUserId');
        // expect(instance.OwnerUserId).to.be(expectedValueLiteral);
      });

      it('should have the property LogoUri (base name: "LogoUri")', function() {
        // TODO: update the code to test the property LogoUri
        expect(instance).to.have.property('LogoUri');
        // expect(instance.LogoUri).to.be(expectedValueLiteral);
      });

      it('should have the property Flow (base name: "Flow")', function() {
        // TODO: update the code to test the property Flow
        expect(instance).to.have.property('Flow');
        // expect(instance.Flow).to.be(expectedValueLiteral);
      });

      it('should have the property RefreshTokenUsage (base name: "RefreshTokenUsage")', function() {
        // TODO: update the code to test the property RefreshTokenUsage
        expect(instance).to.have.property('RefreshTokenUsage');
        // expect(instance.RefreshTokenUsage).to.be(expectedValueLiteral);
      });

      it('should have the property AccessTokenLifetime (base name: "AccessTokenLifetime")', function() {
        // TODO: update the code to test the property AccessTokenLifetime
        expect(instance).to.have.property('AccessTokenLifetime');
        // expect(instance.AccessTokenLifetime).to.be(expectedValueLiteral);
      });

      it('should have the property AbsoluteRefreshTokenLifetime (base name: "AbsoluteRefreshTokenLifetime")', function() {
        // TODO: update the code to test the property AbsoluteRefreshTokenLifetime
        expect(instance).to.have.property('AbsoluteRefreshTokenLifetime');
        // expect(instance.AbsoluteRefreshTokenLifetime).to.be(expectedValueLiteral);
      });

    });
  });

}));
