/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PayoutReport3RefundedOrder', function() {
      beforeEach(function() {
        instance = new Flipdish.PayoutReport3RefundedOrder();
      });

      it('should create an instance of PayoutReport3RefundedOrder', function() {
        // TODO: update the code to test PayoutReport3RefundedOrder
        expect(instance).to.be.a(Flipdish.PayoutReport3RefundedOrder);
      });

      it('should have the property OrderId (base name: "OrderId")', function() {
        // TODO: update the code to test the property OrderId
        expect(instance).to.have.property('OrderId');
        // expect(instance.OrderId).to.be(expectedValueLiteral);
      });

      it('should have the property PlacedAtTime (base name: "PlacedAtTime")', function() {
        // TODO: update the code to test the property PlacedAtTime
        expect(instance).to.have.property('PlacedAtTime');
        // expect(instance.PlacedAtTime).to.be(expectedValueLiteral);
      });

      it('should have the property ModifiedAtTime (base name: "ModifiedAtTime")', function() {
        // TODO: update the code to test the property ModifiedAtTime
        expect(instance).to.have.property('ModifiedAtTime');
        // expect(instance.ModifiedAtTime).to.be(expectedValueLiteral);
      });

      it('should have the property StoreName (base name: "StoreName")', function() {
        // TODO: update the code to test the property StoreName
        expect(instance).to.have.property('StoreName');
        // expect(instance.StoreName).to.be(expectedValueLiteral);
      });

      it('should have the property Type (base name: "Type")', function() {
        // TODO: update the code to test the property Type
        expect(instance).to.have.property('Type');
        // expect(instance.Type).to.be(expectedValueLiteral);
      });

      it('should have the property RefundedAmount (base name: "RefundedAmount")', function() {
        // TODO: update the code to test the property RefundedAmount
        expect(instance).to.have.property('RefundedAmount');
        // expect(instance.RefundedAmount).to.be(expectedValueLiteral);
      });

      it('should have the property RefundedFees (base name: "RefundedFees")', function() {
        // TODO: update the code to test the property RefundedFees
        expect(instance).to.have.property('RefundedFees');
        // expect(instance.RefundedFees).to.be(expectedValueLiteral);
      });

      it('should have the property RefundType (base name: "RefundType")', function() {
        // TODO: update the code to test the property RefundType
        expect(instance).to.have.property('RefundType');
        // expect(instance.RefundType).to.be(expectedValueLiteral);
      });

      it('should have the property CashFeeRefundedToCustomer (base name: "CashFeeRefundedToCustomer")', function() {
        // TODO: update the code to test the property CashFeeRefundedToCustomer
        expect(instance).to.have.property('CashFeeRefundedToCustomer');
        // expect(instance.CashFeeRefundedToCustomer).to.be(expectedValueLiteral);
      });

    });
  });

}));
