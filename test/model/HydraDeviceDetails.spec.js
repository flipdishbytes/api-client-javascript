/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HydraDeviceDetails', function() {
      beforeEach(function() {
        instance = new Flipdish.HydraDeviceDetails();
      });

      it('should create an instance of HydraDeviceDetails', function() {
        // TODO: update the code to test HydraDeviceDetails
        expect(instance).to.be.a(Flipdish.HydraDeviceDetails);
      });

      it('should have the property HydraConfigId (base name: "HydraConfigId")', function() {
        // TODO: update the code to test the property HydraConfigId
        expect(instance).to.have.property('HydraConfigId');
        // expect(instance.HydraConfigId).to.be(expectedValueLiteral);
      });

      it('should have the property DeviceId (base name: "DeviceId")', function() {
        // TODO: update the code to test the property DeviceId
        expect(instance).to.have.property('DeviceId');
        // expect(instance.DeviceId).to.be(expectedValueLiteral);
      });

      it('should have the property SerialNumber (base name: "SerialNumber")', function() {
        // TODO: update the code to test the property SerialNumber
        expect(instance).to.have.property('SerialNumber');
        // expect(instance.SerialNumber).to.be(expectedValueLiteral);
      });

      it('should have the property DeviceType (base name: "DeviceType")', function() {
        // TODO: update the code to test the property DeviceType
        expect(instance).to.have.property('DeviceType');
        // expect(instance.DeviceType).to.be(expectedValueLiteral);
      });

      it('should have the property Status (base name: "Status")', function() {
        // TODO: update the code to test the property Status
        expect(instance).to.have.property('Status');
        // expect(instance.Status).to.be(expectedValueLiteral);
      });

      it('should have the property DeviceName (base name: "DeviceName")', function() {
        // TODO: update the code to test the property DeviceName
        expect(instance).to.have.property('DeviceName');
        // expect(instance.DeviceName).to.be(expectedValueLiteral);
      });

      it('should have the property StoreNames (base name: "StoreNames")', function() {
        // TODO: update the code to test the property StoreNames
        expect(instance).to.have.property('StoreNames');
        // expect(instance.StoreNames).to.be(expectedValueLiteral);
      });

      it('should have the property LastPollUtc (base name: "LastPollUtc")', function() {
        // TODO: update the code to test the property LastPollUtc
        expect(instance).to.have.property('LastPollUtc');
        // expect(instance.LastPollUtc).to.be(expectedValueLiteral);
      });

      it('should have the property Version (base name: "Version")', function() {
        // TODO: update the code to test the property Version
        expect(instance).to.have.property('Version');
        // expect(instance.Version).to.be(expectedValueLiteral);
      });

      it('should have the property BuildNumber (base name: "BuildNumber")', function() {
        // TODO: update the code to test the property BuildNumber
        expect(instance).to.have.property('BuildNumber');
        // expect(instance.BuildNumber).to.be(expectedValueLiteral);
      });

      it('should have the property GitSha (base name: "GitSha")', function() {
        // TODO: update the code to test the property GitSha
        expect(instance).to.have.property('GitSha');
        // expect(instance.GitSha).to.be(expectedValueLiteral);
      });

      it('should have the property GitBranch (base name: "GitBranch")', function() {
        // TODO: update the code to test the property GitBranch
        expect(instance).to.have.property('GitBranch');
        // expect(instance.GitBranch).to.be(expectedValueLiteral);
      });

    });
  });

}));
