/**
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.Order();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Order', function() {
    it('should create an instance of Order', function() {
      // uncomment below and update the code to test Order
      //var instane = new Flipdish.Order();
      //expect(instance).to.be.a(Flipdish.Order);
    });

    it('should have the property store (base name: "Store")', function() {
      // uncomment below and update the code to test the property store
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property customer (base name: "Customer")', function() {
      // uncomment below and update the code to test the property customer
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property voucher (base name: "Voucher")', function() {
      // uncomment below and update the code to test the property voucher
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property fees (base name: "Fees")', function() {
      // uncomment below and update the code to test the property fees
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderItems (base name: "OrderItems")', function() {
      // uncomment below and update the code to test the property orderItems
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property deliveryLocation (base name: "DeliveryLocation")', function() {
      // uncomment below and update the code to test the property deliveryLocation
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property customerLocation (base name: "CustomerLocation")', function() {
      // uncomment below and update the code to test the property customerLocation
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderId (base name: "OrderId")', function() {
      // uncomment below and update the code to test the property orderId
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property deliveryType (base name: "DeliveryType")', function() {
      // uncomment below and update the code to test the property deliveryType
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property pickupLocationType (base name: "PickupLocationType")', function() {
      // uncomment below and update the code to test the property pickupLocationType
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property tipAmount (base name: "TipAmount")', function() {
      // uncomment below and update the code to test the property tipAmount
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property deliveryAmount (base name: "DeliveryAmount")', function() {
      // uncomment below and update the code to test the property deliveryAmount
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderItemsAmount (base name: "OrderItemsAmount")', function() {
      // uncomment below and update the code to test the property orderItemsAmount
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "Amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property processingFee (base name: "ProcessingFee")', function() {
      // uncomment below and update the code to test the property processingFee
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property paymentAccountType (base name: "PaymentAccountType")', function() {
      // uncomment below and update the code to test the property paymentAccountType
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property paymentAccountDescription (base name: "PaymentAccountDescription")', function() {
      // uncomment below and update the code to test the property paymentAccountDescription
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property orderState (base name: "OrderState")', function() {
      // uncomment below and update the code to test the property orderState
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property isPreOrder (base name: "IsPreOrder")', function() {
      // uncomment below and update the code to test the property isPreOrder
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property placedTime (base name: "PlacedTime")', function() {
      // uncomment below and update the code to test the property placedTime
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property requestedForTime (base name: "RequestedForTime")', function() {
      // uncomment below and update the code to test the property requestedForTime
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property chefNote (base name: "ChefNote")', function() {
      // uncomment below and update the code to test the property chefNote
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property appType (base name: "AppType")', function() {
      // uncomment below and update the code to test the property appType
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

    it('should have the property userRating (base name: "UserRating")', function() {
      // uncomment below and update the code to test the property userRating
      //var instane = new Flipdish.Order();
      //expect(instance).to.be();
    });

  });

}));
