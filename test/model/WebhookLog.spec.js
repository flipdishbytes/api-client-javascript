/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('WebhookLog', function() {
      beforeEach(function() {
        instance = new Flipdish.WebhookLog();
      });

      it('should create an instance of WebhookLog', function() {
        // TODO: update the code to test WebhookLog
        expect(instance).to.be.a(Flipdish.WebhookLog);
      });

      it('should have the property WebhookSubscriptionOwnerUserId (base name: "WebhookSubscriptionOwnerUserId")', function() {
        // TODO: update the code to test the property WebhookSubscriptionOwnerUserId
        expect(instance).to.have.property('WebhookSubscriptionOwnerUserId');
        // expect(instance.WebhookSubscriptionOwnerUserId).to.be(expectedValueLiteral);
      });

      it('should have the property EventCreated (base name: "EventCreated")', function() {
        // TODO: update the code to test the property EventCreated
        expect(instance).to.have.property('EventCreated');
        // expect(instance.EventCreated).to.be(expectedValueLiteral);
      });

      it('should have the property WebhookTriggered (base name: "WebhookTriggered")', function() {
        // TODO: update the code to test the property WebhookTriggered
        expect(instance).to.have.property('WebhookTriggered');
        // expect(instance.WebhookTriggered).to.be(expectedValueLiteral);
      });

      it('should have the property WebhookEventName (base name: "WebhookEventName")', function() {
        // TODO: update the code to test the property WebhookEventName
        expect(instance).to.have.property('WebhookEventName');
        // expect(instance.WebhookEventName).to.be(expectedValueLiteral);
      });

      it('should have the property WebhookSubscriptionCallbackUrl (base name: "WebhookSubscriptionCallbackUrl")', function() {
        // TODO: update the code to test the property WebhookSubscriptionCallbackUrl
        expect(instance).to.have.property('WebhookSubscriptionCallbackUrl');
        // expect(instance.WebhookSubscriptionCallbackUrl).to.be(expectedValueLiteral);
      });

      it('should have the property HttpResponseStatusCode (base name: "HttpResponseStatusCode")', function() {
        // TODO: update the code to test the property HttpResponseStatusCode
        expect(instance).to.have.property('HttpResponseStatusCode');
        // expect(instance.HttpResponseStatusCode).to.be(expectedValueLiteral);
      });

      it('should have the property HttpResponseStatus (base name: "HttpResponseStatus")', function() {
        // TODO: update the code to test the property HttpResponseStatus
        expect(instance).to.have.property('HttpResponseStatus');
        // expect(instance.HttpResponseStatus).to.be(expectedValueLiteral);
      });

      it('should have the property RequestHeaders (base name: "RequestHeaders")', function() {
        // TODO: update the code to test the property RequestHeaders
        expect(instance).to.have.property('RequestHeaders');
        // expect(instance.RequestHeaders).to.be(expectedValueLiteral);
      });

      it('should have the property RequestBody (base name: "RequestBody")', function() {
        // TODO: update the code to test the property RequestBody
        expect(instance).to.have.property('RequestBody');
        // expect(instance.RequestBody).to.be(expectedValueLiteral);
      });

      it('should have the property ResponseHeaders (base name: "ResponseHeaders")', function() {
        // TODO: update the code to test the property ResponseHeaders
        expect(instance).to.have.property('ResponseHeaders');
        // expect(instance.ResponseHeaders).to.be(expectedValueLiteral);
      });

      it('should have the property ResponseBody (base name: "ResponseBody")', function() {
        // TODO: update the code to test the property ResponseBody
        expect(instance).to.have.property('ResponseBody');
        // expect(instance.ResponseBody).to.be(expectedValueLiteral);
      });

      it('should have the property Duration (base name: "Duration")', function() {
        // TODO: update the code to test the property Duration
        expect(instance).to.have.property('Duration');
        // expect(instance.Duration).to.be(expectedValueLiteral);
      });

      it('should have the property RetryCount (base name: "RetryCount")', function() {
        // TODO: update the code to test the property RetryCount
        expect(instance).to.have.property('RetryCount');
        // expect(instance.RetryCount).to.be(expectedValueLiteral);
      });

      it('should have the property FlipdishWebhookId (base name: "FlipdishWebhookId")', function() {
        // TODO: update the code to test the property FlipdishWebhookId
        expect(instance).to.have.property('FlipdishWebhookId');
        // expect(instance.FlipdishWebhookId).to.be(expectedValueLiteral);
      });

      it('should have the property Version (base name: "Version")', function() {
        // TODO: update the code to test the property Version
        expect(instance).to.have.property('Version');
        // expect(instance.Version).to.be(expectedValueLiteral);
      });

    });
  });

}));
