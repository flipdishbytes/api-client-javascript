/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.WebhookLog();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WebhookLog', function() {
    it('should create an instance of WebhookLog', function() {
      // uncomment below and update the code to test WebhookLog
      //var instane = new Flipdish.WebhookLog();
      //expect(instance).to.be.a(Flipdish.WebhookLog);
    });

    it('should have the property WebhookSubscriptionOwnerUserId (base name: "WebhookSubscriptionOwnerUserId")', function() {
      // uncomment below and update the code to test the property WebhookSubscriptionOwnerUserId
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property EventCreated (base name: "EventCreated")', function() {
      // uncomment below and update the code to test the property EventCreated
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property WebhookTriggered (base name: "WebhookTriggered")', function() {
      // uncomment below and update the code to test the property WebhookTriggered
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property WebhookEventName (base name: "WebhookEventName")', function() {
      // uncomment below and update the code to test the property WebhookEventName
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property WebhookSubscriptionCallbackUrl (base name: "WebhookSubscriptionCallbackUrl")', function() {
      // uncomment below and update the code to test the property WebhookSubscriptionCallbackUrl
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property HttpResponseStatusCode (base name: "HttpResponseStatusCode")', function() {
      // uncomment below and update the code to test the property HttpResponseStatusCode
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property HttpResponseStatus (base name: "HttpResponseStatus")', function() {
      // uncomment below and update the code to test the property HttpResponseStatus
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property RequestHeaders (base name: "RequestHeaders")', function() {
      // uncomment below and update the code to test the property RequestHeaders
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property RequestBody (base name: "RequestBody")', function() {
      // uncomment below and update the code to test the property RequestBody
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property ResponseHeaders (base name: "ResponseHeaders")', function() {
      // uncomment below and update the code to test the property ResponseHeaders
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property ResponseBody (base name: "ResponseBody")', function() {
      // uncomment below and update the code to test the property ResponseBody
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property Duration (base name: "Duration")', function() {
      // uncomment below and update the code to test the property Duration
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property RetryCount (base name: "RetryCount")', function() {
      // uncomment below and update the code to test the property RetryCount
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property FlipdishWebhookId (base name: "FlipdishWebhookId")', function() {
      // uncomment below and update the code to test the property FlipdishWebhookId
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

    it('should have the property Version (base name: "Version")', function() {
      // uncomment below and update the code to test the property Version
      //var instance = new Flipdish.WebhookLog();
      //expect(instance).to.be();
    });

  });

}));
