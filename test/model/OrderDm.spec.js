/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderDm', function() {
      beforeEach(function() {
        instance = new Flipdish.OrderDm();
      });

      it('should create an instance of OrderDm', function() {
        // TODO: update the code to test OrderDm
        expect(instance).to.be.a(Flipdish.OrderDm);
      });

      it('should have the property UserLocation (base name: "UserLocation")', function() {
        // TODO: update the code to test the property UserLocation
        expect(instance).to.have.property('UserLocation');
        // expect(instance.UserLocation).to.be(expectedValueLiteral);
      });

      it('should have the property RequestedDeliveryOrPickupTimeUtc (base name: "RequestedDeliveryOrPickupTimeUtc")', function() {
        // TODO: update the code to test the property RequestedDeliveryOrPickupTimeUtc
        expect(instance).to.have.property('RequestedDeliveryOrPickupTimeUtc');
        // expect(instance.RequestedDeliveryOrPickupTimeUtc).to.be(expectedValueLiteral);
      });

      it('should have the property TipAmount (base name: "TipAmount")', function() {
        // TODO: update the code to test the property TipAmount
        expect(instance).to.have.property('TipAmount');
        // expect(instance.TipAmount).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryLocationId (base name: "DeliveryLocationId")', function() {
        // TODO: update the code to test the property DeliveryLocationId
        expect(instance).to.have.property('DeliveryLocationId');
        // expect(instance.DeliveryLocationId).to.be(expectedValueLiteral);
      });

      it('should have the property OrderItemVms (base name: "OrderItemVms")', function() {
        // TODO: update the code to test the property OrderItemVms
        expect(instance).to.have.property('OrderItemVms');
        // expect(instance.OrderItemVms).to.be(expectedValueLiteral);
      });

      it('should have the property VirtualRestaurantId (base name: "VirtualRestaurantId")', function() {
        // TODO: update the code to test the property VirtualRestaurantId
        expect(instance).to.have.property('VirtualRestaurantId');
        // expect(instance.VirtualRestaurantId).to.be(expectedValueLiteral);
      });

      it('should have the property PhysicalRestaurantId (base name: "PhysicalRestaurantId")', function() {
        // TODO: update the code to test the property PhysicalRestaurantId
        expect(instance).to.have.property('PhysicalRestaurantId');
        // expect(instance.PhysicalRestaurantId).to.be(expectedValueLiteral);
      });

      it('should have the property DeliveryType (base name: "DeliveryType")', function() {
        // TODO: update the code to test the property DeliveryType
        expect(instance).to.have.property('DeliveryType');
        // expect(instance.DeliveryType).to.be(expectedValueLiteral);
      });

      it('should have the property PickupLocationType (base name: "PickupLocationType")', function() {
        // TODO: update the code to test the property PickupLocationType
        expect(instance).to.have.property('PickupLocationType');
        // expect(instance.PickupLocationType).to.be(expectedValueLiteral);
      });

      it('should have the property PickupLocationId (base name: "PickupLocationId")', function() {
        // TODO: update the code to test the property PickupLocationId
        expect(instance).to.have.property('PickupLocationId');
        // expect(instance.PickupLocationId).to.be(expectedValueLiteral);
      });

      it('should have the property TableServiceCatagory (base name: "TableServiceCatagory")', function() {
        // TODO: update the code to test the property TableServiceCatagory
        expect(instance).to.have.property('TableServiceCatagory');
        // expect(instance.TableServiceCatagory).to.be(expectedValueLiteral);
      });

      it('should have the property PaymentAccountId (base name: "PaymentAccountId")', function() {
        // TODO: update the code to test the property PaymentAccountId
        expect(instance).to.have.property('PaymentAccountId');
        // expect(instance.PaymentAccountId).to.be(expectedValueLiteral);
      });

      it('should have the property IsPreOrder (base name: "IsPreOrder")', function() {
        // TODO: update the code to test the property IsPreOrder
        expect(instance).to.have.property('IsPreOrder');
        // expect(instance.IsPreOrder).to.be(expectedValueLiteral);
      });

      it('should have the property IsAsapOrder (base name: "IsAsapOrder")', function() {
        // TODO: update the code to test the property IsAsapOrder
        expect(instance).to.have.property('IsAsapOrder');
        // expect(instance.IsAsapOrder).to.be(expectedValueLiteral);
      });

      it('should have the property MenuId (base name: "MenuId")', function() {
        // TODO: update the code to test the property MenuId
        expect(instance).to.have.property('MenuId');
        // expect(instance.MenuId).to.be(expectedValueLiteral);
      });

      it('should have the property MenuVersion (base name: "MenuVersion")', function() {
        // TODO: update the code to test the property MenuVersion
        expect(instance).to.have.property('MenuVersion');
        // expect(instance.MenuVersion).to.be(expectedValueLiteral);
      });

    });
  });

}));
