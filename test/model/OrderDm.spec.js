/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.OrderDm();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrderDm', function() {
    it('should create an instance of OrderDm', function() {
      // uncomment below and update the code to test OrderDm
      //var instane = new Flipdish.OrderDm();
      //expect(instance).to.be.a(Flipdish.OrderDm);
    });

    it('should have the property UserLocation (base name: "UserLocation")', function() {
      // uncomment below and update the code to test the property UserLocation
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property RequestedDeliveryOrPickupTimeUtc (base name: "RequestedDeliveryOrPickupTimeUtc")', function() {
      // uncomment below and update the code to test the property RequestedDeliveryOrPickupTimeUtc
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property TipAmount (base name: "TipAmount")', function() {
      // uncomment below and update the code to test the property TipAmount
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property DeliveryLocationId (base name: "DeliveryLocationId")', function() {
      // uncomment below and update the code to test the property DeliveryLocationId
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property VoucherCode (base name: "VoucherCode")', function() {
      // uncomment below and update the code to test the property VoucherCode
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property OrderItemVms (base name: "OrderItemVms")', function() {
      // uncomment below and update the code to test the property OrderItemVms
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property VirtualRestaurantId (base name: "VirtualRestaurantId")', function() {
      // uncomment below and update the code to test the property VirtualRestaurantId
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property PhysicalRestaurantId (base name: "PhysicalRestaurantId")', function() {
      // uncomment below and update the code to test the property PhysicalRestaurantId
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property DeliveryType (base name: "DeliveryType")', function() {
      // uncomment below and update the code to test the property DeliveryType
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property PickupLocationType (base name: "PickupLocationType")', function() {
      // uncomment below and update the code to test the property PickupLocationType
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property PickupLocationId (base name: "PickupLocationId")', function() {
      // uncomment below and update the code to test the property PickupLocationId
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property TableServiceCatagory (base name: "TableServiceCatagory")', function() {
      // uncomment below and update the code to test the property TableServiceCatagory
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property PaymentAccountId (base name: "PaymentAccountId")', function() {
      // uncomment below and update the code to test the property PaymentAccountId
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property IsPreOrder (base name: "IsPreOrder")', function() {
      // uncomment below and update the code to test the property IsPreOrder
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property IsAsapOrder (base name: "IsAsapOrder")', function() {
      // uncomment below and update the code to test the property IsAsapOrder
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property MenuId (base name: "MenuId")', function() {
      // uncomment below and update the code to test the property MenuId
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

    it('should have the property MenuVersion (base name: "MenuVersion")', function() {
      // uncomment below and update the code to test the property MenuVersion
      //var instance = new Flipdish.OrderDm();
      //expect(instance).to.be();
    });

  });

}));
