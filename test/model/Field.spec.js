/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Field', function() {
      beforeEach(function() {
        instance = new Flipdish.Field();
      });

      it('should create an instance of Field', function() {
        // TODO: update the code to test Field
        expect(instance).to.be.a(Flipdish.Field);
      });

      it('should have the property Name (base name: "Name")', function() {
        // TODO: update the code to test the property Name
        expect(instance).to.have.property('Name');
        // expect(instance.Name).to.be(expectedValueLiteral);
      });

      it('should have the property Description (base name: "Description")', function() {
        // TODO: update the code to test the property Description
        expect(instance).to.have.property('Description');
        // expect(instance.Description).to.be(expectedValueLiteral);
      });

      it('should have the property Key (base name: "Key")', function() {
        // TODO: update the code to test the property Key
        expect(instance).to.have.property('Key');
        // expect(instance.Key).to.be(expectedValueLiteral);
      });

      it('should have the property Tooltip (base name: "Tooltip")', function() {
        // TODO: update the code to test the property Tooltip
        expect(instance).to.have.property('Tooltip');
        // expect(instance.Tooltip).to.be(expectedValueLiteral);
      });

      it('should have the property Position (base name: "Position")', function() {
        // TODO: update the code to test the property Position
        expect(instance).to.have.property('Position');
        // expect(instance.Position).to.be(expectedValueLiteral);
      });

      it('should have the property DefaultValue (base name: "DefaultValue")', function() {
        // TODO: update the code to test the property DefaultValue
        expect(instance).to.have.property('DefaultValue');
        // expect(instance.DefaultValue).to.be(expectedValueLiteral);
      });

      it('should have the property ValidValues (base name: "ValidValues")', function() {
        // TODO: update the code to test the property ValidValues
        expect(instance).to.have.property('ValidValues');
        // expect(instance.ValidValues).to.be(expectedValueLiteral);
      });

      it('should have the property ValidationRegex (base name: "ValidationRegex")', function() {
        // TODO: update the code to test the property ValidationRegex
        expect(instance).to.have.property('ValidationRegex');
        // expect(instance.ValidationRegex).to.be(expectedValueLiteral);
      });

      it('should have the property FieldType (base name: "FieldType")', function() {
        // TODO: update the code to test the property FieldType
        expect(instance).to.have.property('FieldType');
        // expect(instance.FieldType).to.be(expectedValueLiteral);
      });

      it('should have the property IsFlipdishRestricted (base name: "IsFlipdishRestricted")', function() {
        // TODO: update the code to test the property IsFlipdishRestricted
        expect(instance).to.have.property('IsFlipdishRestricted');
        // expect(instance.IsFlipdishRestricted).to.be(expectedValueLiteral);
      });

    });
  });

}));
