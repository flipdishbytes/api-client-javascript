/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.App();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('App', function() {
    it('should create an instance of App', function() {
      // uncomment below and update the code to test App
      //var instane = new Flipdish.App();
      //expect(instance).to.be.a(Flipdish.App);
    });

    it('should have the property AppId (base name: "AppId")', function() {
      // uncomment below and update the code to test the property AppId
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property HasIosApp (base name: "HasIosApp")', function() {
      // uncomment below and update the code to test the property HasIosApp
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property HasAndroidApp (base name: "HasAndroidApp")', function() {
      // uncomment below and update the code to test the property HasAndroidApp
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property LogoImageUrl (base name: "LogoImageUrl")', function() {
      // uncomment below and update the code to test the property LogoImageUrl
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property Languages (base name: "Languages")', function() {
      // uncomment below and update the code to test the property Languages
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property AvailableAppLanguages (base name: "AvailableAppLanguages")', function() {
      // uncomment below and update the code to test the property AvailableAppLanguages
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property AppAccessLevel (base name: "AppAccessLevel")', function() {
      // uncomment below and update the code to test the property AppAccessLevel
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property AppResourceSet (base name: "AppResourceSet")', function() {
      // uncomment below and update the code to test the property AppResourceSet
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property Features (base name: "Features")', function() {
      // uncomment below and update the code to test the property Features
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property MapCenter (base name: "MapCenter")', function() {
      // uncomment below and update the code to test the property MapCenter
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property MapNorthEast (base name: "MapNorthEast")', function() {
      // uncomment below and update the code to test the property MapNorthEast
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property MapSouthWest (base name: "MapSouthWest")', function() {
      // uncomment below and update the code to test the property MapSouthWest
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property GoogleMapsApiKeyWeb (base name: "GoogleMapsApiKeyWeb")', function() {
      // uncomment below and update the code to test the property GoogleMapsApiKeyWeb
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property OrgId (base name: "OrgId")', function() {
      // uncomment below and update the code to test the property OrgId
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property Name (base name: "Name")', function() {
      // uncomment below and update the code to test the property Name
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property HostName (base name: "HostName")', function() {
      // uncomment below and update the code to test the property HostName
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property MainColor (base name: "MainColor")', function() {
      // uncomment below and update the code to test the property MainColor
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property KioskPrimaryColour (base name: "KioskPrimaryColour")', function() {
      // uncomment below and update the code to test the property KioskPrimaryColour
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property ApplicationCategory (base name: "ApplicationCategory")', function() {
      // uncomment below and update the code to test the property ApplicationCategory
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property IsPanaceaEnabled (base name: "IsPanaceaEnabled")', function() {
      // uncomment below and update the code to test the property IsPanaceaEnabled
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property PanaceaVanityUrl (base name: "PanaceaVanityUrl")', function() {
      // uncomment below and update the code to test the property PanaceaVanityUrl
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property CookieConsentPromptEnabled (base name: "CookieConsentPromptEnabled")', function() {
      // uncomment below and update the code to test the property CookieConsentPromptEnabled
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

    it('should have the property CountryId (base name: "CountryId")', function() {
      // uncomment below and update the code to test the property CountryId
      //var instance = new Flipdish.App();
      //expect(instance).to.be();
    });

  });

}));
