/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.VouchersApi();
  });

  describe('(package)', function() {
    describe('VouchersApi', function() {
      describe('createVoucher', function() {
        it('should call createVoucher successfully', function(done) {
          // TODO: uncomment, update parameter values for createVoucher call and complete the assertions
          /*
          var appId = "appId_example";
          var voucher = new Flipdish.CreateVoucher();
          voucher.VoucherType = "PercentageDiscount";
          voucher.Stores = [0];
          voucher.AddItemDetails = new Flipdish.AddItemDetails();
          voucher.AddItemDetails.PromotionalItemId = 0;
          voucher.AddItemDetails.PromotionalItemName = "";
          voucher.CreditNoteDetails = new Flipdish.CreditNoteDetails();
          voucher.CreditNoteDetails.RemainingCredit = 0.0;
          voucher.LumpDiscountDetails = new Flipdish.LumpDiscountDetails();
          voucher.LumpDiscountDetails.DiscountAmount = 0.0;
          voucher.PercentDiscountDetails = new Flipdish.PercentDiscountDetails();
          voucher.PercentDiscountDetails.PercentageDiscount = 0;
          voucher.Code = "";
          voucher.Description = "";
          voucher.ValidOnOrdersOver = 0.0;
          voucher.TakesPriority = false;
          voucher.IsEnabled = false;
          voucher.IsAutomaticallyApplied = false;
          voucher.IncludeDeliveryFee = false;
          voucher.IsValidForDeliveryOrders = false;
          voucher.IsValidForPickupOrders = false;
          voucher.IsValidForOrdersPayedOnline = false;
          voucher.IsValidForOrdersPayedByCash = false;
          voucher.IsValidForFirstOrderOnly = false;
          voucher.IsValidOncePerCustomer = false;
          voucher.IsValidOnlyOnce = false;
          voucher.StartDate = new Date();
          voucher.ExpiryDate = new Date();

          instance.createVoucher(appId, voucher, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultVoucherWithStats);
            expect(data.Data).to.be.a(Flipdish.VoucherWithStats);
                  expect(data.Data.TotalUsed).to.be.a('number');
              expect(data.Data.TotalUsed).to.be(0);
              expect(data.Data.TotalCustomers).to.be.a('number');
              expect(data.Data.TotalCustomers).to.be(0);
              expect(data.Data.TotalAmountFromOrders).to.be.a('number');
              expect(data.Data.TotalAmountFromOrders).to.be(0.0);
              expect(data.Data.TotalDiscounted).to.be.a('number');
              expect(data.Data.TotalDiscounted).to.be(0.0);
              expect(data.Data.AverageOrderSize).to.be.a('number');
              expect(data.Data.AverageOrderSize).to.be(0.0);
              expect(data.Data.VoucherId).to.be.a('number');
              expect(data.Data.VoucherId).to.be(0);
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("Valid");
              expect(data.Data.VoucherType).to.be.a('string');
              expect(data.Data.VoucherType).to.be("PercentageDiscount");
              expect(data.Data.VoucherSubType).to.be.a('string');
              expect(data.Data.VoucherSubType).to.be("None");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");
              {
                let dataCtr = data.Data.Stores;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.Data.StoreNames;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.AddItemDetails).to.be.a(Flipdish.AddItemDetails);
                    expect(data.Data.AddItemDetails.PromotionalItemId).to.be.a('number');
                expect(data.Data.AddItemDetails.PromotionalItemId).to.be(0);
                expect(data.Data.AddItemDetails.PromotionalItemName).to.be.a('string');
                expect(data.Data.AddItemDetails.PromotionalItemName).to.be("");
              expect(data.Data.CreditNoteDetails).to.be.a(Flipdish.CreditNoteDetails);
                    expect(data.Data.CreditNoteDetails.RemainingCredit).to.be.a('number');
                expect(data.Data.CreditNoteDetails.RemainingCredit).to.be(0.0);
              expect(data.Data.LumpDiscountDetails).to.be.a(Flipdish.LumpDiscountDetails);
                    expect(data.Data.LumpDiscountDetails.DiscountAmount).to.be.a('number');
                expect(data.Data.LumpDiscountDetails.DiscountAmount).to.be(0.0);
              expect(data.Data.PercentDiscountDetails).to.be.a(Flipdish.PercentDiscountDetails);
                    expect(data.Data.PercentDiscountDetails.PercentageDiscount).to.be.a('number');
                expect(data.Data.PercentDiscountDetails.PercentageDiscount).to.be(0);
              expect(data.Data.Code).to.be.a('string');
              expect(data.Data.Code).to.be("");
              expect(data.Data.Description).to.be.a('string');
              expect(data.Data.Description).to.be("");
              expect(data.Data.ValidOnOrdersOver).to.be.a('number');
              expect(data.Data.ValidOnOrdersOver).to.be(0.0);
              expect(data.Data.TakesPriority).to.be.a('boolean');
              expect(data.Data.TakesPriority).to.be(false);
              expect(data.Data.IsEnabled).to.be.a('boolean');
              expect(data.Data.IsEnabled).to.be(false);
              expect(data.Data.IsAutomaticallyApplied).to.be.a('boolean');
              expect(data.Data.IsAutomaticallyApplied).to.be(false);
              expect(data.Data.IncludeDeliveryFee).to.be.a('boolean');
              expect(data.Data.IncludeDeliveryFee).to.be(false);
              expect(data.Data.IsValidForDeliveryOrders).to.be.a('boolean');
              expect(data.Data.IsValidForDeliveryOrders).to.be(false);
              expect(data.Data.IsValidForPickupOrders).to.be.a('boolean');
              expect(data.Data.IsValidForPickupOrders).to.be(false);
              expect(data.Data.IsValidForOrdersPayedOnline).to.be.a('boolean');
              expect(data.Data.IsValidForOrdersPayedOnline).to.be(false);
              expect(data.Data.IsValidForOrdersPayedByCash).to.be.a('boolean');
              expect(data.Data.IsValidForOrdersPayedByCash).to.be(false);
              expect(data.Data.IsValidForFirstOrderOnly).to.be.a('boolean');
              expect(data.Data.IsValidForFirstOrderOnly).to.be(false);
              expect(data.Data.IsValidOncePerCustomer).to.be.a('boolean');
              expect(data.Data.IsValidOncePerCustomer).to.be(false);
              expect(data.Data.IsValidOnlyOnce).to.be.a('boolean');
              expect(data.Data.IsValidOnlyOnce).to.be(false);
              expect(data.Data.StartDate).to.be.a(Date);
              expect(data.Data.StartDate).to.be(new Date());
              expect(data.Data.ExpiryDate).to.be.a(Date);
              expect(data.Data.ExpiryDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVoucherById', function() {
        it('should call getVoucherById successfully', function(done) {
          // TODO: uncomment, update parameter values for getVoucherById call and complete the assertions
          /*
          var voucherId = 56;

          instance.getVoucherById(voucherId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultVoucherWithStats);
            expect(data.Data).to.be.a(Flipdish.VoucherWithStats);
                  expect(data.Data.TotalUsed).to.be.a('number');
              expect(data.Data.TotalUsed).to.be(0);
              expect(data.Data.TotalCustomers).to.be.a('number');
              expect(data.Data.TotalCustomers).to.be(0);
              expect(data.Data.TotalAmountFromOrders).to.be.a('number');
              expect(data.Data.TotalAmountFromOrders).to.be(0.0);
              expect(data.Data.TotalDiscounted).to.be.a('number');
              expect(data.Data.TotalDiscounted).to.be(0.0);
              expect(data.Data.AverageOrderSize).to.be.a('number');
              expect(data.Data.AverageOrderSize).to.be(0.0);
              expect(data.Data.VoucherId).to.be.a('number');
              expect(data.Data.VoucherId).to.be(0);
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("Valid");
              expect(data.Data.VoucherType).to.be.a('string');
              expect(data.Data.VoucherType).to.be("PercentageDiscount");
              expect(data.Data.VoucherSubType).to.be.a('string');
              expect(data.Data.VoucherSubType).to.be("None");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");
              {
                let dataCtr = data.Data.Stores;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.Data.StoreNames;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.AddItemDetails).to.be.a(Flipdish.AddItemDetails);
                    expect(data.Data.AddItemDetails.PromotionalItemId).to.be.a('number');
                expect(data.Data.AddItemDetails.PromotionalItemId).to.be(0);
                expect(data.Data.AddItemDetails.PromotionalItemName).to.be.a('string');
                expect(data.Data.AddItemDetails.PromotionalItemName).to.be("");
              expect(data.Data.CreditNoteDetails).to.be.a(Flipdish.CreditNoteDetails);
                    expect(data.Data.CreditNoteDetails.RemainingCredit).to.be.a('number');
                expect(data.Data.CreditNoteDetails.RemainingCredit).to.be(0.0);
              expect(data.Data.LumpDiscountDetails).to.be.a(Flipdish.LumpDiscountDetails);
                    expect(data.Data.LumpDiscountDetails.DiscountAmount).to.be.a('number');
                expect(data.Data.LumpDiscountDetails.DiscountAmount).to.be(0.0);
              expect(data.Data.PercentDiscountDetails).to.be.a(Flipdish.PercentDiscountDetails);
                    expect(data.Data.PercentDiscountDetails.PercentageDiscount).to.be.a('number');
                expect(data.Data.PercentDiscountDetails.PercentageDiscount).to.be(0);
              expect(data.Data.Code).to.be.a('string');
              expect(data.Data.Code).to.be("");
              expect(data.Data.Description).to.be.a('string');
              expect(data.Data.Description).to.be("");
              expect(data.Data.ValidOnOrdersOver).to.be.a('number');
              expect(data.Data.ValidOnOrdersOver).to.be(0.0);
              expect(data.Data.TakesPriority).to.be.a('boolean');
              expect(data.Data.TakesPriority).to.be(false);
              expect(data.Data.IsEnabled).to.be.a('boolean');
              expect(data.Data.IsEnabled).to.be(false);
              expect(data.Data.IsAutomaticallyApplied).to.be.a('boolean');
              expect(data.Data.IsAutomaticallyApplied).to.be(false);
              expect(data.Data.IncludeDeliveryFee).to.be.a('boolean');
              expect(data.Data.IncludeDeliveryFee).to.be(false);
              expect(data.Data.IsValidForDeliveryOrders).to.be.a('boolean');
              expect(data.Data.IsValidForDeliveryOrders).to.be(false);
              expect(data.Data.IsValidForPickupOrders).to.be.a('boolean');
              expect(data.Data.IsValidForPickupOrders).to.be(false);
              expect(data.Data.IsValidForOrdersPayedOnline).to.be.a('boolean');
              expect(data.Data.IsValidForOrdersPayedOnline).to.be(false);
              expect(data.Data.IsValidForOrdersPayedByCash).to.be.a('boolean');
              expect(data.Data.IsValidForOrdersPayedByCash).to.be(false);
              expect(data.Data.IsValidForFirstOrderOnly).to.be.a('boolean');
              expect(data.Data.IsValidForFirstOrderOnly).to.be(false);
              expect(data.Data.IsValidOncePerCustomer).to.be.a('boolean');
              expect(data.Data.IsValidOncePerCustomer).to.be(false);
              expect(data.Data.IsValidOnlyOnce).to.be.a('boolean');
              expect(data.Data.IsValidOnlyOnce).to.be(false);
              expect(data.Data.StartDate).to.be.a(Date);
              expect(data.Data.StartDate).to.be(new Date());
              expect(data.Data.ExpiryDate).to.be.a(Date);
              expect(data.Data.ExpiryDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVoucherStatsById', function() {
        it('should call getVoucherStatsById successfully', function(done) {
          // TODO: uncomment, update parameter values for getVoucherStatsById call and complete the assertions
          /*
          var voucherId = 56;
          var aggregateDataBy = "aggregateDataBy_example";
          var opts = {};
          opts.dataPointLimit = 56;

          instance.getVoucherStatsById(voucherId, aggregateDataBy, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultVoucherDataPoint);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.VoucherDataPoint);
                expect(data.PeriodStart).to.be.a(Date);
                expect(data.PeriodStart).to.be(new Date());
                expect(data.PeriodLengthInDays).to.be.a('number');
                expect(data.PeriodLengthInDays).to.be(0);
                expect(data.Value).to.be.a('number');
                expect(data.Value).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVouchers', function() {
        it('should call getVouchers successfully', function(done) {
          // TODO: uncomment, update parameter values for getVouchers call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.pageIndex = 56;
          opts.pageSize = 56;
          opts.searchCodes = ["searchCodes_example"];
          opts.statusSearch = ["statusSearch_example"];
          opts.typeSearch = ["typeSearch_example"];
          opts.subTypeSearch = ["subTypeSearch_example"];
          opts.storeIds = [3.4];

          instance.getVouchers(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultVoucherSummary);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.VoucherSummary);
                expect(data.VoucherId).to.be.a('number');
                expect(data.VoucherId).to.be(0);
                expect(data.Code).to.be.a('string');
                expect(data.Code).to.be("");
                expect(data.Status).to.be.a('string');
                expect(data.Status).to.be("Valid");
                expect(data.VoucherType).to.be.a('string');
                expect(data.VoucherType).to.be("PercentageDiscount");
                expect(data.VoucherSubType).to.be.a('string');
                expect(data.VoucherSubType).to.be("None");
                expect(data.Description).to.be.a('string');
                expect(data.Description).to.be("");
                expect(data.IsEnabled).to.be.a('boolean');
                expect(data.IsEnabled).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateVoucher', function() {
        it('should call updateVoucher successfully', function(done) {
          // TODO: uncomment, update parameter values for updateVoucher call and complete the assertions
          /*
          var voucherId = 56;
          var voucher = new Flipdish.VoucherBase();
          voucher.Code = "";
          voucher.Description = "";
          voucher.ValidOnOrdersOver = 0.0;
          voucher.TakesPriority = false;
          voucher.IsEnabled = false;
          voucher.IsAutomaticallyApplied = false;
          voucher.IncludeDeliveryFee = false;
          voucher.IsValidForDeliveryOrders = false;
          voucher.IsValidForPickupOrders = false;
          voucher.IsValidForOrdersPayedOnline = false;
          voucher.IsValidForOrdersPayedByCash = false;
          voucher.IsValidForFirstOrderOnly = false;
          voucher.IsValidOncePerCustomer = false;
          voucher.IsValidOnlyOnce = false;
          voucher.StartDate = new Date();
          voucher.ExpiryDate = new Date();
          var opts = {};
          opts.storeId = [3.4];
          opts.percentValue = 56;
          opts.lumpValue = 1.2;
          opts.freeItemId = 56;

          instance.updateVoucher(voucherId, voucher, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultVoucherWithStats);
            expect(data.Data).to.be.a(Flipdish.VoucherWithStats);
                  expect(data.Data.TotalUsed).to.be.a('number');
              expect(data.Data.TotalUsed).to.be(0);
              expect(data.Data.TotalCustomers).to.be.a('number');
              expect(data.Data.TotalCustomers).to.be(0);
              expect(data.Data.TotalAmountFromOrders).to.be.a('number');
              expect(data.Data.TotalAmountFromOrders).to.be(0.0);
              expect(data.Data.TotalDiscounted).to.be.a('number');
              expect(data.Data.TotalDiscounted).to.be(0.0);
              expect(data.Data.AverageOrderSize).to.be.a('number');
              expect(data.Data.AverageOrderSize).to.be(0.0);
              expect(data.Data.VoucherId).to.be.a('number');
              expect(data.Data.VoucherId).to.be(0);
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("Valid");
              expect(data.Data.VoucherType).to.be.a('string');
              expect(data.Data.VoucherType).to.be("PercentageDiscount");
              expect(data.Data.VoucherSubType).to.be.a('string');
              expect(data.Data.VoucherSubType).to.be("None");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");
              {
                let dataCtr = data.Data.Stores;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.Data.StoreNames;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.AddItemDetails).to.be.a(Flipdish.AddItemDetails);
                    expect(data.Data.AddItemDetails.PromotionalItemId).to.be.a('number');
                expect(data.Data.AddItemDetails.PromotionalItemId).to.be(0);
                expect(data.Data.AddItemDetails.PromotionalItemName).to.be.a('string');
                expect(data.Data.AddItemDetails.PromotionalItemName).to.be("");
              expect(data.Data.CreditNoteDetails).to.be.a(Flipdish.CreditNoteDetails);
                    expect(data.Data.CreditNoteDetails.RemainingCredit).to.be.a('number');
                expect(data.Data.CreditNoteDetails.RemainingCredit).to.be(0.0);
              expect(data.Data.LumpDiscountDetails).to.be.a(Flipdish.LumpDiscountDetails);
                    expect(data.Data.LumpDiscountDetails.DiscountAmount).to.be.a('number');
                expect(data.Data.LumpDiscountDetails.DiscountAmount).to.be(0.0);
              expect(data.Data.PercentDiscountDetails).to.be.a(Flipdish.PercentDiscountDetails);
                    expect(data.Data.PercentDiscountDetails.PercentageDiscount).to.be.a('number');
                expect(data.Data.PercentDiscountDetails.PercentageDiscount).to.be(0);
              expect(data.Data.Code).to.be.a('string');
              expect(data.Data.Code).to.be("");
              expect(data.Data.Description).to.be.a('string');
              expect(data.Data.Description).to.be("");
              expect(data.Data.ValidOnOrdersOver).to.be.a('number');
              expect(data.Data.ValidOnOrdersOver).to.be(0.0);
              expect(data.Data.TakesPriority).to.be.a('boolean');
              expect(data.Data.TakesPriority).to.be(false);
              expect(data.Data.IsEnabled).to.be.a('boolean');
              expect(data.Data.IsEnabled).to.be(false);
              expect(data.Data.IsAutomaticallyApplied).to.be.a('boolean');
              expect(data.Data.IsAutomaticallyApplied).to.be(false);
              expect(data.Data.IncludeDeliveryFee).to.be.a('boolean');
              expect(data.Data.IncludeDeliveryFee).to.be(false);
              expect(data.Data.IsValidForDeliveryOrders).to.be.a('boolean');
              expect(data.Data.IsValidForDeliveryOrders).to.be(false);
              expect(data.Data.IsValidForPickupOrders).to.be.a('boolean');
              expect(data.Data.IsValidForPickupOrders).to.be(false);
              expect(data.Data.IsValidForOrdersPayedOnline).to.be.a('boolean');
              expect(data.Data.IsValidForOrdersPayedOnline).to.be(false);
              expect(data.Data.IsValidForOrdersPayedByCash).to.be.a('boolean');
              expect(data.Data.IsValidForOrdersPayedByCash).to.be(false);
              expect(data.Data.IsValidForFirstOrderOnly).to.be.a('boolean');
              expect(data.Data.IsValidForFirstOrderOnly).to.be(false);
              expect(data.Data.IsValidOncePerCustomer).to.be.a('boolean');
              expect(data.Data.IsValidOncePerCustomer).to.be(false);
              expect(data.Data.IsValidOnlyOnce).to.be.a('boolean');
              expect(data.Data.IsValidOnlyOnce).to.be(false);
              expect(data.Data.StartDate).to.be.a(Date);
              expect(data.Data.StartDate).to.be(new Date());
              expect(data.Data.ExpiryDate).to.be.a(Date);
              expect(data.Data.ExpiryDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
