/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.MenuOptionSetsApi();
  });

  describe('(package)', function() {
    describe('MenuOptionSetsApi', function() {
      describe('createMenuItemOptionSet', function() {
        it('should call createMenuItemOptionSet successfully', function(done) {
          // TODO: uncomment, update parameter values for createMenuItemOptionSet call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var menuItemOptionSet = new Flipdish.MenuItemOptionSetBase();
          menuItemOptionSet.Name = "";
          menuItemOptionSet.IsMasterOptionSet = false;
          menuItemOptionSet.DisplayOrder = 0;
          menuItemOptionSet.MinSelectCount = 0;
          menuItemOptionSet.MaxSelectCount = 0;
          menuItemOptionSet.CellLayoutType = "Small";

          instance.createMenuItemOptionSet(menuId, menuSectionId, menuSectionItemId, menuItemOptionSet, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMenuItemOptionSet', function() {
        it('should call deleteMenuItemOptionSet successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMenuItemOptionSet call
          /*
          var menuId = 56;
          var menuSectionItemId = 56;
          var menuSectionId = 56;
          var optionSetId = 56;

          instance.deleteMenuItemOptionSet(menuId, menuSectionItemId, menuSectionId, optionSetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOptionSetImage', function() {
        it('should call deleteOptionSetImage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOptionSetImage call
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;

          instance.deleteOptionSetImage(menuId, menuSectionId, menuSectionItemId, optionSetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuItemOptionSetById', function() {
        it('should call getMenuItemOptionSetById successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuItemOptionSetById call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;

          instance.getMenuItemOptionSetById(menuId, menuSectionId, menuSectionItemId, optionSetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultMenuItemOptionSet);
            expect(data.Data).to.be.a(Flipdish.MenuItemOptionSet);
                  expect(data.Data.MenuItemOptionSetId).to.be.a('number');
              expect(data.Data.MenuItemOptionSetId).to.be(0);
              expect(data.Data.ImageUrl).to.be.a('string');
              expect(data.Data.ImageUrl).to.be("");
              {
                let dataCtr = data.Data.MenuItemOptionSetItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.MenuItemOptionSetItem);
                  expect(data.MenuItemOptionSetItemId).to.be.a('number');
                  expect(data.MenuItemOptionSetItemId).to.be(0);
                  expect(data.PublicId).to.be.a('string');
                  expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                  {
                    let dataCtr = data.Metadata;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.CreateMetadata);
                      expect(data.StoreId).to.be.a('number');
                      expect(data.StoreId).to.be(0);
                      expect(data.Key).to.be.a('string');
                      expect(data.Key).to.be("");
                      expect(data.Value).to.be.a('string');
                      expect(data.Value).to.be("");
      
                            }
                  }
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
                  expect(data.Price).to.be.a('number');
                  expect(data.Price).to.be(0.0);
                  expect(data.IsAvailable).to.be.a('boolean');
                  expect(data.IsAvailable).to.be(false);
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.CellLayoutType).to.be.a('string');
                  expect(data.CellLayoutType).to.be("Small");
                  expect(data.ImageUrl).to.be.a('string');
                  expect(data.ImageUrl).to.be("");
  
                        }
              }
              expect(data.Data.PublicId).to.be.a('string');
              expect(data.Data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.IsMasterOptionSet).to.be.a('boolean');
              expect(data.Data.IsMasterOptionSet).to.be(false);
              expect(data.Data.DisplayOrder).to.be.a('number');
              expect(data.Data.DisplayOrder).to.be(0);
              expect(data.Data.MinSelectCount).to.be.a('number');
              expect(data.Data.MinSelectCount).to.be(0);
              expect(data.Data.MaxSelectCount).to.be.a('number');
              expect(data.Data.MaxSelectCount).to.be(0);
              expect(data.Data.CellLayoutType).to.be.a('string');
              expect(data.Data.CellLayoutType).to.be("Small");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuItemOptionSets', function() {
        it('should call getMenuItemOptionSets successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuItemOptionSets call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;

          instance.getMenuItemOptionSets(menuId, menuSectionId, menuSectionItemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultMenuItemOptionSet);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.MenuItemOptionSet);
                expect(data.MenuItemOptionSetId).to.be.a('number');
                expect(data.MenuItemOptionSetId).to.be(0);
                expect(data.ImageUrl).to.be.a('string');
                expect(data.ImageUrl).to.be("");
                {
                  let dataCtr = data.MenuItemOptionSetItems;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.MenuItemOptionSetItem);
                    expect(data.MenuItemOptionSetItemId).to.be.a('number');
                    expect(data.MenuItemOptionSetItemId).to.be(0);
                    expect(data.PublicId).to.be.a('string');
                    expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                    {
                      let dataCtr = data.Metadata;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.CreateMetadata);
                        expect(data.StoreId).to.be.a('number');
                        expect(data.StoreId).to.be(0);
                        expect(data.Key).to.be.a('string');
                        expect(data.Key).to.be("");
                        expect(data.Value).to.be.a('string');
                        expect(data.Value).to.be("");
        
                              }
                    }
                    expect(data.Name).to.be.a('string');
                    expect(data.Name).to.be("");
                    expect(data.Price).to.be.a('number');
                    expect(data.Price).to.be(0.0);
                    expect(data.IsAvailable).to.be.a('boolean');
                    expect(data.IsAvailable).to.be(false);
                    expect(data.DisplayOrder).to.be.a('number');
                    expect(data.DisplayOrder).to.be(0);
                    expect(data.CellLayoutType).to.be.a('string');
                    expect(data.CellLayoutType).to.be("Small");
                    expect(data.ImageUrl).to.be.a('string');
                    expect(data.ImageUrl).to.be("");
    
                          }
                }
                expect(data.PublicId).to.be.a('string');
                expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.IsMasterOptionSet).to.be.a('boolean');
                expect(data.IsMasterOptionSet).to.be(false);
                expect(data.DisplayOrder).to.be.a('number');
                expect(data.DisplayOrder).to.be(0);
                expect(data.MinSelectCount).to.be.a('number');
                expect(data.MinSelectCount).to.be(0);
                expect(data.MaxSelectCount).to.be.a('number');
                expect(data.MaxSelectCount).to.be(0);
                expect(data.CellLayoutType).to.be.a('string');
                expect(data.CellLayoutType).to.be("Small");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateMenuItemOptionSet', function() {
        it('should call updateMenuItemOptionSet successfully', function(done) {
          // TODO: uncomment, update parameter values for updateMenuItemOptionSet call
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;
          var menuItemOptionSet = new Flipdish.MenuItemOptionSetBase();
          menuItemOptionSet.Name = "";
          menuItemOptionSet.IsMasterOptionSet = false;
          menuItemOptionSet.DisplayOrder = 0;
          menuItemOptionSet.MinSelectCount = 0;
          menuItemOptionSet.MaxSelectCount = 0;
          menuItemOptionSet.CellLayoutType = "Small";

          instance.updateMenuItemOptionSet(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSet, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadOptionSetImage', function() {
        it('should call uploadOptionSetImage successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadOptionSetImage call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;
          var Image = "/path/to/file.txt";

          instance.uploadOptionSetImage(menuId, menuSectionId, menuSectionItemId, optionSetId, Image, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
