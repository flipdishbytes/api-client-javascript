/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.MenuSectionsApi();
  });

  describe('(package)', function() {
    describe('MenuSectionsApi', function() {
      describe('cloneMenuSection', function() {
        it('should call cloneMenuSection successfully', function(done) {
          // TODO: uncomment, update parameter values for cloneMenuSection call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;

          instance.cloneMenuSection(menuId, menuSectionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultMenuSection);
            expect(data.Data).to.be.a(Flipdish.MenuSection);
                  expect(data.Data.MenuSectionId).to.be.a('number');
              expect(data.Data.MenuSectionId).to.be(0);
              {
                let dataCtr = data.Data.MenuItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.MenuSectionItem);
                  expect(data.MenuItemId).to.be.a('number');
                  expect(data.MenuItemId).to.be(0);
                  expect(data.ActualPrice).to.be.a('number');
                  expect(data.ActualPrice).to.be(0.0);
                  {
                    let dataCtr = data.MenuItemOptionSets;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.MenuItemOptionSet);
                      expect(data.MenuItemOptionSetId).to.be.a('number');
                      expect(data.MenuItemOptionSetId).to.be(0);
                      expect(data.ImageUrl).to.be.a('string');
                      expect(data.ImageUrl).to.be("");
                      {
                        let dataCtr = data.MenuItemOptionSetItems;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.MenuItemOptionSetItem);
                          expect(data.MenuItemOptionSetItemId).to.be.a('number');
                          expect(data.MenuItemOptionSetItemId).to.be(0);
                          expect(data.PublicId).to.be.a('string');
                          expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                          {
                            let dataCtr = data.Metadata;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Flipdish.CreateMetadata);
                              expect(data.StoreId).to.be.a('number');
                              expect(data.StoreId).to.be(0);
                              expect(data.Key).to.be.a('string');
                              expect(data.Key).to.be("");
                              expect(data.Value).to.be.a('string');
                              expect(data.Value).to.be("");
              
                                    }
                          }
                          expect(data.Name).to.be.a('string');
                          expect(data.Name).to.be("");
                          expect(data.Price).to.be.a('number');
                          expect(data.Price).to.be(0.0);
                          expect(data.IsAvailable).to.be.a('boolean');
                          expect(data.IsAvailable).to.be(false);
                          expect(data.DisplayOrder).to.be.a('number');
                          expect(data.DisplayOrder).to.be(0);
                          expect(data.CellLayoutType).to.be.a('string');
                          expect(data.CellLayoutType).to.be("Small");
                          expect(data.ImageUrl).to.be.a('string');
                          expect(data.ImageUrl).to.be("");
          
                                }
                      }
                      expect(data.PublicId).to.be.a('string');
                      expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                      expect(data.Name).to.be.a('string');
                      expect(data.Name).to.be("");
                      expect(data.IsMasterOptionSet).to.be.a('boolean');
                      expect(data.IsMasterOptionSet).to.be(false);
                      expect(data.DisplayOrder).to.be.a('number');
                      expect(data.DisplayOrder).to.be(0);
                      expect(data.MinSelectCount).to.be.a('number');
                      expect(data.MinSelectCount).to.be(0);
                      expect(data.MaxSelectCount).to.be.a('number');
                      expect(data.MaxSelectCount).to.be(0);
                      expect(data.CellLayoutType).to.be.a('string');
                      expect(data.CellLayoutType).to.be("Small");
      
                            }
                  }
                  {
                    let dataCtr = data.DailySpecialHours;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                      expect(data.Early).to.be.a(Flipdish.Range);
                            expect(data.Early.StartTime).to.be.a('string');
                        expect(data.Early.StartTime).to.be("");
                        expect(data.Early.Period).to.be.a('string');
                        expect(data.Early.Period).to.be("");
                        expect(data.Early.DayOfWeek).to.be.a('string');
                        expect(data.Early.DayOfWeek).to.be("Sunday");
                      expect(data.Late).to.be.a(Flipdish.Range);
                            expect(data.Late.StartTime).to.be.a('string');
                        expect(data.Late.StartTime).to.be("");
                        expect(data.Late.Period).to.be.a('string');
                        expect(data.Late.Period).to.be("");
                        expect(data.Late.DayOfWeek).to.be.a('string');
                        expect(data.Late.DayOfWeek).to.be("Sunday");
                      {
                        let dataCtr = data.Ranges;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.Range);
                          expect(data.StartTime).to.be.a('string');
                          expect(data.StartTime).to.be("");
                          expect(data.Period).to.be.a('string');
                          expect(data.Period).to.be("");
                          expect(data.DayOfWeek).to.be.a('string');
                          expect(data.DayOfWeek).to.be("Sunday");
          
                                }
                      }
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.StartTimeEarly).to.be.a('string');
                      expect(data.StartTimeEarly).to.be("");
                      expect(data.PeriodEarly).to.be.a('string');
                      expect(data.PeriodEarly).to.be("");
      
                            }
                  }
                  expect(data.PublicId).to.be.a('string');
                  expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                  {
                    let dataCtr = data.Metadata;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.CreateMetadata);
                      expect(data.StoreId).to.be.a('number');
                      expect(data.StoreId).to.be(0);
                      expect(data.Key).to.be.a('string');
                      expect(data.Key).to.be("");
                      expect(data.Value).to.be.a('string');
                      expect(data.Value).to.be("");
      
                            }
                  }
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
                  expect(data.Description).to.be.a('string');
                  expect(data.Description).to.be("");
                  expect(data.SpicinessRating).to.be.a('string');
                  expect(data.SpicinessRating).to.be("NotRated");
                  expect(data.Price).to.be.a('number');
                  expect(data.Price).to.be(0.0);
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Alcohol).to.be.a('boolean');
                  expect(data.Alcohol).to.be(false);
                  expect(data.IsAvailable).to.be.a('boolean');
                  expect(data.IsAvailable).to.be(false);
                  expect(data.CellLayoutType).to.be.a('string');
                  expect(data.CellLayoutType).to.be("Small");
                  expect(data.DisableVouchers).to.be.a('boolean');
                  expect(data.DisableVouchers).to.be(false);
                  expect(data.ImageUrl).to.be.a('string');
                  expect(data.ImageUrl).to.be("");
  
                        }
              }
              expect(data.Data.MenuSectionAvailability).to.be.a(Flipdish.MenuSectionAvailability);
                    {
                  let dataCtr = data.Data.MenuSectionAvailability.AvailableTimes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                    expect(data.Early).to.be.a(Flipdish.Range);
                          expect(data.Early.StartTime).to.be.a('string');
                      expect(data.Early.StartTime).to.be("");
                      expect(data.Early.Period).to.be.a('string');
                      expect(data.Early.Period).to.be("");
                      expect(data.Early.DayOfWeek).to.be.a('string');
                      expect(data.Early.DayOfWeek).to.be("Sunday");
                    expect(data.Late).to.be.a(Flipdish.Range);
                          expect(data.Late.StartTime).to.be.a('string');
                      expect(data.Late.StartTime).to.be("");
                      expect(data.Late.Period).to.be.a('string');
                      expect(data.Late.Period).to.be("");
                      expect(data.Late.DayOfWeek).to.be.a('string');
                      expect(data.Late.DayOfWeek).to.be("Sunday");
                    {
                      let dataCtr = data.Ranges;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.Range);
                        expect(data.StartTime).to.be.a('string');
                        expect(data.StartTime).to.be("");
                        expect(data.Period).to.be.a('string');
                        expect(data.Period).to.be("");
                        expect(data.DayOfWeek).to.be.a('string');
                        expect(data.DayOfWeek).to.be("Sunday");
        
                              }
                    }
                    expect(data.DayOfWeek).to.be.a('string');
                    expect(data.DayOfWeek).to.be("Sunday");
                    expect(data.StartTime).to.be.a('string');
                    expect(data.StartTime).to.be("");
                    expect(data.Period).to.be.a('string');
                    expect(data.Period).to.be("");
                    expect(data.StartTimeEarly).to.be.a('string');
                    expect(data.StartTimeEarly).to.be("");
                    expect(data.PeriodEarly).to.be.a('string');
                    expect(data.PeriodEarly).to.be("");
    
                          }
                }
                expect(data.Data.MenuSectionAvailability.AvailabilityMode).to.be.a('string');
                expect(data.Data.MenuSectionAvailability.AvailabilityMode).to.be("DisplayAlways");
              expect(data.Data.PublicId).to.be.a('string');
              expect(data.Data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.Description).to.be.a('string');
              expect(data.Data.Description).to.be("");
              expect(data.Data.DisplayOrder).to.be.a('number');
              expect(data.Data.DisplayOrder).to.be(0);
              expect(data.Data.IsAvailable).to.be.a('boolean');
              expect(data.Data.IsAvailable).to.be(false);
              expect(data.Data.IsHiddenFromCustomers).to.be.a('boolean');
              expect(data.Data.IsHiddenFromCustomers).to.be(false);
              expect(data.Data.ImageUrl).to.be.a('string');
              expect(data.Data.ImageUrl).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createMenuAvailabilityForDay', function() {
        it('should call createMenuAvailabilityForDay successfully', function(done) {
          // TODO: uncomment, update parameter values for createMenuAvailabilityForDay call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var dayOfWeek = "dayOfWeek_example";
          var businessHoursPeriod = new Flipdish.BusinessHoursPeriodBase();
          businessHoursPeriod.DayOfWeek = "Sunday";
          businessHoursPeriod.StartTime = "";
          businessHoursPeriod.Period = "";
          businessHoursPeriod.StartTimeEarly = "";
          businessHoursPeriod.PeriodEarly = "";

          instance.createMenuAvailabilityForDay(menuId, menuSectionId, dayOfWeek, businessHoursPeriod, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createMenuSection', function() {
        it('should call createMenuSection successfully', function(done) {
          // TODO: uncomment, update parameter values for createMenuSection call and complete the assertions
          /*
          var menuId = 56;
          var menuSection = new Flipdish.MenuSectionBase();
          menuSection.Name = "";
          menuSection.Description = "";
          menuSection.DisplayOrder = 0;
          menuSection.IsAvailable = false;
          menuSection.IsHiddenFromCustomers = false;
          menuSection.ImageUrl = "";

          instance.createMenuSection(menuId, menuSection, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createMenuSectionAvailability', function() {
        it('should call createMenuSectionAvailability successfully', function(done) {
          // TODO: uncomment, update parameter values for createMenuSectionAvailability call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionAvailability = new Flipdish.MenuSectionAvailabilityBase();
          menuSectionAvailability.AvailabilityMode = "DisplayAlways";

          instance.createMenuSectionAvailability(menuId, menuSectionId, menuSectionAvailability, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMenuSection', function() {
        it('should call deleteMenuSection successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMenuSection call
          /*
          var menuId = 56;
          var menuSectionId = 56;

          instance.deleteMenuSection(menuId, menuSectionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMenuSectionImage', function() {
        it('should call deleteMenuSectionImage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMenuSectionImage call
          /*
          var menuId = 56;
          var menuSectionId = 56;

          instance.deleteMenuSectionImage(menuId, menuSectionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuSectionById', function() {
        it('should call getMenuSectionById successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuSectionById call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;

          instance.getMenuSectionById(menuId, menuSectionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultMenuSection);
            expect(data.Data).to.be.a(Flipdish.MenuSection);
                  expect(data.Data.MenuSectionId).to.be.a('number');
              expect(data.Data.MenuSectionId).to.be(0);
              {
                let dataCtr = data.Data.MenuItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.MenuSectionItem);
                  expect(data.MenuItemId).to.be.a('number');
                  expect(data.MenuItemId).to.be(0);
                  expect(data.ActualPrice).to.be.a('number');
                  expect(data.ActualPrice).to.be(0.0);
                  {
                    let dataCtr = data.MenuItemOptionSets;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.MenuItemOptionSet);
                      expect(data.MenuItemOptionSetId).to.be.a('number');
                      expect(data.MenuItemOptionSetId).to.be(0);
                      expect(data.ImageUrl).to.be.a('string');
                      expect(data.ImageUrl).to.be("");
                      {
                        let dataCtr = data.MenuItemOptionSetItems;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.MenuItemOptionSetItem);
                          expect(data.MenuItemOptionSetItemId).to.be.a('number');
                          expect(data.MenuItemOptionSetItemId).to.be(0);
                          expect(data.PublicId).to.be.a('string');
                          expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                          {
                            let dataCtr = data.Metadata;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Flipdish.CreateMetadata);
                              expect(data.StoreId).to.be.a('number');
                              expect(data.StoreId).to.be(0);
                              expect(data.Key).to.be.a('string');
                              expect(data.Key).to.be("");
                              expect(data.Value).to.be.a('string');
                              expect(data.Value).to.be("");
              
                                    }
                          }
                          expect(data.Name).to.be.a('string');
                          expect(data.Name).to.be("");
                          expect(data.Price).to.be.a('number');
                          expect(data.Price).to.be(0.0);
                          expect(data.IsAvailable).to.be.a('boolean');
                          expect(data.IsAvailable).to.be(false);
                          expect(data.DisplayOrder).to.be.a('number');
                          expect(data.DisplayOrder).to.be(0);
                          expect(data.CellLayoutType).to.be.a('string');
                          expect(data.CellLayoutType).to.be("Small");
                          expect(data.ImageUrl).to.be.a('string');
                          expect(data.ImageUrl).to.be("");
          
                                }
                      }
                      expect(data.PublicId).to.be.a('string');
                      expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                      expect(data.Name).to.be.a('string');
                      expect(data.Name).to.be("");
                      expect(data.IsMasterOptionSet).to.be.a('boolean');
                      expect(data.IsMasterOptionSet).to.be(false);
                      expect(data.DisplayOrder).to.be.a('number');
                      expect(data.DisplayOrder).to.be(0);
                      expect(data.MinSelectCount).to.be.a('number');
                      expect(data.MinSelectCount).to.be(0);
                      expect(data.MaxSelectCount).to.be.a('number');
                      expect(data.MaxSelectCount).to.be(0);
                      expect(data.CellLayoutType).to.be.a('string');
                      expect(data.CellLayoutType).to.be("Small");
      
                            }
                  }
                  {
                    let dataCtr = data.DailySpecialHours;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                      expect(data.Early).to.be.a(Flipdish.Range);
                            expect(data.Early.StartTime).to.be.a('string');
                        expect(data.Early.StartTime).to.be("");
                        expect(data.Early.Period).to.be.a('string');
                        expect(data.Early.Period).to.be("");
                        expect(data.Early.DayOfWeek).to.be.a('string');
                        expect(data.Early.DayOfWeek).to.be("Sunday");
                      expect(data.Late).to.be.a(Flipdish.Range);
                            expect(data.Late.StartTime).to.be.a('string');
                        expect(data.Late.StartTime).to.be("");
                        expect(data.Late.Period).to.be.a('string');
                        expect(data.Late.Period).to.be("");
                        expect(data.Late.DayOfWeek).to.be.a('string');
                        expect(data.Late.DayOfWeek).to.be("Sunday");
                      {
                        let dataCtr = data.Ranges;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.Range);
                          expect(data.StartTime).to.be.a('string');
                          expect(data.StartTime).to.be("");
                          expect(data.Period).to.be.a('string');
                          expect(data.Period).to.be("");
                          expect(data.DayOfWeek).to.be.a('string');
                          expect(data.DayOfWeek).to.be("Sunday");
          
                                }
                      }
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.StartTimeEarly).to.be.a('string');
                      expect(data.StartTimeEarly).to.be("");
                      expect(data.PeriodEarly).to.be.a('string');
                      expect(data.PeriodEarly).to.be("");
      
                            }
                  }
                  expect(data.PublicId).to.be.a('string');
                  expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                  {
                    let dataCtr = data.Metadata;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.CreateMetadata);
                      expect(data.StoreId).to.be.a('number');
                      expect(data.StoreId).to.be(0);
                      expect(data.Key).to.be.a('string');
                      expect(data.Key).to.be("");
                      expect(data.Value).to.be.a('string');
                      expect(data.Value).to.be("");
      
                            }
                  }
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
                  expect(data.Description).to.be.a('string');
                  expect(data.Description).to.be("");
                  expect(data.SpicinessRating).to.be.a('string');
                  expect(data.SpicinessRating).to.be("NotRated");
                  expect(data.Price).to.be.a('number');
                  expect(data.Price).to.be(0.0);
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Alcohol).to.be.a('boolean');
                  expect(data.Alcohol).to.be(false);
                  expect(data.IsAvailable).to.be.a('boolean');
                  expect(data.IsAvailable).to.be(false);
                  expect(data.CellLayoutType).to.be.a('string');
                  expect(data.CellLayoutType).to.be("Small");
                  expect(data.DisableVouchers).to.be.a('boolean');
                  expect(data.DisableVouchers).to.be(false);
                  expect(data.ImageUrl).to.be.a('string');
                  expect(data.ImageUrl).to.be("");
  
                        }
              }
              expect(data.Data.MenuSectionAvailability).to.be.a(Flipdish.MenuSectionAvailability);
                    {
                  let dataCtr = data.Data.MenuSectionAvailability.AvailableTimes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                    expect(data.Early).to.be.a(Flipdish.Range);
                          expect(data.Early.StartTime).to.be.a('string');
                      expect(data.Early.StartTime).to.be("");
                      expect(data.Early.Period).to.be.a('string');
                      expect(data.Early.Period).to.be("");
                      expect(data.Early.DayOfWeek).to.be.a('string');
                      expect(data.Early.DayOfWeek).to.be("Sunday");
                    expect(data.Late).to.be.a(Flipdish.Range);
                          expect(data.Late.StartTime).to.be.a('string');
                      expect(data.Late.StartTime).to.be("");
                      expect(data.Late.Period).to.be.a('string');
                      expect(data.Late.Period).to.be("");
                      expect(data.Late.DayOfWeek).to.be.a('string');
                      expect(data.Late.DayOfWeek).to.be("Sunday");
                    {
                      let dataCtr = data.Ranges;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.Range);
                        expect(data.StartTime).to.be.a('string');
                        expect(data.StartTime).to.be("");
                        expect(data.Period).to.be.a('string');
                        expect(data.Period).to.be("");
                        expect(data.DayOfWeek).to.be.a('string');
                        expect(data.DayOfWeek).to.be("Sunday");
        
                              }
                    }
                    expect(data.DayOfWeek).to.be.a('string');
                    expect(data.DayOfWeek).to.be("Sunday");
                    expect(data.StartTime).to.be.a('string');
                    expect(data.StartTime).to.be("");
                    expect(data.Period).to.be.a('string');
                    expect(data.Period).to.be("");
                    expect(data.StartTimeEarly).to.be.a('string');
                    expect(data.StartTimeEarly).to.be("");
                    expect(data.PeriodEarly).to.be.a('string');
                    expect(data.PeriodEarly).to.be("");
    
                          }
                }
                expect(data.Data.MenuSectionAvailability.AvailabilityMode).to.be.a('string');
                expect(data.Data.MenuSectionAvailability.AvailabilityMode).to.be("DisplayAlways");
              expect(data.Data.PublicId).to.be.a('string');
              expect(data.Data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.Description).to.be.a('string');
              expect(data.Data.Description).to.be("");
              expect(data.Data.DisplayOrder).to.be.a('number');
              expect(data.Data.DisplayOrder).to.be(0);
              expect(data.Data.IsAvailable).to.be.a('boolean');
              expect(data.Data.IsAvailable).to.be(false);
              expect(data.Data.IsHiddenFromCustomers).to.be.a('boolean');
              expect(data.Data.IsHiddenFromCustomers).to.be(false);
              expect(data.Data.ImageUrl).to.be.a('string');
              expect(data.Data.ImageUrl).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuSections', function() {
        it('should call getMenuSections successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuSections call and complete the assertions
          /*
          var menuId = 56;

          instance.getMenuSections(menuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultMenuSection);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.MenuSection);
                expect(data.MenuSectionId).to.be.a('number');
                expect(data.MenuSectionId).to.be(0);
                {
                  let dataCtr = data.MenuItems;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.MenuSectionItem);
                    expect(data.MenuItemId).to.be.a('number');
                    expect(data.MenuItemId).to.be(0);
                    expect(data.ActualPrice).to.be.a('number');
                    expect(data.ActualPrice).to.be(0.0);
                    {
                      let dataCtr = data.MenuItemOptionSets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.MenuItemOptionSet);
                        expect(data.MenuItemOptionSetId).to.be.a('number');
                        expect(data.MenuItemOptionSetId).to.be(0);
                        expect(data.ImageUrl).to.be.a('string');
                        expect(data.ImageUrl).to.be("");
                        {
                          let dataCtr = data.MenuItemOptionSetItems;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Flipdish.MenuItemOptionSetItem);
                            expect(data.MenuItemOptionSetItemId).to.be.a('number');
                            expect(data.MenuItemOptionSetItemId).to.be(0);
                            expect(data.PublicId).to.be.a('string');
                            expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                            {
                              let dataCtr = data.Metadata;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a(Flipdish.CreateMetadata);
                                expect(data.StoreId).to.be.a('number');
                                expect(data.StoreId).to.be(0);
                                expect(data.Key).to.be.a('string');
                                expect(data.Key).to.be("");
                                expect(data.Value).to.be.a('string');
                                expect(data.Value).to.be("");
                
                                      }
                            }
                            expect(data.Name).to.be.a('string');
                            expect(data.Name).to.be("");
                            expect(data.Price).to.be.a('number');
                            expect(data.Price).to.be(0.0);
                            expect(data.IsAvailable).to.be.a('boolean');
                            expect(data.IsAvailable).to.be(false);
                            expect(data.DisplayOrder).to.be.a('number');
                            expect(data.DisplayOrder).to.be(0);
                            expect(data.CellLayoutType).to.be.a('string');
                            expect(data.CellLayoutType).to.be("Small");
                            expect(data.ImageUrl).to.be.a('string');
                            expect(data.ImageUrl).to.be("");
            
                                  }
                        }
                        expect(data.PublicId).to.be.a('string');
                        expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                        expect(data.Name).to.be.a('string');
                        expect(data.Name).to.be("");
                        expect(data.IsMasterOptionSet).to.be.a('boolean');
                        expect(data.IsMasterOptionSet).to.be(false);
                        expect(data.DisplayOrder).to.be.a('number');
                        expect(data.DisplayOrder).to.be(0);
                        expect(data.MinSelectCount).to.be.a('number');
                        expect(data.MinSelectCount).to.be(0);
                        expect(data.MaxSelectCount).to.be.a('number');
                        expect(data.MaxSelectCount).to.be(0);
                        expect(data.CellLayoutType).to.be.a('string');
                        expect(data.CellLayoutType).to.be("Small");
        
                              }
                    }
                    {
                      let dataCtr = data.DailySpecialHours;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                        expect(data.Early).to.be.a(Flipdish.Range);
                              expect(data.Early.StartTime).to.be.a('string');
                          expect(data.Early.StartTime).to.be("");
                          expect(data.Early.Period).to.be.a('string');
                          expect(data.Early.Period).to.be("");
                          expect(data.Early.DayOfWeek).to.be.a('string');
                          expect(data.Early.DayOfWeek).to.be("Sunday");
                        expect(data.Late).to.be.a(Flipdish.Range);
                              expect(data.Late.StartTime).to.be.a('string');
                          expect(data.Late.StartTime).to.be("");
                          expect(data.Late.Period).to.be.a('string');
                          expect(data.Late.Period).to.be("");
                          expect(data.Late.DayOfWeek).to.be.a('string');
                          expect(data.Late.DayOfWeek).to.be("Sunday");
                        {
                          let dataCtr = data.Ranges;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Flipdish.Range);
                            expect(data.StartTime).to.be.a('string');
                            expect(data.StartTime).to.be("");
                            expect(data.Period).to.be.a('string');
                            expect(data.Period).to.be("");
                            expect(data.DayOfWeek).to.be.a('string');
                            expect(data.DayOfWeek).to.be("Sunday");
            
                                  }
                        }
                        expect(data.DayOfWeek).to.be.a('string');
                        expect(data.DayOfWeek).to.be("Sunday");
                        expect(data.StartTime).to.be.a('string');
                        expect(data.StartTime).to.be("");
                        expect(data.Period).to.be.a('string');
                        expect(data.Period).to.be("");
                        expect(data.StartTimeEarly).to.be.a('string');
                        expect(data.StartTimeEarly).to.be("");
                        expect(data.PeriodEarly).to.be.a('string');
                        expect(data.PeriodEarly).to.be("");
        
                              }
                    }
                    expect(data.PublicId).to.be.a('string');
                    expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                    {
                      let dataCtr = data.Metadata;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.CreateMetadata);
                        expect(data.StoreId).to.be.a('number');
                        expect(data.StoreId).to.be(0);
                        expect(data.Key).to.be.a('string');
                        expect(data.Key).to.be("");
                        expect(data.Value).to.be.a('string');
                        expect(data.Value).to.be("");
        
                              }
                    }
                    expect(data.Name).to.be.a('string');
                    expect(data.Name).to.be("");
                    expect(data.Description).to.be.a('string');
                    expect(data.Description).to.be("");
                    expect(data.SpicinessRating).to.be.a('string');
                    expect(data.SpicinessRating).to.be("NotRated");
                    expect(data.Price).to.be.a('number');
                    expect(data.Price).to.be(0.0);
                    expect(data.DisplayOrder).to.be.a('number');
                    expect(data.DisplayOrder).to.be(0);
                    expect(data.Alcohol).to.be.a('boolean');
                    expect(data.Alcohol).to.be(false);
                    expect(data.IsAvailable).to.be.a('boolean');
                    expect(data.IsAvailable).to.be(false);
                    expect(data.CellLayoutType).to.be.a('string');
                    expect(data.CellLayoutType).to.be("Small");
                    expect(data.DisableVouchers).to.be.a('boolean');
                    expect(data.DisableVouchers).to.be(false);
                    expect(data.ImageUrl).to.be.a('string');
                    expect(data.ImageUrl).to.be("");
    
                          }
                }
                expect(data.MenuSectionAvailability).to.be.a(Flipdish.MenuSectionAvailability);
                      {
                    let dataCtr = data.MenuSectionAvailability.AvailableTimes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                      expect(data.Early).to.be.a(Flipdish.Range);
                            expect(data.Early.StartTime).to.be.a('string');
                        expect(data.Early.StartTime).to.be("");
                        expect(data.Early.Period).to.be.a('string');
                        expect(data.Early.Period).to.be("");
                        expect(data.Early.DayOfWeek).to.be.a('string');
                        expect(data.Early.DayOfWeek).to.be("Sunday");
                      expect(data.Late).to.be.a(Flipdish.Range);
                            expect(data.Late.StartTime).to.be.a('string');
                        expect(data.Late.StartTime).to.be("");
                        expect(data.Late.Period).to.be.a('string');
                        expect(data.Late.Period).to.be("");
                        expect(data.Late.DayOfWeek).to.be.a('string');
                        expect(data.Late.DayOfWeek).to.be("Sunday");
                      {
                        let dataCtr = data.Ranges;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.Range);
                          expect(data.StartTime).to.be.a('string');
                          expect(data.StartTime).to.be("");
                          expect(data.Period).to.be.a('string');
                          expect(data.Period).to.be("");
                          expect(data.DayOfWeek).to.be.a('string');
                          expect(data.DayOfWeek).to.be("Sunday");
          
                                }
                      }
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.StartTimeEarly).to.be.a('string');
                      expect(data.StartTimeEarly).to.be("");
                      expect(data.PeriodEarly).to.be.a('string');
                      expect(data.PeriodEarly).to.be("");
      
                            }
                  }
                  expect(data.MenuSectionAvailability.AvailabilityMode).to.be.a('string');
                  expect(data.MenuSectionAvailability.AvailabilityMode).to.be("DisplayAlways");
                expect(data.PublicId).to.be.a('string');
                expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.Description).to.be.a('string');
                expect(data.Description).to.be("");
                expect(data.DisplayOrder).to.be.a('number');
                expect(data.DisplayOrder).to.be(0);
                expect(data.IsAvailable).to.be.a('boolean');
                expect(data.IsAvailable).to.be(false);
                expect(data.IsHiddenFromCustomers).to.be.a('boolean');
                expect(data.IsHiddenFromCustomers).to.be(false);
                expect(data.ImageUrl).to.be.a('string');
                expect(data.ImageUrl).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('menuSectionsSetItemDisplayOrders', function() {
        it('should call menuSectionsSetItemDisplayOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for menuSectionsSetItemDisplayOrders call
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var displayOrders = new Flipdish.MenuObjectDisplayOrders();
          displayOrders.DisplayOrders = [new Flipdish.ObjectDisplayOrder()];
          displayOrders.DisplayOrders[0].Id = 0;
          displayOrders.DisplayOrders[0].DisplayOrder = 0;

          instance.menuSectionsSetItemDisplayOrders(menuId, menuSectionId, displayOrders, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateMenuSection', function() {
        it('should call updateMenuSection successfully', function(done) {
          // TODO: uncomment, update parameter values for updateMenuSection call
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSection = new Flipdish.MenuSectionBase();
          menuSection.Name = "";
          menuSection.Description = "";
          menuSection.DisplayOrder = 0;
          menuSection.IsAvailable = false;
          menuSection.IsHiddenFromCustomers = false;
          menuSection.ImageUrl = "";
          var opts = {};
          opts.undoAfter = 1.2;

          instance.updateMenuSection(menuId, menuSectionId, menuSection, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadMenuSectionImage', function() {
        it('should call uploadMenuSectionImage successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadMenuSectionImage call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var Image = "/path/to/file.txt";

          instance.uploadMenuSectionImage(menuId, menuSectionId, Image, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
