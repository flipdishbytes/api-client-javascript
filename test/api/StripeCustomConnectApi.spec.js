/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.StripeCustomConnectApi();
  });

  describe('(package)', function() {
    describe('StripeCustomConnectApi', function() {
      describe('createBankAccountAndConnectedAccount', function() {
        it('should call createBankAccountAndConnectedAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for createBankAccountAndConnectedAccount call and complete the assertions
          /*
          var appId = "appId_example";
          var account = new Flipdish.BankAccountCreate();
          account.BankAddress = "";
          account.BankCountryCode = "";
          account.AccountHolderAddress = "";
          account.AccountHolderCountryCode = "";
          account.VatNumber = "";
          account.CurrencyCode = "EUR";
          account.StoreIds = [0];
          account.BankName = "";
          account.AccountName = "";
          account.Iban = "";
          account.Swift = "";
          account.NationalClearingCode = "";
          account.PopulatedAccountFields = [new Flipdish.AccountFieldKeyValuePair()];
          account.PopulatedAccountFields[0].Key = "Iban";
          account.PopulatedAccountFields[0].Value = "";
          account.RejectionReason = "";
          account.BusinessType = "Individual";

          instance.createBankAccountAndConnectedAccount(appId, account, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultBankAccountDetail);
            expect(data.Data).to.be.a(Flipdish.BankAccountDetail);
                  expect(data.Data.Id).to.be.a('number');
              expect(data.Data.Id).to.be(0);
              {
                let dataCtr = data.Data.StoreNames;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.AccountState).to.be.a('string');
              expect(data.Data.AccountState).to.be("Unverified");
              expect(data.Data.StripeConnectedAccountInfo).to.be.a(Flipdish.StripeConnectedAccountInfo);
                    expect(data.Data.StripeConnectedAccountInfo.AccountStatus).to.be.a('string');
                expect(data.Data.StripeConnectedAccountInfo.AccountStatus).to.be("Disabled");
                expect(data.Data.StripeConnectedAccountInfo.StripeId).to.be.a('string');
                expect(data.Data.StripeConnectedAccountInfo.StripeId).to.be("");
                expect(data.Data.StripeConnectedAccountInfo.CardPaymentStatus).to.be.a('string');
                expect(data.Data.StripeConnectedAccountInfo.CardPaymentStatus).to.be("Inactive");
              expect(data.Data.BankAddress).to.be.a('string');
              expect(data.Data.BankAddress).to.be("");
              expect(data.Data.BankCountryCode).to.be.a('string');
              expect(data.Data.BankCountryCode).to.be("");
              expect(data.Data.AccountHolderAddress).to.be.a('string');
              expect(data.Data.AccountHolderAddress).to.be("");
              expect(data.Data.AccountHolderCountryCode).to.be.a('string');
              expect(data.Data.AccountHolderCountryCode).to.be("");
              expect(data.Data.VatNumber).to.be.a('string');
              expect(data.Data.VatNumber).to.be("");
              expect(data.Data.CurrencyCode).to.be.a('string');
              expect(data.Data.CurrencyCode).to.be("EUR");
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.Data.BankName).to.be.a('string');
              expect(data.Data.BankName).to.be("");
              expect(data.Data.AccountName).to.be.a('string');
              expect(data.Data.AccountName).to.be("");
              expect(data.Data.Iban).to.be.a('string');
              expect(data.Data.Iban).to.be("");
              expect(data.Data.Swift).to.be.a('string');
              expect(data.Data.Swift).to.be("");
              expect(data.Data.NationalClearingCode).to.be.a('string');
              expect(data.Data.NationalClearingCode).to.be("");
              {
                let dataCtr = data.Data.PopulatedAccountFields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.AccountFieldKeyValuePair);
                  expect(data.Key).to.be.a('string');
                  expect(data.Key).to.be("Iban");
                  expect(data.Value).to.be.a('string');
                  expect(data.Value).to.be("");
  
                        }
              }
              expect(data.Data.RejectionReason).to.be.a('string');
              expect(data.Data.RejectionReason).to.be("");
              expect(data.Data.BusinessType).to.be.a('string');
              expect(data.Data.BusinessType).to.be("Individual");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createStripeConnectedAccount', function() {
        it('should call createStripeConnectedAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for createStripeConnectedAccount call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;

          instance.createStripeConnectedAccount(appId, bankAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStripeConnectedAccount);
            expect(data.Data).to.be.a(Flipdish.StripeConnectedAccount);
                  expect(data.Data.FlipdishConnectedAccountId).to.be.a('number');
              expect(data.Data.FlipdishConnectedAccountId).to.be(0);
              expect(data.Data.StripeId).to.be.a('string');
              expect(data.Data.StripeId).to.be("");
              expect(data.Data.WhitelabelConfigId).to.be.a('number');
              expect(data.Data.WhitelabelConfigId).to.be(0);
              expect(data.Data.CardPaymentsStatus).to.be.a('string');
              expect(data.Data.CardPaymentsStatus).to.be("Inactive");
              expect(data.Data.TransfersStatus).to.be.a('string');
              expect(data.Data.TransfersStatus).to.be("Inactive");
              expect(data.Data.AccountStatus).to.be.a('string');
              expect(data.Data.AccountStatus).to.be("Disabled");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createStripeConnectedAccountLink', function() {
        it('should call createStripeConnectedAccountLink successfully', function(done) {
          // TODO: uncomment, update parameter values for createStripeConnectedAccountLink call and complete the assertions
          /*
          var appId = "appId_example";
          var stripeConnectedAccountId = "stripeConnectedAccountId_example";
          var stripeAccountLinkRequest = new Flipdish.StripeAccountLinkRequest();
          stripeAccountLinkRequest.StripeId = "";
          stripeAccountLinkRequest.ReturnUrl = "";
          stripeAccountLinkRequest.Collect = "CurrentlyDue";
          stripeAccountLinkRequest.Type = "Onboarding";

          instance.createStripeConnectedAccountLink(appId, stripeConnectedAccountId, stripeAccountLinkRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStripeConnectedAccount);
            expect(data.Data).to.be.a(Flipdish.StripeConnectedAccount);
                  expect(data.Data.FlipdishConnectedAccountId).to.be.a('number');
              expect(data.Data.FlipdishConnectedAccountId).to.be(0);
              expect(data.Data.StripeId).to.be.a('string');
              expect(data.Data.StripeId).to.be("");
              expect(data.Data.WhitelabelConfigId).to.be.a('number');
              expect(data.Data.WhitelabelConfigId).to.be(0);
              expect(data.Data.CardPaymentsStatus).to.be.a('string');
              expect(data.Data.CardPaymentsStatus).to.be("Inactive");
              expect(data.Data.TransfersStatus).to.be.a('string');
              expect(data.Data.TransfersStatus).to.be("Inactive");
              expect(data.Data.AccountStatus).to.be.a('string');
              expect(data.Data.AccountStatus).to.be("Disabled");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVerificationStatus', function() {
        it('should call getVerificationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getVerificationStatus call and complete the assertions
          /*
          var appId = "appId_example";
          var stripeConnectedAccountId = "stripeConnectedAccountId_example";

          instance.getVerificationStatus(appId, stripeConnectedAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStripeConnectedAccount);
            expect(data.Data).to.be.a(Flipdish.StripeConnectedAccount);
                  expect(data.Data.FlipdishConnectedAccountId).to.be.a('number');
              expect(data.Data.FlipdishConnectedAccountId).to.be(0);
              expect(data.Data.StripeId).to.be.a('string');
              expect(data.Data.StripeId).to.be("");
              expect(data.Data.WhitelabelConfigId).to.be.a('number');
              expect(data.Data.WhitelabelConfigId).to.be(0);
              expect(data.Data.CardPaymentsStatus).to.be.a('string');
              expect(data.Data.CardPaymentsStatus).to.be("Inactive");
              expect(data.Data.TransfersStatus).to.be.a('string');
              expect(data.Data.TransfersStatus).to.be("Inactive");
              expect(data.Data.AccountStatus).to.be.a('string');
              expect(data.Data.AccountStatus).to.be("Disabled");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setBankAccountBusinessType', function() {
        it('should call setBankAccountBusinessType successfully', function(done) {
          // TODO: uncomment, update parameter values for setBankAccountBusinessType call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var businessType = "businessType_example";

          instance.setBankAccountBusinessType(appId, bankAccountId, businessType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultBankAccountDetail);
            expect(data.Data).to.be.a(Flipdish.BankAccountDetail);
                  expect(data.Data.Id).to.be.a('number');
              expect(data.Data.Id).to.be(0);
              {
                let dataCtr = data.Data.StoreNames;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.AccountState).to.be.a('string');
              expect(data.Data.AccountState).to.be("Unverified");
              expect(data.Data.StripeConnectedAccountInfo).to.be.a(Flipdish.StripeConnectedAccountInfo);
                    expect(data.Data.StripeConnectedAccountInfo.AccountStatus).to.be.a('string');
                expect(data.Data.StripeConnectedAccountInfo.AccountStatus).to.be("Disabled");
                expect(data.Data.StripeConnectedAccountInfo.StripeId).to.be.a('string');
                expect(data.Data.StripeConnectedAccountInfo.StripeId).to.be("");
                expect(data.Data.StripeConnectedAccountInfo.CardPaymentStatus).to.be.a('string');
                expect(data.Data.StripeConnectedAccountInfo.CardPaymentStatus).to.be("Inactive");
              expect(data.Data.BankAddress).to.be.a('string');
              expect(data.Data.BankAddress).to.be("");
              expect(data.Data.BankCountryCode).to.be.a('string');
              expect(data.Data.BankCountryCode).to.be("");
              expect(data.Data.AccountHolderAddress).to.be.a('string');
              expect(data.Data.AccountHolderAddress).to.be("");
              expect(data.Data.AccountHolderCountryCode).to.be.a('string');
              expect(data.Data.AccountHolderCountryCode).to.be("");
              expect(data.Data.VatNumber).to.be.a('string');
              expect(data.Data.VatNumber).to.be("");
              expect(data.Data.CurrencyCode).to.be.a('string');
              expect(data.Data.CurrencyCode).to.be("EUR");
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.Data.BankName).to.be.a('string');
              expect(data.Data.BankName).to.be("");
              expect(data.Data.AccountName).to.be.a('string');
              expect(data.Data.AccountName).to.be("");
              expect(data.Data.Iban).to.be.a('string');
              expect(data.Data.Iban).to.be("");
              expect(data.Data.Swift).to.be.a('string');
              expect(data.Data.Swift).to.be("");
              expect(data.Data.NationalClearingCode).to.be.a('string');
              expect(data.Data.NationalClearingCode).to.be("");
              {
                let dataCtr = data.Data.PopulatedAccountFields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.AccountFieldKeyValuePair);
                  expect(data.Key).to.be.a('string');
                  expect(data.Key).to.be("Iban");
                  expect(data.Value).to.be.a('string');
                  expect(data.Value).to.be("");
  
                        }
              }
              expect(data.Data.RejectionReason).to.be.a('string');
              expect(data.Data.RejectionReason).to.be("");
              expect(data.Data.BusinessType).to.be.a('string');
              expect(data.Data.BusinessType).to.be("Individual");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stripeCustomConnectRefresh', function() {
        it('should call stripeCustomConnectRefresh successfully', function(done) {
          // TODO: uncomment, update parameter values for stripeCustomConnectRefresh call and complete the assertions
          /*
          var linkRequestId = 56;
          var appId = "appId_example";

          instance.stripeCustomConnectRefresh(linkRequestId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBankAccountDetails', function() {
        it('should call updateBankAccountDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBankAccountDetails call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var updateRequest = new Flipdish.BankAccountDetailsUpdateRequest();
          updateRequest.BankAddress = "";
          updateRequest.AccountHolderAddress = "";
          updateRequest.VatNumber = "";
          updateRequest.StoreIds = [0];
          updateRequest.BankName = "";
          updateRequest.AccountName = "";
          updateRequest.Iban = "";
          updateRequest.Swift = "";
          updateRequest.NationalClearingCode = "";
          updateRequest.PopulatedAccountFields = [new Flipdish.AccountFieldKeyValuePair()];
          updateRequest.PopulatedAccountFields[0].Key = "Iban";
          updateRequest.PopulatedAccountFields[0].Value = "";
          updateRequest.RejectionReason = "";
          updateRequest.BusinessType = "Individual";

          instance.updateBankAccountDetails(appId, bankAccountId, updateRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStripeConnectedAccount);
            expect(data.Data).to.be.a(Flipdish.StripeConnectedAccount);
                  expect(data.Data.FlipdishConnectedAccountId).to.be.a('number');
              expect(data.Data.FlipdishConnectedAccountId).to.be(0);
              expect(data.Data.StripeId).to.be.a('string');
              expect(data.Data.StripeId).to.be("");
              expect(data.Data.WhitelabelConfigId).to.be.a('number');
              expect(data.Data.WhitelabelConfigId).to.be(0);
              expect(data.Data.CardPaymentsStatus).to.be.a('string');
              expect(data.Data.CardPaymentsStatus).to.be("Inactive");
              expect(data.Data.TransfersStatus).to.be.a('string');
              expect(data.Data.TransfersStatus).to.be("Inactive");
              expect(data.Data.AccountStatus).to.be.a('string');
              expect(data.Data.AccountStatus).to.be("Disabled");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
