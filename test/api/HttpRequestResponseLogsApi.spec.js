/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.HttpRequestResponseLogsApi();
  });

  describe('(package)', function() {
    describe('HttpRequestResponseLogsApi', function() {
      describe('getLogs', function() {
        it('should call getLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getLogs call and complete the assertions
          /*
          var start = new Date("2013-10-20T19:20:30+01:00");
          var end = new Date("2013-10-20T19:20:30+01:00");
          var appId = "appId_example";
          var opts = {};
          opts.filterByUserId = 56;
          opts.guid = "guid_example";
          opts.page = 56;
          opts.limit = 56;

          instance.getLogs(start, end, appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultHttpRequestAndResponseLog);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.HttpRequestAndResponseLog);
                expect(data.Guid).to.be.a('string');
                expect(data.Guid).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.Verb).to.be.a('string');
                expect(data.Verb).to.be("");
                expect(data.RequestUri).to.be.a('string');
                expect(data.RequestUri).to.be("");
                expect(data.StatusCode).to.be.a('number');
                expect(data.StatusCode).to.be(0);
                expect(data.ReasonPhrase).to.be.a('string');
                expect(data.ReasonPhrase).to.be("");
                expect(data.CallDurationInMilliseconds).to.be.a('number');
                expect(data.CallDurationInMilliseconds).to.be("0");
                expect(data.UserId).to.be.a('string');
                expect(data.UserId).to.be("");
                expect(data.IpAddress).to.be.a('string');
                expect(data.IpAddress).to.be("");
                expect(data.CreatedDateTime).to.be.a('string');
                expect(data.CreatedDateTime).to.be("");
                {
                  let dataCtr = data.RequestHeaders;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.RequestBody).to.be.a('string');
                expect(data.RequestBody).to.be("");
                expect(data.RequestLength).to.be.a('number');
                expect(data.RequestLength).to.be("0");
                {
                  let dataCtr = data.ResponseHeaders;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.ResponseBody).to.be.a('string');
                expect(data.ResponseBody).to.be("");
                expect(data.ResponseLength).to.be.a('number');
                expect(data.ResponseLength).to.be("0");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
