/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.DriversApi();
  });

  describe('(package)', function() {
    describe('DriversApi', function() {
      describe('addDriverNotificationToken', function() {
        it('should call addDriverNotificationToken successfully', function(done) {
          // TODO: uncomment, update parameter values for addDriverNotificationToken call
          /*
          var updateDriverToken = new Flipdish.UpdateDriverNotificationToken();
          updateDriverToken.PushNotificationsToken = "";

          instance.addDriverNotificationToken(updateDriverToken, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDriverProfileImage', function() {
        it('should call deleteDriverProfileImage successfully', function(done) {
          // TODO: uncomment deleteDriverProfileImage call
          /*

          instance.deleteDriverProfileImage(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('driverLogin', function() {
        it('should call driverLogin successfully', function(done) {
          // TODO: uncomment, update parameter values for driverLogin call
          /*
          var driverLoginModel = new Flipdish.DriverLoginModel();
          driverLoginModel.PhoneNumber = "";
          driverLoginModel.Code = "";

          instance.driverLogin(driverLoginModel, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('driverRequestLoginCodeSms', function() {
        it('should call driverRequestLoginCodeSms successfully', function(done) {
          // TODO: uncomment, update parameter values for driverRequestLoginCodeSms call
          /*
          var driverRequestLoginPinModel = new Flipdish.DriverRequestLoginPinModel();
          driverRequestLoginPinModel.PhoneNumber = "";

          instance.driverRequestLoginCodeSms(driverRequestLoginPinModel, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDriverProfile', function() {
        it('should call getDriverProfile successfully', function(done) {
          // TODO: uncomment getDriverProfile call and complete the assertions
          /*

          instance.getDriverProfile(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultDriver);
            expect(data.Data).to.be.a(Flipdish.Driver);
                  expect(data.Data.UserId).to.be.a('number');
              expect(data.Data.UserId).to.be(0);
              expect(data.Data.UserName).to.be.a('string');
              expect(data.Data.UserName).to.be("");
              expect(data.Data.UserPhoneNumber).to.be.a('string');
              expect(data.Data.UserPhoneNumber).to.be("");
              {
                let dataCtr = data.Data.Stores;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.DriverStore);
                  expect(data.StoreId).to.be.a('number');
                  expect(data.StoreId).to.be(0);
                  expect(data.StoreName).to.be.a('string');
                  expect(data.StoreName).to.be("");
                  expect(data.Presence).to.be.a('string');
                  expect(data.Presence).to.be("Offline");
  
                        }
              }
              expect(data.Data.ProfileImageUrl).to.be.a('string');
              expect(data.Data.ProfileImageUrl).to.be("");
              expect(data.Data.DriverKey).to.be.a('string');
              expect(data.Data.DriverKey).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStoresForDriver', function() {
        it('should call getStoresForDriver successfully', function(done) {
          // TODO: uncomment getStoresForDriver call and complete the assertions
          /*

          instance.getStoresForDriver(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultDriverStore);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.DriverStore);
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.StoreName).to.be.a('string');
                expect(data.StoreName).to.be("");
                expect(data.Presence).to.be.a('string');
                expect(data.Presence).to.be("Offline");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeDriverNotificationToken', function() {
        it('should call removeDriverNotificationToken successfully', function(done) {
          // TODO: uncomment, update parameter values for removeDriverNotificationToken call
          /*
          var removeDriverToken = new Flipdish.UpdateDriverNotificationToken();
          removeDriverToken.PushNotificationsToken = "";

          instance.removeDriverNotificationToken(removeDriverToken, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setDriverPresenceForStore', function() {
        it('should call setDriverPresenceForStore successfully', function(done) {
          // TODO: uncomment, update parameter values for setDriverPresenceForStore call
          /*
          var storeId = 56;
          var presence = "presence_example";

          instance.setDriverPresenceForStore(storeId, presence, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setDriverProfileImage', function() {
        it('should call setDriverProfileImage successfully', function(done) {
          // TODO: uncomment setDriverProfileImage call and complete the assertions
          /*

          instance.setDriverProfileImage(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeliveryTrackingStatus', function() {
        it('should call updateDeliveryTrackingStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeliveryTrackingStatus call and complete the assertions
          /*
          var orderId = 56;
          var deliveryTrackingStatus = "deliveryTrackingStatus_example";

          instance.updateDeliveryTrackingStatus(orderId, deliveryTrackingStatus, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDriverProfile', function() {
        it('should call updateDriverProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDriverProfile call
          /*
          var updateDriverProfile = new Flipdish.UpdateDriverProfileModel();
          updateDriverProfile.Name = "";

          instance.updateDriverProfile(updateDriverProfile, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
