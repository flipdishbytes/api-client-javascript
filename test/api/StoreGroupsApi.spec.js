/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.StoreGroupsApi();
  });

  describe('(package)', function() {
    describe('StoreGroupsApi', function() {
      describe('createStoreGroup', function() {
        it('should call createStoreGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for createStoreGroup call and complete the assertions
          /*
          var appNameId = "appNameId_example";
          var storeGroup = new Flipdish.StoreGroupBase();
          storeGroup.Name = "";
          storeGroup.Currency = "EUR";

          instance.createStoreGroup(appNameId, storeGroup, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStoreGroup);
            expect(data.Data).to.be.a(Flipdish.StoreGroup);
                  expect(data.Data.StoreGroupId).to.be.a('number');
              expect(data.Data.StoreGroupId).to.be(0);
              expect(data.Data.GeneralRating).to.be.a('number');
              expect(data.Data.GeneralRating).to.be(0.0);
              expect(data.Data.GeneralRatingCount).to.be.a('number');
              expect(data.Data.GeneralRatingCount).to.be(0);
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStoreGroup', function() {
        it('should call getStoreGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for getStoreGroup call and complete the assertions
          /*
          var storeGroupId = 56;

          instance.getStoreGroup(storeGroupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStoreGroup);
            expect(data.Data).to.be.a(Flipdish.StoreGroup);
                  expect(data.Data.StoreGroupId).to.be.a('number');
              expect(data.Data.StoreGroupId).to.be(0);
              expect(data.Data.GeneralRating).to.be.a('number');
              expect(data.Data.GeneralRating).to.be(0.0);
              expect(data.Data.GeneralRatingCount).to.be.a('number');
              expect(data.Data.GeneralRatingCount).to.be(0);
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStoreGroups', function() {
        it('should call getStoreGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getStoreGroups call and complete the assertions
          /*
          var appNameId = "appNameId_example";
          var opts = {};
          opts.searchQuery = "searchQuery_example";
          opts.page = 56;
          opts.limit = 56;

          instance.getStoreGroups(appNameId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultStoreGroup);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.StoreGroup);
                expect(data.StoreGroupId).to.be.a('number');
                expect(data.StoreGroupId).to.be(0);
                expect(data.GeneralRating).to.be.a('number');
                expect(data.GeneralRating).to.be(0.0);
                expect(data.GeneralRatingCount).to.be.a('number');
                expect(data.GeneralRatingCount).to.be(0);
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.Currency).to.be.a('string');
                expect(data.Currency).to.be("EUR");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStoreGroupsExtended', function() {
        it('should call getStoreGroupsExtended successfully', function(done) {
          // TODO: uncomment, update parameter values for getStoreGroupsExtended call and complete the assertions
          /*
          var appNameId = "appNameId_example";
          var opts = {};
          opts.searchQuery = "searchQuery_example";
          opts.page = 56;
          opts.limit = 56;
          opts.groupingRadius = 56;

          instance.getStoreGroupsExtended(appNameId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultStoreGroupExtended);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.StoreGroupExtended);
                expect(data.TotalStores).to.be.a('number');
                expect(data.TotalStores).to.be(0);
                {
                  let dataCtr = data.GroupedCoordinates;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.GroupedCoordinates);
                    expect(data.Latitude).to.be.a('number');
                    expect(data.Latitude).to.be(0.0);
                    expect(data.Longitude).to.be.a('number');
                    expect(data.Longitude).to.be(0.0);
                    expect(data.Count).to.be.a('number');
                    expect(data.Count).to.be(0);
    
                          }
                }
                {
                  let dataCtr = data.StoreHeaders;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.StoreHeader);
                    expect(data.StoreId).to.be.a('number');
                    expect(data.StoreId).to.be(0);
                    expect(data.Name).to.be.a('string');
                    expect(data.Name).to.be("");
    
                          }
                }
                expect(data.StoreGroupId).to.be.a('number');
                expect(data.StoreGroupId).to.be(0);
                expect(data.GeneralRating).to.be.a('number');
                expect(data.GeneralRating).to.be(0.0);
                expect(data.GeneralRatingCount).to.be.a('number');
                expect(data.GeneralRatingCount).to.be(0);
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.Currency).to.be.a('string');
                expect(data.Currency).to.be("EUR");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeStoreGroup', function() {
        it('should call removeStoreGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for removeStoreGroup call
          /*
          var storeGroupId = 56;

          instance.removeStoreGroup(storeGroupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateStoreGroup', function() {
        it('should call updateStoreGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for updateStoreGroup call and complete the assertions
          /*
          var storeGroupId = 56;
          var storeGroup = new Flipdish.StoreGroupBase();
          storeGroup.Name = "";
          storeGroup.Currency = "EUR";

          instance.updateStoreGroup(storeGroupId, storeGroup, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStoreGroupBase);
            expect(data.Data).to.be.a(Flipdish.StoreGroupBase);
                  expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
