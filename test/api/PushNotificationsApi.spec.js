/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.PushNotificationsApi();
  });

  describe('(package)', function() {
    describe('PushNotificationsApi', function() {
      describe('deletePushNotification', function() {
        it('should call deletePushNotification successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePushNotification call
          /*
          var appId = "appId_example";
          var scheduledPushNotificationId = 56;

          instance.deletePushNotification(appId, scheduledPushNotificationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPushNotifications', function() {
        it('should call getPushNotifications successfully', function(done) {
          // TODO: uncomment, update parameter values for getPushNotifications call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.page = 56;
          opts.limit = 56;

          instance.getPushNotifications(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultPushNotificationResponse);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.PushNotificationResponse);
                expect(data.Sent).to.be.a('boolean');
                expect(data.Sent).to.be(false);
                expect(data.ScheduledPushNotificationId).to.be.a('number');
                expect(data.ScheduledPushNotificationId).to.be(0);
                expect(data.ScheduledTime).to.be.a(Date);
                expect(data.ScheduledTime).to.be(new Date());
                expect(data.Title).to.be.a('string');
                expect(data.Title).to.be("");
                expect(data.Message).to.be.a('string');
                expect(data.Message).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('schedulePushNotification', function() {
        it('should call schedulePushNotification successfully', function(done) {
          // TODO: uncomment, update parameter values for schedulePushNotification call and complete the assertions
          /*
          var appId = "appId_example";
          var notification = new Flipdish.PushNotificationRequest();
          notification.ScheduledTime = new Date();
          notification.Title = "";
          notification.Message = "";

          instance.schedulePushNotification(appId, notification, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultPushNotificationResponse);
            expect(data.Data).to.be.a(Flipdish.PushNotificationResponse);
                  expect(data.Data.Sent).to.be.a('boolean');
              expect(data.Data.Sent).to.be(false);
              expect(data.Data.ScheduledPushNotificationId).to.be.a('number');
              expect(data.Data.ScheduledPushNotificationId).to.be(0);
              expect(data.Data.ScheduledTime).to.be.a(Date);
              expect(data.Data.ScheduledTime).to.be(new Date());
              expect(data.Data.Title).to.be.a('string');
              expect(data.Data.Title).to.be("");
              expect(data.Data.Message).to.be.a('string');
              expect(data.Data.Message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePushNotification', function() {
        it('should call updatePushNotification successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePushNotification call and complete the assertions
          /*
          var appId = "appId_example";
          var scheduledPushNotificationId = 56;
          var notification = new Flipdish.PushNotificationRequest();
          notification.ScheduledTime = new Date();
          notification.Title = "";
          notification.Message = "";

          instance.updatePushNotification(appId, scheduledPushNotificationId, notification, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultPushNotificationResponse);
            expect(data.Data).to.be.a(Flipdish.PushNotificationResponse);
                  expect(data.Data.Sent).to.be.a('boolean');
              expect(data.Data.Sent).to.be(false);
              expect(data.Data.ScheduledPushNotificationId).to.be.a('number');
              expect(data.Data.ScheduledPushNotificationId).to.be(0);
              expect(data.Data.ScheduledTime).to.be.a(Date);
              expect(data.Data.ScheduledTime).to.be(new Date());
              expect(data.Data.Title).to.be.a('string');
              expect(data.Data.Title).to.be("");
              expect(data.Data.Message).to.be.a('string');
              expect(data.Data.Message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
