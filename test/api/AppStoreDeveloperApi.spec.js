/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.AppStoreDeveloperApi();
  });

  describe('(package)', function() {
    describe('AppStoreDeveloperApi', function() {
      describe('appVerificationUpdate', function() {
        it('should call appVerificationUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for appVerificationUpdate call
          /*
          var oauthAppId = "oauthAppId_example";
          var appStoreAppId = "appStoreAppId_example";
          var verificationStatus = "verificationStatus_example";

          instance.appVerificationUpdate(oauthAppId, appStoreAppId, verificationStatus, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAppStoreApp', function() {
        it('should call createAppStoreApp successfully', function(done) {
          // TODO: uncomment, update parameter values for createAppStoreApp call and complete the assertions
          /*
          var oauthAppId = "oauthAppId_example";
          var createAppStoreApp = new Flipdish.CreateAppStoreApp();
          createAppStoreApp.Details = "";
          createAppStoreApp.ConfigurationType = "ExternalLink";
          createAppStoreApp.StoreSelectorType = "None";
          createAppStoreApp.FieldGroups = [new Flipdish.FieldGroup()];
          createAppStoreApp.FieldGroups[0].Name = "";
          createAppStoreApp.FieldGroups[0].Description = "";
          createAppStoreApp.FieldGroups[0].Tooltip = "";
          createAppStoreApp.FieldGroups[0].Position = 0;
          createAppStoreApp.FieldGroups[0].Fields = [new Flipdish.Field()];
          createAppStoreApp.FieldGroups[0].Fields[0].Name = "";
          createAppStoreApp.FieldGroups[0].Fields[0].Description = "";
          createAppStoreApp.FieldGroups[0].Fields[0].Key = "";
          createAppStoreApp.FieldGroups[0].Fields[0].Tooltip = "";
          createAppStoreApp.FieldGroups[0].Fields[0].Position = 0;
          createAppStoreApp.FieldGroups[0].Fields[0].DefaultValue = "";
          createAppStoreApp.FieldGroups[0].Fields[0].ValidValues = [new Flipdish.ValidValue()];
          createAppStoreApp.FieldGroups[0].Fields[0].ValidValues[0].Code = "";
          createAppStoreApp.FieldGroups[0].Fields[0].ValidValues[0].Name = "";
          createAppStoreApp.FieldGroups[0].Fields[0].ValidationRegex = "";
          createAppStoreApp.FieldGroups[0].Fields[0].FieldType = "Text";
          createAppStoreApp.FieldGroups[0].Fields[0].IsFlipdishRestricted = false;
          createAppStoreApp.SetupInstructions = "";
          createAppStoreApp.ExternalSetupLink = "";
          createAppStoreApp.TeammateAppAccessLevel = "Owner";
          createAppStoreApp.PermissionsType = "Teammate";
          createAppStoreApp.Support = new Flipdish.AppStoreAppSupportInfo();
          createAppStoreApp.Support.PrivacyPolicy = "";
          createAppStoreApp.Support.TermsOfUse = "";
          createAppStoreApp.Support.CompanyWebsite = "";
          createAppStoreApp.Support.LearnMore = "";
          createAppStoreApp.Support.InstallationMessage = "";
          createAppStoreApp.Support.SupportEmail = "";
          createAppStoreApp.ExternalFunctionActionUrl = "";
          createAppStoreApp.ExternalFunctionSignatureKey = "";
          createAppStoreApp.IsPaid = false;
          createAppStoreApp.Name = "";
          createAppStoreApp.Description = "";
          createAppStoreApp.IsEnabled = false;
          createAppStoreApp.Categories = ["PointOfSale"]"PointOfSale";
          createAppStoreApp.Countries = ["GB"]"GB";
          createAppStoreApp.DeveloperName = "";

          instance.createAppStoreApp(oauthAppId, createAppStoreApp, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultAppStoreApp);
            expect(data.Data).to.be.a(Flipdish.AppStoreApp);
                  expect(data.Data.Id).to.be.a('string');
              expect(data.Data.Id).to.be("");
              expect(data.Data.VerificationStatus).to.be.a('string');
              expect(data.Data.VerificationStatus).to.be("Draft");
              expect(data.Data.Logo).to.be.a('string');
              expect(data.Data.Logo).to.be("");
              expect(data.Data.OAuthAppId).to.be.a('string');
              expect(data.Data.OAuthAppId).to.be("");
              expect(data.Data.Internal).to.be.a('boolean');
              expect(data.Data.Internal).to.be(false);
              expect(data.Data.Details).to.be.a('string');
              expect(data.Data.Details).to.be("");
              expect(data.Data.ConfigurationType).to.be.a('string');
              expect(data.Data.ConfigurationType).to.be("ExternalLink");
              expect(data.Data.StoreSelectorType).to.be.a('string');
              expect(data.Data.StoreSelectorType).to.be("None");
              {
                let dataCtr = data.Data.FieldGroups;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.FieldGroup);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
                  expect(data.Description).to.be.a('string');
                  expect(data.Description).to.be("");
                  expect(data.Tooltip).to.be.a('string');
                  expect(data.Tooltip).to.be("");
                  expect(data.Position).to.be.a('number');
                  expect(data.Position).to.be(0);
                  {
                    let dataCtr = data.Fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.Field);
                      expect(data.Name).to.be.a('string');
                      expect(data.Name).to.be("");
                      expect(data.Description).to.be.a('string');
                      expect(data.Description).to.be("");
                      expect(data.Key).to.be.a('string');
                      expect(data.Key).to.be("");
                      expect(data.Tooltip).to.be.a('string');
                      expect(data.Tooltip).to.be("");
                      expect(data.Position).to.be.a('number');
                      expect(data.Position).to.be(0);
                      expect(data.DefaultValue).to.be.a('string');
                      expect(data.DefaultValue).to.be("");
                      {
                        let dataCtr = data.ValidValues;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.ValidValue);
                          expect(data.Code).to.be.a('string');
                          expect(data.Code).to.be("");
                          expect(data.Name).to.be.a('string');
                          expect(data.Name).to.be("");
          
                                }
                      }
                      expect(data.ValidationRegex).to.be.a('string');
                      expect(data.ValidationRegex).to.be("");
                      expect(data.FieldType).to.be.a('string');
                      expect(data.FieldType).to.be("Text");
                      expect(data.IsFlipdishRestricted).to.be.a('boolean');
                      expect(data.IsFlipdishRestricted).to.be(false);
      
                            }
                  }
  
                        }
              }
              expect(data.Data.SetupInstructions).to.be.a('string');
              expect(data.Data.SetupInstructions).to.be("");
              expect(data.Data.ExternalSetupLink).to.be.a('string');
              expect(data.Data.ExternalSetupLink).to.be("");
              expect(data.Data.TeammateAppAccessLevel).to.be.a('string');
              expect(data.Data.TeammateAppAccessLevel).to.be("Owner");
              expect(data.Data.PermissionsType).to.be.a('string');
              expect(data.Data.PermissionsType).to.be("Teammate");
              expect(data.Data.Support).to.be.a(Flipdish.AppStoreAppSupportInfo);
                    expect(data.Data.Support.PrivacyPolicy).to.be.a('string');
                expect(data.Data.Support.PrivacyPolicy).to.be("");
                expect(data.Data.Support.TermsOfUse).to.be.a('string');
                expect(data.Data.Support.TermsOfUse).to.be("");
                expect(data.Data.Support.CompanyWebsite).to.be.a('string');
                expect(data.Data.Support.CompanyWebsite).to.be("");
                expect(data.Data.Support.LearnMore).to.be.a('string');
                expect(data.Data.Support.LearnMore).to.be("");
                expect(data.Data.Support.InstallationMessage).to.be.a('string');
                expect(data.Data.Support.InstallationMessage).to.be("");
                expect(data.Data.Support.SupportEmail).to.be.a('string');
                expect(data.Data.Support.SupportEmail).to.be("");
              expect(data.Data.ExternalFunctionActionUrl).to.be.a('string');
              expect(data.Data.ExternalFunctionActionUrl).to.be("");
              expect(data.Data.ExternalFunctionSignatureKey).to.be.a('string');
              expect(data.Data.ExternalFunctionSignatureKey).to.be("");
              expect(data.Data.IsPaid).to.be.a('boolean');
              expect(data.Data.IsPaid).to.be(false);
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.Description).to.be.a('string');
              expect(data.Data.Description).to.be("");
              expect(data.Data.IsEnabled).to.be.a('boolean');
              expect(data.Data.IsEnabled).to.be(false);
              {
                let dataCtr = data.Data.Categories;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("PointOfSale");
                }
              }
              {
                let dataCtr = data.Data.Countries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("GB");
                }
              }
              expect(data.Data.DeveloperName).to.be.a('string');
              expect(data.Data.DeveloperName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAppStoreApp', function() {
        it('should call deleteAppStoreApp successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAppStoreApp call and complete the assertions
          /*
          var oauthAppId = "oauthAppId_example";
          var appStoreAppId = "appStoreAppId_example";

          instance.deleteAppStoreApp(oauthAppId, appStoreAppId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAppExternalProduct', function() {
        it('should call getAppExternalProduct successfully', function(done) {
          // TODO: uncomment, update parameter values for getAppExternalProduct call
          /*
          var oauthAppId = "oauthAppId_example";
          var appStoreAppId = "appStoreAppId_example";

          instance.getAppExternalProduct(oauthAppId, appStoreAppId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExternalFunctionSigningKey', function() {
        it('should call getExternalFunctionSigningKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getExternalFunctionSigningKey call and complete the assertions
          /*
          var oauthAppId = "oauthAppId_example";
          var appStoreAppId = "appStoreAppId_example";

          instance.getExternalFunctionSigningKey(oauthAppId, appStoreAppId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAppStoreApp', function() {
        it('should call updateAppStoreApp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAppStoreApp call
          /*
          var oauthAppId = "oauthAppId_example";
          var appStoreAppId = "appStoreAppId_example";
          var appStoreApp = new Flipdish.UpdateAppStoreApp();
          appStoreApp.Details = "";
          appStoreApp.ConfigurationType = "ExternalLink";
          appStoreApp.StoreSelectorType = "None";
          appStoreApp.FieldGroups = [new Flipdish.FieldGroup()];
          appStoreApp.FieldGroups[0].Name = "";
          appStoreApp.FieldGroups[0].Description = "";
          appStoreApp.FieldGroups[0].Tooltip = "";
          appStoreApp.FieldGroups[0].Position = 0;
          appStoreApp.FieldGroups[0].Fields = [new Flipdish.Field()];
          appStoreApp.FieldGroups[0].Fields[0].Name = "";
          appStoreApp.FieldGroups[0].Fields[0].Description = "";
          appStoreApp.FieldGroups[0].Fields[0].Key = "";
          appStoreApp.FieldGroups[0].Fields[0].Tooltip = "";
          appStoreApp.FieldGroups[0].Fields[0].Position = 0;
          appStoreApp.FieldGroups[0].Fields[0].DefaultValue = "";
          appStoreApp.FieldGroups[0].Fields[0].ValidValues = [new Flipdish.ValidValue()];
          appStoreApp.FieldGroups[0].Fields[0].ValidValues[0].Code = "";
          appStoreApp.FieldGroups[0].Fields[0].ValidValues[0].Name = "";
          appStoreApp.FieldGroups[0].Fields[0].ValidationRegex = "";
          appStoreApp.FieldGroups[0].Fields[0].FieldType = "Text";
          appStoreApp.FieldGroups[0].Fields[0].IsFlipdishRestricted = false;
          appStoreApp.SetupInstructions = "";
          appStoreApp.ExternalSetupLink = "";
          appStoreApp.TeammateAppAccessLevel = "Owner";
          appStoreApp.PermissionsType = "Teammate";
          appStoreApp.Support = new Flipdish.AppStoreAppSupportInfo();
          appStoreApp.Support.PrivacyPolicy = "";
          appStoreApp.Support.TermsOfUse = "";
          appStoreApp.Support.CompanyWebsite = "";
          appStoreApp.Support.LearnMore = "";
          appStoreApp.Support.InstallationMessage = "";
          appStoreApp.Support.SupportEmail = "";
          appStoreApp.ExternalFunctionActionUrl = "";
          appStoreApp.ExternalFunctionSignatureKey = "";
          appStoreApp.IsPaid = false;
          appStoreApp.Name = "";
          appStoreApp.Description = "";
          appStoreApp.IsEnabled = false;
          appStoreApp.Categories = ["PointOfSale"]"PointOfSale";
          appStoreApp.Countries = ["GB"]"GB";
          appStoreApp.DeveloperName = "";

          instance.updateAppStoreApp(oauthAppId, appStoreAppId, appStoreApp, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateExternalProduct', function() {
        it('should call updateExternalProduct successfully', function(done) {
          // TODO: uncomment, update parameter values for updateExternalProduct call
          /*
          var oauthAppId = "oauthAppId_example";
          var appStoreAppId = "appStoreAppId_example";
          var appStoreAppExternalProduct = new Flipdish.UpdateAppStoreAppExternalProduct();
          appStoreAppExternalProduct.ExternalProductId = "";

          instance.updateExternalProduct(oauthAppId, appStoreAppId, appStoreAppExternalProduct, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadAppStoreAppLogo', function() {
        it('should call uploadAppStoreAppLogo successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadAppStoreAppLogo call
          /*
          var oauthAppId = "oauthAppId_example";
          var appStoreAppId = "appStoreAppId_example";
          var Image = "/path/to/file.txt";

          instance.uploadAppStoreAppLogo(oauthAppId, appStoreAppId, Image, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
