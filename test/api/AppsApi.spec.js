/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.AppsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppsApi', function() {
    describe('createApp', function() {
      it('should call createApp successfully', function(done) {
        //uncomment below and update the code to test createApp
        //instance.createApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApp', function() {
      it('should call getApp successfully', function(done) {
        //uncomment below and update the code to test getApp
        //instance.getApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppHostnameStatus', function() {
      it('should call getAppHostnameStatus successfully', function(done) {
        //uncomment below and update the code to test getAppHostnameStatus
        //instance.getAppHostnameStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApps', function() {
      it('should call getApps successfully', function(done) {
        //uncomment below and update the code to test getApps
        //instance.getApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompliance', function() {
      it('should call getCompliance successfully', function(done) {
        //uncomment below and update the code to test getCompliance
        //instance.getCompliance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPanaceaVanityUrl', function() {
      it('should call getPanaceaVanityUrl successfully', function(done) {
        //uncomment below and update the code to test getPanaceaVanityUrl
        //instance.getPanaceaVanityUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSupportedCountries', function() {
      it('should call getSupportedCountries successfully', function(done) {
        //uncomment below and update the code to test getSupportedCountries
        //instance.getSupportedCountries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('isPanaceaVanityUrlAvailable', function() {
      it('should call isPanaceaVanityUrlAvailable successfully', function(done) {
        //uncomment below and update the code to test isPanaceaVanityUrlAvailable
        //instance.isPanaceaVanityUrlAvailable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lookupByWhitelabelId', function() {
      it('should call lookupByWhitelabelId successfully', function(done) {
        //uncomment below and update the code to test lookupByWhitelabelId
        //instance.lookupByWhitelabelId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAppConfig', function() {
      it('should call setAppConfig successfully', function(done) {
        //uncomment below and update the code to test setAppConfig
        //instance.setAppConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAppHostname', function() {
      it('should call setAppHostname successfully', function(done) {
        //uncomment below and update the code to test setAppHostname
        //instance.setAppHostname(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAppLanguages', function() {
      it('should call setAppLanguages successfully', function(done) {
        //uncomment below and update the code to test setAppLanguages
        //instance.setAppLanguages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAppStoreName', function() {
      it('should call setAppStoreName successfully', function(done) {
        //uncomment below and update the code to test setAppStoreName
        //instance.setAppStoreName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setCompliance', function() {
      it('should call setCompliance successfully', function(done) {
        //uncomment below and update the code to test setCompliance
        //instance.setCompliance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPanaceaVanityUrl', function() {
      it('should call setPanaceaVanityUrl successfully', function(done) {
        //uncomment below and update the code to test setPanaceaVanityUrl
        //instance.setPanaceaVanityUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('toggleNextGenWeb', function() {
      it('should call toggleNextGenWeb successfully', function(done) {
        //uncomment below and update the code to test toggleNextGenWeb
        //instance.toggleNextGenWeb(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadAppLogo', function() {
      it('should call uploadAppLogo successfully', function(done) {
        //uncomment below and update the code to test uploadAppLogo
        //instance.uploadAppLogo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
