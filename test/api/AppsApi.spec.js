/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.AppsApi();
  });

  describe('(package)', function() {
    describe('AppsApi', function() {
      describe('createApp', function() {
        it('should call createApp successfully', function(done) {
          // TODO: uncomment, update parameter values for createApp call and complete the assertions
          /*
          var parameters = new Flipdish.CreateAppParameters();
          parameters.Name = "";

          instance.createApp(parameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createAppInOrg', function() {
        it('should call createAppInOrg successfully', function(done) {
          // TODO: uncomment, update parameter values for createAppInOrg call and complete the assertions
          /*
          var orgId = "orgId_example";
          var createAppInOrgRequest = new Flipdish.CreateAppInOrg();
          createAppInOrgRequest.Name = "";
          createAppInOrgRequest.CountryId = "";
          createAppInOrgRequest.MainColor = "";
          createAppInOrgRequest.AppId = "";

          instance.createAppInOrg(orgId, createAppInOrgRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultApp);
            expect(data.Data).to.be.a(Flipdish.App);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.HasIosApp).to.be.a('boolean');
              expect(data.Data.HasIosApp).to.be(false);
              expect(data.Data.HasAndroidApp).to.be.a('boolean');
              expect(data.Data.HasAndroidApp).to.be(false);
              expect(data.Data.CountryId).to.be.a('string');
              expect(data.Data.CountryId).to.be("");
              expect(data.Data.LogoImageUrl).to.be.a('string');
              expect(data.Data.LogoImageUrl).to.be("");
              {
                let dataCtr = data.Data.Languages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.Language);
                  expect(data.LanguageId).to.be.a('string');
                  expect(data.LanguageId).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.AvailableAppLanguages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.Language);
                  expect(data.LanguageId).to.be.a('string');
                  expect(data.LanguageId).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
  
                        }
              }
              expect(data.Data.AppAccessLevel).to.be.a('string');
              expect(data.Data.AppAccessLevel).to.be("None");
              {
                let dataCtr = data.Data.AppResourceSet;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("ViewApp");
                }
              }
              {
                let dataCtr = data.Data.Features;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.MapCenter).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapCenter.Latitude).to.be.a('number');
                expect(data.Data.MapCenter.Latitude).to.be(0.0);
                expect(data.Data.MapCenter.Longitude).to.be.a('number');
                expect(data.Data.MapCenter.Longitude).to.be(0.0);
              expect(data.Data.MapNorthEast).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapNorthEast.Latitude).to.be.a('number');
                expect(data.Data.MapNorthEast.Latitude).to.be(0.0);
                expect(data.Data.MapNorthEast.Longitude).to.be.a('number');
                expect(data.Data.MapNorthEast.Longitude).to.be(0.0);
              expect(data.Data.MapSouthWest).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapSouthWest.Latitude).to.be.a('number');
                expect(data.Data.MapSouthWest.Latitude).to.be(0.0);
                expect(data.Data.MapSouthWest.Longitude).to.be.a('number');
                expect(data.Data.MapSouthWest.Longitude).to.be(0.0);
              expect(data.Data.GoogleMapsApiKeyWeb).to.be.a('string');
              expect(data.Data.GoogleMapsApiKeyWeb).to.be("");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.HostName).to.be.a('string');
              expect(data.Data.HostName).to.be("");
              expect(data.Data.MainColor).to.be.a('string');
              expect(data.Data.MainColor).to.be("");
              expect(data.Data.KioskPrimaryColour).to.be.a('string');
              expect(data.Data.KioskPrimaryColour).to.be("");
              expect(data.Data.ApplicationCategory).to.be.a('string');
              expect(data.Data.ApplicationCategory).to.be("Restaurant");
              expect(data.Data.IsPanaceaEnabled).to.be.a('boolean');
              expect(data.Data.IsPanaceaEnabled).to.be(false);
              expect(data.Data.PanaceaVanityUrl).to.be.a('string');
              expect(data.Data.PanaceaVanityUrl).to.be("");
              expect(data.Data.CookieConsentPromptEnabled).to.be.a('boolean');
              expect(data.Data.CookieConsentPromptEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getApp', function() {
        it('should call getApp successfully', function(done) {
          // TODO: uncomment, update parameter values for getApp call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getApp(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultApp);
            expect(data.Data).to.be.a(Flipdish.App);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.HasIosApp).to.be.a('boolean');
              expect(data.Data.HasIosApp).to.be(false);
              expect(data.Data.HasAndroidApp).to.be.a('boolean');
              expect(data.Data.HasAndroidApp).to.be(false);
              expect(data.Data.CountryId).to.be.a('string');
              expect(data.Data.CountryId).to.be("");
              expect(data.Data.LogoImageUrl).to.be.a('string');
              expect(data.Data.LogoImageUrl).to.be("");
              {
                let dataCtr = data.Data.Languages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.Language);
                  expect(data.LanguageId).to.be.a('string');
                  expect(data.LanguageId).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.AvailableAppLanguages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.Language);
                  expect(data.LanguageId).to.be.a('string');
                  expect(data.LanguageId).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
  
                        }
              }
              expect(data.Data.AppAccessLevel).to.be.a('string');
              expect(data.Data.AppAccessLevel).to.be("None");
              {
                let dataCtr = data.Data.AppResourceSet;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("ViewApp");
                }
              }
              {
                let dataCtr = data.Data.Features;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.MapCenter).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapCenter.Latitude).to.be.a('number');
                expect(data.Data.MapCenter.Latitude).to.be(0.0);
                expect(data.Data.MapCenter.Longitude).to.be.a('number');
                expect(data.Data.MapCenter.Longitude).to.be(0.0);
              expect(data.Data.MapNorthEast).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapNorthEast.Latitude).to.be.a('number');
                expect(data.Data.MapNorthEast.Latitude).to.be(0.0);
                expect(data.Data.MapNorthEast.Longitude).to.be.a('number');
                expect(data.Data.MapNorthEast.Longitude).to.be(0.0);
              expect(data.Data.MapSouthWest).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapSouthWest.Latitude).to.be.a('number');
                expect(data.Data.MapSouthWest.Latitude).to.be(0.0);
                expect(data.Data.MapSouthWest.Longitude).to.be.a('number');
                expect(data.Data.MapSouthWest.Longitude).to.be(0.0);
              expect(data.Data.GoogleMapsApiKeyWeb).to.be.a('string');
              expect(data.Data.GoogleMapsApiKeyWeb).to.be("");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.HostName).to.be.a('string');
              expect(data.Data.HostName).to.be("");
              expect(data.Data.MainColor).to.be.a('string');
              expect(data.Data.MainColor).to.be("");
              expect(data.Data.KioskPrimaryColour).to.be.a('string');
              expect(data.Data.KioskPrimaryColour).to.be("");
              expect(data.Data.ApplicationCategory).to.be.a('string');
              expect(data.Data.ApplicationCategory).to.be("Restaurant");
              expect(data.Data.IsPanaceaEnabled).to.be.a('boolean');
              expect(data.Data.IsPanaceaEnabled).to.be(false);
              expect(data.Data.PanaceaVanityUrl).to.be.a('string');
              expect(data.Data.PanaceaVanityUrl).to.be("");
              expect(data.Data.CookieConsentPromptEnabled).to.be.a('boolean');
              expect(data.Data.CookieConsentPromptEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAppHostnameStatus', function() {
        it('should call getAppHostnameStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getAppHostnameStatus call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getAppHostnameStatus(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultDnsRecordInformation);
            expect(data.Data).to.be.a(Flipdish.DnsRecordInformation);
                  expect(data.Data.IsCNameReady).to.be.a('boolean');
              expect(data.Data.IsCNameReady).to.be(false);
              expect(data.Data.IsAReady).to.be.a('boolean');
              expect(data.Data.IsAReady).to.be(false);
              expect(data.Data.IsApiCNameReady).to.be.a('boolean');
              expect(data.Data.IsApiCNameReady).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getApps', function() {
        it('should call getApps successfully', function(done) {
          // TODO: uncomment, update parameter values for getApps call and complete the assertions
          /*
          var opts = {};
          opts.nameFilter = "nameFilter_example";
          opts.page = 56;
          opts.limit = 56;

          instance.getApps(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultApp);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.App);
                expect(data.AppId).to.be.a('string');
                expect(data.AppId).to.be("");
                expect(data.HasIosApp).to.be.a('boolean');
                expect(data.HasIosApp).to.be(false);
                expect(data.HasAndroidApp).to.be.a('boolean');
                expect(data.HasAndroidApp).to.be(false);
                expect(data.CountryId).to.be.a('string');
                expect(data.CountryId).to.be("");
                expect(data.LogoImageUrl).to.be.a('string');
                expect(data.LogoImageUrl).to.be("");
                {
                  let dataCtr = data.Languages;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.Language);
                    expect(data.LanguageId).to.be.a('string');
                    expect(data.LanguageId).to.be("");
                    expect(data.DisplayOrder).to.be.a('number');
                    expect(data.DisplayOrder).to.be(0);
                    expect(data.Name).to.be.a('string');
                    expect(data.Name).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.AvailableAppLanguages;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.Language);
                    expect(data.LanguageId).to.be.a('string');
                    expect(data.LanguageId).to.be("");
                    expect(data.DisplayOrder).to.be.a('number');
                    expect(data.DisplayOrder).to.be(0);
                    expect(data.Name).to.be.a('string');
                    expect(data.Name).to.be("");
    
                          }
                }
                expect(data.AppAccessLevel).to.be.a('string');
                expect(data.AppAccessLevel).to.be("None");
                {
                  let dataCtr = data.AppResourceSet;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("ViewApp");
                  }
                }
                {
                  let dataCtr = data.Features;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.MapCenter).to.be.a(Flipdish.Coordinates);
                      expect(data.MapCenter.Latitude).to.be.a('number');
                  expect(data.MapCenter.Latitude).to.be(0.0);
                  expect(data.MapCenter.Longitude).to.be.a('number');
                  expect(data.MapCenter.Longitude).to.be(0.0);
                expect(data.MapNorthEast).to.be.a(Flipdish.Coordinates);
                      expect(data.MapNorthEast.Latitude).to.be.a('number');
                  expect(data.MapNorthEast.Latitude).to.be(0.0);
                  expect(data.MapNorthEast.Longitude).to.be.a('number');
                  expect(data.MapNorthEast.Longitude).to.be(0.0);
                expect(data.MapSouthWest).to.be.a(Flipdish.Coordinates);
                      expect(data.MapSouthWest.Latitude).to.be.a('number');
                  expect(data.MapSouthWest.Latitude).to.be(0.0);
                  expect(data.MapSouthWest.Longitude).to.be.a('number');
                  expect(data.MapSouthWest.Longitude).to.be(0.0);
                expect(data.GoogleMapsApiKeyWeb).to.be.a('string');
                expect(data.GoogleMapsApiKeyWeb).to.be("");
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.HostName).to.be.a('string');
                expect(data.HostName).to.be("");
                expect(data.MainColor).to.be.a('string');
                expect(data.MainColor).to.be("");
                expect(data.KioskPrimaryColour).to.be.a('string');
                expect(data.KioskPrimaryColour).to.be("");
                expect(data.ApplicationCategory).to.be.a('string');
                expect(data.ApplicationCategory).to.be("Restaurant");
                expect(data.IsPanaceaEnabled).to.be.a('boolean');
                expect(data.IsPanaceaEnabled).to.be(false);
                expect(data.PanaceaVanityUrl).to.be.a('string');
                expect(data.PanaceaVanityUrl).to.be("");
                expect(data.CookieConsentPromptEnabled).to.be.a('boolean');
                expect(data.CookieConsentPromptEnabled).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCompliance', function() {
        it('should call getCompliance successfully', function(done) {
          // TODO: uncomment, update parameter values for getCompliance call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getCompliance(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultAppCompliance);
            expect(data.Data).to.be.a(Flipdish.AppCompliance);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.ComplianceType).to.be.a('string');
              expect(data.Data.ComplianceType).to.be("Default");
              expect(data.Data.AllowDisablingOfGdpr).to.be.a('boolean');
              expect(data.Data.AllowDisablingOfGdpr).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPanaceaVanityUrl', function() {
        it('should call getPanaceaVanityUrl successfully', function(done) {
          // TODO: uncomment, update parameter values for getPanaceaVanityUrl call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getPanaceaVanityUrl(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSupportedCountries', function() {
        it('should call getSupportedCountries successfully', function(done) {
          // TODO: uncomment getSupportedCountries call and complete the assertions
          /*

          instance.getSupportedCountries(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultSupportedCountry);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.SupportedCountry);
                expect(data.CountryCode).to.be.a('string');
                expect(data.CountryCode).to.be("");
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.PhoneCode).to.be.a('number');
                expect(data.PhoneCode).to.be(0);
                expect(data.LanguageCode).to.be.a('string');
                expect(data.LanguageCode).to.be("");
                expect(data.LanguageName).to.be.a('string');
                expect(data.LanguageName).to.be("");
                expect(data.OtpNumber).to.be.a('string');
                expect(data.OtpNumber).to.be("");
                expect(data.SupportNumber).to.be.a('string');
                expect(data.SupportNumber).to.be("");
                expect(data.AddressLayout).to.be.a('string');
                expect(data.AddressLayout).to.be("BuildingFirst");
                expect(data.PostCodeType).to.be.a('string');
                expect(data.PostCodeType).to.be("None");
                expect(data.SupportRegion).to.be.a('string');
                expect(data.SupportRegion).to.be("Default");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('isPanaceaVanityUrlAvailable', function() {
        it('should call isPanaceaVanityUrlAvailable successfully', function(done) {
          // TODO: uncomment, update parameter values for isPanaceaVanityUrlAvailable call and complete the assertions
          /*
          var vanityUrl = "vanityUrl_example";
          var appId = "appId_example";

          instance.isPanaceaVanityUrlAvailable(vanityUrl, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('lookupByWhitelabelId', function() {
        it('should call lookupByWhitelabelId successfully', function(done) {
          // TODO: uncomment, update parameter values for lookupByWhitelabelId call and complete the assertions
          /*
          var whitelabelId = 56;

          instance.lookupByWhitelabelId(whitelabelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.AppLookup);
            expect(data.AppId).to.be.a('string');
            expect(data.AppId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setAppConfig', function() {
        it('should call setAppConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for setAppConfig call and complete the assertions
          /*
          var appId = "appId_example";
          var appConfigUpdate = new Flipdish.AppConfigUpdateModel();
          appConfigUpdate.Name = "";
          appConfigUpdate.HostName = "";
          appConfigUpdate.MainColor = "";
          appConfigUpdate.KioskPrimaryColour = "";
          appConfigUpdate.ApplicationCategory = "Restaurant";
          appConfigUpdate.IsPanaceaEnabled = false;
          appConfigUpdate.PanaceaVanityUrl = "";
          appConfigUpdate.CookieConsentPromptEnabled = false;

          instance.setAppConfig(appId, appConfigUpdate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultApp);
            expect(data.Data).to.be.a(Flipdish.App);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.HasIosApp).to.be.a('boolean');
              expect(data.Data.HasIosApp).to.be(false);
              expect(data.Data.HasAndroidApp).to.be.a('boolean');
              expect(data.Data.HasAndroidApp).to.be(false);
              expect(data.Data.CountryId).to.be.a('string');
              expect(data.Data.CountryId).to.be("");
              expect(data.Data.LogoImageUrl).to.be.a('string');
              expect(data.Data.LogoImageUrl).to.be("");
              {
                let dataCtr = data.Data.Languages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.Language);
                  expect(data.LanguageId).to.be.a('string');
                  expect(data.LanguageId).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.AvailableAppLanguages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.Language);
                  expect(data.LanguageId).to.be.a('string');
                  expect(data.LanguageId).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
  
                        }
              }
              expect(data.Data.AppAccessLevel).to.be.a('string');
              expect(data.Data.AppAccessLevel).to.be("None");
              {
                let dataCtr = data.Data.AppResourceSet;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("ViewApp");
                }
              }
              {
                let dataCtr = data.Data.Features;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.MapCenter).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapCenter.Latitude).to.be.a('number');
                expect(data.Data.MapCenter.Latitude).to.be(0.0);
                expect(data.Data.MapCenter.Longitude).to.be.a('number');
                expect(data.Data.MapCenter.Longitude).to.be(0.0);
              expect(data.Data.MapNorthEast).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapNorthEast.Latitude).to.be.a('number');
                expect(data.Data.MapNorthEast.Latitude).to.be(0.0);
                expect(data.Data.MapNorthEast.Longitude).to.be.a('number');
                expect(data.Data.MapNorthEast.Longitude).to.be(0.0);
              expect(data.Data.MapSouthWest).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapSouthWest.Latitude).to.be.a('number');
                expect(data.Data.MapSouthWest.Latitude).to.be(0.0);
                expect(data.Data.MapSouthWest.Longitude).to.be.a('number');
                expect(data.Data.MapSouthWest.Longitude).to.be(0.0);
              expect(data.Data.GoogleMapsApiKeyWeb).to.be.a('string');
              expect(data.Data.GoogleMapsApiKeyWeb).to.be("");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.HostName).to.be.a('string');
              expect(data.Data.HostName).to.be("");
              expect(data.Data.MainColor).to.be.a('string');
              expect(data.Data.MainColor).to.be("");
              expect(data.Data.KioskPrimaryColour).to.be.a('string');
              expect(data.Data.KioskPrimaryColour).to.be("");
              expect(data.Data.ApplicationCategory).to.be.a('string');
              expect(data.Data.ApplicationCategory).to.be("Restaurant");
              expect(data.Data.IsPanaceaEnabled).to.be.a('boolean');
              expect(data.Data.IsPanaceaEnabled).to.be(false);
              expect(data.Data.PanaceaVanityUrl).to.be.a('string');
              expect(data.Data.PanaceaVanityUrl).to.be("");
              expect(data.Data.CookieConsentPromptEnabled).to.be.a('boolean');
              expect(data.Data.CookieConsentPromptEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setAppHostname', function() {
        it('should call setAppHostname successfully', function(done) {
          // TODO: uncomment, update parameter values for setAppHostname call and complete the assertions
          /*
          var appId = "appId_example";
          var hostname = "hostname_example";
          var opts = {};
          opts.isEmbed = true;

          instance.setAppHostname(appId, hostname, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setAppLanguages', function() {
        it('should call setAppLanguages successfully', function(done) {
          // TODO: uncomment, update parameter values for setAppLanguages call and complete the assertions
          /*
          var appId = "appId_example";
          var languages = [new Flipdish.Language()];
          languages[0].LanguageId = "";
          languages[0].DisplayOrder = 0;
          languages[0].Name = "";

          instance.setAppLanguages(appId, languages, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultApp);
            expect(data.Data).to.be.a(Flipdish.App);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.HasIosApp).to.be.a('boolean');
              expect(data.Data.HasIosApp).to.be(false);
              expect(data.Data.HasAndroidApp).to.be.a('boolean');
              expect(data.Data.HasAndroidApp).to.be(false);
              expect(data.Data.CountryId).to.be.a('string');
              expect(data.Data.CountryId).to.be("");
              expect(data.Data.LogoImageUrl).to.be.a('string');
              expect(data.Data.LogoImageUrl).to.be("");
              {
                let dataCtr = data.Data.Languages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.Language);
                  expect(data.LanguageId).to.be.a('string');
                  expect(data.LanguageId).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.AvailableAppLanguages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.Language);
                  expect(data.LanguageId).to.be.a('string');
                  expect(data.LanguageId).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
  
                        }
              }
              expect(data.Data.AppAccessLevel).to.be.a('string');
              expect(data.Data.AppAccessLevel).to.be("None");
              {
                let dataCtr = data.Data.AppResourceSet;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("ViewApp");
                }
              }
              {
                let dataCtr = data.Data.Features;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.MapCenter).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapCenter.Latitude).to.be.a('number');
                expect(data.Data.MapCenter.Latitude).to.be(0.0);
                expect(data.Data.MapCenter.Longitude).to.be.a('number');
                expect(data.Data.MapCenter.Longitude).to.be(0.0);
              expect(data.Data.MapNorthEast).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapNorthEast.Latitude).to.be.a('number');
                expect(data.Data.MapNorthEast.Latitude).to.be(0.0);
                expect(data.Data.MapNorthEast.Longitude).to.be.a('number');
                expect(data.Data.MapNorthEast.Longitude).to.be(0.0);
              expect(data.Data.MapSouthWest).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.MapSouthWest.Latitude).to.be.a('number');
                expect(data.Data.MapSouthWest.Latitude).to.be(0.0);
                expect(data.Data.MapSouthWest.Longitude).to.be.a('number');
                expect(data.Data.MapSouthWest.Longitude).to.be(0.0);
              expect(data.Data.GoogleMapsApiKeyWeb).to.be.a('string');
              expect(data.Data.GoogleMapsApiKeyWeb).to.be("");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.HostName).to.be.a('string');
              expect(data.Data.HostName).to.be("");
              expect(data.Data.MainColor).to.be.a('string');
              expect(data.Data.MainColor).to.be("");
              expect(data.Data.KioskPrimaryColour).to.be.a('string');
              expect(data.Data.KioskPrimaryColour).to.be("");
              expect(data.Data.ApplicationCategory).to.be.a('string');
              expect(data.Data.ApplicationCategory).to.be("Restaurant");
              expect(data.Data.IsPanaceaEnabled).to.be.a('boolean');
              expect(data.Data.IsPanaceaEnabled).to.be(false);
              expect(data.Data.PanaceaVanityUrl).to.be.a('string');
              expect(data.Data.PanaceaVanityUrl).to.be("");
              expect(data.Data.CookieConsentPromptEnabled).to.be.a('boolean');
              expect(data.Data.CookieConsentPromptEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setAppStoreName', function() {
        it('should call setAppStoreName successfully', function(done) {
          // TODO: uncomment, update parameter values for setAppStoreName call
          /*
          var appId = "appId_example";
          var appStoreName = "appStoreName_example";

          instance.setAppStoreName(appId, appStoreName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setCompliance', function() {
        it('should call setCompliance successfully', function(done) {
          // TODO: uncomment, update parameter values for setCompliance call and complete the assertions
          /*
          var appId = "appId_example";
          var complianceType = "complianceType_example";

          instance.setCompliance(appId, complianceType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultAppCompliance);
            expect(data.Data).to.be.a(Flipdish.AppCompliance);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.ComplianceType).to.be.a('string');
              expect(data.Data.ComplianceType).to.be("Default");
              expect(data.Data.AllowDisablingOfGdpr).to.be.a('boolean');
              expect(data.Data.AllowDisablingOfGdpr).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setPanaceaVanityUrl', function() {
        it('should call setPanaceaVanityUrl successfully', function(done) {
          // TODO: uncomment, update parameter values for setPanaceaVanityUrl call and complete the assertions
          /*
          var appId = "appId_example";
          var vanityUrl = "vanityUrl_example";

          instance.setPanaceaVanityUrl(appId, vanityUrl, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('toggleNextGenWeb', function() {
        it('should call toggleNextGenWeb successfully', function(done) {
          // TODO: uncomment, update parameter values for toggleNextGenWeb call and complete the assertions
          /*
          var appId = "appId_example";
          var hostname = "hostname_example";
          var vanityUrl = "vanityUrl_example";
          var isNextGenWeb = true;

          instance.toggleNextGenWeb(appId, hostname, vanityUrl, isNextGenWeb, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadAppLogo', function() {
        it('should call uploadAppLogo successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadAppLogo call
          /*
          var appId = "appId_example";
          var Image = "/path/to/file.txt";

          instance.uploadAppLogo(appId, Image, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
