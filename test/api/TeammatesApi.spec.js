/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.TeammatesApi();
  });

  describe('(package)', function() {
    describe('TeammatesApi', function() {
      describe('createTeammate', function() {
        it('should call createTeammate successfully', function(done) {
          // TODO: uncomment, update parameter values for createTeammate call and complete the assertions
          /*
          var appId = "appId_example";
          var teammate = new Flipdish.CreateTeammate();
          teammate.Email = "";
          teammate.AppAccessLevel = "None";
          teammate.HasAccessToAllStores = false;
          teammate.StoreIds = [0];

          instance.createTeammate(appId, teammate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultTeammate);
            expect(data.Data).to.be.a(Flipdish.Teammate);
                  expect(data.Data.TeammateId).to.be.a('string');
              expect(data.Data.TeammateId).to.be("");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.LastActivity).to.be.a(Date);
              expect(data.Data.LastActivity).to.be(new Date());
              expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.InvitationStatus).to.be.a('string');
              expect(data.Data.InvitationStatus).to.be("Pending");
              expect(data.Data.Email).to.be.a('string');
              expect(data.Data.Email).to.be("");
              expect(data.Data.AppAccessLevel).to.be.a('string');
              expect(data.Data.AppAccessLevel).to.be("None");
              expect(data.Data.HasAccessToAllStores).to.be.a('boolean');
              expect(data.Data.HasAccessToAllStores).to.be(false);
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTeammate', function() {
        it('should call deleteTeammate successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTeammate call
          /*
          var appId = "appId_example";
          var id = "id_example";

          instance.deleteTeammate(appId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTeammateByAppIdAndTeammateId', function() {
        it('should call getTeammateByAppIdAndTeammateId successfully', function(done) {
          // TODO: uncomment, update parameter values for getTeammateByAppIdAndTeammateId call and complete the assertions
          /*
          var appId = "appId_example";
          var id = "id_example";

          instance.getTeammateByAppIdAndTeammateId(appId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultTeammate);
            expect(data.Data).to.be.a(Flipdish.Teammate);
                  expect(data.Data.TeammateId).to.be.a('string');
              expect(data.Data.TeammateId).to.be("");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.LastActivity).to.be.a(Date);
              expect(data.Data.LastActivity).to.be(new Date());
              expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.InvitationStatus).to.be.a('string');
              expect(data.Data.InvitationStatus).to.be("Pending");
              expect(data.Data.Email).to.be.a('string');
              expect(data.Data.Email).to.be("");
              expect(data.Data.AppAccessLevel).to.be.a('string');
              expect(data.Data.AppAccessLevel).to.be("None");
              expect(data.Data.HasAccessToAllStores).to.be.a('boolean');
              expect(data.Data.HasAccessToAllStores).to.be(false);
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTeammatesByAppId', function() {
        it('should call getTeammatesByAppId successfully', function(done) {
          // TODO: uncomment, update parameter values for getTeammatesByAppId call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getTeammatesByAppId(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultTeammate);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.Teammate);
                expect(data.TeammateId).to.be.a('string');
                expect(data.TeammateId).to.be("");
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.LastActivity).to.be.a(Date);
                expect(data.LastActivity).to.be(new Date());
                expect(data.AppId).to.be.a('string');
                expect(data.AppId).to.be("");
                expect(data.InvitationStatus).to.be.a('string');
                expect(data.InvitationStatus).to.be("Pending");
                expect(data.Email).to.be.a('string');
                expect(data.Email).to.be("");
                expect(data.AppAccessLevel).to.be.a('string');
                expect(data.AppAccessLevel).to.be("None");
                expect(data.HasAccessToAllStores).to.be.a('boolean');
                expect(data.HasAccessToAllStores).to.be(false);
                {
                  let dataCtr = data.StoreIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('redeemInvitation', function() {
        it('should call redeemInvitation successfully', function(done) {
          // TODO: uncomment, update parameter values for redeemInvitation call and complete the assertions
          /*
          var otc = "otc_example";
          var appId = "appId_example";

          instance.redeemInvitation(otc, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultRedeemInvitationResult);
            expect(data.Data).to.be.a(Flipdish.RedeemInvitationResult);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.InvitationStatus).to.be.a('string');
              expect(data.Data.InvitationStatus).to.be("Pending");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTeammate', function() {
        it('should call updateTeammate successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTeammate call and complete the assertions
          /*
          var appId = "appId_example";
          var id = "id_example";
          var teammate = new Flipdish.TeammateBase();
          teammate.AppAccessLevel = "None";
          teammate.HasAccessToAllStores = false;
          teammate.StoreIds = [0];

          instance.updateTeammate(appId, id, teammate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultTeammate);
            expect(data.Data).to.be.a(Flipdish.Teammate);
                  expect(data.Data.TeammateId).to.be.a('string');
              expect(data.Data.TeammateId).to.be("");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.LastActivity).to.be.a(Date);
              expect(data.Data.LastActivity).to.be(new Date());
              expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              expect(data.Data.InvitationStatus).to.be.a('string');
              expect(data.Data.InvitationStatus).to.be("Pending");
              expect(data.Data.Email).to.be.a('string');
              expect(data.Data.Email).to.be("");
              expect(data.Data.AppAccessLevel).to.be.a('string');
              expect(data.Data.AppAccessLevel).to.be("None");
              expect(data.Data.HasAccessToAllStores).to.be.a('boolean');
              expect(data.Data.HasAccessToAllStores).to.be(false);
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
