/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.StoresApi();
  });

  describe('(package)', function() {
    describe('StoresApi', function() {
      describe('archiveStore', function() {
        it('should call archiveStore successfully', function(done) {
          // TODO: uncomment, update parameter values for archiveStore call
          /*
          var storeId = 56;

          instance.archiveStore(storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('assignMenu', function() {
        it('should call assignMenu successfully', function(done) {
          // TODO: uncomment, update parameter values for assignMenu call and complete the assertions
          /*
          var storeId = 56;
          var menuId = 56;

          instance.assignMenu(storeId, menuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultRestApiDefaultResponse);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.RestApiDefaultResponse);
                expect(data.Data).to.be.a('string');
                expect(data.Data).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cloneStore', function() {
        it('should call cloneStore successfully', function(done) {
          // TODO: uncomment, update parameter values for cloneStore call and complete the assertions
          /*
          var storeId = 56;
          var settings = new Flipdish.StoreCloneSettings();
          settings.TargetStoreGroupId = 0;

          instance.cloneStore(storeId, settings, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStore);
            expect(data.Data).to.be.a(Flipdish.Store);
                  expect(data.Data.StoreId).to.be.a('number');
              expect(data.Data.StoreId).to.be(0);
              expect(data.Data.StoreGroupId).to.be.a('number');
              expect(data.Data.StoreGroupId).to.be(0);
              expect(data.Data.Address).to.be.a(Flipdish.StoreAddress);
                    expect(data.Data.Address.AddressId).to.be.a('number');
                expect(data.Data.Address.AddressId).to.be(0);
                expect(data.Data.Address.Coordinates).to.be.a(Flipdish.Coordinates);
                      expect(data.Data.Address.Coordinates.Latitude).to.be.a('number');
                  expect(data.Data.Address.Coordinates.Latitude).to.be(0.0);
                  expect(data.Data.Address.Coordinates.Longitude).to.be.a('number');
                  expect(data.Data.Address.Coordinates.Longitude).to.be(0.0);
                expect(data.Data.Address.Line1).to.be.a('string');
                expect(data.Data.Address.Line1).to.be("");
                expect(data.Data.Address.Postcode).to.be.a('string');
                expect(data.Data.Address.Postcode).to.be("");
                expect(data.Data.Address.City).to.be.a('string');
                expect(data.Data.Address.City).to.be("");
                expect(data.Data.Address.CountryCode).to.be.a('string');
                expect(data.Data.Address.CountryCode).to.be("");
                expect(data.Data.Address.DisplayForCustomer).to.be.a('string');
                expect(data.Data.Address.DisplayForCustomer).to.be("");
              {
                let dataCtr = data.Data.DeliveryZones;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.DeliveryZone);
                  expect(data.Id).to.be.a('number');
                  expect(data.Id).to.be(0);
                  expect(data.DeliveryFee).to.be.a('number');
                  expect(data.DeliveryFee).to.be(0.0);
                  expect(data.MinimumDeliveryOrderAmount).to.be.a('number');
                  expect(data.MinimumDeliveryOrderAmount).to.be(0.0);
                  expect(data.WellKnownText).to.be.a('string');
                  expect(data.WellKnownText).to.be("");
                  expect(data.IsEnabled).to.be.a('boolean');
                  expect(data.IsEnabled).to.be(false);
  
                        }
              }
              expect(data.Data.ApmPhoneNumber).to.be.a('string');
              expect(data.Data.ApmPhoneNumber).to.be("");
              {
                let dataCtr = data.Data.PickupHours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                  expect(data.Early).to.be.a(Flipdish.Range);
                        expect(data.Early.StartTime).to.be.a('string');
                    expect(data.Early.StartTime).to.be("");
                    expect(data.Early.Period).to.be.a('string');
                    expect(data.Early.Period).to.be("");
                    expect(data.Early.DayOfWeek).to.be.a('string');
                    expect(data.Early.DayOfWeek).to.be("Sunday");
                  expect(data.Late).to.be.a(Flipdish.Range);
                        expect(data.Late.StartTime).to.be.a('string');
                    expect(data.Late.StartTime).to.be("");
                    expect(data.Late.Period).to.be.a('string');
                    expect(data.Late.Period).to.be("");
                    expect(data.Late.DayOfWeek).to.be.a('string');
                    expect(data.Late.DayOfWeek).to.be("Sunday");
                  {
                    let dataCtr = data.Ranges;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.Range);
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
      
                            }
                  }
                  expect(data.DayOfWeek).to.be.a('string');
                  expect(data.DayOfWeek).to.be("Sunday");
                  expect(data.StartTime).to.be.a('string');
                  expect(data.StartTime).to.be("");
                  expect(data.Period).to.be.a('string');
                  expect(data.Period).to.be("");
                  expect(data.StartTimeEarly).to.be.a('string');
                  expect(data.StartTimeEarly).to.be("");
                  expect(data.PeriodEarly).to.be.a('string');
                  expect(data.PeriodEarly).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.DeliveryHours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                  expect(data.Early).to.be.a(Flipdish.Range);
                        expect(data.Early.StartTime).to.be.a('string');
                    expect(data.Early.StartTime).to.be("");
                    expect(data.Early.Period).to.be.a('string');
                    expect(data.Early.Period).to.be("");
                    expect(data.Early.DayOfWeek).to.be.a('string');
                    expect(data.Early.DayOfWeek).to.be("Sunday");
                  expect(data.Late).to.be.a(Flipdish.Range);
                        expect(data.Late.StartTime).to.be.a('string');
                    expect(data.Late.StartTime).to.be("");
                    expect(data.Late.Period).to.be.a('string');
                    expect(data.Late.Period).to.be("");
                    expect(data.Late.DayOfWeek).to.be.a('string');
                    expect(data.Late.DayOfWeek).to.be("Sunday");
                  {
                    let dataCtr = data.Ranges;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.Range);
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
      
                            }
                  }
                  expect(data.DayOfWeek).to.be.a('string');
                  expect(data.DayOfWeek).to.be("Sunday");
                  expect(data.StartTime).to.be.a('string');
                  expect(data.StartTime).to.be("");
                  expect(data.Period).to.be.a('string');
                  expect(data.Period).to.be("");
                  expect(data.StartTimeEarly).to.be.a('string');
                  expect(data.StartTimeEarly).to.be("");
                  expect(data.PeriodEarly).to.be.a('string');
                  expect(data.PeriodEarly).to.be("");
  
                        }
              }
              expect(data.Data.MenuId).to.be.a('number');
              expect(data.Data.MenuId).to.be(0);
              expect(data.Data.OrderConfirmationMessageOverrideDelivery).to.be.a('string');
              expect(data.Data.OrderConfirmationMessageOverrideDelivery).to.be("");
              expect(data.Data.OrderConfirmationMessageOverridePickup).to.be.a('string');
              expect(data.Data.OrderConfirmationMessageOverridePickup).to.be("");
              expect(data.Data.PrintoutLayoutType).to.be.a('string');
              expect(data.Data.PrintoutLayoutType).to.be("Default");
              {
                let dataCtr = data.Data.StoreNotes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StoreNote);
                  expect(data.UserId).to.be.a('number');
                  expect(data.UserId).to.be(0);
                  expect(data.CreateTime).to.be.a(Date);
                  expect(data.CreateTime).to.be(new Date());
                  expect(data.Note).to.be.a('string');
                  expect(data.Note).to.be("");
  
                        }
              }
              expect(data.Data.MicrosoftTimeZone).to.be.a('string');
              expect(data.Data.MicrosoftTimeZone).to.be("");
              expect(data.Data.IanaTimeZone).to.be.a('string');
              expect(data.Data.IanaTimeZone).to.be("");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");
              expect(data.Data.PreOrderDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderDeliveryEnabled).to.be(false);
              expect(data.Data.PreOrderPickupEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderPickupEnabled).to.be(false);
              expect(data.Data.LogoUrl).to.be.a('string');
              expect(data.Data.LogoUrl).to.be("");
              expect(data.Data.PhoneNumber).to.be.a('string');
              expect(data.Data.PhoneNumber).to.be("");
              expect(data.Data.AlwaysAppearOpen).to.be.a('boolean');
              expect(data.Data.AlwaysAppearOpen).to.be(false);
              expect(data.Data.PreOrderEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderEnabled).to.be(false);
              expect(data.Data.TakeOutEnabled).to.be.a('boolean');
              expect(data.Data.TakeOutEnabled).to.be(false);
              expect(data.Data.TableServiceEnabled).to.be.a('boolean');
              expect(data.Data.TableServiceEnabled).to.be(false);
              expect(data.Data.DineInEnabled).to.be.a('boolean');
              expect(data.Data.DineInEnabled).to.be(false);
              expect(data.Data.AllowPreOrdersAndTableService).to.be.a('boolean');
              expect(data.Data.AllowPreOrdersAndTableService).to.be(false);
              expect(data.Data.PickupEnabled).to.be.a('boolean');
              expect(data.Data.PickupEnabled).to.be(false);
              expect(data.Data.DeliveryEnabled).to.be.a('boolean');
              expect(data.Data.DeliveryEnabled).to.be(false);
              expect(data.Data.CardOrderDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.CardOrderDeliveryEnabled).to.be(false);
              expect(data.Data.CashOrdersDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.CashOrdersDeliveryEnabled).to.be(false);
              expect(data.Data.CardOrdersPickupEnabled).to.be.a('boolean');
              expect(data.Data.CardOrdersPickupEnabled).to.be(false);
              expect(data.Data.CashOrdersPickupEnabled).to.be.a('boolean');
              expect(data.Data.CashOrdersPickupEnabled).to.be(false);
              expect(data.Data.TipsEnabled).to.be.a('boolean');
              expect(data.Data.TipsEnabled).to.be(false);
              expect(data.Data.AutomaticallyAcceptOrders).to.be.a('boolean');
              expect(data.Data.AutomaticallyAcceptOrders).to.be(false);
              expect(data.Data.OpenForDelivery).to.be.a('boolean');
              expect(data.Data.OpenForDelivery).to.be(false);
              expect(data.Data.OpenForPickup).to.be.a('boolean');
              expect(data.Data.OpenForPickup).to.be(false);
              expect(data.Data.MinimumPickupOrderAmount).to.be.a('number');
              expect(data.Data.MinimumPickupOrderAmount).to.be(0.0);
              expect(data.Data.RequireCustomerNameForPickup).to.be.a('boolean');
              expect(data.Data.RequireCustomerNameForPickup).to.be(false);
              expect(data.Data.GdprCustomerPhoneNumbers).to.be.a('boolean');
              expect(data.Data.GdprCustomerPhoneNumbers).to.be(false);
              expect(data.Data.RequireCustomerNameForDelivery).to.be.a('boolean');
              expect(data.Data.RequireCustomerNameForDelivery).to.be(false);
              expect(data.Data.AllowChefNotes).to.be.a('boolean');
              expect(data.Data.AllowChefNotes).to.be(false);
              expect(data.Data.EtaInPickupConfirmationSmsEnabled).to.be.a('boolean');
              expect(data.Data.EtaInPickupConfirmationSmsEnabled).to.be(false);
              expect(data.Data.EtaInDeliveryConfirmationSmsEnabled).to.be.a('boolean');
              expect(data.Data.EtaInDeliveryConfirmationSmsEnabled).to.be(false);
              expect(data.Data.IsArchived).to.be.a('boolean');
              expect(data.Data.IsArchived).to.be(false);
              expect(data.Data.IsPublished).to.be.a('boolean');
              expect(data.Data.IsPublished).to.be(false);
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.EmailAddress).to.be.a('string');
              expect(data.Data.EmailAddress).to.be("");
              expect(data.Data.StaffLanguage).to.be.a('string');
              expect(data.Data.StaffLanguage).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBusinessHoursOverrideByStoreId', function() {
        it('should call createBusinessHoursOverrideByStoreId successfully', function(done) {
          // TODO: uncomment, update parameter values for createBusinessHoursOverrideByStoreId call and complete the assertions
          /*
          var storeId = 56;
          var businessHoursOverride = new Flipdish.BusinessHoursOverrideBase();
          businessHoursOverride.DeliveryType = "Delivery";
          businessHoursOverride.StartTime = new Date();
          businessHoursOverride.EndTime = new Date();
          businessHoursOverride.Type = "Open";

          instance.createBusinessHoursOverrideByStoreId(storeId, businessHoursOverride, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultBusinessHoursOverride);
            expect(data.Data).to.be.a(Flipdish.BusinessHoursOverride);
                  expect(data.Data.BusinessHoursOverrideId).to.be.a('number');
              expect(data.Data.BusinessHoursOverrideId).to.be(0);
              expect(data.Data.DeliveryType).to.be.a('string');
              expect(data.Data.DeliveryType).to.be("Delivery");
              expect(data.Data.StartTime).to.be.a(Date);
              expect(data.Data.StartTime).to.be(new Date());
              expect(data.Data.EndTime).to.be.a(Date);
              expect(data.Data.EndTime).to.be(new Date());
              expect(data.Data.Type).to.be.a('string');
              expect(data.Data.Type).to.be("Open");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createStore', function() {
        it('should call createStore successfully', function(done) {
          // TODO: uncomment, update parameter values for createStore call and complete the assertions
          /*
          var storeGroupId = 56;
          var store = new Flipdish.StoreCreateBase();
          store.Name = "";
          store.EmailAddress = "";
          store.StaffLanguage = "";

          instance.createStore(storeGroupId, store, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStore);
            expect(data.Data).to.be.a(Flipdish.Store);
                  expect(data.Data.StoreId).to.be.a('number');
              expect(data.Data.StoreId).to.be(0);
              expect(data.Data.StoreGroupId).to.be.a('number');
              expect(data.Data.StoreGroupId).to.be(0);
              expect(data.Data.Address).to.be.a(Flipdish.StoreAddress);
                    expect(data.Data.Address.AddressId).to.be.a('number');
                expect(data.Data.Address.AddressId).to.be(0);
                expect(data.Data.Address.Coordinates).to.be.a(Flipdish.Coordinates);
                      expect(data.Data.Address.Coordinates.Latitude).to.be.a('number');
                  expect(data.Data.Address.Coordinates.Latitude).to.be(0.0);
                  expect(data.Data.Address.Coordinates.Longitude).to.be.a('number');
                  expect(data.Data.Address.Coordinates.Longitude).to.be(0.0);
                expect(data.Data.Address.Line1).to.be.a('string');
                expect(data.Data.Address.Line1).to.be("");
                expect(data.Data.Address.Postcode).to.be.a('string');
                expect(data.Data.Address.Postcode).to.be("");
                expect(data.Data.Address.City).to.be.a('string');
                expect(data.Data.Address.City).to.be("");
                expect(data.Data.Address.CountryCode).to.be.a('string');
                expect(data.Data.Address.CountryCode).to.be("");
                expect(data.Data.Address.DisplayForCustomer).to.be.a('string');
                expect(data.Data.Address.DisplayForCustomer).to.be("");
              {
                let dataCtr = data.Data.DeliveryZones;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.DeliveryZone);
                  expect(data.Id).to.be.a('number');
                  expect(data.Id).to.be(0);
                  expect(data.DeliveryFee).to.be.a('number');
                  expect(data.DeliveryFee).to.be(0.0);
                  expect(data.MinimumDeliveryOrderAmount).to.be.a('number');
                  expect(data.MinimumDeliveryOrderAmount).to.be(0.0);
                  expect(data.WellKnownText).to.be.a('string');
                  expect(data.WellKnownText).to.be("");
                  expect(data.IsEnabled).to.be.a('boolean');
                  expect(data.IsEnabled).to.be(false);
  
                        }
              }
              expect(data.Data.ApmPhoneNumber).to.be.a('string');
              expect(data.Data.ApmPhoneNumber).to.be("");
              {
                let dataCtr = data.Data.PickupHours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                  expect(data.Early).to.be.a(Flipdish.Range);
                        expect(data.Early.StartTime).to.be.a('string');
                    expect(data.Early.StartTime).to.be("");
                    expect(data.Early.Period).to.be.a('string');
                    expect(data.Early.Period).to.be("");
                    expect(data.Early.DayOfWeek).to.be.a('string');
                    expect(data.Early.DayOfWeek).to.be("Sunday");
                  expect(data.Late).to.be.a(Flipdish.Range);
                        expect(data.Late.StartTime).to.be.a('string');
                    expect(data.Late.StartTime).to.be("");
                    expect(data.Late.Period).to.be.a('string');
                    expect(data.Late.Period).to.be("");
                    expect(data.Late.DayOfWeek).to.be.a('string');
                    expect(data.Late.DayOfWeek).to.be("Sunday");
                  {
                    let dataCtr = data.Ranges;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.Range);
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
      
                            }
                  }
                  expect(data.DayOfWeek).to.be.a('string');
                  expect(data.DayOfWeek).to.be("Sunday");
                  expect(data.StartTime).to.be.a('string');
                  expect(data.StartTime).to.be("");
                  expect(data.Period).to.be.a('string');
                  expect(data.Period).to.be("");
                  expect(data.StartTimeEarly).to.be.a('string');
                  expect(data.StartTimeEarly).to.be("");
                  expect(data.PeriodEarly).to.be.a('string');
                  expect(data.PeriodEarly).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.DeliveryHours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                  expect(data.Early).to.be.a(Flipdish.Range);
                        expect(data.Early.StartTime).to.be.a('string');
                    expect(data.Early.StartTime).to.be("");
                    expect(data.Early.Period).to.be.a('string');
                    expect(data.Early.Period).to.be("");
                    expect(data.Early.DayOfWeek).to.be.a('string');
                    expect(data.Early.DayOfWeek).to.be("Sunday");
                  expect(data.Late).to.be.a(Flipdish.Range);
                        expect(data.Late.StartTime).to.be.a('string');
                    expect(data.Late.StartTime).to.be("");
                    expect(data.Late.Period).to.be.a('string');
                    expect(data.Late.Period).to.be("");
                    expect(data.Late.DayOfWeek).to.be.a('string');
                    expect(data.Late.DayOfWeek).to.be("Sunday");
                  {
                    let dataCtr = data.Ranges;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.Range);
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
      
                            }
                  }
                  expect(data.DayOfWeek).to.be.a('string');
                  expect(data.DayOfWeek).to.be("Sunday");
                  expect(data.StartTime).to.be.a('string');
                  expect(data.StartTime).to.be("");
                  expect(data.Period).to.be.a('string');
                  expect(data.Period).to.be("");
                  expect(data.StartTimeEarly).to.be.a('string');
                  expect(data.StartTimeEarly).to.be("");
                  expect(data.PeriodEarly).to.be.a('string');
                  expect(data.PeriodEarly).to.be("");
  
                        }
              }
              expect(data.Data.MenuId).to.be.a('number');
              expect(data.Data.MenuId).to.be(0);
              expect(data.Data.OrderConfirmationMessageOverrideDelivery).to.be.a('string');
              expect(data.Data.OrderConfirmationMessageOverrideDelivery).to.be("");
              expect(data.Data.OrderConfirmationMessageOverridePickup).to.be.a('string');
              expect(data.Data.OrderConfirmationMessageOverridePickup).to.be("");
              expect(data.Data.PrintoutLayoutType).to.be.a('string');
              expect(data.Data.PrintoutLayoutType).to.be("Default");
              {
                let dataCtr = data.Data.StoreNotes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StoreNote);
                  expect(data.UserId).to.be.a('number');
                  expect(data.UserId).to.be(0);
                  expect(data.CreateTime).to.be.a(Date);
                  expect(data.CreateTime).to.be(new Date());
                  expect(data.Note).to.be.a('string');
                  expect(data.Note).to.be("");
  
                        }
              }
              expect(data.Data.MicrosoftTimeZone).to.be.a('string');
              expect(data.Data.MicrosoftTimeZone).to.be("");
              expect(data.Data.IanaTimeZone).to.be.a('string');
              expect(data.Data.IanaTimeZone).to.be("");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");
              expect(data.Data.PreOrderDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderDeliveryEnabled).to.be(false);
              expect(data.Data.PreOrderPickupEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderPickupEnabled).to.be(false);
              expect(data.Data.LogoUrl).to.be.a('string');
              expect(data.Data.LogoUrl).to.be("");
              expect(data.Data.PhoneNumber).to.be.a('string');
              expect(data.Data.PhoneNumber).to.be("");
              expect(data.Data.AlwaysAppearOpen).to.be.a('boolean');
              expect(data.Data.AlwaysAppearOpen).to.be(false);
              expect(data.Data.PreOrderEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderEnabled).to.be(false);
              expect(data.Data.TakeOutEnabled).to.be.a('boolean');
              expect(data.Data.TakeOutEnabled).to.be(false);
              expect(data.Data.TableServiceEnabled).to.be.a('boolean');
              expect(data.Data.TableServiceEnabled).to.be(false);
              expect(data.Data.DineInEnabled).to.be.a('boolean');
              expect(data.Data.DineInEnabled).to.be(false);
              expect(data.Data.AllowPreOrdersAndTableService).to.be.a('boolean');
              expect(data.Data.AllowPreOrdersAndTableService).to.be(false);
              expect(data.Data.PickupEnabled).to.be.a('boolean');
              expect(data.Data.PickupEnabled).to.be(false);
              expect(data.Data.DeliveryEnabled).to.be.a('boolean');
              expect(data.Data.DeliveryEnabled).to.be(false);
              expect(data.Data.CardOrderDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.CardOrderDeliveryEnabled).to.be(false);
              expect(data.Data.CashOrdersDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.CashOrdersDeliveryEnabled).to.be(false);
              expect(data.Data.CardOrdersPickupEnabled).to.be.a('boolean');
              expect(data.Data.CardOrdersPickupEnabled).to.be(false);
              expect(data.Data.CashOrdersPickupEnabled).to.be.a('boolean');
              expect(data.Data.CashOrdersPickupEnabled).to.be(false);
              expect(data.Data.TipsEnabled).to.be.a('boolean');
              expect(data.Data.TipsEnabled).to.be(false);
              expect(data.Data.AutomaticallyAcceptOrders).to.be.a('boolean');
              expect(data.Data.AutomaticallyAcceptOrders).to.be(false);
              expect(data.Data.OpenForDelivery).to.be.a('boolean');
              expect(data.Data.OpenForDelivery).to.be(false);
              expect(data.Data.OpenForPickup).to.be.a('boolean');
              expect(data.Data.OpenForPickup).to.be(false);
              expect(data.Data.MinimumPickupOrderAmount).to.be.a('number');
              expect(data.Data.MinimumPickupOrderAmount).to.be(0.0);
              expect(data.Data.RequireCustomerNameForPickup).to.be.a('boolean');
              expect(data.Data.RequireCustomerNameForPickup).to.be(false);
              expect(data.Data.GdprCustomerPhoneNumbers).to.be.a('boolean');
              expect(data.Data.GdprCustomerPhoneNumbers).to.be(false);
              expect(data.Data.RequireCustomerNameForDelivery).to.be.a('boolean');
              expect(data.Data.RequireCustomerNameForDelivery).to.be(false);
              expect(data.Data.AllowChefNotes).to.be.a('boolean');
              expect(data.Data.AllowChefNotes).to.be(false);
              expect(data.Data.EtaInPickupConfirmationSmsEnabled).to.be.a('boolean');
              expect(data.Data.EtaInPickupConfirmationSmsEnabled).to.be(false);
              expect(data.Data.EtaInDeliveryConfirmationSmsEnabled).to.be.a('boolean');
              expect(data.Data.EtaInDeliveryConfirmationSmsEnabled).to.be(false);
              expect(data.Data.IsArchived).to.be.a('boolean');
              expect(data.Data.IsArchived).to.be(false);
              expect(data.Data.IsPublished).to.be.a('boolean');
              expect(data.Data.IsPublished).to.be(false);
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.EmailAddress).to.be.a('string');
              expect(data.Data.EmailAddress).to.be("");
              expect(data.Data.StaffLanguage).to.be.a('string');
              expect(data.Data.StaffLanguage).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBusinessHoursOverride', function() {
        it('should call deleteBusinessHoursOverride successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBusinessHoursOverride call and complete the assertions
          /*
          var storeId = 56;
          var businessHoursOverrideId = 56;

          instance.deleteBusinessHoursOverride(storeId, businessHoursOverrideId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultRestApiDefaultResponse);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.RestApiDefaultResponse);
                expect(data.Data).to.be.a('string');
                expect(data.Data).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBankAccountForStore', function() {
        it('should call getBankAccountForStore successfully', function(done) {
          // TODO: uncomment, update parameter values for getBankAccountForStore call and complete the assertions
          /*
          var storeId = 56;

          instance.getBankAccountForStore(storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultAssignedBankAccount);
            expect(data.Data).to.be.a(Flipdish.AssignedBankAccount);
                  expect(data.Data.Id).to.be.a('number');
              expect(data.Data.Id).to.be(0);
              expect(data.Data.BankAccountName).to.be.a('string');
              expect(data.Data.BankAccountName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBusinessHours', function() {
        it('should call getBusinessHours successfully', function(done) {
          // TODO: uncomment, update parameter values for getBusinessHours call and complete the assertions
          /*
          var storeId = 56;
          var deliveryType = "deliveryType_example";

          instance.getBusinessHours(storeId, deliveryType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultBusinessHoursPeriod);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                expect(data.Early).to.be.a(Flipdish.Range);
                      expect(data.Early.StartTime).to.be.a('string');
                  expect(data.Early.StartTime).to.be("");
                  expect(data.Early.Period).to.be.a('string');
                  expect(data.Early.Period).to.be("");
                  expect(data.Early.DayOfWeek).to.be.a('string');
                  expect(data.Early.DayOfWeek).to.be("Sunday");
                expect(data.Late).to.be.a(Flipdish.Range);
                      expect(data.Late.StartTime).to.be.a('string');
                  expect(data.Late.StartTime).to.be("");
                  expect(data.Late.Period).to.be.a('string');
                  expect(data.Late.Period).to.be("");
                  expect(data.Late.DayOfWeek).to.be.a('string');
                  expect(data.Late.DayOfWeek).to.be("Sunday");
                {
                  let dataCtr = data.Ranges;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.Range);
                    expect(data.StartTime).to.be.a('string');
                    expect(data.StartTime).to.be("");
                    expect(data.Period).to.be.a('string');
                    expect(data.Period).to.be("");
                    expect(data.DayOfWeek).to.be.a('string');
                    expect(data.DayOfWeek).to.be("Sunday");
    
                          }
                }
                expect(data.DayOfWeek).to.be.a('string');
                expect(data.DayOfWeek).to.be("Sunday");
                expect(data.StartTime).to.be.a('string');
                expect(data.StartTime).to.be("");
                expect(data.Period).to.be.a('string');
                expect(data.Period).to.be("");
                expect(data.StartTimeEarly).to.be.a('string');
                expect(data.StartTimeEarly).to.be("");
                expect(data.PeriodEarly).to.be.a('string');
                expect(data.PeriodEarly).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBusinessHoursOverrideByStoreId', function() {
        it('should call getBusinessHoursOverrideByStoreId successfully', function(done) {
          // TODO: uncomment, update parameter values for getBusinessHoursOverrideByStoreId call and complete the assertions
          /*
          var storeId = 56;
          var opts = {};
          opts.after = new Date("2013-10-20T19:20:30+01:00");
          opts.page = 56;
          opts.limit = 56;

          instance.getBusinessHoursOverrideByStoreId(storeId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultBusinessHoursOverride);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.BusinessHoursOverride);
                expect(data.BusinessHoursOverrideId).to.be.a('number');
                expect(data.BusinessHoursOverrideId).to.be(0);
                expect(data.DeliveryType).to.be.a('string');
                expect(data.DeliveryType).to.be("Delivery");
                expect(data.StartTime).to.be.a(Date);
                expect(data.StartTime).to.be(new Date());
                expect(data.EndTime).to.be.a(Date);
                expect(data.EndTime).to.be(new Date());
                expect(data.Type).to.be.a('string');
                expect(data.Type).to.be("Open");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEndOfDayReport', function() {
        it('should call getEndOfDayReport successfully', function(done) {
          // TODO: uncomment, update parameter values for getEndOfDayReport call and complete the assertions
          /*
          var storeId = 56;
          var opts = {};
          opts._date = new Date("2013-10-20T19:20:30+01:00");

          instance.getEndOfDayReport(storeId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStoreEndOfDayReport);
            expect(data.Data).to.be.a(Flipdish.StoreEndOfDayReport);
                  expect(data.Data.StoreId).to.be.a('number');
              expect(data.Data.StoreId).to.be(0);
              expect(data.Data.StoreName).to.be.a('string');
              expect(data.Data.StoreName).to.be("");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");
              expect(data.Data.OrderCount).to.be.a('number');
              expect(data.Data.OrderCount).to.be(0);
              expect(data.Data.OrderValue).to.be.a('number');
              expect(data.Data.OrderValue).to.be(0.0);
              expect(data.Data.OrderValueExcludingDeliveryFees).to.be.a('number');
              expect(data.Data.OrderValueExcludingDeliveryFees).to.be(0.0);
              expect(data.Data.CollectionOrderCount).to.be.a('number');
              expect(data.Data.CollectionOrderCount).to.be(0);
              expect(data.Data.CollectionCashOrderCount).to.be.a('number');
              expect(data.Data.CollectionCashOrderCount).to.be(0);
              expect(data.Data.CollectionPaidOnlineOrderCount).to.be.a('number');
              expect(data.Data.CollectionPaidOnlineOrderCount).to.be(0);
              expect(data.Data.CollectionOrderValue).to.be.a('number');
              expect(data.Data.CollectionOrderValue).to.be(0.0);
              expect(data.Data.CollectionCashOrderValue).to.be.a('number');
              expect(data.Data.CollectionCashOrderValue).to.be(0.0);
              expect(data.Data.CollectionPaidOnlineOrderValue).to.be.a('number');
              expect(data.Data.CollectionPaidOnlineOrderValue).to.be(0.0);
              expect(data.Data.DeliveryOrderCount).to.be.a('number');
              expect(data.Data.DeliveryOrderCount).to.be(0);
              expect(data.Data.DeliveryCashOrderCount).to.be.a('number');
              expect(data.Data.DeliveryCashOrderCount).to.be(0);
              expect(data.Data.DeliveryPaidOnlineOrderCount).to.be.a('number');
              expect(data.Data.DeliveryPaidOnlineOrderCount).to.be(0);
              expect(data.Data.DeliveryOrderValue).to.be.a('number');
              expect(data.Data.DeliveryOrderValue).to.be(0.0);
              expect(data.Data.DeliveryCashOrderValue).to.be.a('number');
              expect(data.Data.DeliveryCashOrderValue).to.be(0.0);
              expect(data.Data.DeliveryPaidOnlineOrderValue).to.be.a('number');
              expect(data.Data.DeliveryPaidOnlineOrderValue).to.be(0.0);
              expect(data.Data.PaidOnlineOrderCount).to.be.a('number');
              expect(data.Data.PaidOnlineOrderCount).to.be(0);
              expect(data.Data.CashOrderCount).to.be.a('number');
              expect(data.Data.CashOrderCount).to.be(0);
              expect(data.Data.PaidOnlineOrderValue).to.be.a('number');
              expect(data.Data.PaidOnlineOrderValue).to.be(0.0);
              expect(data.Data.CashOrderValue).to.be.a('number');
              expect(data.Data.CashOrderValue).to.be(0.0);
              expect(data.Data.PaidOnlineOrderValueExcludingDeliveryFees).to.be.a('number');
              expect(data.Data.PaidOnlineOrderValueExcludingDeliveryFees).to.be(0.0);
              expect(data.Data.CashOrderValueExcludingDeliveryFees).to.be.a('number');
              expect(data.Data.CashOrderValueExcludingDeliveryFees).to.be(0.0);
              expect(data.Data.StartTime).to.be.a(Date);
              expect(data.Data.StartTime).to.be(new Date());
              expect(data.Data.EndTime).to.be.a(Date);
              expect(data.Data.EndTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPreOrderConfig', function() {
        it('should call getPreOrderConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for getPreOrderConfig call and complete the assertions
          /*
          var storeId = 56;
          var deliveryType = "deliveryType_example";

          instance.getPreOrderConfig(storeId, deliveryType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultPreOrderConfig);
            expect(data.Data).to.be.a(Flipdish.PreOrderConfig);
                  expect(data.Data.LeadTimeMinutes).to.be.a('number');
              expect(data.Data.LeadTimeMinutes).to.be(0);
              expect(data.Data.IntervalMinutes).to.be.a('number');
              expect(data.Data.IntervalMinutes).to.be(0);
              expect(data.Data.MaxOrderAheadDays).to.be.a('number');
              expect(data.Data.MaxOrderAheadDays).to.be(0);
              expect(data.Data.IncludeAsap).to.be.a('boolean');
              expect(data.Data.IncludeAsap).to.be(false);
              expect(data.Data.IncludeMoreGranularInitialTime).to.be.a('boolean');
              expect(data.Data.IncludeMoreGranularInitialTime).to.be(false);
              expect(data.Data.CutOffTimePreviousDayBasic).to.be.a('string');
              expect(data.Data.CutOffTimePreviousDayBasic).to.be("");
              expect(data.Data.CutOffTimeCurrentDayBasic).to.be.a('string');
              expect(data.Data.CutOffTimeCurrentDayBasic).to.be("");
              expect(data.Data.PreOrderTimeDisplayType).to.be.a('string');
              expect(data.Data.PreOrderTimeDisplayType).to.be("SingleTime");
              expect(data.Data.AlwaysAppearOpen).to.be.a('boolean');
              expect(data.Data.AlwaysAppearOpen).to.be(false);
              expect(data.Data.RequireExplicitSelectAlways).to.be.a('boolean');
              expect(data.Data.RequireExplicitSelectAlways).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPreOrderPreview', function() {
        it('should call getPreOrderPreview successfully', function(done) {
          // TODO: uncomment, update parameter values for getPreOrderPreview call and complete the assertions
          /*
          var storeId = 56;
          var deliveryType = "deliveryType_example";
          var opts = {};
          opts.preOrderConfig_leadTimeMinutes = 56;
          opts.preOrderConfig_intervalMinutes = 56;
          opts.preOrderConfig_maxOrderAheadDays = 56;
          opts.preOrderConfig_includeAsap = true;
          opts.preOrderConfig_includeMoreGranularInitialTime = true;
          opts.preOrderConfig_cutOffTimePreviousDayBasic = "preOrderConfig_cutOffTimePreviousDayBasic_example";
          opts.preOrderConfig_cutOffTimeCurrentDayBasic = "preOrderConfig_cutOffTimeCurrentDayBasic_example";
          opts.preOrderConfig_preOrderTimeDisplayType = "preOrderConfig_preOrderTimeDisplayType_example";
          opts.preOrderConfig_alwaysAppearOpen = true;
          opts.preOrderConfig_requireExplicitSelectAlways = true;

          instance.getPreOrderPreview(storeId, deliveryType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultPreOrderTime);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.PreOrderTime);
                expect(data.StartTime).to.be.a(Date);
                expect(data.StartTime).to.be(new Date());
                expect(data.EndTime).to.be.a(Date);
                expect(data.EndTime).to.be(new Date());

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessingFeeConfigsByStoreId', function() {
        it('should call getProcessingFeeConfigsByStoreId successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessingFeeConfigsByStoreId call and complete the assertions
          /*
          var storeId = 56;
          var opts = {};
          opts.appNameId = "appNameId_example";

          instance.getProcessingFeeConfigsByStoreId(storeId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultProcessingFeeConfig);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.ProcessingFeeConfig);
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.PaymentAccountType).to.be.a('string');
                expect(data.PaymentAccountType).to.be("Card");
                expect(data.PercentFee).to.be.a('number');
                expect(data.PercentFee).to.be(0.0);
                expect(data.FixedFee).to.be.a('number');
                expect(data.FixedFee).to.be(0.0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProcessingFeeConfigsByStoreIdAndPaymentAccountType', function() {
        it('should call getProcessingFeeConfigsByStoreIdAndPaymentAccountType successfully', function(done) {
          // TODO: uncomment, update parameter values for getProcessingFeeConfigsByStoreIdAndPaymentAccountType call and complete the assertions
          /*
          var storeId = 56;
          var paymentAccountType = "paymentAccountType_example";
          var opts = {};
          opts.appNameId = "appNameId_example";

          instance.getProcessingFeeConfigsByStoreIdAndPaymentAccountType(storeId, paymentAccountType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultProcessingFeeConfig);
            expect(data.Data).to.be.a(Flipdish.ProcessingFeeConfig);
                  expect(data.Data.StoreId).to.be.a('number');
              expect(data.Data.StoreId).to.be(0);
              expect(data.Data.PaymentAccountType).to.be.a('string');
              expect(data.Data.PaymentAccountType).to.be("Card");
              expect(data.Data.PercentFee).to.be.a('number');
              expect(data.Data.PercentFee).to.be(0.0);
              expect(data.Data.FixedFee).to.be.a('number');
              expect(data.Data.FixedFee).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStoreById', function() {
        it('should call getStoreById successfully', function(done) {
          // TODO: uncomment, update parameter values for getStoreById call and complete the assertions
          /*
          var storeId = 56;

          instance.getStoreById(storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStore);
            expect(data.Data).to.be.a(Flipdish.Store);
                  expect(data.Data.StoreId).to.be.a('number');
              expect(data.Data.StoreId).to.be(0);
              expect(data.Data.StoreGroupId).to.be.a('number');
              expect(data.Data.StoreGroupId).to.be(0);
              expect(data.Data.Address).to.be.a(Flipdish.StoreAddress);
                    expect(data.Data.Address.AddressId).to.be.a('number');
                expect(data.Data.Address.AddressId).to.be(0);
                expect(data.Data.Address.Coordinates).to.be.a(Flipdish.Coordinates);
                      expect(data.Data.Address.Coordinates.Latitude).to.be.a('number');
                  expect(data.Data.Address.Coordinates.Latitude).to.be(0.0);
                  expect(data.Data.Address.Coordinates.Longitude).to.be.a('number');
                  expect(data.Data.Address.Coordinates.Longitude).to.be(0.0);
                expect(data.Data.Address.Line1).to.be.a('string');
                expect(data.Data.Address.Line1).to.be("");
                expect(data.Data.Address.Postcode).to.be.a('string');
                expect(data.Data.Address.Postcode).to.be("");
                expect(data.Data.Address.City).to.be.a('string');
                expect(data.Data.Address.City).to.be("");
                expect(data.Data.Address.CountryCode).to.be.a('string');
                expect(data.Data.Address.CountryCode).to.be("");
                expect(data.Data.Address.DisplayForCustomer).to.be.a('string');
                expect(data.Data.Address.DisplayForCustomer).to.be("");
              {
                let dataCtr = data.Data.DeliveryZones;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.DeliveryZone);
                  expect(data.Id).to.be.a('number');
                  expect(data.Id).to.be(0);
                  expect(data.DeliveryFee).to.be.a('number');
                  expect(data.DeliveryFee).to.be(0.0);
                  expect(data.MinimumDeliveryOrderAmount).to.be.a('number');
                  expect(data.MinimumDeliveryOrderAmount).to.be(0.0);
                  expect(data.WellKnownText).to.be.a('string');
                  expect(data.WellKnownText).to.be("");
                  expect(data.IsEnabled).to.be.a('boolean');
                  expect(data.IsEnabled).to.be(false);
  
                        }
              }
              expect(data.Data.ApmPhoneNumber).to.be.a('string');
              expect(data.Data.ApmPhoneNumber).to.be("");
              {
                let dataCtr = data.Data.PickupHours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                  expect(data.Early).to.be.a(Flipdish.Range);
                        expect(data.Early.StartTime).to.be.a('string');
                    expect(data.Early.StartTime).to.be("");
                    expect(data.Early.Period).to.be.a('string');
                    expect(data.Early.Period).to.be("");
                    expect(data.Early.DayOfWeek).to.be.a('string');
                    expect(data.Early.DayOfWeek).to.be("Sunday");
                  expect(data.Late).to.be.a(Flipdish.Range);
                        expect(data.Late.StartTime).to.be.a('string');
                    expect(data.Late.StartTime).to.be("");
                    expect(data.Late.Period).to.be.a('string');
                    expect(data.Late.Period).to.be("");
                    expect(data.Late.DayOfWeek).to.be.a('string');
                    expect(data.Late.DayOfWeek).to.be("Sunday");
                  {
                    let dataCtr = data.Ranges;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.Range);
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
      
                            }
                  }
                  expect(data.DayOfWeek).to.be.a('string');
                  expect(data.DayOfWeek).to.be("Sunday");
                  expect(data.StartTime).to.be.a('string');
                  expect(data.StartTime).to.be("");
                  expect(data.Period).to.be.a('string');
                  expect(data.Period).to.be("");
                  expect(data.StartTimeEarly).to.be.a('string');
                  expect(data.StartTimeEarly).to.be("");
                  expect(data.PeriodEarly).to.be.a('string');
                  expect(data.PeriodEarly).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.DeliveryHours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                  expect(data.Early).to.be.a(Flipdish.Range);
                        expect(data.Early.StartTime).to.be.a('string');
                    expect(data.Early.StartTime).to.be("");
                    expect(data.Early.Period).to.be.a('string');
                    expect(data.Early.Period).to.be("");
                    expect(data.Early.DayOfWeek).to.be.a('string');
                    expect(data.Early.DayOfWeek).to.be("Sunday");
                  expect(data.Late).to.be.a(Flipdish.Range);
                        expect(data.Late.StartTime).to.be.a('string');
                    expect(data.Late.StartTime).to.be("");
                    expect(data.Late.Period).to.be.a('string');
                    expect(data.Late.Period).to.be("");
                    expect(data.Late.DayOfWeek).to.be.a('string');
                    expect(data.Late.DayOfWeek).to.be("Sunday");
                  {
                    let dataCtr = data.Ranges;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.Range);
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
      
                            }
                  }
                  expect(data.DayOfWeek).to.be.a('string');
                  expect(data.DayOfWeek).to.be("Sunday");
                  expect(data.StartTime).to.be.a('string');
                  expect(data.StartTime).to.be("");
                  expect(data.Period).to.be.a('string');
                  expect(data.Period).to.be("");
                  expect(data.StartTimeEarly).to.be.a('string');
                  expect(data.StartTimeEarly).to.be("");
                  expect(data.PeriodEarly).to.be.a('string');
                  expect(data.PeriodEarly).to.be("");
  
                        }
              }
              expect(data.Data.MenuId).to.be.a('number');
              expect(data.Data.MenuId).to.be(0);
              expect(data.Data.OrderConfirmationMessageOverrideDelivery).to.be.a('string');
              expect(data.Data.OrderConfirmationMessageOverrideDelivery).to.be("");
              expect(data.Data.OrderConfirmationMessageOverridePickup).to.be.a('string');
              expect(data.Data.OrderConfirmationMessageOverridePickup).to.be("");
              expect(data.Data.PrintoutLayoutType).to.be.a('string');
              expect(data.Data.PrintoutLayoutType).to.be("Default");
              {
                let dataCtr = data.Data.StoreNotes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StoreNote);
                  expect(data.UserId).to.be.a('number');
                  expect(data.UserId).to.be(0);
                  expect(data.CreateTime).to.be.a(Date);
                  expect(data.CreateTime).to.be(new Date());
                  expect(data.Note).to.be.a('string');
                  expect(data.Note).to.be("");
  
                        }
              }
              expect(data.Data.MicrosoftTimeZone).to.be.a('string');
              expect(data.Data.MicrosoftTimeZone).to.be("");
              expect(data.Data.IanaTimeZone).to.be.a('string');
              expect(data.Data.IanaTimeZone).to.be("");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");
              expect(data.Data.PreOrderDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderDeliveryEnabled).to.be(false);
              expect(data.Data.PreOrderPickupEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderPickupEnabled).to.be(false);
              expect(data.Data.LogoUrl).to.be.a('string');
              expect(data.Data.LogoUrl).to.be("");
              expect(data.Data.PhoneNumber).to.be.a('string');
              expect(data.Data.PhoneNumber).to.be("");
              expect(data.Data.AlwaysAppearOpen).to.be.a('boolean');
              expect(data.Data.AlwaysAppearOpen).to.be(false);
              expect(data.Data.PreOrderEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderEnabled).to.be(false);
              expect(data.Data.TakeOutEnabled).to.be.a('boolean');
              expect(data.Data.TakeOutEnabled).to.be(false);
              expect(data.Data.TableServiceEnabled).to.be.a('boolean');
              expect(data.Data.TableServiceEnabled).to.be(false);
              expect(data.Data.DineInEnabled).to.be.a('boolean');
              expect(data.Data.DineInEnabled).to.be(false);
              expect(data.Data.AllowPreOrdersAndTableService).to.be.a('boolean');
              expect(data.Data.AllowPreOrdersAndTableService).to.be(false);
              expect(data.Data.PickupEnabled).to.be.a('boolean');
              expect(data.Data.PickupEnabled).to.be(false);
              expect(data.Data.DeliveryEnabled).to.be.a('boolean');
              expect(data.Data.DeliveryEnabled).to.be(false);
              expect(data.Data.CardOrderDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.CardOrderDeliveryEnabled).to.be(false);
              expect(data.Data.CashOrdersDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.CashOrdersDeliveryEnabled).to.be(false);
              expect(data.Data.CardOrdersPickupEnabled).to.be.a('boolean');
              expect(data.Data.CardOrdersPickupEnabled).to.be(false);
              expect(data.Data.CashOrdersPickupEnabled).to.be.a('boolean');
              expect(data.Data.CashOrdersPickupEnabled).to.be(false);
              expect(data.Data.TipsEnabled).to.be.a('boolean');
              expect(data.Data.TipsEnabled).to.be(false);
              expect(data.Data.AutomaticallyAcceptOrders).to.be.a('boolean');
              expect(data.Data.AutomaticallyAcceptOrders).to.be(false);
              expect(data.Data.OpenForDelivery).to.be.a('boolean');
              expect(data.Data.OpenForDelivery).to.be(false);
              expect(data.Data.OpenForPickup).to.be.a('boolean');
              expect(data.Data.OpenForPickup).to.be(false);
              expect(data.Data.MinimumPickupOrderAmount).to.be.a('number');
              expect(data.Data.MinimumPickupOrderAmount).to.be(0.0);
              expect(data.Data.RequireCustomerNameForPickup).to.be.a('boolean');
              expect(data.Data.RequireCustomerNameForPickup).to.be(false);
              expect(data.Data.GdprCustomerPhoneNumbers).to.be.a('boolean');
              expect(data.Data.GdprCustomerPhoneNumbers).to.be(false);
              expect(data.Data.RequireCustomerNameForDelivery).to.be.a('boolean');
              expect(data.Data.RequireCustomerNameForDelivery).to.be(false);
              expect(data.Data.AllowChefNotes).to.be.a('boolean');
              expect(data.Data.AllowChefNotes).to.be(false);
              expect(data.Data.EtaInPickupConfirmationSmsEnabled).to.be.a('boolean');
              expect(data.Data.EtaInPickupConfirmationSmsEnabled).to.be(false);
              expect(data.Data.EtaInDeliveryConfirmationSmsEnabled).to.be.a('boolean');
              expect(data.Data.EtaInDeliveryConfirmationSmsEnabled).to.be(false);
              expect(data.Data.IsArchived).to.be.a('boolean');
              expect(data.Data.IsArchived).to.be(false);
              expect(data.Data.IsPublished).to.be.a('boolean');
              expect(data.Data.IsPublished).to.be(false);
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.EmailAddress).to.be.a('string');
              expect(data.Data.EmailAddress).to.be("");
              expect(data.Data.StaffLanguage).to.be.a('string');
              expect(data.Data.StaffLanguage).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStoreHeadersByAppId', function() {
        it('should call getStoreHeadersByAppId successfully', function(done) {
          // TODO: uncomment, update parameter values for getStoreHeadersByAppId call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.storeNameQuery = "storeNameQuery_example";
          opts.page = 56;
          opts.limit = 56;

          instance.getStoreHeadersByAppId(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultStoreHeader);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.StoreHeader);
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStoreNetSales', function() {
        it('should call getStoreNetSales successfully', function(done) {
          // TODO: uncomment, update parameter values for getStoreNetSales call and complete the assertions
          /*
          var appId = "appId_example";
          var storeId = [3.4];

          instance.getStoreNetSales(appId, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultStoreStatistics);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.StoreStatistics);
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                {
                  let dataCtr = data.Data;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.StoreDataPoint);
                    expect(data.Day).to.be.a(Date);
                    expect(data.Day).to.be(new Date());
                    expect(data.Value).to.be.a('number');
                    expect(data.Value).to.be(0.0);
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStores', function() {
        it('should call getStores successfully', function(done) {
          // TODO: uncomment, update parameter values for getStores call and complete the assertions
          /*
          var opts = {};
          opts.searchQuery = "searchQuery_example";
          opts.page = 56;
          opts.limit = 56;
          opts.storeGroupId = 56;

          instance.getStores(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultStore);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.Store);
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.StoreGroupId).to.be.a('number');
                expect(data.StoreGroupId).to.be(0);
                expect(data.Address).to.be.a(Flipdish.StoreAddress);
                      expect(data.Address.AddressId).to.be.a('number');
                  expect(data.Address.AddressId).to.be(0);
                  expect(data.Address.Coordinates).to.be.a(Flipdish.Coordinates);
                        expect(data.Address.Coordinates.Latitude).to.be.a('number');
                    expect(data.Address.Coordinates.Latitude).to.be(0.0);
                    expect(data.Address.Coordinates.Longitude).to.be.a('number');
                    expect(data.Address.Coordinates.Longitude).to.be(0.0);
                  expect(data.Address.Line1).to.be.a('string');
                  expect(data.Address.Line1).to.be("");
                  expect(data.Address.Postcode).to.be.a('string');
                  expect(data.Address.Postcode).to.be("");
                  expect(data.Address.City).to.be.a('string');
                  expect(data.Address.City).to.be("");
                  expect(data.Address.CountryCode).to.be.a('string');
                  expect(data.Address.CountryCode).to.be("");
                  expect(data.Address.DisplayForCustomer).to.be.a('string');
                  expect(data.Address.DisplayForCustomer).to.be("");
                {
                  let dataCtr = data.DeliveryZones;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.DeliveryZone);
                    expect(data.Id).to.be.a('number');
                    expect(data.Id).to.be(0);
                    expect(data.DeliveryFee).to.be.a('number');
                    expect(data.DeliveryFee).to.be(0.0);
                    expect(data.MinimumDeliveryOrderAmount).to.be.a('number');
                    expect(data.MinimumDeliveryOrderAmount).to.be(0.0);
                    expect(data.WellKnownText).to.be.a('string');
                    expect(data.WellKnownText).to.be("");
                    expect(data.IsEnabled).to.be.a('boolean');
                    expect(data.IsEnabled).to.be(false);
    
                          }
                }
                expect(data.ApmPhoneNumber).to.be.a('string');
                expect(data.ApmPhoneNumber).to.be("");
                {
                  let dataCtr = data.PickupHours;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                    expect(data.Early).to.be.a(Flipdish.Range);
                          expect(data.Early.StartTime).to.be.a('string');
                      expect(data.Early.StartTime).to.be("");
                      expect(data.Early.Period).to.be.a('string');
                      expect(data.Early.Period).to.be("");
                      expect(data.Early.DayOfWeek).to.be.a('string');
                      expect(data.Early.DayOfWeek).to.be("Sunday");
                    expect(data.Late).to.be.a(Flipdish.Range);
                          expect(data.Late.StartTime).to.be.a('string');
                      expect(data.Late.StartTime).to.be("");
                      expect(data.Late.Period).to.be.a('string');
                      expect(data.Late.Period).to.be("");
                      expect(data.Late.DayOfWeek).to.be.a('string');
                      expect(data.Late.DayOfWeek).to.be("Sunday");
                    {
                      let dataCtr = data.Ranges;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.Range);
                        expect(data.StartTime).to.be.a('string');
                        expect(data.StartTime).to.be("");
                        expect(data.Period).to.be.a('string');
                        expect(data.Period).to.be("");
                        expect(data.DayOfWeek).to.be.a('string');
                        expect(data.DayOfWeek).to.be("Sunday");
        
                              }
                    }
                    expect(data.DayOfWeek).to.be.a('string');
                    expect(data.DayOfWeek).to.be("Sunday");
                    expect(data.StartTime).to.be.a('string');
                    expect(data.StartTime).to.be("");
                    expect(data.Period).to.be.a('string');
                    expect(data.Period).to.be("");
                    expect(data.StartTimeEarly).to.be.a('string');
                    expect(data.StartTimeEarly).to.be("");
                    expect(data.PeriodEarly).to.be.a('string');
                    expect(data.PeriodEarly).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.DeliveryHours;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                    expect(data.Early).to.be.a(Flipdish.Range);
                          expect(data.Early.StartTime).to.be.a('string');
                      expect(data.Early.StartTime).to.be("");
                      expect(data.Early.Period).to.be.a('string');
                      expect(data.Early.Period).to.be("");
                      expect(data.Early.DayOfWeek).to.be.a('string');
                      expect(data.Early.DayOfWeek).to.be("Sunday");
                    expect(data.Late).to.be.a(Flipdish.Range);
                          expect(data.Late.StartTime).to.be.a('string');
                      expect(data.Late.StartTime).to.be("");
                      expect(data.Late.Period).to.be.a('string');
                      expect(data.Late.Period).to.be("");
                      expect(data.Late.DayOfWeek).to.be.a('string');
                      expect(data.Late.DayOfWeek).to.be("Sunday");
                    {
                      let dataCtr = data.Ranges;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.Range);
                        expect(data.StartTime).to.be.a('string');
                        expect(data.StartTime).to.be("");
                        expect(data.Period).to.be.a('string');
                        expect(data.Period).to.be("");
                        expect(data.DayOfWeek).to.be.a('string');
                        expect(data.DayOfWeek).to.be("Sunday");
        
                              }
                    }
                    expect(data.DayOfWeek).to.be.a('string');
                    expect(data.DayOfWeek).to.be("Sunday");
                    expect(data.StartTime).to.be.a('string');
                    expect(data.StartTime).to.be("");
                    expect(data.Period).to.be.a('string');
                    expect(data.Period).to.be("");
                    expect(data.StartTimeEarly).to.be.a('string');
                    expect(data.StartTimeEarly).to.be("");
                    expect(data.PeriodEarly).to.be.a('string');
                    expect(data.PeriodEarly).to.be("");
    
                          }
                }
                expect(data.MenuId).to.be.a('number');
                expect(data.MenuId).to.be(0);
                expect(data.OrderConfirmationMessageOverrideDelivery).to.be.a('string');
                expect(data.OrderConfirmationMessageOverrideDelivery).to.be("");
                expect(data.OrderConfirmationMessageOverridePickup).to.be.a('string');
                expect(data.OrderConfirmationMessageOverridePickup).to.be("");
                expect(data.PrintoutLayoutType).to.be.a('string');
                expect(data.PrintoutLayoutType).to.be("Default");
                {
                  let dataCtr = data.StoreNotes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.StoreNote);
                    expect(data.UserId).to.be.a('number');
                    expect(data.UserId).to.be(0);
                    expect(data.CreateTime).to.be.a(Date);
                    expect(data.CreateTime).to.be(new Date());
                    expect(data.Note).to.be.a('string');
                    expect(data.Note).to.be("");
    
                          }
                }
                expect(data.MicrosoftTimeZone).to.be.a('string');
                expect(data.MicrosoftTimeZone).to.be("");
                expect(data.IanaTimeZone).to.be.a('string');
                expect(data.IanaTimeZone).to.be("");
                expect(data.Currency).to.be.a('string');
                expect(data.Currency).to.be("EUR");
                expect(data.PreOrderDeliveryEnabled).to.be.a('boolean');
                expect(data.PreOrderDeliveryEnabled).to.be(false);
                expect(data.PreOrderPickupEnabled).to.be.a('boolean');
                expect(data.PreOrderPickupEnabled).to.be(false);
                expect(data.LogoUrl).to.be.a('string');
                expect(data.LogoUrl).to.be("");
                expect(data.PhoneNumber).to.be.a('string');
                expect(data.PhoneNumber).to.be("");
                expect(data.AlwaysAppearOpen).to.be.a('boolean');
                expect(data.AlwaysAppearOpen).to.be(false);
                expect(data.PreOrderEnabled).to.be.a('boolean');
                expect(data.PreOrderEnabled).to.be(false);
                expect(data.TakeOutEnabled).to.be.a('boolean');
                expect(data.TakeOutEnabled).to.be(false);
                expect(data.TableServiceEnabled).to.be.a('boolean');
                expect(data.TableServiceEnabled).to.be(false);
                expect(data.DineInEnabled).to.be.a('boolean');
                expect(data.DineInEnabled).to.be(false);
                expect(data.AllowPreOrdersAndTableService).to.be.a('boolean');
                expect(data.AllowPreOrdersAndTableService).to.be(false);
                expect(data.PickupEnabled).to.be.a('boolean');
                expect(data.PickupEnabled).to.be(false);
                expect(data.DeliveryEnabled).to.be.a('boolean');
                expect(data.DeliveryEnabled).to.be(false);
                expect(data.CardOrderDeliveryEnabled).to.be.a('boolean');
                expect(data.CardOrderDeliveryEnabled).to.be(false);
                expect(data.CashOrdersDeliveryEnabled).to.be.a('boolean');
                expect(data.CashOrdersDeliveryEnabled).to.be(false);
                expect(data.CardOrdersPickupEnabled).to.be.a('boolean');
                expect(data.CardOrdersPickupEnabled).to.be(false);
                expect(data.CashOrdersPickupEnabled).to.be.a('boolean');
                expect(data.CashOrdersPickupEnabled).to.be(false);
                expect(data.TipsEnabled).to.be.a('boolean');
                expect(data.TipsEnabled).to.be(false);
                expect(data.AutomaticallyAcceptOrders).to.be.a('boolean');
                expect(data.AutomaticallyAcceptOrders).to.be(false);
                expect(data.OpenForDelivery).to.be.a('boolean');
                expect(data.OpenForDelivery).to.be(false);
                expect(data.OpenForPickup).to.be.a('boolean');
                expect(data.OpenForPickup).to.be(false);
                expect(data.MinimumPickupOrderAmount).to.be.a('number');
                expect(data.MinimumPickupOrderAmount).to.be(0.0);
                expect(data.RequireCustomerNameForPickup).to.be.a('boolean');
                expect(data.RequireCustomerNameForPickup).to.be(false);
                expect(data.GdprCustomerPhoneNumbers).to.be.a('boolean');
                expect(data.GdprCustomerPhoneNumbers).to.be(false);
                expect(data.RequireCustomerNameForDelivery).to.be.a('boolean');
                expect(data.RequireCustomerNameForDelivery).to.be(false);
                expect(data.AllowChefNotes).to.be.a('boolean');
                expect(data.AllowChefNotes).to.be(false);
                expect(data.EtaInPickupConfirmationSmsEnabled).to.be.a('boolean');
                expect(data.EtaInPickupConfirmationSmsEnabled).to.be(false);
                expect(data.EtaInDeliveryConfirmationSmsEnabled).to.be.a('boolean');
                expect(data.EtaInDeliveryConfirmationSmsEnabled).to.be(false);
                expect(data.IsArchived).to.be.a('boolean');
                expect(data.IsArchived).to.be(false);
                expect(data.IsPublished).to.be.a('boolean');
                expect(data.IsPublished).to.be(false);
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.EmailAddress).to.be.a('string');
                expect(data.EmailAddress).to.be("");
                expect(data.StaffLanguage).to.be.a('string');
                expect(data.StaffLanguage).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStoresByAppId', function() {
        it('should call getStoresByAppId successfully', function(done) {
          // TODO: uncomment, update parameter values for getStoresByAppId call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.searchQuery = "searchQuery_example";
          opts.page = 56;
          opts.limit = 56;

          instance.getStoresByAppId(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultStore);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.Store);
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.StoreGroupId).to.be.a('number');
                expect(data.StoreGroupId).to.be(0);
                expect(data.Address).to.be.a(Flipdish.StoreAddress);
                      expect(data.Address.AddressId).to.be.a('number');
                  expect(data.Address.AddressId).to.be(0);
                  expect(data.Address.Coordinates).to.be.a(Flipdish.Coordinates);
                        expect(data.Address.Coordinates.Latitude).to.be.a('number');
                    expect(data.Address.Coordinates.Latitude).to.be(0.0);
                    expect(data.Address.Coordinates.Longitude).to.be.a('number');
                    expect(data.Address.Coordinates.Longitude).to.be(0.0);
                  expect(data.Address.Line1).to.be.a('string');
                  expect(data.Address.Line1).to.be("");
                  expect(data.Address.Postcode).to.be.a('string');
                  expect(data.Address.Postcode).to.be("");
                  expect(data.Address.City).to.be.a('string');
                  expect(data.Address.City).to.be("");
                  expect(data.Address.CountryCode).to.be.a('string');
                  expect(data.Address.CountryCode).to.be("");
                  expect(data.Address.DisplayForCustomer).to.be.a('string');
                  expect(data.Address.DisplayForCustomer).to.be("");
                {
                  let dataCtr = data.DeliveryZones;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.DeliveryZone);
                    expect(data.Id).to.be.a('number');
                    expect(data.Id).to.be(0);
                    expect(data.DeliveryFee).to.be.a('number');
                    expect(data.DeliveryFee).to.be(0.0);
                    expect(data.MinimumDeliveryOrderAmount).to.be.a('number');
                    expect(data.MinimumDeliveryOrderAmount).to.be(0.0);
                    expect(data.WellKnownText).to.be.a('string');
                    expect(data.WellKnownText).to.be("");
                    expect(data.IsEnabled).to.be.a('boolean');
                    expect(data.IsEnabled).to.be(false);
    
                          }
                }
                expect(data.ApmPhoneNumber).to.be.a('string');
                expect(data.ApmPhoneNumber).to.be("");
                {
                  let dataCtr = data.PickupHours;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                    expect(data.Early).to.be.a(Flipdish.Range);
                          expect(data.Early.StartTime).to.be.a('string');
                      expect(data.Early.StartTime).to.be("");
                      expect(data.Early.Period).to.be.a('string');
                      expect(data.Early.Period).to.be("");
                      expect(data.Early.DayOfWeek).to.be.a('string');
                      expect(data.Early.DayOfWeek).to.be("Sunday");
                    expect(data.Late).to.be.a(Flipdish.Range);
                          expect(data.Late.StartTime).to.be.a('string');
                      expect(data.Late.StartTime).to.be("");
                      expect(data.Late.Period).to.be.a('string');
                      expect(data.Late.Period).to.be("");
                      expect(data.Late.DayOfWeek).to.be.a('string');
                      expect(data.Late.DayOfWeek).to.be("Sunday");
                    {
                      let dataCtr = data.Ranges;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.Range);
                        expect(data.StartTime).to.be.a('string');
                        expect(data.StartTime).to.be("");
                        expect(data.Period).to.be.a('string');
                        expect(data.Period).to.be("");
                        expect(data.DayOfWeek).to.be.a('string');
                        expect(data.DayOfWeek).to.be("Sunday");
        
                              }
                    }
                    expect(data.DayOfWeek).to.be.a('string');
                    expect(data.DayOfWeek).to.be("Sunday");
                    expect(data.StartTime).to.be.a('string');
                    expect(data.StartTime).to.be("");
                    expect(data.Period).to.be.a('string');
                    expect(data.Period).to.be("");
                    expect(data.StartTimeEarly).to.be.a('string');
                    expect(data.StartTimeEarly).to.be("");
                    expect(data.PeriodEarly).to.be.a('string');
                    expect(data.PeriodEarly).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.DeliveryHours;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                    expect(data.Early).to.be.a(Flipdish.Range);
                          expect(data.Early.StartTime).to.be.a('string');
                      expect(data.Early.StartTime).to.be("");
                      expect(data.Early.Period).to.be.a('string');
                      expect(data.Early.Period).to.be("");
                      expect(data.Early.DayOfWeek).to.be.a('string');
                      expect(data.Early.DayOfWeek).to.be("Sunday");
                    expect(data.Late).to.be.a(Flipdish.Range);
                          expect(data.Late.StartTime).to.be.a('string');
                      expect(data.Late.StartTime).to.be("");
                      expect(data.Late.Period).to.be.a('string');
                      expect(data.Late.Period).to.be("");
                      expect(data.Late.DayOfWeek).to.be.a('string');
                      expect(data.Late.DayOfWeek).to.be("Sunday");
                    {
                      let dataCtr = data.Ranges;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.Range);
                        expect(data.StartTime).to.be.a('string');
                        expect(data.StartTime).to.be("");
                        expect(data.Period).to.be.a('string');
                        expect(data.Period).to.be("");
                        expect(data.DayOfWeek).to.be.a('string');
                        expect(data.DayOfWeek).to.be("Sunday");
        
                              }
                    }
                    expect(data.DayOfWeek).to.be.a('string');
                    expect(data.DayOfWeek).to.be("Sunday");
                    expect(data.StartTime).to.be.a('string');
                    expect(data.StartTime).to.be("");
                    expect(data.Period).to.be.a('string');
                    expect(data.Period).to.be("");
                    expect(data.StartTimeEarly).to.be.a('string');
                    expect(data.StartTimeEarly).to.be("");
                    expect(data.PeriodEarly).to.be.a('string');
                    expect(data.PeriodEarly).to.be("");
    
                          }
                }
                expect(data.MenuId).to.be.a('number');
                expect(data.MenuId).to.be(0);
                expect(data.OrderConfirmationMessageOverrideDelivery).to.be.a('string');
                expect(data.OrderConfirmationMessageOverrideDelivery).to.be("");
                expect(data.OrderConfirmationMessageOverridePickup).to.be.a('string');
                expect(data.OrderConfirmationMessageOverridePickup).to.be("");
                expect(data.PrintoutLayoutType).to.be.a('string');
                expect(data.PrintoutLayoutType).to.be("Default");
                {
                  let dataCtr = data.StoreNotes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.StoreNote);
                    expect(data.UserId).to.be.a('number');
                    expect(data.UserId).to.be(0);
                    expect(data.CreateTime).to.be.a(Date);
                    expect(data.CreateTime).to.be(new Date());
                    expect(data.Note).to.be.a('string');
                    expect(data.Note).to.be("");
    
                          }
                }
                expect(data.MicrosoftTimeZone).to.be.a('string');
                expect(data.MicrosoftTimeZone).to.be("");
                expect(data.IanaTimeZone).to.be.a('string');
                expect(data.IanaTimeZone).to.be("");
                expect(data.Currency).to.be.a('string');
                expect(data.Currency).to.be("EUR");
                expect(data.PreOrderDeliveryEnabled).to.be.a('boolean');
                expect(data.PreOrderDeliveryEnabled).to.be(false);
                expect(data.PreOrderPickupEnabled).to.be.a('boolean');
                expect(data.PreOrderPickupEnabled).to.be(false);
                expect(data.LogoUrl).to.be.a('string');
                expect(data.LogoUrl).to.be("");
                expect(data.PhoneNumber).to.be.a('string');
                expect(data.PhoneNumber).to.be("");
                expect(data.AlwaysAppearOpen).to.be.a('boolean');
                expect(data.AlwaysAppearOpen).to.be(false);
                expect(data.PreOrderEnabled).to.be.a('boolean');
                expect(data.PreOrderEnabled).to.be(false);
                expect(data.TakeOutEnabled).to.be.a('boolean');
                expect(data.TakeOutEnabled).to.be(false);
                expect(data.TableServiceEnabled).to.be.a('boolean');
                expect(data.TableServiceEnabled).to.be(false);
                expect(data.DineInEnabled).to.be.a('boolean');
                expect(data.DineInEnabled).to.be(false);
                expect(data.AllowPreOrdersAndTableService).to.be.a('boolean');
                expect(data.AllowPreOrdersAndTableService).to.be(false);
                expect(data.PickupEnabled).to.be.a('boolean');
                expect(data.PickupEnabled).to.be(false);
                expect(data.DeliveryEnabled).to.be.a('boolean');
                expect(data.DeliveryEnabled).to.be(false);
                expect(data.CardOrderDeliveryEnabled).to.be.a('boolean');
                expect(data.CardOrderDeliveryEnabled).to.be(false);
                expect(data.CashOrdersDeliveryEnabled).to.be.a('boolean');
                expect(data.CashOrdersDeliveryEnabled).to.be(false);
                expect(data.CardOrdersPickupEnabled).to.be.a('boolean');
                expect(data.CardOrdersPickupEnabled).to.be(false);
                expect(data.CashOrdersPickupEnabled).to.be.a('boolean');
                expect(data.CashOrdersPickupEnabled).to.be(false);
                expect(data.TipsEnabled).to.be.a('boolean');
                expect(data.TipsEnabled).to.be(false);
                expect(data.AutomaticallyAcceptOrders).to.be.a('boolean');
                expect(data.AutomaticallyAcceptOrders).to.be(false);
                expect(data.OpenForDelivery).to.be.a('boolean');
                expect(data.OpenForDelivery).to.be(false);
                expect(data.OpenForPickup).to.be.a('boolean');
                expect(data.OpenForPickup).to.be(false);
                expect(data.MinimumPickupOrderAmount).to.be.a('number');
                expect(data.MinimumPickupOrderAmount).to.be(0.0);
                expect(data.RequireCustomerNameForPickup).to.be.a('boolean');
                expect(data.RequireCustomerNameForPickup).to.be(false);
                expect(data.GdprCustomerPhoneNumbers).to.be.a('boolean');
                expect(data.GdprCustomerPhoneNumbers).to.be(false);
                expect(data.RequireCustomerNameForDelivery).to.be.a('boolean');
                expect(data.RequireCustomerNameForDelivery).to.be(false);
                expect(data.AllowChefNotes).to.be.a('boolean');
                expect(data.AllowChefNotes).to.be(false);
                expect(data.EtaInPickupConfirmationSmsEnabled).to.be.a('boolean');
                expect(data.EtaInPickupConfirmationSmsEnabled).to.be(false);
                expect(data.EtaInDeliveryConfirmationSmsEnabled).to.be.a('boolean');
                expect(data.EtaInDeliveryConfirmationSmsEnabled).to.be(false);
                expect(data.IsArchived).to.be.a('boolean');
                expect(data.IsArchived).to.be(false);
                expect(data.IsPublished).to.be.a('boolean');
                expect(data.IsPublished).to.be(false);
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.EmailAddress).to.be.a('string');
                expect(data.EmailAddress).to.be("");
                expect(data.StaffLanguage).to.be.a('string');
                expect(data.StaffLanguage).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publishStore', function() {
        it('should call publishStore successfully', function(done) {
          // TODO: uncomment, update parameter values for publishStore call
          /*
          var storeId = 56;

          instance.publishStore(storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setBusinessHours', function() {
        it('should call setBusinessHours successfully', function(done) {
          // TODO: uncomment, update parameter values for setBusinessHours call and complete the assertions
          /*
          var storeId = 56;
          var deliveryType = "deliveryType_example";
          var businessHoursPeriod = new Flipdish.BusinessHoursPeriodBase();
          businessHoursPeriod.DayOfWeek = "Sunday";
          businessHoursPeriod.StartTime = "";
          businessHoursPeriod.Period = "";
          businessHoursPeriod.StartTimeEarly = "";
          businessHoursPeriod.PeriodEarly = "";

          instance.setBusinessHours(storeId, deliveryType, businessHoursPeriod, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultBusinessHoursPeriod);
            expect(data.Data).to.be.a(Flipdish.BusinessHoursPeriod);
                  expect(data.Data.Early).to.be.a(Flipdish.Range);
                    expect(data.Data.Early.StartTime).to.be.a('string');
                expect(data.Data.Early.StartTime).to.be("");
                expect(data.Data.Early.Period).to.be.a('string');
                expect(data.Data.Early.Period).to.be("");
                expect(data.Data.Early.DayOfWeek).to.be.a('string');
                expect(data.Data.Early.DayOfWeek).to.be("Sunday");
              expect(data.Data.Late).to.be.a(Flipdish.Range);
                    expect(data.Data.Late.StartTime).to.be.a('string');
                expect(data.Data.Late.StartTime).to.be("");
                expect(data.Data.Late.Period).to.be.a('string');
                expect(data.Data.Late.Period).to.be("");
                expect(data.Data.Late.DayOfWeek).to.be.a('string');
                expect(data.Data.Late.DayOfWeek).to.be("Sunday");
              {
                let dataCtr = data.Data.Ranges;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.Range);
                  expect(data.StartTime).to.be.a('string');
                  expect(data.StartTime).to.be("");
                  expect(data.Period).to.be.a('string');
                  expect(data.Period).to.be("");
                  expect(data.DayOfWeek).to.be.a('string');
                  expect(data.DayOfWeek).to.be("Sunday");
  
                        }
              }
              expect(data.Data.DayOfWeek).to.be.a('string');
              expect(data.Data.DayOfWeek).to.be("Sunday");
              expect(data.Data.StartTime).to.be.a('string');
              expect(data.Data.StartTime).to.be("");
              expect(data.Data.Period).to.be.a('string');
              expect(data.Data.Period).to.be("");
              expect(data.Data.StartTimeEarly).to.be.a('string');
              expect(data.Data.StartTimeEarly).to.be("");
              expect(data.Data.PeriodEarly).to.be.a('string');
              expect(data.Data.PeriodEarly).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setPreOrdeEnabled', function() {
        it('should call setPreOrdeEnabled successfully', function(done) {
          // TODO: uncomment, update parameter values for setPreOrdeEnabled call and complete the assertions
          /*
          var storeId = 56;
          var deliveryType = "deliveryType_example";
          var enabled = true;

          instance.setPreOrdeEnabled(storeId, deliveryType, enabled, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultRestApiDefaultResponse);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.RestApiDefaultResponse);
                expect(data.Data).to.be.a('string');
                expect(data.Data).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unpublishStore', function() {
        it('should call unpublishStore successfully', function(done) {
          // TODO: uncomment, update parameter values for unpublishStore call
          /*
          var storeId = 56;

          instance.unpublishStore(storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePreOrderConfig', function() {
        it('should call updatePreOrderConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePreOrderConfig call and complete the assertions
          /*
          var storeId = 56;
          var deliveryType = "deliveryType_example";
          var preOrderConfig = new Flipdish.PreOrderConfig();
          preOrderConfig.LeadTimeMinutes = 0;
          preOrderConfig.IntervalMinutes = 0;
          preOrderConfig.MaxOrderAheadDays = 0;
          preOrderConfig.IncludeAsap = false;
          preOrderConfig.IncludeMoreGranularInitialTime = false;
          preOrderConfig.CutOffTimePreviousDayBasic = "";
          preOrderConfig.CutOffTimeCurrentDayBasic = "";
          preOrderConfig.PreOrderTimeDisplayType = "SingleTime";
          preOrderConfig.AlwaysAppearOpen = false;
          preOrderConfig.RequireExplicitSelectAlways = false;

          instance.updatePreOrderConfig(storeId, deliveryType, preOrderConfig, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultRestApiDefaultResponse);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.RestApiDefaultResponse);
                expect(data.Data).to.be.a('string');
                expect(data.Data).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateStore', function() {
        it('should call updateStore successfully', function(done) {
          // TODO: uncomment, update parameter values for updateStore call and complete the assertions
          /*
          var storeId = 56;
          var store = new Flipdish.StoreBase();
          store.PhoneNumber = "";
          store.AlwaysAppearOpen = false;
          store.PreOrderEnabled = false;
          store.TakeOutEnabled = false;
          store.TableServiceEnabled = false;
          store.DineInEnabled = false;
          store.AllowPreOrdersAndTableService = false;
          store.PickupEnabled = false;
          store.DeliveryEnabled = false;
          store.CardOrderDeliveryEnabled = false;
          store.CashOrdersDeliveryEnabled = false;
          store.CardOrdersPickupEnabled = false;
          store.CashOrdersPickupEnabled = false;
          store.TipsEnabled = false;
          store.AutomaticallyAcceptOrders = false;
          store.OpenForDelivery = false;
          store.OpenForPickup = false;
          store.MinimumPickupOrderAmount = 0.0;
          store.RequireCustomerNameForPickup = false;
          store.GdprCustomerPhoneNumbers = false;
          store.RequireCustomerNameForDelivery = false;
          store.AllowChefNotes = false;
          store.EtaInPickupConfirmationSmsEnabled = false;
          store.EtaInDeliveryConfirmationSmsEnabled = false;
          store.IsArchived = false;
          store.IsPublished = false;
          store.Name = "";
          store.EmailAddress = "";
          store.StaffLanguage = "";

          instance.updateStore(storeId, store, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStore);
            expect(data.Data).to.be.a(Flipdish.Store);
                  expect(data.Data.StoreId).to.be.a('number');
              expect(data.Data.StoreId).to.be(0);
              expect(data.Data.StoreGroupId).to.be.a('number');
              expect(data.Data.StoreGroupId).to.be(0);
              expect(data.Data.Address).to.be.a(Flipdish.StoreAddress);
                    expect(data.Data.Address.AddressId).to.be.a('number');
                expect(data.Data.Address.AddressId).to.be(0);
                expect(data.Data.Address.Coordinates).to.be.a(Flipdish.Coordinates);
                      expect(data.Data.Address.Coordinates.Latitude).to.be.a('number');
                  expect(data.Data.Address.Coordinates.Latitude).to.be(0.0);
                  expect(data.Data.Address.Coordinates.Longitude).to.be.a('number');
                  expect(data.Data.Address.Coordinates.Longitude).to.be(0.0);
                expect(data.Data.Address.Line1).to.be.a('string');
                expect(data.Data.Address.Line1).to.be("");
                expect(data.Data.Address.Postcode).to.be.a('string');
                expect(data.Data.Address.Postcode).to.be("");
                expect(data.Data.Address.City).to.be.a('string');
                expect(data.Data.Address.City).to.be("");
                expect(data.Data.Address.CountryCode).to.be.a('string');
                expect(data.Data.Address.CountryCode).to.be("");
                expect(data.Data.Address.DisplayForCustomer).to.be.a('string');
                expect(data.Data.Address.DisplayForCustomer).to.be("");
              {
                let dataCtr = data.Data.DeliveryZones;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.DeliveryZone);
                  expect(data.Id).to.be.a('number');
                  expect(data.Id).to.be(0);
                  expect(data.DeliveryFee).to.be.a('number');
                  expect(data.DeliveryFee).to.be(0.0);
                  expect(data.MinimumDeliveryOrderAmount).to.be.a('number');
                  expect(data.MinimumDeliveryOrderAmount).to.be(0.0);
                  expect(data.WellKnownText).to.be.a('string');
                  expect(data.WellKnownText).to.be("");
                  expect(data.IsEnabled).to.be.a('boolean');
                  expect(data.IsEnabled).to.be(false);
  
                        }
              }
              expect(data.Data.ApmPhoneNumber).to.be.a('string');
              expect(data.Data.ApmPhoneNumber).to.be("");
              {
                let dataCtr = data.Data.PickupHours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                  expect(data.Early).to.be.a(Flipdish.Range);
                        expect(data.Early.StartTime).to.be.a('string');
                    expect(data.Early.StartTime).to.be("");
                    expect(data.Early.Period).to.be.a('string');
                    expect(data.Early.Period).to.be("");
                    expect(data.Early.DayOfWeek).to.be.a('string');
                    expect(data.Early.DayOfWeek).to.be("Sunday");
                  expect(data.Late).to.be.a(Flipdish.Range);
                        expect(data.Late.StartTime).to.be.a('string');
                    expect(data.Late.StartTime).to.be("");
                    expect(data.Late.Period).to.be.a('string');
                    expect(data.Late.Period).to.be("");
                    expect(data.Late.DayOfWeek).to.be.a('string');
                    expect(data.Late.DayOfWeek).to.be("Sunday");
                  {
                    let dataCtr = data.Ranges;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.Range);
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
      
                            }
                  }
                  expect(data.DayOfWeek).to.be.a('string');
                  expect(data.DayOfWeek).to.be("Sunday");
                  expect(data.StartTime).to.be.a('string');
                  expect(data.StartTime).to.be("");
                  expect(data.Period).to.be.a('string');
                  expect(data.Period).to.be("");
                  expect(data.StartTimeEarly).to.be.a('string');
                  expect(data.StartTimeEarly).to.be("");
                  expect(data.PeriodEarly).to.be.a('string');
                  expect(data.PeriodEarly).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.DeliveryHours;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                  expect(data.Early).to.be.a(Flipdish.Range);
                        expect(data.Early.StartTime).to.be.a('string');
                    expect(data.Early.StartTime).to.be("");
                    expect(data.Early.Period).to.be.a('string');
                    expect(data.Early.Period).to.be("");
                    expect(data.Early.DayOfWeek).to.be.a('string');
                    expect(data.Early.DayOfWeek).to.be("Sunday");
                  expect(data.Late).to.be.a(Flipdish.Range);
                        expect(data.Late.StartTime).to.be.a('string');
                    expect(data.Late.StartTime).to.be("");
                    expect(data.Late.Period).to.be.a('string');
                    expect(data.Late.Period).to.be("");
                    expect(data.Late.DayOfWeek).to.be.a('string');
                    expect(data.Late.DayOfWeek).to.be("Sunday");
                  {
                    let dataCtr = data.Ranges;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.Range);
                      expect(data.StartTime).to.be.a('string');
                      expect(data.StartTime).to.be("");
                      expect(data.Period).to.be.a('string');
                      expect(data.Period).to.be("");
                      expect(data.DayOfWeek).to.be.a('string');
                      expect(data.DayOfWeek).to.be("Sunday");
      
                            }
                  }
                  expect(data.DayOfWeek).to.be.a('string');
                  expect(data.DayOfWeek).to.be("Sunday");
                  expect(data.StartTime).to.be.a('string');
                  expect(data.StartTime).to.be("");
                  expect(data.Period).to.be.a('string');
                  expect(data.Period).to.be("");
                  expect(data.StartTimeEarly).to.be.a('string');
                  expect(data.StartTimeEarly).to.be("");
                  expect(data.PeriodEarly).to.be.a('string');
                  expect(data.PeriodEarly).to.be("");
  
                        }
              }
              expect(data.Data.MenuId).to.be.a('number');
              expect(data.Data.MenuId).to.be(0);
              expect(data.Data.OrderConfirmationMessageOverrideDelivery).to.be.a('string');
              expect(data.Data.OrderConfirmationMessageOverrideDelivery).to.be("");
              expect(data.Data.OrderConfirmationMessageOverridePickup).to.be.a('string');
              expect(data.Data.OrderConfirmationMessageOverridePickup).to.be("");
              expect(data.Data.PrintoutLayoutType).to.be.a('string');
              expect(data.Data.PrintoutLayoutType).to.be("Default");
              {
                let dataCtr = data.Data.StoreNotes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StoreNote);
                  expect(data.UserId).to.be.a('number');
                  expect(data.UserId).to.be(0);
                  expect(data.CreateTime).to.be.a(Date);
                  expect(data.CreateTime).to.be(new Date());
                  expect(data.Note).to.be.a('string');
                  expect(data.Note).to.be("");
  
                        }
              }
              expect(data.Data.MicrosoftTimeZone).to.be.a('string');
              expect(data.Data.MicrosoftTimeZone).to.be("");
              expect(data.Data.IanaTimeZone).to.be.a('string');
              expect(data.Data.IanaTimeZone).to.be("");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("EUR");
              expect(data.Data.PreOrderDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderDeliveryEnabled).to.be(false);
              expect(data.Data.PreOrderPickupEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderPickupEnabled).to.be(false);
              expect(data.Data.LogoUrl).to.be.a('string');
              expect(data.Data.LogoUrl).to.be("");
              expect(data.Data.PhoneNumber).to.be.a('string');
              expect(data.Data.PhoneNumber).to.be("");
              expect(data.Data.AlwaysAppearOpen).to.be.a('boolean');
              expect(data.Data.AlwaysAppearOpen).to.be(false);
              expect(data.Data.PreOrderEnabled).to.be.a('boolean');
              expect(data.Data.PreOrderEnabled).to.be(false);
              expect(data.Data.TakeOutEnabled).to.be.a('boolean');
              expect(data.Data.TakeOutEnabled).to.be(false);
              expect(data.Data.TableServiceEnabled).to.be.a('boolean');
              expect(data.Data.TableServiceEnabled).to.be(false);
              expect(data.Data.DineInEnabled).to.be.a('boolean');
              expect(data.Data.DineInEnabled).to.be(false);
              expect(data.Data.AllowPreOrdersAndTableService).to.be.a('boolean');
              expect(data.Data.AllowPreOrdersAndTableService).to.be(false);
              expect(data.Data.PickupEnabled).to.be.a('boolean');
              expect(data.Data.PickupEnabled).to.be(false);
              expect(data.Data.DeliveryEnabled).to.be.a('boolean');
              expect(data.Data.DeliveryEnabled).to.be(false);
              expect(data.Data.CardOrderDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.CardOrderDeliveryEnabled).to.be(false);
              expect(data.Data.CashOrdersDeliveryEnabled).to.be.a('boolean');
              expect(data.Data.CashOrdersDeliveryEnabled).to.be(false);
              expect(data.Data.CardOrdersPickupEnabled).to.be.a('boolean');
              expect(data.Data.CardOrdersPickupEnabled).to.be(false);
              expect(data.Data.CashOrdersPickupEnabled).to.be.a('boolean');
              expect(data.Data.CashOrdersPickupEnabled).to.be(false);
              expect(data.Data.TipsEnabled).to.be.a('boolean');
              expect(data.Data.TipsEnabled).to.be(false);
              expect(data.Data.AutomaticallyAcceptOrders).to.be.a('boolean');
              expect(data.Data.AutomaticallyAcceptOrders).to.be(false);
              expect(data.Data.OpenForDelivery).to.be.a('boolean');
              expect(data.Data.OpenForDelivery).to.be(false);
              expect(data.Data.OpenForPickup).to.be.a('boolean');
              expect(data.Data.OpenForPickup).to.be(false);
              expect(data.Data.MinimumPickupOrderAmount).to.be.a('number');
              expect(data.Data.MinimumPickupOrderAmount).to.be(0.0);
              expect(data.Data.RequireCustomerNameForPickup).to.be.a('boolean');
              expect(data.Data.RequireCustomerNameForPickup).to.be(false);
              expect(data.Data.GdprCustomerPhoneNumbers).to.be.a('boolean');
              expect(data.Data.GdprCustomerPhoneNumbers).to.be(false);
              expect(data.Data.RequireCustomerNameForDelivery).to.be.a('boolean');
              expect(data.Data.RequireCustomerNameForDelivery).to.be(false);
              expect(data.Data.AllowChefNotes).to.be.a('boolean');
              expect(data.Data.AllowChefNotes).to.be(false);
              expect(data.Data.EtaInPickupConfirmationSmsEnabled).to.be.a('boolean');
              expect(data.Data.EtaInPickupConfirmationSmsEnabled).to.be(false);
              expect(data.Data.EtaInDeliveryConfirmationSmsEnabled).to.be.a('boolean');
              expect(data.Data.EtaInDeliveryConfirmationSmsEnabled).to.be(false);
              expect(data.Data.IsArchived).to.be.a('boolean');
              expect(data.Data.IsArchived).to.be(false);
              expect(data.Data.IsPublished).to.be.a('boolean');
              expect(data.Data.IsPublished).to.be(false);
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.EmailAddress).to.be.a('string');
              expect(data.Data.EmailAddress).to.be("");
              expect(data.Data.StaffLanguage).to.be.a('string');
              expect(data.Data.StaffLanguage).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateStoreAddress', function() {
        it('should call updateStoreAddress successfully', function(done) {
          // TODO: uncomment, update parameter values for updateStoreAddress call and complete the assertions
          /*
          var storeId = 56;
          var storeAddress = new Flipdish.StoreAddressBase();
          storeAddress.Line1 = "";
          storeAddress.Postcode = "";
          storeAddress.City = "";
          storeAddress.CountryCode = "";
          storeAddress.DisplayForCustomer = "";

          instance.updateStoreAddress(storeId, storeAddress, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStoreAddress);
            expect(data.Data).to.be.a(Flipdish.StoreAddress);
                  expect(data.Data.AddressId).to.be.a('number');
              expect(data.Data.AddressId).to.be(0);
              expect(data.Data.Coordinates).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.Coordinates.Latitude).to.be.a('number');
                expect(data.Data.Coordinates.Latitude).to.be(0.0);
                expect(data.Data.Coordinates.Longitude).to.be.a('number');
                expect(data.Data.Coordinates.Longitude).to.be(0.0);
              expect(data.Data.Line1).to.be.a('string');
              expect(data.Data.Line1).to.be("");
              expect(data.Data.Postcode).to.be.a('string');
              expect(data.Data.Postcode).to.be("");
              expect(data.Data.City).to.be.a('string');
              expect(data.Data.City).to.be("");
              expect(data.Data.CountryCode).to.be.a('string');
              expect(data.Data.CountryCode).to.be("");
              expect(data.Data.DisplayForCustomer).to.be.a('string');
              expect(data.Data.DisplayForCustomer).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateStoreAddressCoordinates', function() {
        it('should call updateStoreAddressCoordinates successfully', function(done) {
          // TODO: uncomment, update parameter values for updateStoreAddressCoordinates call and complete the assertions
          /*
          var storeId = 56;
          var coordinates = new Flipdish.Coordinates();
          coordinates.Latitude = 0.0;
          coordinates.Longitude = 0.0;
          var opts = {};
          opts.appNameId = "appNameId_example";

          instance.updateStoreAddressCoordinates(storeId, coordinates, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultCoordinates);
            expect(data.Data).to.be.a(Flipdish.Coordinates);
                  expect(data.Data.Latitude).to.be.a('number');
              expect(data.Data.Latitude).to.be(0.0);
              expect(data.Data.Longitude).to.be.a('number');
              expect(data.Data.Longitude).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
