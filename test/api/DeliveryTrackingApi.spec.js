/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.DeliveryTrackingApi();
  });

  describe('(package)', function() {
    describe('DeliveryTrackingApi', function() {
      describe('assignDriverToOrder', function() {
        it('should call assignDriverToOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for assignDriverToOrder call
          /*
          var appId = "appId_example";
          var orderId = 56;
          var driverId = 56;

          instance.assignDriverToOrder(appId, orderId, driverId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('assignDriverToOrders', function() {
        it('should call assignDriverToOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for assignDriverToOrders call
          /*
          var appId = "appId_example";
          var driverId = 56;
          var orderIdAndSequenceNumbers = [new Flipdish.OrderIdAndSequenceNumber()];
          orderIdAndSequenceNumbers[0].OrderId = 0;
          orderIdAndSequenceNumbers[0].Sequence = 0;

          instance.assignDriverToOrders(appId, driverId, orderIdAndSequenceNumbers, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDrivers', function() {
        it('should call getDrivers successfully', function(done) {
          // TODO: uncomment, update parameter values for getDrivers call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.name = "name_example";
          opts.phoneNumber = "phoneNumber_example";
          opts.storeId = 56;
          opts.presence = "presence_example";

          instance.getDrivers(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultDriver);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.Driver);
                expect(data.UserId).to.be.a('number');
                expect(data.UserId).to.be(0);
                expect(data.UserName).to.be.a('string');
                expect(data.UserName).to.be("");
                expect(data.UserPhoneNumber).to.be.a('string');
                expect(data.UserPhoneNumber).to.be("");
                {
                  let dataCtr = data.Stores;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.DriverStore);
                    expect(data.StoreId).to.be.a('number');
                    expect(data.StoreId).to.be(0);
                    expect(data.StoreName).to.be.a('string');
                    expect(data.StoreName).to.be("");
                    expect(data.Presence).to.be.a('string');
                    expect(data.Presence).to.be("Offline");
    
                          }
                }
                expect(data.ProfileImageUrl).to.be.a('string');
                expect(data.ProfileImageUrl).to.be("");
                expect(data.DriverKey).to.be.a('string');
                expect(data.DriverKey).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('inviteDriverToApp', function() {
        it('should call inviteDriverToApp successfully', function(done) {
          // TODO: uncomment, update parameter values for inviteDriverToApp call and complete the assertions
          /*
          var appId = "appId_example";
          var driverInvitation = new Flipdish.DriverInvitation();
          driverInvitation.PhoneNumber = "";
          driverInvitation.Name = "";
          driverInvitation.StoreIds = [0];

          instance.inviteDriverToApp(appId, driverInvitation, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultDriver);
            expect(data.Data).to.be.a(Flipdish.Driver);
                  expect(data.Data.UserId).to.be.a('number');
              expect(data.Data.UserId).to.be(0);
              expect(data.Data.UserName).to.be.a('string');
              expect(data.Data.UserName).to.be("");
              expect(data.Data.UserPhoneNumber).to.be.a('string');
              expect(data.Data.UserPhoneNumber).to.be("");
              {
                let dataCtr = data.Data.Stores;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.DriverStore);
                  expect(data.StoreId).to.be.a('number');
                  expect(data.StoreId).to.be(0);
                  expect(data.StoreName).to.be.a('string');
                  expect(data.StoreName).to.be("");
                  expect(data.Presence).to.be.a('string');
                  expect(data.Presence).to.be("Offline");
  
                        }
              }
              expect(data.Data.ProfileImageUrl).to.be.a('string');
              expect(data.Data.ProfileImageUrl).to.be("");
              expect(data.Data.DriverKey).to.be.a('string');
              expect(data.Data.DriverKey).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeDriverFromApp', function() {
        it('should call removeDriverFromApp successfully', function(done) {
          // TODO: uncomment, update parameter values for removeDriverFromApp call
          /*
          var appId = "appId_example";
          var driverId = 56;

          instance.removeDriverFromApp(appId, driverId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unassignDriverFromOrder', function() {
        it('should call unassignDriverFromOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for unassignDriverFromOrder call
          /*
          var appId = "appId_example";
          var orderId = 56;

          instance.unassignDriverFromOrder(appId, orderId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
