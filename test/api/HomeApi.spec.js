/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.HomeApi();
  });

  describe('(package)', function() {
    describe('HomeApi', function() {
      describe('completeHomeAction', function() {
        it('should call completeHomeAction successfully', function(done) {
          // TODO: uncomment, update parameter values for completeHomeAction call and complete the assertions
          /*
          var appId = "appId_example";
          var homeActionId = 56;
          var isDismissed = true;

          instance.completeHomeAction(appId, homeActionId, isDismissed, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dismissOldPortalAction', function() {
        it('should call dismissOldPortalAction successfully', function(done) {
          // TODO: uncomment dismissOldPortalAction call and complete the assertions
          /*

          instance.dismissOldPortalAction(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHomeActions', function() {
        it('should call getHomeActions successfully', function(done) {
          // TODO: uncomment, update parameter values for getHomeActions call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getHomeActions(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultHomeAction);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.HomeAction);
                expect(data.HomeActionId).to.be.a('number');
                expect(data.HomeActionId).to.be(0);
                expect(data.HomeActionType).to.be.a('string');
                expect(data.HomeActionType).to.be("Portal");
                expect(data.Order).to.be.a('number');
                expect(data.Order).to.be(0);
                expect(data.TitleKey).to.be.a('string');
                expect(data.TitleKey).to.be("");
                expect(data.ActionKey).to.be.a('string');
                expect(data.ActionKey).to.be("");
                expect(data.DescriptionKey).to.be.a('string');
                expect(data.DescriptionKey).to.be("");
                expect(data.Action).to.be.a('string');
                expect(data.Action).to.be("");
                expect(data.Dismissible).to.be.a('boolean');
                expect(data.Dismissible).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHomeStatistics', function() {
        it('should call getHomeStatistics successfully', function(done) {
          // TODO: uncomment, update parameter values for getHomeStatistics call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getHomeStatistics(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultHomeStatistics);
            expect(data.Data).to.be.a(Flipdish.HomeStatistics);
                  {
                let dataCtr = data.Data.TotalMoneySaved;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.CurrencyData);
                  expect(data.Currency).to.be.a('string');
                  expect(data.Currency).to.be("EUR");
                  expect(data.Value).to.be.a('number');
                  expect(data.Value).to.be(0.0);
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
