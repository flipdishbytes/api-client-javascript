/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.StoreOrderCapacityApi();
  });

  describe('(package)', function() {
    describe('StoreOrderCapacityApi', function() {
      describe('getStoreOrderCapacity', function() {
        it('should call getStoreOrderCapacity successfully', function(done) {
          // TODO: uncomment, update parameter values for getStoreOrderCapacity call and complete the assertions
          /*
          var appId = "appId_example";
          var storeId = 56;
          var deliveryType = "deliveryType_example";

          instance.getStoreOrderCapacity(appId, storeId, deliveryType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStoreOrderCapacityConfig);
            expect(data.Data).to.be.a(Flipdish.StoreOrderCapacityConfig);
                  expect(data.Data.StoreId).to.be.a('number');
              expect(data.Data.StoreId).to.be(0);
              expect(data.Data.DeliveryType).to.be.a('string');
              expect(data.Data.DeliveryType).to.be("Delivery");
              expect(data.Data.StoreIntervalInMinutes).to.be.a('number');
              expect(data.Data.StoreIntervalInMinutes).to.be(0);
              {
                let dataCtr = data.Data.OrderCapacityPeriods;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StoreOrderCapacityPeriod);
                  expect(data.MaxOrderNumberPerStoreInterval).to.be.a('number');
                  expect(data.MaxOrderNumberPerStoreInterval).to.be(0);
                  expect(data.DayOfTheWeek).to.be.a('string');
                  expect(data.DayOfTheWeek).to.be("Sunday");
                  expect(data.PeriodStartHour).to.be.a('number');
                  expect(data.PeriodStartHour).to.be(0);
                  expect(data.PeriodStartMinutes).to.be.a('number');
                  expect(data.PeriodStartMinutes).to.be(0);
                  expect(data.PeriodEndHour).to.be.a('number');
                  expect(data.PeriodEndHour).to.be(0);
                  expect(data.PeriodEndMinutes).to.be.a('number');
                  expect(data.PeriodEndMinutes).to.be(0);
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateStoreOrderCapacityConfig', function() {
        it('should call updateStoreOrderCapacityConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for updateStoreOrderCapacityConfig call
          /*
          var storeId = 56;
          var deliveryType = "deliveryType_example";
          var newOrderCapacityConfig = new Flipdish.StoreOrderCapacityConfigEditModel();
          newOrderCapacityConfig.OrderCapacityPeriods = [new Flipdish.StoreOrderCapacityPeriod()];
          newOrderCapacityConfig.OrderCapacityPeriods[0].MaxOrderNumberPerStoreInterval = 0;
          newOrderCapacityConfig.OrderCapacityPeriods[0].DayOfTheWeek = "Sunday";
          newOrderCapacityConfig.OrderCapacityPeriods[0].PeriodStartHour = 0;
          newOrderCapacityConfig.OrderCapacityPeriods[0].PeriodStartMinutes = 0;
          newOrderCapacityConfig.OrderCapacityPeriods[0].PeriodEndHour = 0;
          newOrderCapacityConfig.OrderCapacityPeriods[0].PeriodEndMinutes = 0;
          var appId = "appId_example";

          instance.updateStoreOrderCapacityConfig(storeId, deliveryType, newOrderCapacityConfig, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
