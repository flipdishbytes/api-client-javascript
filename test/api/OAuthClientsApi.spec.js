/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.OAuthClientsApi();
  });

  describe('(package)', function() {
    describe('OAuthClientsApi', function() {
      describe('addRedirectUri', function() {
        it('should call addRedirectUri successfully', function(done) {
          // TODO: uncomment, update parameter values for addRedirectUri call and complete the assertions
          /*
          var oauthAppId = "oauthAppId_example";
          var uri = "uri_example";
          var appId = "appId_example";

          instance.addRedirectUri(oauthAppId, uri, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultOauthClientRedirectUri);
            expect(data.Data).to.be.a(Flipdish.OauthClientRedirectUri);
                  expect(data.Data.Id).to.be.a('number');
              expect(data.Data.Id).to.be(0);
              expect(data.Data.Uri).to.be.a('string');
              expect(data.Data.Uri).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOAuthApp', function() {
        it('should call createOAuthApp successfully', function(done) {
          // TODO: uncomment, update parameter values for createOAuthApp call
          /*
          var oAuthApp = new Flipdish.OAuthApp();
          oAuthApp.OauthAppId = "";
          oAuthApp.OauthAppName = "";
          oAuthApp.OwnerUserId = 0;
          oAuthApp.LogoUri = "";
          oAuthApp.Flow = "AuthorizationCode";
          oAuthApp.RefreshTokenUsage = "ReUse";
          oAuthApp.AccessTokenLifetime = 0;
          oAuthApp.AbsoluteRefreshTokenLifetime = 0;
          var appId = "appId_example";

          instance.createOAuthApp(oAuthApp, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOAuthApp', function() {
        it('should call deleteOAuthApp successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOAuthApp call
          /*
          var oauthAppId = "oauthAppId_example";
          var appId = "appId_example";

          instance.deleteOAuthApp(oauthAppId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOAuthApps', function() {
        it('should call getOAuthApps successfully', function(done) {
          // TODO: uncomment, update parameter values for getOAuthApps call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.oauthAppName = "oauthAppName_example";

          instance.getOAuthApps(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultOAuthApp);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.OAuthApp);
                expect(data.OauthAppId).to.be.a('string');
                expect(data.OauthAppId).to.be("");
                expect(data.OauthAppName).to.be.a('string');
                expect(data.OauthAppName).to.be("");
                expect(data.OwnerUserId).to.be.a('number');
                expect(data.OwnerUserId).to.be(0);
                expect(data.LogoUri).to.be.a('string');
                expect(data.LogoUri).to.be("");
                expect(data.Flow).to.be.a('string');
                expect(data.Flow).to.be("AuthorizationCode");
                expect(data.RefreshTokenUsage).to.be.a('string');
                expect(data.RefreshTokenUsage).to.be("ReUse");
                expect(data.AccessTokenLifetime).to.be.a('number');
                expect(data.AccessTokenLifetime).to.be(0);
                expect(data.AbsoluteRefreshTokenLifetime).to.be.a('number');
                expect(data.AbsoluteRefreshTokenLifetime).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOAuthClientByClientId', function() {
        it('should call getOAuthClientByClientId successfully', function(done) {
          // TODO: uncomment, update parameter values for getOAuthClientByClientId call and complete the assertions
          /*
          var oauthAppId = "oauthAppId_example";
          var appId = "appId_example";

          instance.getOAuthClientByClientId(oauthAppId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultOAuthApp);
            expect(data.Data).to.be.a(Flipdish.OAuthApp);
                  expect(data.Data.OauthAppId).to.be.a('string');
              expect(data.Data.OauthAppId).to.be("");
              expect(data.Data.OauthAppName).to.be.a('string');
              expect(data.Data.OauthAppName).to.be("");
              expect(data.Data.OwnerUserId).to.be.a('number');
              expect(data.Data.OwnerUserId).to.be(0);
              expect(data.Data.LogoUri).to.be.a('string');
              expect(data.Data.LogoUri).to.be("");
              expect(data.Data.Flow).to.be.a('string');
              expect(data.Data.Flow).to.be("AuthorizationCode");
              expect(data.Data.RefreshTokenUsage).to.be.a('string');
              expect(data.Data.RefreshTokenUsage).to.be("ReUse");
              expect(data.Data.AccessTokenLifetime).to.be.a('number');
              expect(data.Data.AccessTokenLifetime).to.be(0);
              expect(data.Data.AbsoluteRefreshTokenLifetime).to.be.a('number');
              expect(data.Data.AbsoluteRefreshTokenLifetime).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOAuthClientSecret', function() {
        it('should call getOAuthClientSecret successfully', function(done) {
          // TODO: uncomment, update parameter values for getOAuthClientSecret call and complete the assertions
          /*
          var oauthAppId = "oauthAppId_example";
          var appId = "appId_example";

          instance.getOAuthClientSecret(oauthAppId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOauthAccessToken', function() {
        it('should call getOauthAccessToken successfully', function(done) {
          // TODO: uncomment, update parameter values for getOauthAccessToken call and complete the assertions
          /*
          var oauthAppId = "oauthAppId_example";
          var appId = "appId_example";

          instance.getOauthAccessToken(oauthAppId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRedirectUris', function() {
        it('should call getRedirectUris successfully', function(done) {
          // TODO: uncomment, update parameter values for getRedirectUris call and complete the assertions
          /*
          var oauthAppId = "oauthAppId_example";
          var appId = "appId_example";

          instance.getRedirectUris(oauthAppId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultOauthClientRedirectUri);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.OauthClientRedirectUri);
                expect(data.Id).to.be.a('number');
                expect(data.Id).to.be(0);
                expect(data.Uri).to.be.a('string');
                expect(data.Uri).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('oAuthClientsGetApplications', function() {
        it('should call oAuthClientsGetApplications successfully', function(done) {
          // TODO: uncomment, update parameter values for oAuthClientsGetApplications call and complete the assertions
          /*
          var appId = "appId_example";

          instance.oAuthClientsGetApplications(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeRedirectUri', function() {
        it('should call removeRedirectUri successfully', function(done) {
          // TODO: uncomment, update parameter values for removeRedirectUri call
          /*
          var oauthAppId = "oauthAppId_example";
          var uriId = 56;
          var appId = "appId_example";

          instance.removeRedirectUri(oauthAppId, uriId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOAuthApp', function() {
        it('should call updateOAuthApp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOAuthApp call
          /*
          var oauthAppId = "oauthAppId_example";
          var oAuthApp = new Flipdish.OAuthApp();
          oAuthApp.OauthAppId = "";
          oAuthApp.OauthAppName = "";
          oAuthApp.OwnerUserId = 0;
          oAuthApp.LogoUri = "";
          oAuthApp.Flow = "AuthorizationCode";
          oAuthApp.RefreshTokenUsage = "ReUse";
          oAuthApp.AccessTokenLifetime = 0;
          oAuthApp.AbsoluteRefreshTokenLifetime = 0;
          var appId = "appId_example";

          instance.updateOAuthApp(oauthAppId, oAuthApp, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
