/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.StuartApi();
  });

  describe('(package)', function() {
    describe('StuartApi', function() {
      describe('stuartCancelJob', function() {
        it('should call stuartCancelJob successfully', function(done) {
          // TODO: uncomment, update parameter values for stuartCancelJob call and complete the assertions
          /*
          var jobId = 56;
          var storeId = 56;

          instance.stuartCancelJob(jobId, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stuartGetJob', function() {
        it('should call stuartGetJob successfully', function(done) {
          // TODO: uncomment, update parameter values for stuartGetJob call and complete the assertions
          /*
          var jobId = 56;
          var storeId = 56;

          instance.stuartGetJob(jobId, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultJobResponse);
            expect(data.Data).to.be.a(Flipdish.JobResponse);
                  expect(data.Data.Id).to.be.a('number');
              expect(data.Data.Id).to.be(0);
              expect(data.Data.CreatedAt).to.be.a(Date);
              expect(data.Data.CreatedAt).to.be(new Date());
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("");
              expect(data.Data.PackageType).to.be.a('string');
              expect(data.Data.PackageType).to.be("");
              expect(data.Data.TransportType).to.be.a('string');
              expect(data.Data.TransportType).to.be("");
              expect(data.Data.AssignmentCode).to.be.a('string');
              expect(data.Data.AssignmentCode).to.be("");
              expect(data.Data.PickupAt).to.be.a('string');
              expect(data.Data.PickupAt).to.be("");
              expect(data.Data.DropoffAt).to.be.a('string');
              expect(data.Data.DropoffAt).to.be("");
              expect(data.Data.Comment).to.be.a('string');
              expect(data.Data.Comment).to.be("");
              expect(data.Data.Distance).to.be.a('number');
              expect(data.Data.Distance).to.be(0.0);
              expect(data.Data.Duration).to.be.a('number');
              expect(data.Data.Duration).to.be(0);
              {
                let dataCtr = data.Data.Deliveries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.JobDelivery);
                  expect(data.Id).to.be.a('number');
                  expect(data.Id).to.be(0);
                  expect(data.Status).to.be.a('string');
                  expect(data.Status).to.be("");
                  expect(data.PickedAt).to.be.a('string');
                  expect(data.PickedAt).to.be("");
                  expect(data.DeliveredAt).to.be.a('string');
                  expect(data.DeliveredAt).to.be("");
                  expect(data.TrackingUrl).to.be.a('string');
                  expect(data.TrackingUrl).to.be("");
                  expect(data.ClientReference).to.be.a('string');
                  expect(data.ClientReference).to.be("");
                  expect(data.PackageDescription).to.be.a('string');
                  expect(data.PackageDescription).to.be("");
                  expect(data.PackageType).to.be.a('string');
                  expect(data.PackageType).to.be("");
                  expect(data.Pickup).to.be.a(Flipdish.JobDeliveryDetail);
                        expect(data.Pickup.Id).to.be.a('number');
                    expect(data.Pickup.Id).to.be(0);
                    expect(data.Pickup.Latitude).to.be.a('number');
                    expect(data.Pickup.Latitude).to.be(0.0);
                    expect(data.Pickup.Longitude).to.be.a('number');
                    expect(data.Pickup.Longitude).to.be(0.0);
                    expect(data.Pickup.Comment).to.be.a('string');
                    expect(data.Pickup.Comment).to.be("");
                    expect(data.Pickup.Address).to.be.a(Flipdish.JobAddress);
                          expect(data.Pickup.Address.Street).to.be.a('string');
                      expect(data.Pickup.Address.Street).to.be("");
                      expect(data.Pickup.Address.Postcode).to.be.a('string');
                      expect(data.Pickup.Address.Postcode).to.be("");
                      expect(data.Pickup.Address.City).to.be.a('string');
                      expect(data.Pickup.Address.City).to.be("");
                      expect(data.Pickup.Address.Country).to.be.a('string');
                      expect(data.Pickup.Address.Country).to.be("");
                      expect(data.Pickup.Address.Zone).to.be.a('string');
                      expect(data.Pickup.Address.Zone).to.be("");
                      expect(data.Pickup.Address.FormattedAddress).to.be.a('string');
                      expect(data.Pickup.Address.FormattedAddress).to.be("");
                    expect(data.Pickup.Contact).to.be.a(Flipdish.JobContact);
                          expect(data.Pickup.Contact.Firstname).to.be.a('string');
                      expect(data.Pickup.Contact.Firstname).to.be("");
                      expect(data.Pickup.Contact.Lastname).to.be.a('string');
                      expect(data.Pickup.Contact.Lastname).to.be("");
                      expect(data.Pickup.Contact.Phone).to.be.a('string');
                      expect(data.Pickup.Contact.Phone).to.be("");
                      expect(data.Pickup.Contact.Email).to.be.a('string');
                      expect(data.Pickup.Contact.Email).to.be("");
                      expect(data.Pickup.Contact.Company).to.be.a('string');
                      expect(data.Pickup.Contact.Company).to.be("");
                      expect(data.Pickup.Contact.CompanyName).to.be.a('string');
                      expect(data.Pickup.Contact.CompanyName).to.be("");
                  expect(data.Dropoff).to.be.a(Flipdish.JobDeliveryDetail);
                        expect(data.Dropoff.Id).to.be.a('number');
                    expect(data.Dropoff.Id).to.be(0);
                    expect(data.Dropoff.Latitude).to.be.a('number');
                    expect(data.Dropoff.Latitude).to.be(0.0);
                    expect(data.Dropoff.Longitude).to.be.a('number');
                    expect(data.Dropoff.Longitude).to.be(0.0);
                    expect(data.Dropoff.Comment).to.be.a('string');
                    expect(data.Dropoff.Comment).to.be("");
                    expect(data.Dropoff.Address).to.be.a(Flipdish.JobAddress);
                          expect(data.Dropoff.Address.Street).to.be.a('string');
                      expect(data.Dropoff.Address.Street).to.be("");
                      expect(data.Dropoff.Address.Postcode).to.be.a('string');
                      expect(data.Dropoff.Address.Postcode).to.be("");
                      expect(data.Dropoff.Address.City).to.be.a('string');
                      expect(data.Dropoff.Address.City).to.be("");
                      expect(data.Dropoff.Address.Country).to.be.a('string');
                      expect(data.Dropoff.Address.Country).to.be("");
                      expect(data.Dropoff.Address.Zone).to.be.a('string');
                      expect(data.Dropoff.Address.Zone).to.be("");
                      expect(data.Dropoff.Address.FormattedAddress).to.be.a('string');
                      expect(data.Dropoff.Address.FormattedAddress).to.be("");
                    expect(data.Dropoff.Contact).to.be.a(Flipdish.JobContact);
                          expect(data.Dropoff.Contact.Firstname).to.be.a('string');
                      expect(data.Dropoff.Contact.Firstname).to.be("");
                      expect(data.Dropoff.Contact.Lastname).to.be.a('string');
                      expect(data.Dropoff.Contact.Lastname).to.be("");
                      expect(data.Dropoff.Contact.Phone).to.be.a('string');
                      expect(data.Dropoff.Contact.Phone).to.be("");
                      expect(data.Dropoff.Contact.Email).to.be.a('string');
                      expect(data.Dropoff.Contact.Email).to.be("");
                      expect(data.Dropoff.Contact.Company).to.be.a('string');
                      expect(data.Dropoff.Contact.Company).to.be("");
                      expect(data.Dropoff.Contact.CompanyName).to.be.a('string');
                      expect(data.Dropoff.Contact.CompanyName).to.be("");
                  expect(data.Eta).to.be.a(Flipdish.JobEta);
                        expect(data.Eta.Pickup).to.be.a('string');
                    expect(data.Eta.Pickup).to.be("");
                    expect(data.Eta.Dropoff).to.be.a('string');
                    expect(data.Eta.Dropoff).to.be("");
                  expect(data.Cancellation).to.be.a(Flipdish.JobCancellation);
                        expect(data.Cancellation.CanceledBy).to.be.a('string');
                    expect(data.Cancellation.CanceledBy).to.be("");
                    expect(data.Cancellation.ReasonKey).to.be.a('string');
                    expect(data.Cancellation.ReasonKey).to.be("");
                    expect(data.Cancellation.Comment).to.be.a('string');
                    expect(data.Cancellation.Comment).to.be("");
                  expect(data.Proof).to.be.a(Flipdish.JobProof);
                        expect(data.Proof.SignatureUrl).to.be.a('string');
                    expect(data.Proof.SignatureUrl).to.be("");
  
                        }
              }
              expect(data.Data.Pricing).to.be.a(Flipdish.JobPricing);
                    expect(data.Data.Pricing.Currency).to.be.a('string');
                expect(data.Data.Pricing.Currency).to.be("");
                expect(data.Data.Pricing.TaxPercentage).to.be.a('number');
                expect(data.Data.Pricing.TaxPercentage).to.be(0.0);
                expect(data.Data.Pricing.PriceTaxIncluded).to.be.a('number');
                expect(data.Data.Pricing.PriceTaxIncluded).to.be(0.0);
                expect(data.Data.Pricing.PriceTaxExcluded).to.be.a('number');
                expect(data.Data.Pricing.PriceTaxExcluded).to.be(0.0);
                expect(data.Data.Pricing.TaxAmount).to.be.a('number');
                expect(data.Data.Pricing.TaxAmount).to.be(0.0);
                expect(data.Data.Pricing.InvoiceUrl).to.be.a('string');
                expect(data.Data.Pricing.InvoiceUrl).to.be("");
              expect(data.Data.Driver).to.be.a(Flipdish.JobDriver);
                    expect(data.Data.Driver.Id).to.be.a('number');
                expect(data.Data.Driver.Id).to.be(0);
                expect(data.Data.Driver.DisplayName).to.be.a('string');
                expect(data.Data.Driver.DisplayName).to.be("");
                expect(data.Data.Driver.Phone).to.be.a('string');
                expect(data.Data.Driver.Phone).to.be("");
                expect(data.Data.Driver.PictureUrl).to.be.a('string');
                expect(data.Data.Driver.PictureUrl).to.be("");
                expect(data.Data.Driver.TransportType).to.be.a('string');
                expect(data.Data.Driver.TransportType).to.be("");
                expect(data.Data.Driver.Latitude).to.be.a('number');
                expect(data.Data.Driver.Latitude).to.be(0.0);
                expect(data.Data.Driver.Longitude).to.be.a('number');
                expect(data.Data.Driver.Longitude).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stuartGetStuartSettings', function() {
        it('should call stuartGetStuartSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for stuartGetStuartSettings call and complete the assertions
          /*
          var storeId = 56;

          instance.stuartGetStuartSettings(storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStuartSettings);
            expect(data.Data).to.be.a(Flipdish.StuartSettings);
                  expect(data.Data.ClientId).to.be.a('string');
              expect(data.Data.ClientId).to.be("");
              expect(data.Data.ClientSecret).to.be.a('string');
              expect(data.Data.ClientSecret).to.be("");
              expect(data.Data.Enabled).to.be.a('boolean');
              expect(data.Data.Enabled).to.be(false);
              expect(data.Data.WebhookUrlBasicAuthentication).to.be.a('string');
              expect(data.Data.WebhookUrlBasicAuthentication).to.be("");
              expect(data.Data.MinutesToPickupBeforeThanDeliveryTime).to.be.a('number');
              expect(data.Data.MinutesToPickupBeforeThanDeliveryTime).to.be(0);
              expect(data.Data.PackageType).to.be.a('string');
              expect(data.Data.PackageType).to.be("Xsmall");
              expect(data.Data.TransportType).to.be.a('string');
              expect(data.Data.TransportType).to.be("Bike");
              expect(data.Data.CancelOrderIfStuartCancelDelivery).to.be.a('boolean');
              expect(data.Data.CancelOrderIfStuartCancelDelivery).to.be(false);
              expect(data.Data.TransportPrices).to.be.a(Flipdish.StuartSettingsTransportPrices);
                    expect(data.Data.TransportPrices.Bike).to.be.a('number');
                expect(data.Data.TransportPrices.Bike).to.be(0.0);
                expect(data.Data.TransportPrices.Cargobike).to.be.a('number');
                expect(data.Data.TransportPrices.Cargobike).to.be(0.0);
                expect(data.Data.TransportPrices.Cargobikexl).to.be.a('number');
                expect(data.Data.TransportPrices.Cargobikexl).to.be(0.0);
                expect(data.Data.TransportPrices.Motorbike).to.be.a('number');
                expect(data.Data.TransportPrices.Motorbike).to.be(0.0);
                expect(data.Data.TransportPrices.Motorbikexl).to.be.a('number');
                expect(data.Data.TransportPrices.Motorbikexl).to.be(0.0);
                expect(data.Data.TransportPrices.Car).to.be.a('number');
                expect(data.Data.TransportPrices.Car).to.be(0.0);
                expect(data.Data.TransportPrices.Van).to.be.a('number');
                expect(data.Data.TransportPrices.Van).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stuartPostStuartSettings', function() {
        it('should call stuartPostStuartSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for stuartPostStuartSettings call and complete the assertions
          /*
          var storeId = 56;
          var stuartSettings = new Flipdish.StuartSettings();
          stuartSettings.ClientId = "";
          stuartSettings.ClientSecret = "";
          stuartSettings.Enabled = false;
          stuartSettings.WebhookUrlBasicAuthentication = "";
          stuartSettings.MinutesToPickupBeforeThanDeliveryTime = 0;
          stuartSettings.PackageType = "Xsmall";
          stuartSettings.TransportType = "Bike";
          stuartSettings.CancelOrderIfStuartCancelDelivery = false;
          stuartSettings.TransportPrices = new Flipdish.StuartSettingsTransportPrices();
          stuartSettings.TransportPrices.Bike = 0.0;
          stuartSettings.TransportPrices.Cargobike = 0.0;
          stuartSettings.TransportPrices.Cargobikexl = 0.0;
          stuartSettings.TransportPrices.Motorbike = 0.0;
          stuartSettings.TransportPrices.Motorbikexl = 0.0;
          stuartSettings.TransportPrices.Car = 0.0;
          stuartSettings.TransportPrices.Van = 0.0;

          instance.stuartPostStuartSettings(storeId, stuartSettings, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
