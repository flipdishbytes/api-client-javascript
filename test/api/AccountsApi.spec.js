/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.AccountsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountsApi', function() {
    describe('answerSignUpQuestion', function() {
      it('should call answerSignUpQuestion successfully', function(done) {
        //uncomment below and update the code to test answerSignUpQuestion
        //instance.answerSignUpQuestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changePassword', function() {
      it('should call changePassword successfully', function(done) {
        //uncomment below and update the code to test changePassword
        //instance.changePassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changePasswordWithPin', function() {
      it('should call changePasswordWithPin successfully', function(done) {
        //uncomment below and update the code to test changePasswordWithPin
        //instance.changePasswordWithPin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAccount', function() {
      it('should call createAccount successfully', function(done) {
        //uncomment below and update the code to test createAccount
        //instance.createAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBasicAccount', function() {
      it('should call createBasicAccount successfully', function(done) {
        //uncomment below and update the code to test createBasicAccount
        //instance.createBasicAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAccountDetails', function() {
      it('should call getAccountDetails successfully', function(done) {
        //uncomment below and update the code to test getAccountDetails
        //instance.getAccountDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLocalisedTimeZones', function() {
      it('should call getLocalisedTimeZones successfully', function(done) {
        //uncomment below and update the code to test getLocalisedTimeZones
        //instance.getLocalisedTimeZones(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('login', function() {
      it('should call login successfully', function(done) {
        //uncomment below and update the code to test login
        //instance.login(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loginSso', function() {
      it('should call loginSso successfully', function(done) {
        //uncomment below and update the code to test loginSso
        //instance.loginSso(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loginWithPin', function() {
      it('should call loginWithPin successfully', function(done) {
        //uncomment below and update the code to test loginWithPin
        //instance.loginWithPin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logout', function() {
      it('should call logout successfully', function(done) {
        //uncomment below and update the code to test logout
        //instance.logout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('passwordResetWithToken', function() {
      it('should call passwordResetWithToken successfully', function(done) {
        //uncomment below and update the code to test passwordResetWithToken
        //instance.passwordResetWithToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recaptchaValidate', function() {
      it('should call recaptchaValidate successfully', function(done) {
        //uncomment below and update the code to test recaptchaValidate
        //instance.recaptchaValidate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestLoginPin', function() {
      it('should call requestLoginPin successfully', function(done) {
        //uncomment below and update the code to test requestLoginPin
        //instance.requestLoginPin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestPasswordReset', function() {
      it('should call requestPasswordReset successfully', function(done) {
        //uncomment below and update the code to test requestPasswordReset
        //instance.requestPasswordReset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendPinForPasswordReset', function() {
      it('should call sendPinForPasswordReset successfully', function(done) {
        //uncomment below and update the code to test sendPinForPasswordReset
        //instance.sendPinForPasswordReset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('skipSignupStep', function() {
      it('should call skipSignupStep successfully', function(done) {
        //uncomment below and update the code to test skipSignupStep
        //instance.skipSignupStep(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAccount', function() {
      it('should call updateAccount successfully', function(done) {
        //uncomment below and update the code to test updateAccount
        //instance.updateAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
