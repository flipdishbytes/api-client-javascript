/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.PayoutsApi();
  });

  describe('(package)', function() {
    describe('PayoutsApi', function() {
      describe('exportPayoutChargebacks', function() {
        it('should call exportPayoutChargebacks successfully', function(done) {
          // TODO: uncomment, update parameter values for exportPayoutChargebacks call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;
          var opts = {};
          opts.storeIds = [3.4];

          instance.exportPayoutChargebacks(appId, bankAccountId, payoutId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('exportPayoutOrders', function() {
        it('should call exportPayoutOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for exportPayoutOrders call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;
          var opts = {};
          opts.storeIds = [3.4];

          instance.exportPayoutOrders(appId, bankAccountId, payoutId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('exportPayoutOtherCharges', function() {
        it('should call exportPayoutOtherCharges successfully', function(done) {
          // TODO: uncomment, update parameter values for exportPayoutOtherCharges call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;
          var opts = {};
          opts.storeIds = [3.4];

          instance.exportPayoutOtherCharges(appId, bankAccountId, payoutId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('exportPayoutRefunds', function() {
        it('should call exportPayoutRefunds successfully', function(done) {
          // TODO: uncomment, update parameter values for exportPayoutRefunds call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;
          var opts = {};
          opts.storeIds = [3.4];

          instance.exportPayoutRefunds(appId, bankAccountId, payoutId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('exportPayoutStores', function() {
        it('should call exportPayoutStores successfully', function(done) {
          // TODO: uncomment, update parameter values for exportPayoutStores call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;
          var opts = {};
          opts.storeIds = [3.4];

          instance.exportPayoutStores(appId, bankAccountId, payoutId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPayout', function() {
        it('should call getPayout successfully', function(done) {
          // TODO: uncomment, update parameter values for getPayout call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;

          instance.getPayout(appId, bankAccountId, payoutId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.PayoutDetail);
            expect(data.PayoutId).to.be.a('number');
            expect(data.PayoutId).to.be(0);
            expect(data.BankAccountId).to.be.a('number');
            expect(data.BankAccountId).to.be(0);
            expect(data.AccountName).to.be.a('string');
            expect(data.AccountName).to.be("");
            expect(data.PayoutStatus).to.be.a('string');
            expect(data.PayoutStatus).to.be("Pending");
            expect(data.CreatedDate).to.be.a(Date);
            expect(data.CreatedDate).to.be(new Date());
            expect(data.PeriodStartTime).to.be.a(Date);
            expect(data.PeriodStartTime).to.be(new Date());
            expect(data.PeriodEndTime).to.be.a(Date);
            expect(data.PeriodEndTime).to.be(new Date());
            expect(data.DestinationBank).to.be.a('string');
            expect(data.DestinationBank).to.be("");
            expect(data.DestinationAccount).to.be.a('string');
            expect(data.DestinationAccount).to.be("");
            expect(data.PayoutType).to.be.a('string');
            expect(data.PayoutType).to.be("Internal");
            expect(data.Currency).to.be.a('string');
            expect(data.Currency).to.be("EUR");
            {
              let dataCtr = data.PayoutStores;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.PayoutStore);
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.StoreName).to.be.a('string');
                expect(data.StoreName).to.be("");
                expect(data.Amount).to.be.a('number');
                expect(data.Amount).to.be(0.0);
                expect(data.OnlineRevenue).to.be.a(Flipdish.RevenueDetail);
                      expect(data.OnlineRevenue.OnlineSalesAmount).to.be.a('number');
                  expect(data.OnlineRevenue.OnlineSalesAmount).to.be(0.0);
                  expect(data.OnlineRevenue.OnlineSalesTax).to.be.a('number');
                  expect(data.OnlineRevenue.OnlineSalesTax).to.be(0.0);
                  expect(data.OnlineRevenue.OnlineSalesIncludingTax).to.be.a('number');
                  expect(data.OnlineRevenue.OnlineSalesIncludingTax).to.be(0.0);
                  expect(data.OnlineRevenue.OnlineSalesFeesBaseAmount).to.be.a('number');
                  expect(data.OnlineRevenue.OnlineSalesFeesBaseAmount).to.be(0.0);
                  expect(data.OnlineRevenue.CashSalesAmount).to.be.a('number');
                  expect(data.OnlineRevenue.CashSalesAmount).to.be(0.0);
                  expect(data.OnlineRevenue.CashSalesTax).to.be.a('number');
                  expect(data.OnlineRevenue.CashSalesTax).to.be(0.0);
                  expect(data.OnlineRevenue.CashSalesIncludingTax).to.be.a('number');
                  expect(data.OnlineRevenue.CashSalesIncludingTax).to.be(0.0);
                  expect(data.OnlineRevenue.CashSalesFeesBaseAmount).to.be.a('number');
                  expect(data.OnlineRevenue.CashSalesFeesBaseAmount).to.be(0.0);
                  expect(data.OnlineRevenue.TotalSalesIncludingTax).to.be.a('number');
                  expect(data.OnlineRevenue.TotalSalesIncludingTax).to.be(0.0);
                  expect(data.OnlineRevenue.OnlineSalesDeliveryCharges).to.be.a('number');
                  expect(data.OnlineRevenue.OnlineSalesDeliveryCharges).to.be(0.0);
                  expect(data.OnlineRevenue.OnlineSalesTips).to.be.a('number');
                  expect(data.OnlineRevenue.OnlineSalesTips).to.be(0.0);
                  expect(data.OnlineRevenue.TotalOnlineRevenue).to.be.a('number');
                  expect(data.OnlineRevenue.TotalOnlineRevenue).to.be(0.0);
                expect(data.Revenue).to.be.a(Flipdish.RevenueDetail);
                      expect(data.Revenue.OnlineSalesAmount).to.be.a('number');
                  expect(data.Revenue.OnlineSalesAmount).to.be(0.0);
                  expect(data.Revenue.OnlineSalesTax).to.be.a('number');
                  expect(data.Revenue.OnlineSalesTax).to.be(0.0);
                  expect(data.Revenue.OnlineSalesIncludingTax).to.be.a('number');
                  expect(data.Revenue.OnlineSalesIncludingTax).to.be(0.0);
                  expect(data.Revenue.OnlineSalesFeesBaseAmount).to.be.a('number');
                  expect(data.Revenue.OnlineSalesFeesBaseAmount).to.be(0.0);
                  expect(data.Revenue.CashSalesAmount).to.be.a('number');
                  expect(data.Revenue.CashSalesAmount).to.be(0.0);
                  expect(data.Revenue.CashSalesTax).to.be.a('number');
                  expect(data.Revenue.CashSalesTax).to.be(0.0);
                  expect(data.Revenue.CashSalesIncludingTax).to.be.a('number');
                  expect(data.Revenue.CashSalesIncludingTax).to.be(0.0);
                  expect(data.Revenue.CashSalesFeesBaseAmount).to.be.a('number');
                  expect(data.Revenue.CashSalesFeesBaseAmount).to.be(0.0);
                  expect(data.Revenue.TotalSalesIncludingTax).to.be.a('number');
                  expect(data.Revenue.TotalSalesIncludingTax).to.be(0.0);
                  expect(data.Revenue.OnlineSalesDeliveryCharges).to.be.a('number');
                  expect(data.Revenue.OnlineSalesDeliveryCharges).to.be(0.0);
                  expect(data.Revenue.OnlineSalesTips).to.be.a('number');
                  expect(data.Revenue.OnlineSalesTips).to.be(0.0);
                  expect(data.Revenue.TotalOnlineRevenue).to.be.a('number');
                  expect(data.Revenue.TotalOnlineRevenue).to.be(0.0);
                expect(data.RevenueAdjustments).to.be.a(Flipdish.RevenueAdjustmentsDetails);
                      expect(data.RevenueAdjustments.OnlineSalesRefundedAmount).to.be.a('number');
                  expect(data.RevenueAdjustments.OnlineSalesRefundedAmount).to.be(0.0);
                  expect(data.RevenueAdjustments.CashSalesRefundedAmount).to.be.a('number');
                  expect(data.RevenueAdjustments.CashSalesRefundedAmount).to.be(0.0);
                  expect(data.RevenueAdjustments.CustomerCashFees).to.be.a('number');
                  expect(data.RevenueAdjustments.CustomerCashFees).to.be(0.0);
                  expect(data.RevenueAdjustments.RefundsCount).to.be.a('number');
                  expect(data.RevenueAdjustments.RefundsCount).to.be(0);
                  expect(data.RevenueAdjustments.TotalOnlineRevenueAdjustments).to.be.a('number');
                  expect(data.RevenueAdjustments.TotalOnlineRevenueAdjustments).to.be(0.0);
                expect(data.FlipdishFees).to.be.a(Flipdish.FlipdishFeesDetails);
                      expect(data.FlipdishFees.OnlineSalesFees).to.be.a('number');
                  expect(data.FlipdishFees.OnlineSalesFees).to.be(0.0);
                  expect(data.FlipdishFees.CashSalesFees).to.be.a('number');
                  expect(data.FlipdishFees.CashSalesFees).to.be(0.0);
                  expect(data.FlipdishFees.TotalSalesFees).to.be.a('number');
                  expect(data.FlipdishFees.TotalSalesFees).to.be(0.0);
                  expect(data.FlipdishFees.OnlineSalesRefundedFees).to.be.a('number');
                  expect(data.FlipdishFees.OnlineSalesRefundedFees).to.be(0.0);
                  expect(data.FlipdishFees.CashSalesRefundedFees).to.be.a('number');
                  expect(data.FlipdishFees.CashSalesRefundedFees).to.be(0.0);
                  expect(data.FlipdishFees.SalesFeesVat).to.be.a('number');
                  expect(data.FlipdishFees.SalesFeesVat).to.be(0.0);
                  expect(data.FlipdishFees.TotalFees).to.be.a('number');
                  expect(data.FlipdishFees.TotalFees).to.be(0.0);
                expect(data.Chargebacks).to.be.a(Flipdish.ChargebackDetails);
                      expect(data.Chargebacks.ChargebackAmount).to.be.a('number');
                  expect(data.Chargebacks.ChargebackAmount).to.be(0.0);
                  expect(data.Chargebacks.ChargebackRefundedFees).to.be.a('number');
                  expect(data.Chargebacks.ChargebackRefundedFees).to.be(0.0);
                  expect(data.Chargebacks.ChargebacksCount).to.be.a('number');
                  expect(data.Chargebacks.ChargebacksCount).to.be(0);
                  expect(data.Chargebacks.TotalChargebackCost).to.be.a('number');
                  expect(data.Chargebacks.TotalChargebackCost).to.be(0.0);
                expect(data.OtherCharges).to.be.a(Flipdish.OtherChargesDetails);
                      expect(data.OtherCharges.TotalOtherCharges).to.be.a('number');
                  expect(data.OtherCharges.TotalOtherCharges).to.be(0.0);
                  expect(data.OtherCharges.ChargesCount).to.be.a('number');
                  expect(data.OtherCharges.ChargesCount).to.be(0);
                expect(data.Balance).to.be.a(Flipdish.BalanceDetails);
                      expect(data.Balance.OpeningBalance).to.be.a('number');
                  expect(data.Balance.OpeningBalance).to.be(0.0);
                  expect(data.Balance.ClosingBalance).to.be.a('number');
                  expect(data.Balance.ClosingBalance).to.be(0.0);

                      }
            }
            expect(data.Amount).to.be.a('number');
            expect(data.Amount).to.be(0.0);
            expect(data.CutoffDate).to.be.a(Date);
            expect(data.CutoffDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPayoutChargebacks', function() {
        it('should call getPayoutChargebacks successfully', function(done) {
          // TODO: uncomment, update parameter values for getPayoutChargebacks call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;
          var opts = {};
          opts.page = 56;
          opts.limit = 56;
          opts.storeIds = [3.4];

          instance.getPayoutChargebacks(appId, bankAccountId, payoutId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultPayoutChargeback);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.PayoutChargeback);
                expect(data.OrderId).to.be.a('number');
                expect(data.OrderId).to.be(0);
                expect(data.OrderCurrency).to.be.a('string');
                expect(data.OrderCurrency).to.be("EUR");
                expect(data.PayoutId).to.be.a('number');
                expect(data.PayoutId).to.be(0);
                expect(data.OrderDate).to.be.a(Date);
                expect(data.OrderDate).to.be(new Date());
                expect(data.OrderType).to.be.a('string');
                expect(data.OrderType).to.be("Cash");
                expect(data.ChargebackDate).to.be.a(Date);
                expect(data.ChargebackDate).to.be(new Date());
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.ChargebackAmount).to.be.a('number');
                expect(data.ChargebackAmount).to.be(0.0);
                expect(data.RefundedFees).to.be.a('number');
                expect(data.RefundedFees).to.be(0.0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPayoutOrders', function() {
        it('should call getPayoutOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getPayoutOrders call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;
          var opts = {};
          opts.page = 56;
          opts.limit = 56;
          opts.storeIds = [3.4];

          instance.getPayoutOrders(appId, bankAccountId, payoutId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultPayoutOrder);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.PayoutOrder);
                expect(data.OrderId).to.be.a('number');
                expect(data.OrderId).to.be(0);
                expect(data.PayoutId).to.be.a('number');
                expect(data.PayoutId).to.be(0);
                expect(data.OrderDate).to.be.a(Date);
                expect(data.OrderDate).to.be(new Date());
                expect(data.OrderType).to.be.a('string');
                expect(data.OrderType).to.be("Cash");
                expect(data.OrderCurrency).to.be.a('string');
                expect(data.OrderCurrency).to.be("EUR");
                expect(data.Sales).to.be.a('number');
                expect(data.Sales).to.be(0.0);
                expect(data.SalesTax).to.be.a('number');
                expect(data.SalesTax).to.be(0.0);
                expect(data.DeliveryCharges).to.be.a('number');
                expect(data.DeliveryCharges).to.be(0.0);
                expect(data.Tips).to.be.a('number');
                expect(data.Tips).to.be(0.0);
                expect(data.Voucher).to.be.a('number');
                expect(data.Voucher).to.be(0.0);
                expect(data.FlatFeeExcludingVat).to.be.a('number');
                expect(data.FlatFeeExcludingVat).to.be(0.0);
                expect(data.FlatFeeExcludingVAT).to.be.a('number');
                expect(data.FlatFeeExcludingVAT).to.be(0.0);
                expect(data.PercentageFeeExcludingVat).to.be.a('number');
                expect(data.PercentageFeeExcludingVat).to.be(0.0);
                expect(data.PercentageFeeExcludingVAT).to.be.a('number');
                expect(data.PercentageFeeExcludingVAT).to.be(0.0);
                expect(data.Vat).to.be.a('number');
                expect(data.Vat).to.be(0.0);
                expect(data.TotalFees).to.be.a('number');
                expect(data.TotalFees).to.be(0.0);
                expect(data.CashFeeChargedToCustomer).to.be.a('number');
                expect(data.CashFeeChargedToCustomer).to.be(0.0);
                expect(data.NetSales).to.be.a('number');
                expect(data.NetSales).to.be(0.0);
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPayoutOtherCharges', function() {
        it('should call getPayoutOtherCharges successfully', function(done) {
          // TODO: uncomment, update parameter values for getPayoutOtherCharges call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;
          var opts = {};
          opts.page = 56;
          opts.limit = 56;
          opts.storeIds = [3.4];

          instance.getPayoutOtherCharges(appId, bankAccountId, payoutId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultPayoutOtherCharge);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.PayoutOtherCharge);
                expect(data.ChargeId).to.be.a('number');
                expect(data.ChargeId).to.be(0);
                expect(data.Amount).to.be.a('number');
                expect(data.Amount).to.be(0.0);
                expect(data.Currency).to.be.a('string');
                expect(data.Currency).to.be("EUR");
                expect(data.PayoutId).to.be.a('number');
                expect(data.PayoutId).to.be(0);
                expect(data.ChargeDate).to.be.a(Date);
                expect(data.ChargeDate).to.be(new Date());
                expect(data.ChargeType).to.be.a('string');
                expect(data.ChargeType).to.be("Other");
                expect(data.ChargeDescription).to.be.a('string');
                expect(data.ChargeDescription).to.be("");
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPayoutRefunds', function() {
        it('should call getPayoutRefunds successfully', function(done) {
          // TODO: uncomment, update parameter values for getPayoutRefunds call and complete the assertions
          /*
          var appId = "appId_example";
          var bankAccountId = 56;
          var payoutId = 56;
          var opts = {};
          opts.page = 56;
          opts.limit = 56;
          opts.storeIds = [3.4];

          instance.getPayoutRefunds(appId, bankAccountId, payoutId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultPayoutRefund);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.PayoutRefund);
                expect(data.OrderId).to.be.a('number');
                expect(data.OrderId).to.be(0);
                expect(data.OrderCurrency).to.be.a('string');
                expect(data.OrderCurrency).to.be("EUR");
                expect(data.PayoutId).to.be.a('number');
                expect(data.PayoutId).to.be(0);
                expect(data.OrderDate).to.be.a(Date);
                expect(data.OrderDate).to.be(new Date());
                expect(data.OrderType).to.be.a('string');
                expect(data.OrderType).to.be("Cash");
                expect(data.RefundDate).to.be.a(Date);
                expect(data.RefundDate).to.be(new Date());
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.TotalRefund).to.be.a('number');
                expect(data.TotalRefund).to.be(0.0);
                expect(data.RefundedFees).to.be.a('number');
                expect(data.RefundedFees).to.be(0.0);
                expect(data.RefundedAmount).to.be.a('number');
                expect(data.RefundedAmount).to.be(0.0);
                expect(data.CashFeeRefundedToCustomer).to.be.a('number');
                expect(data.CashFeeRefundedToCustomer).to.be(0.0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPayoutSummaries', function() {
        it('should call getPayoutSummaries successfully', function(done) {
          // TODO: uncomment, update parameter values for getPayoutSummaries call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.bankAccountId = 56;
          opts.payeeBankAccountDataId = 56;
          opts.startDate = new Date("2013-10-20T19:20:30+01:00");
          opts.endDate = new Date("2013-10-20T19:20:30+01:00");
          opts.status = "status_example";

          instance.getPayoutSummaries(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultPayoutSummary);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.PayoutSummary);
                expect(data.PayoutStatus).to.be.a('string');
                expect(data.PayoutStatus).to.be("Pending");
                expect(data.TotalAmount).to.be.a('number');
                expect(data.TotalAmount).to.be(0.0);
                expect(data.Currency).to.be.a('string');
                expect(data.Currency).to.be("EUR");
                expect(data.TotalCount).to.be.a('number');
                expect(data.TotalCount).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPayouts', function() {
        it('should call getPayouts successfully', function(done) {
          // TODO: uncomment, update parameter values for getPayouts call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.bankAccountId = 56;
          opts.payeeBankAccountDataId = 56;
          opts.startDate = new Date("2013-10-20T19:20:30+01:00");
          opts.endDate = new Date("2013-10-20T19:20:30+01:00");
          opts.status = "status_example";
          opts.page = 56;
          opts.limit = 56;

          instance.getPayouts(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultPayout);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.Payout);
                expect(data.PayoutId).to.be.a('number');
                expect(data.PayoutId).to.be(0);
                expect(data.PayeeBankAccountId).to.be.a('number');
                expect(data.PayeeBankAccountId).to.be(0);
                expect(data.AccountName).to.be.a('string');
                expect(data.AccountName).to.be("");
                expect(data.PayoutStatus).to.be.a('string');
                expect(data.PayoutStatus).to.be("Pending");
                expect(data.CreatedDate).to.be.a(Date);
                expect(data.CreatedDate).to.be(new Date());
                expect(data.PeriodStartTime).to.be.a(Date);
                expect(data.PeriodStartTime).to.be(new Date());
                expect(data.PeriodEndTime).to.be.a(Date);
                expect(data.PeriodEndTime).to.be(new Date());
                expect(data.DestinationBank).to.be.a('string');
                expect(data.DestinationBank).to.be("");
                expect(data.DestinationAccount).to.be.a('string');
                expect(data.DestinationAccount).to.be("");
                expect(data.Amount).to.be.a('number');
                expect(data.Amount).to.be(0.0);
                expect(data.PayoutType).to.be.a('string');
                expect(data.PayoutType).to.be("Internal");
                expect(data.Currency).to.be.a('string');
                expect(data.Currency).to.be("EUR");
                expect(data.CutoffDate).to.be.a(Date);
                expect(data.CutoffDate).to.be(new Date());

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
