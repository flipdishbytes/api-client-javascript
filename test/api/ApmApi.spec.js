/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.ApmApi();
  });

  describe('(package)', function() {
    describe('ApmApi', function() {
      describe('getApmStatus', function() {
        it('should call getApmStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getApmStatus call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getApmStatus(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultApmStatus);
            expect(data.Data).to.be.a(Flipdish.ApmStatus);
                  expect(data.Data.IsApmEnabled).to.be.a('boolean');
              expect(data.Data.IsApmEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBasicStatistics', function() {
        it('should call getBasicStatistics successfully', function(done) {
          // TODO: uncomment, update parameter values for getBasicStatistics call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.storeId = [3.4];

          instance.getBasicStatistics(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultApmStatistics);
            expect(data.Data).to.be.a(Flipdish.ApmStatistics);
                  expect(data.Data.EstimatedMinutesSaved).to.be.a('number');
              expect(data.Data.EstimatedMinutesSaved).to.be(0);
              expect(data.Data.EstimatedMinutesCouldSaved).to.be.a('number');
              expect(data.Data.EstimatedMinutesCouldSaved).to.be(0);
              {
                let dataCtr = data.Data.CurrencyData;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StatisticsCurrencyDataPoint);
                  expect(data.Currency).to.be.a('string');
                  expect(data.Currency).to.be("EUR");
                  expect(data.UserCount).to.be.a('number');
                  expect(data.UserCount).to.be(0);
                  expect(data.OrderCount).to.be.a('number');
                  expect(data.OrderCount).to.be(0);
                  expect(data.OrderValue).to.be.a('number');
                  expect(data.OrderValue).to.be(0.0);
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCalendarWeekStatistics', function() {
        it('should call getCalendarWeekStatistics successfully', function(done) {
          // TODO: uncomment, update parameter values for getCalendarWeekStatistics call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.storeId = [3.4];

          instance.getCalendarWeekStatistics(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultApmHourlyDataPoint);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.ApmHourlyDataPoint);
                expect(data.Day).to.be.a('string');
                expect(data.Day).to.be("Sunday");
                expect(data.Hour).to.be.a('number');
                expect(data.Hour).to.be(0);
                expect(data.TotalValue).to.be.a('number');
                expect(data.TotalValue).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCallsStatistics', function() {
        it('should call getCallsStatistics successfully', function(done) {
          // TODO: uncomment, update parameter values for getCallsStatistics call and complete the assertions
          /*
          var appId = "appId_example";
          var aggregateDataBy = "aggregateDataBy_example";
          var opts = {};
          opts.dataPointLimit = 56;
          opts.storeId = [3.4];

          instance.getCallsStatistics(appId, aggregateDataBy, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultApmDataPoint);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.ApmDataPoint);
                expect(data.PeriodStart).to.be.a(Date);
                expect(data.PeriodStart).to.be(new Date());
                expect(data.PeriodLengthInDays).to.be.a('number');
                expect(data.PeriodLengthInDays).to.be(0);
                expect(data.Value).to.be.a('number');
                expect(data.Value).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderStatistics', function() {
        it('should call getOrderStatistics successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderStatistics call and complete the assertions
          /*
          var appId = "appId_example";
          var aggregateDataBy = "aggregateDataBy_example";
          var opts = {};
          opts.dataPointLimit = 56;
          opts.storeId = [3.4];

          instance.getOrderStatistics(appId, aggregateDataBy, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultApmCurrencyDataPoint);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.ApmCurrencyDataPoint);
                expect(data.PeriodStart).to.be.a(Date);
                expect(data.PeriodStart).to.be(new Date());
                expect(data.PeriodLengthInDays).to.be.a('number');
                expect(data.PeriodLengthInDays).to.be(0);
                {
                  let dataCtr = data.CurrencyData;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.CurrencyData);
                    expect(data.Currency).to.be.a('string');
                    expect(data.Currency).to.be("EUR");
                    expect(data.Value).to.be.a('number');
                    expect(data.Value).to.be(0.0);
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPaginatedCallList', function() {
        it('should call getPaginatedCallList successfully', function(done) {
          // TODO: uncomment, update parameter values for getPaginatedCallList call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.page = 56;
          opts.limit = 56;
          opts.storeId = [3.4];

          instance.getPaginatedCallList(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultPhoneCall);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.PhoneCall);
                expect(data.PhoneCallId).to.be.a('number');
                expect(data.PhoneCallId).to.be(0);
                expect(data.TimeOfCall).to.be.a(Date);
                expect(data.TimeOfCall).to.be(new Date());
                expect(data.TimeOfCallLocal).to.be.a(Date);
                expect(data.TimeOfCallLocal).to.be(new Date());
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.StoreName).to.be.a('string');
                expect(data.StoreName).to.be("");
                expect(data.CallerName).to.be.a('string');
                expect(data.CallerName).to.be("");
                expect(data.CallerUserId).to.be.a('number');
                expect(data.CallerUserId).to.be(0);
                expect(data.CallerNumber).to.be.a('string');
                expect(data.CallerNumber).to.be("");
                expect(data.CallLengthInSeconds).to.be.a('number');
                expect(data.CallLengthInSeconds).to.be(0);
                expect(data.CallStatus).to.be.a('string');
                expect(data.CallStatus).to.be("Queued");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
