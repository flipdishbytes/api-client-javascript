/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.CampaignsApi();
  });

  describe('(package)', function() {
    describe('CampaignsApi', function() {
      describe('createLoyaltyCampaign', function() {
        it('should call createLoyaltyCampaign successfully', function(done) {
          // TODO: uncomment, update parameter values for createLoyaltyCampaign call and complete the assertions
          /*
          var appId = "appId_example";
          var campaign = new Flipdish.LoyaltyCampaignBase();
          campaign.OrdersBeforeReceivingVoucher = 0;
          campaign.PercentDiscountAmount = 0;
          campaign.VoucherValidPeriodDays = 0;
          campaign.IncludeDeliveryFee = false;
          campaign.AutoApplyResultingVouchers = false;
          campaign.IncludeExistingOrders = false;
          campaign.IsEnabled = false;
          campaign.StoreIds = [0];

          instance.createLoyaltyCampaign(appId, campaign, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultLoyaltyCampaign);
            expect(data.Data).to.be.a(Flipdish.LoyaltyCampaign);
                  expect(data.Data.CampaignId).to.be.a('number');
              expect(data.Data.CampaignId).to.be(0);
              expect(data.Data.Statistics).to.be.a(Flipdish.CampaignStatistics);
                    expect(data.Data.Statistics.VouchersIssued).to.be.a('number');
                expect(data.Data.Statistics.VouchersIssued).to.be(0);
                expect(data.Data.Statistics.VouchersRedeemed).to.be.a('number');
                expect(data.Data.Statistics.VouchersRedeemed).to.be(0);
                expect(data.Data.Statistics.Conversion).to.be.a('number');
                expect(data.Data.Statistics.Conversion).to.be(0.0);
                expect(data.Data.Statistics.SalesGenerated).to.be.a('number');
                expect(data.Data.Statistics.SalesGenerated).to.be(0.0);
                expect(data.Data.Statistics.ReturnOfInvestment).to.be.a('number');
                expect(data.Data.Statistics.ReturnOfInvestment).to.be(0.0);
              {
                let dataCtr = data.Data.Stores;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StoreCampaignStartTime);
                  expect(data.StoreId).to.be.a('number');
                  expect(data.StoreId).to.be(0);
                  expect(data.TsStart).to.be.a(Date);
                  expect(data.TsStart).to.be(new Date());
  
                        }
              }
              expect(data.Data.OrdersBeforeReceivingVoucher).to.be.a('number');
              expect(data.Data.OrdersBeforeReceivingVoucher).to.be(0);
              expect(data.Data.PercentDiscountAmount).to.be.a('number');
              expect(data.Data.PercentDiscountAmount).to.be(0);
              expect(data.Data.VoucherValidPeriodDays).to.be.a('number');
              expect(data.Data.VoucherValidPeriodDays).to.be(0);
              expect(data.Data.IncludeDeliveryFee).to.be.a('boolean');
              expect(data.Data.IncludeDeliveryFee).to.be(false);
              expect(data.Data.AutoApplyResultingVouchers).to.be.a('boolean');
              expect(data.Data.AutoApplyResultingVouchers).to.be(false);
              expect(data.Data.IncludeExistingOrders).to.be.a('boolean');
              expect(data.Data.IncludeExistingOrders).to.be(false);
              expect(data.Data.IsEnabled).to.be.a('boolean');
              expect(data.Data.IsEnabled).to.be(false);
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRetentionCampaign', function() {
        it('should call createRetentionCampaign successfully', function(done) {
          // TODO: uncomment, update parameter values for createRetentionCampaign call and complete the assertions
          /*
          var appId = "appId_example";
          var campaign = new Flipdish.RetentionCampaignBase();
          campaign.NotifyCustomerAfterMinutes = 0;
          campaign.PercentDiscountAmount = 0;
          campaign.LumpDiscountAmount = 0.0;
          campaign.VoucherValidPeriodDays = 0;
          campaign.IncludeDeliveryFee = false;
          campaign.AutoApplyResultingVouchers = false;
          campaign.IncludeExistingOrders = false;
          campaign.IsEnabled = false;
          campaign.StoreIds = [0];

          instance.createRetentionCampaign(appId, campaign, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultRetentionCampaign);
            expect(data.Data).to.be.a(Flipdish.RetentionCampaign);
                  expect(data.Data.CampaignId).to.be.a('number');
              expect(data.Data.CampaignId).to.be(0);
              expect(data.Data.Statistics).to.be.a(Flipdish.CampaignStatistics);
                    expect(data.Data.Statistics.VouchersIssued).to.be.a('number');
                expect(data.Data.Statistics.VouchersIssued).to.be(0);
                expect(data.Data.Statistics.VouchersRedeemed).to.be.a('number');
                expect(data.Data.Statistics.VouchersRedeemed).to.be(0);
                expect(data.Data.Statistics.Conversion).to.be.a('number');
                expect(data.Data.Statistics.Conversion).to.be(0.0);
                expect(data.Data.Statistics.SalesGenerated).to.be.a('number');
                expect(data.Data.Statistics.SalesGenerated).to.be(0.0);
                expect(data.Data.Statistics.ReturnOfInvestment).to.be.a('number');
                expect(data.Data.Statistics.ReturnOfInvestment).to.be(0.0);
              {
                let dataCtr = data.Data.Stores;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StoreCampaignStartTime);
                  expect(data.StoreId).to.be.a('number');
                  expect(data.StoreId).to.be(0);
                  expect(data.TsStart).to.be.a(Date);
                  expect(data.TsStart).to.be(new Date());
  
                        }
              }
              expect(data.Data.NotifyCustomerAfterMinutes).to.be.a('number');
              expect(data.Data.NotifyCustomerAfterMinutes).to.be(0);
              expect(data.Data.PercentDiscountAmount).to.be.a('number');
              expect(data.Data.PercentDiscountAmount).to.be(0);
              expect(data.Data.LumpDiscountAmount).to.be.a('number');
              expect(data.Data.LumpDiscountAmount).to.be(0.0);
              expect(data.Data.VoucherValidPeriodDays).to.be.a('number');
              expect(data.Data.VoucherValidPeriodDays).to.be(0);
              expect(data.Data.IncludeDeliveryFee).to.be.a('boolean');
              expect(data.Data.IncludeDeliveryFee).to.be(false);
              expect(data.Data.AutoApplyResultingVouchers).to.be.a('boolean');
              expect(data.Data.AutoApplyResultingVouchers).to.be(false);
              expect(data.Data.IncludeExistingOrders).to.be.a('boolean');
              expect(data.Data.IncludeExistingOrders).to.be(false);
              expect(data.Data.IsEnabled).to.be.a('boolean');
              expect(data.Data.IsEnabled).to.be(false);
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLoyaltyCampaignsForApp', function() {
        it('should call getLoyaltyCampaignsForApp successfully', function(done) {
          // TODO: uncomment, update parameter values for getLoyaltyCampaignsForApp call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getLoyaltyCampaignsForApp(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultLoyaltyCampaign);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.LoyaltyCampaign);
                expect(data.CampaignId).to.be.a('number');
                expect(data.CampaignId).to.be(0);
                expect(data.Statistics).to.be.a(Flipdish.CampaignStatistics);
                      expect(data.Statistics.VouchersIssued).to.be.a('number');
                  expect(data.Statistics.VouchersIssued).to.be(0);
                  expect(data.Statistics.VouchersRedeemed).to.be.a('number');
                  expect(data.Statistics.VouchersRedeemed).to.be(0);
                  expect(data.Statistics.Conversion).to.be.a('number');
                  expect(data.Statistics.Conversion).to.be(0.0);
                  expect(data.Statistics.SalesGenerated).to.be.a('number');
                  expect(data.Statistics.SalesGenerated).to.be(0.0);
                  expect(data.Statistics.ReturnOfInvestment).to.be.a('number');
                  expect(data.Statistics.ReturnOfInvestment).to.be(0.0);
                {
                  let dataCtr = data.Stores;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.StoreCampaignStartTime);
                    expect(data.StoreId).to.be.a('number');
                    expect(data.StoreId).to.be(0);
                    expect(data.TsStart).to.be.a(Date);
                    expect(data.TsStart).to.be(new Date());
    
                          }
                }
                expect(data.OrdersBeforeReceivingVoucher).to.be.a('number');
                expect(data.OrdersBeforeReceivingVoucher).to.be(0);
                expect(data.PercentDiscountAmount).to.be.a('number');
                expect(data.PercentDiscountAmount).to.be(0);
                expect(data.VoucherValidPeriodDays).to.be.a('number');
                expect(data.VoucherValidPeriodDays).to.be(0);
                expect(data.IncludeDeliveryFee).to.be.a('boolean');
                expect(data.IncludeDeliveryFee).to.be(false);
                expect(data.AutoApplyResultingVouchers).to.be.a('boolean');
                expect(data.AutoApplyResultingVouchers).to.be(false);
                expect(data.IncludeExistingOrders).to.be.a('boolean');
                expect(data.IncludeExistingOrders).to.be(false);
                expect(data.IsEnabled).to.be.a('boolean');
                expect(data.IsEnabled).to.be(false);
                {
                  let dataCtr = data.StoreIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLoyaltyCampaignsForStore', function() {
        it('should call getLoyaltyCampaignsForStore successfully', function(done) {
          // TODO: uncomment, update parameter values for getLoyaltyCampaignsForStore call and complete the assertions
          /*
          var appId = "appId_example";
          var storeId = 56;

          instance.getLoyaltyCampaignsForStore(appId, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultLoyaltyCampaign);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.LoyaltyCampaign);
                expect(data.CampaignId).to.be.a('number');
                expect(data.CampaignId).to.be(0);
                expect(data.Statistics).to.be.a(Flipdish.CampaignStatistics);
                      expect(data.Statistics.VouchersIssued).to.be.a('number');
                  expect(data.Statistics.VouchersIssued).to.be(0);
                  expect(data.Statistics.VouchersRedeemed).to.be.a('number');
                  expect(data.Statistics.VouchersRedeemed).to.be(0);
                  expect(data.Statistics.Conversion).to.be.a('number');
                  expect(data.Statistics.Conversion).to.be(0.0);
                  expect(data.Statistics.SalesGenerated).to.be.a('number');
                  expect(data.Statistics.SalesGenerated).to.be(0.0);
                  expect(data.Statistics.ReturnOfInvestment).to.be.a('number');
                  expect(data.Statistics.ReturnOfInvestment).to.be(0.0);
                {
                  let dataCtr = data.Stores;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.StoreCampaignStartTime);
                    expect(data.StoreId).to.be.a('number');
                    expect(data.StoreId).to.be(0);
                    expect(data.TsStart).to.be.a(Date);
                    expect(data.TsStart).to.be(new Date());
    
                          }
                }
                expect(data.OrdersBeforeReceivingVoucher).to.be.a('number');
                expect(data.OrdersBeforeReceivingVoucher).to.be(0);
                expect(data.PercentDiscountAmount).to.be.a('number');
                expect(data.PercentDiscountAmount).to.be(0);
                expect(data.VoucherValidPeriodDays).to.be.a('number');
                expect(data.VoucherValidPeriodDays).to.be(0);
                expect(data.IncludeDeliveryFee).to.be.a('boolean');
                expect(data.IncludeDeliveryFee).to.be(false);
                expect(data.AutoApplyResultingVouchers).to.be.a('boolean');
                expect(data.AutoApplyResultingVouchers).to.be(false);
                expect(data.IncludeExistingOrders).to.be.a('boolean');
                expect(data.IncludeExistingOrders).to.be(false);
                expect(data.IsEnabled).to.be.a('boolean');
                expect(data.IsEnabled).to.be(false);
                {
                  let dataCtr = data.StoreIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRetentionCampaignsForApp', function() {
        it('should call getRetentionCampaignsForApp successfully', function(done) {
          // TODO: uncomment, update parameter values for getRetentionCampaignsForApp call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getRetentionCampaignsForApp(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultRetentionCampaign);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.RetentionCampaign);
                expect(data.CampaignId).to.be.a('number');
                expect(data.CampaignId).to.be(0);
                expect(data.Statistics).to.be.a(Flipdish.CampaignStatistics);
                      expect(data.Statistics.VouchersIssued).to.be.a('number');
                  expect(data.Statistics.VouchersIssued).to.be(0);
                  expect(data.Statistics.VouchersRedeemed).to.be.a('number');
                  expect(data.Statistics.VouchersRedeemed).to.be(0);
                  expect(data.Statistics.Conversion).to.be.a('number');
                  expect(data.Statistics.Conversion).to.be(0.0);
                  expect(data.Statistics.SalesGenerated).to.be.a('number');
                  expect(data.Statistics.SalesGenerated).to.be(0.0);
                  expect(data.Statistics.ReturnOfInvestment).to.be.a('number');
                  expect(data.Statistics.ReturnOfInvestment).to.be(0.0);
                {
                  let dataCtr = data.Stores;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.StoreCampaignStartTime);
                    expect(data.StoreId).to.be.a('number');
                    expect(data.StoreId).to.be(0);
                    expect(data.TsStart).to.be.a(Date);
                    expect(data.TsStart).to.be(new Date());
    
                          }
                }
                expect(data.NotifyCustomerAfterMinutes).to.be.a('number');
                expect(data.NotifyCustomerAfterMinutes).to.be(0);
                expect(data.PercentDiscountAmount).to.be.a('number');
                expect(data.PercentDiscountAmount).to.be(0);
                expect(data.LumpDiscountAmount).to.be.a('number');
                expect(data.LumpDiscountAmount).to.be(0.0);
                expect(data.VoucherValidPeriodDays).to.be.a('number');
                expect(data.VoucherValidPeriodDays).to.be(0);
                expect(data.IncludeDeliveryFee).to.be.a('boolean');
                expect(data.IncludeDeliveryFee).to.be(false);
                expect(data.AutoApplyResultingVouchers).to.be.a('boolean');
                expect(data.AutoApplyResultingVouchers).to.be(false);
                expect(data.IncludeExistingOrders).to.be.a('boolean');
                expect(data.IncludeExistingOrders).to.be(false);
                expect(data.IsEnabled).to.be.a('boolean');
                expect(data.IsEnabled).to.be(false);
                {
                  let dataCtr = data.StoreIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRetentionCampaignsForStore', function() {
        it('should call getRetentionCampaignsForStore successfully', function(done) {
          // TODO: uncomment, update parameter values for getRetentionCampaignsForStore call and complete the assertions
          /*
          var appId = "appId_example";
          var storeId = 56;

          instance.getRetentionCampaignsForStore(appId, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultRetentionCampaign);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.RetentionCampaign);
                expect(data.CampaignId).to.be.a('number');
                expect(data.CampaignId).to.be(0);
                expect(data.Statistics).to.be.a(Flipdish.CampaignStatistics);
                      expect(data.Statistics.VouchersIssued).to.be.a('number');
                  expect(data.Statistics.VouchersIssued).to.be(0);
                  expect(data.Statistics.VouchersRedeemed).to.be.a('number');
                  expect(data.Statistics.VouchersRedeemed).to.be(0);
                  expect(data.Statistics.Conversion).to.be.a('number');
                  expect(data.Statistics.Conversion).to.be(0.0);
                  expect(data.Statistics.SalesGenerated).to.be.a('number');
                  expect(data.Statistics.SalesGenerated).to.be(0.0);
                  expect(data.Statistics.ReturnOfInvestment).to.be.a('number');
                  expect(data.Statistics.ReturnOfInvestment).to.be(0.0);
                {
                  let dataCtr = data.Stores;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.StoreCampaignStartTime);
                    expect(data.StoreId).to.be.a('number');
                    expect(data.StoreId).to.be(0);
                    expect(data.TsStart).to.be.a(Date);
                    expect(data.TsStart).to.be(new Date());
    
                          }
                }
                expect(data.NotifyCustomerAfterMinutes).to.be.a('number');
                expect(data.NotifyCustomerAfterMinutes).to.be(0);
                expect(data.PercentDiscountAmount).to.be.a('number');
                expect(data.PercentDiscountAmount).to.be(0);
                expect(data.LumpDiscountAmount).to.be.a('number');
                expect(data.LumpDiscountAmount).to.be(0.0);
                expect(data.VoucherValidPeriodDays).to.be.a('number');
                expect(data.VoucherValidPeriodDays).to.be(0);
                expect(data.IncludeDeliveryFee).to.be.a('boolean');
                expect(data.IncludeDeliveryFee).to.be(false);
                expect(data.AutoApplyResultingVouchers).to.be.a('boolean');
                expect(data.AutoApplyResultingVouchers).to.be(false);
                expect(data.IncludeExistingOrders).to.be.a('boolean');
                expect(data.IncludeExistingOrders).to.be(false);
                expect(data.IsEnabled).to.be.a('boolean');
                expect(data.IsEnabled).to.be(false);
                {
                  let dataCtr = data.StoreIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStoreList', function() {
        it('should call getStoreList successfully', function(done) {
          // TODO: uncomment, update parameter values for getStoreList call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getStoreList(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultStoreListItem);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.StoreListItem);
                expect(data.StoreId).to.be.a('number');
                expect(data.StoreId).to.be(0);
                expect(data.StoreName).to.be.a('string');
                expect(data.StoreName).to.be("");
                expect(data.StoreGroupId).to.be.a('number');
                expect(data.StoreGroupId).to.be(0);
                expect(data.StoreGroupName).to.be.a('string');
                expect(data.StoreGroupName).to.be("");
                expect(data.HasLoyaltyCampaign).to.be.a('boolean');
                expect(data.HasLoyaltyCampaign).to.be(false);
                expect(data.HasRetentionCampaign).to.be.a('boolean');
                expect(data.HasRetentionCampaign).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeCampaign', function() {
        it('should call removeCampaign successfully', function(done) {
          // TODO: uncomment, update parameter values for removeCampaign call
          /*
          var appId = "appId_example";
          var campaignId = 56;

          instance.removeCampaign(appId, campaignId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateLoyaltyCampaign', function() {
        it('should call updateLoyaltyCampaign successfully', function(done) {
          // TODO: uncomment, update parameter values for updateLoyaltyCampaign call and complete the assertions
          /*
          var appId = "appId_example";
          var campaignId = 56;
          var campaign = new Flipdish.LoyaltyCampaignBase();
          campaign.OrdersBeforeReceivingVoucher = 0;
          campaign.PercentDiscountAmount = 0;
          campaign.VoucherValidPeriodDays = 0;
          campaign.IncludeDeliveryFee = false;
          campaign.AutoApplyResultingVouchers = false;
          campaign.IncludeExistingOrders = false;
          campaign.IsEnabled = false;
          campaign.StoreIds = [0];

          instance.updateLoyaltyCampaign(appId, campaignId, campaign, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultLoyaltyCampaign);
            expect(data.Data).to.be.a(Flipdish.LoyaltyCampaign);
                  expect(data.Data.CampaignId).to.be.a('number');
              expect(data.Data.CampaignId).to.be(0);
              expect(data.Data.Statistics).to.be.a(Flipdish.CampaignStatistics);
                    expect(data.Data.Statistics.VouchersIssued).to.be.a('number');
                expect(data.Data.Statistics.VouchersIssued).to.be(0);
                expect(data.Data.Statistics.VouchersRedeemed).to.be.a('number');
                expect(data.Data.Statistics.VouchersRedeemed).to.be(0);
                expect(data.Data.Statistics.Conversion).to.be.a('number');
                expect(data.Data.Statistics.Conversion).to.be(0.0);
                expect(data.Data.Statistics.SalesGenerated).to.be.a('number');
                expect(data.Data.Statistics.SalesGenerated).to.be(0.0);
                expect(data.Data.Statistics.ReturnOfInvestment).to.be.a('number');
                expect(data.Data.Statistics.ReturnOfInvestment).to.be(0.0);
              {
                let dataCtr = data.Data.Stores;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StoreCampaignStartTime);
                  expect(data.StoreId).to.be.a('number');
                  expect(data.StoreId).to.be(0);
                  expect(data.TsStart).to.be.a(Date);
                  expect(data.TsStart).to.be(new Date());
  
                        }
              }
              expect(data.Data.OrdersBeforeReceivingVoucher).to.be.a('number');
              expect(data.Data.OrdersBeforeReceivingVoucher).to.be(0);
              expect(data.Data.PercentDiscountAmount).to.be.a('number');
              expect(data.Data.PercentDiscountAmount).to.be(0);
              expect(data.Data.VoucherValidPeriodDays).to.be.a('number');
              expect(data.Data.VoucherValidPeriodDays).to.be(0);
              expect(data.Data.IncludeDeliveryFee).to.be.a('boolean');
              expect(data.Data.IncludeDeliveryFee).to.be(false);
              expect(data.Data.AutoApplyResultingVouchers).to.be.a('boolean');
              expect(data.Data.AutoApplyResultingVouchers).to.be(false);
              expect(data.Data.IncludeExistingOrders).to.be.a('boolean');
              expect(data.Data.IncludeExistingOrders).to.be(false);
              expect(data.Data.IsEnabled).to.be.a('boolean');
              expect(data.Data.IsEnabled).to.be(false);
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateRetentionCampaign', function() {
        it('should call updateRetentionCampaign successfully', function(done) {
          // TODO: uncomment, update parameter values for updateRetentionCampaign call and complete the assertions
          /*
          var appId = "appId_example";
          var campaignId = 56;
          var campaign = new Flipdish.RetentionCampaignBase();
          campaign.NotifyCustomerAfterMinutes = 0;
          campaign.PercentDiscountAmount = 0;
          campaign.LumpDiscountAmount = 0.0;
          campaign.VoucherValidPeriodDays = 0;
          campaign.IncludeDeliveryFee = false;
          campaign.AutoApplyResultingVouchers = false;
          campaign.IncludeExistingOrders = false;
          campaign.IsEnabled = false;
          campaign.StoreIds = [0];

          instance.updateRetentionCampaign(appId, campaignId, campaign, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultRetentionCampaign);
            expect(data.Data).to.be.a(Flipdish.RetentionCampaign);
                  expect(data.Data.CampaignId).to.be.a('number');
              expect(data.Data.CampaignId).to.be(0);
              expect(data.Data.Statistics).to.be.a(Flipdish.CampaignStatistics);
                    expect(data.Data.Statistics.VouchersIssued).to.be.a('number');
                expect(data.Data.Statistics.VouchersIssued).to.be(0);
                expect(data.Data.Statistics.VouchersRedeemed).to.be.a('number');
                expect(data.Data.Statistics.VouchersRedeemed).to.be(0);
                expect(data.Data.Statistics.Conversion).to.be.a('number');
                expect(data.Data.Statistics.Conversion).to.be(0.0);
                expect(data.Data.Statistics.SalesGenerated).to.be.a('number');
                expect(data.Data.Statistics.SalesGenerated).to.be(0.0);
                expect(data.Data.Statistics.ReturnOfInvestment).to.be.a('number');
                expect(data.Data.Statistics.ReturnOfInvestment).to.be(0.0);
              {
                let dataCtr = data.Data.Stores;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.StoreCampaignStartTime);
                  expect(data.StoreId).to.be.a('number');
                  expect(data.StoreId).to.be(0);
                  expect(data.TsStart).to.be.a(Date);
                  expect(data.TsStart).to.be(new Date());
  
                        }
              }
              expect(data.Data.NotifyCustomerAfterMinutes).to.be.a('number');
              expect(data.Data.NotifyCustomerAfterMinutes).to.be(0);
              expect(data.Data.PercentDiscountAmount).to.be.a('number');
              expect(data.Data.PercentDiscountAmount).to.be(0);
              expect(data.Data.LumpDiscountAmount).to.be.a('number');
              expect(data.Data.LumpDiscountAmount).to.be(0.0);
              expect(data.Data.VoucherValidPeriodDays).to.be.a('number');
              expect(data.Data.VoucherValidPeriodDays).to.be(0);
              expect(data.Data.IncludeDeliveryFee).to.be.a('boolean');
              expect(data.Data.IncludeDeliveryFee).to.be(false);
              expect(data.Data.AutoApplyResultingVouchers).to.be.a('boolean');
              expect(data.Data.AutoApplyResultingVouchers).to.be(false);
              expect(data.Data.IncludeExistingOrders).to.be.a('boolean');
              expect(data.Data.IncludeExistingOrders).to.be(false);
              expect(data.Data.IsEnabled).to.be.a('boolean');
              expect(data.Data.IsEnabled).to.be(false);
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
