/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.HydraApi();
  });

  describe('(package)', function() {
    describe('HydraApi', function() {
      describe('assignEmv', function() {
        it('should call assignEmv successfully', function(done) {
          // TODO: uncomment, update parameter values for assignEmv call
          /*
          var appId = "appId_example";
          var hydraConfigId = 56;
          var emvTerminalId = 56;

          instance.assignEmv(appId, hydraConfigId, emvTerminalId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('attachStoreToTerminal', function() {
        it('should call attachStoreToTerminal successfully', function(done) {
          // TODO: uncomment, update parameter values for attachStoreToTerminal call and complete the assertions
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";
          var storeId = 56;

          instance.attachStoreToTerminal(appId, deviceId, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultHydraStatus);
            expect(data.Data).to.be.a(Flipdish.HydraStatus);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.Data.IsRegistered).to.be.a('boolean');
              expect(data.Data.IsRegistered).to.be(false);
              expect(data.Data.PinCode).to.be.a('number');
              expect(data.Data.PinCode).to.be(0);
              {
                let dataCtr = data.Data.Images;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.UserType).to.be.a('string');
              expect(data.Data.UserType).to.be("Kiosk");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelEmvPayment', function() {
        it('should call cancelEmvPayment successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelEmvPayment call
          /*
          var orderId = 56;
          var appId = "appId_example";

          instance.cancelEmvPayment(orderId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('detachStoreFromTerminal', function() {
        it('should call detachStoreFromTerminal successfully', function(done) {
          // TODO: uncomment, update parameter values for detachStoreFromTerminal call and complete the assertions
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";
          var storeId = 56;

          instance.detachStoreFromTerminal(appId, deviceId, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultHydraStatus);
            expect(data.Data).to.be.a(Flipdish.HydraStatus);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.Data.IsRegistered).to.be.a('boolean');
              expect(data.Data.IsRegistered).to.be(false);
              expect(data.Data.PinCode).to.be.a('number');
              expect(data.Data.PinCode).to.be(0);
              {
                let dataCtr = data.Data.Images;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.UserType).to.be.a('string');
              expect(data.Data.UserType).to.be("Kiosk");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAttachedDevices', function() {
        it('should call getAttachedDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for getAttachedDevices call and complete the assertions
          /*
          var appId = "appId_example";
          var deviceType = "deviceType_example";
          var opts = {};
          opts.pageIndex = 56;
          opts.pageSize = 56;
          opts.storeId = 56;
          opts.deviceName = "deviceName_example";
          opts.deviceSerial = "deviceSerial_example";

          instance.getAttachedDevices(appId, deviceType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultHydraDeviceDetails);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.HydraDeviceDetails);
                expect(data.HydraConfigId).to.be.a('number');
                expect(data.HydraConfigId).to.be(0);
                expect(data.DeviceId).to.be.a('string');
                expect(data.DeviceId).to.be("");
                expect(data.DeviceType).to.be.a('string');
                expect(data.DeviceType).to.be("Kiosk");
                expect(data.Status).to.be.a('string');
                expect(data.Status).to.be("Online");
                expect(data.DeviceName).to.be.a('string');
                expect(data.DeviceName).to.be("");
                {
                  let dataCtr = data.StoreNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.HydraStoreData);
                    expect(data.StoreId).to.be.a('number');
                    expect(data.StoreId).to.be(0);
                    expect(data.StoreName).to.be.a('string');
                    expect(data.StoreName).to.be("");
    
                          }
                }
                expect(data.LastPollUtc).to.be.a(Date);
                expect(data.LastPollUtc).to.be(new Date());
                expect(data.Version).to.be.a('string');
                expect(data.Version).to.be("");
                expect(data.BuildNumber).to.be.a('string');
                expect(data.BuildNumber).to.be("");
                expect(data.GitSha).to.be.a('string');
                expect(data.GitSha).to.be("");
                expect(data.GitBranch).to.be.a('string');
                expect(data.GitBranch).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEMVTerminalDetails', function() {
        it('should call getEMVTerminalDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getEMVTerminalDetails call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getEMVTerminalDetails(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultPaymentTerminalDetails);
            expect(data.Data).to.be.a(Flipdish.PaymentTerminalDetails);
                  expect(data.Data.TerminalId).to.be.a('string');
              expect(data.Data.TerminalId).to.be("");
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("");
              expect(data.Data.Currency).to.be.a('string');
              expect(data.Data.Currency).to.be("");
              expect(data.Data.Uri).to.be.a('string');
              expect(data.Data.Uri).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEmvOrderState', function() {
        it('should call getEmvOrderState successfully', function(done) {
          // TODO: uncomment, update parameter values for getEmvOrderState call and complete the assertions
          /*
          var orderId = 56;
          var appId = "appId_example";

          instance.getEmvOrderState(orderId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultPaymentTerminalTransactionDetails);
            expect(data.Data).to.be.a(Flipdish.PaymentTerminalTransactionDetails);
                  expect(data.Data.CardSchemeName).to.be.a('string');
              expect(data.Data.CardSchemeName).to.be("");
              expect(data.Data.DateOfExpiry).to.be.a('string');
              expect(data.Data.DateOfExpiry).to.be("");
              expect(data.Data.AuthCode).to.be.a('string');
              expect(data.Data.AuthCode).to.be("");
              expect(data.Data.TransactionResult).to.be.a('string');
              expect(data.Data.TransactionResult).to.be("");
              expect(data.Data.PrimaryAccountNumber).to.be.a('string');
              expect(data.Data.PrimaryAccountNumber).to.be("");
              expect(data.Data.CardholderVerificationMethod).to.be.a('string');
              expect(data.Data.CardholderVerificationMethod).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRegistration', function() {
        it('should call getRegistration successfully', function(done) {
          // TODO: uncomment getRegistration call and complete the assertions
          /*

          instance.getRegistration(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultHydraStatus);
            expect(data.Data).to.be.a(Flipdish.HydraStatus);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.Data.IsRegistered).to.be.a('boolean');
              expect(data.Data.IsRegistered).to.be(false);
              expect(data.Data.PinCode).to.be.a('number');
              expect(data.Data.PinCode).to.be(0);
              {
                let dataCtr = data.Data.Images;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.UserType).to.be.a('string');
              expect(data.Data.UserType).to.be("Kiosk");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSettings', function() {
        it('should call getSettings successfully', function(done) {
          // TODO: uncomment getSettings call and complete the assertions
          /*

          instance.getSettings(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultHydraConfig);
            expect(data.Data).to.be.a(Flipdish.HydraConfig);
                  expect(data.Data.MinimumVersion).to.be.a('string');
              expect(data.Data.MinimumVersion).to.be("");
              {
                let dataCtr = data.Data.PaymentOptions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("Online");
                }
              }
              expect(data.Data.DeviceSettings).to.be.a(Flipdish.DeviceSettings);
                    expect(data.Data.DeviceSettings.Volume).to.be.a('number');
                expect(data.Data.DeviceSettings.Volume).to.be(0);
                expect(data.Data.DeviceSettings.FontSize).to.be.a('number');
                expect(data.Data.DeviceSettings.FontSize).to.be(0.0);
                expect(data.Data.DeviceSettings.Brightness).to.be.a('number');
                expect(data.Data.DeviceSettings.Brightness).to.be(0);
              expect(data.Data.Version).to.be.a('string');
              expect(data.Data.Version).to.be("");
              expect(data.Data.BuildNumber).to.be.a('string');
              expect(data.Data.BuildNumber).to.be("");
              expect(data.Data.GitSha).to.be.a('string');
              expect(data.Data.GitSha).to.be("");
              expect(data.Data.GitBranch).to.be.a('string');
              expect(data.Data.GitBranch).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('hydraCreateEmv', function() {
        it('should call hydraCreateEmv successfully', function(done) {
          // TODO: uncomment, update parameter values for hydraCreateEmv call and complete the assertions
          /*
          var appId = "appId_example";
          var emv = new Flipdish.EmvTerminal();
          emv.EmvTerminalId = 0;
          emv.TerminalId = "";
          emv.Url = "";
          emv.Token = "";
          emv.SoftwareHouseId = "";
          emv.InstallerId = "";

          instance.hydraCreateEmv(appId, emv, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('hydraDeleteEmv', function() {
        it('should call hydraDeleteEmv successfully', function(done) {
          // TODO: uncomment, update parameter values for hydraDeleteEmv call and complete the assertions
          /*
          var appId = "appId_example";
          var id = 56;

          instance.hydraDeleteEmv(appId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('hydraGetEmvsForAppId', function() {
        it('should call hydraGetEmvsForAppId successfully', function(done) {
          // TODO: uncomment, update parameter values for hydraGetEmvsForAppId call and complete the assertions
          /*
          var appId = "appId_example";

          instance.hydraGetEmvsForAppId(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultEmvTerminalWithAssignments);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.EmvTerminalWithAssignments);
                expect(data.EmvTerminalId).to.be.a('string');
                expect(data.EmvTerminalId).to.be("");
                expect(data.TerminalId).to.be.a('string');
                expect(data.TerminalId).to.be("");
                expect(data.IsAssignedToHydraDevice).to.be.a('boolean');
                expect(data.IsAssignedToHydraDevice).to.be(false);
                expect(data.HydraConfigId).to.be.a('number');
                expect(data.HydraConfigId).to.be(0);
                expect(data.HydraDeviceId).to.be.a('string');
                expect(data.HydraDeviceId).to.be("");
                expect(data.HydraName).to.be.a('string');
                expect(data.HydraName).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loginWithDeviceId', function() {
        it('should call loginWithDeviceId successfully', function(done) {
          // TODO: uncomment, update parameter values for loginWithDeviceId call
          /*
          var deviceId = "deviceId_example";
          var opts = {};
          opts.hydraUserType = "hydraUserType_example";
          opts.serialNumber = "serialNumber_example";

          instance.loginWithDeviceId(deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('register', function() {
        it('should call register successfully', function(done) {
          // TODO: uncomment, update parameter values for register call and complete the assertions
          /*
          var appId = "appId_example";
          var hydraRegistration = new Flipdish.HydraRegistrationRequest();
          hydraRegistration.StoreIds = [0];
          hydraRegistration.DeviceName = "";
          hydraRegistration.PinCode = 0;

          instance.register(appId, hydraRegistration, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultHydraStatus);
            expect(data.Data).to.be.a(Flipdish.HydraStatus);
                  expect(data.Data.AppId).to.be.a('string');
              expect(data.Data.AppId).to.be("");
              {
                let dataCtr = data.Data.StoreIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.Data.IsRegistered).to.be.a('boolean');
              expect(data.Data.IsRegistered).to.be(false);
              expect(data.Data.PinCode).to.be.a('number');
              expect(data.Data.PinCode).to.be(0);
              {
                let dataCtr = data.Data.Images;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.Data.UserType).to.be.a('string');
              expect(data.Data.UserType).to.be("Kiosk");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unAssign', function() {
        it('should call unAssign successfully', function(done) {
          // TODO: uncomment, update parameter values for unAssign call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";

          instance.unAssign(appId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unassignEmv', function() {
        it('should call unassignEmv successfully', function(done) {
          // TODO: uncomment, update parameter values for unassignEmv call
          /*
          var appId = "appId_example";
          var hydraConfigId = 56;

          instance.unassignEmv(appId, hydraConfigId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
