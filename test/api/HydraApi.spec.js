/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.HydraApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HydraApi', function() {
    describe('assignEmv', function() {
      it('should call assignEmv successfully', function(done) {
        //uncomment below and update the code to test assignEmv
        //instance.assignEmv(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachStoreToKiosk', function() {
      it('should call attachStoreToKiosk successfully', function(done) {
        //uncomment below and update the code to test attachStoreToKiosk
        //instance.attachStoreToKiosk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachStoreToTerminal', function() {
      it('should call attachStoreToTerminal successfully', function(done) {
        //uncomment below and update the code to test attachStoreToTerminal
        //instance.attachStoreToTerminal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelEmvPayment', function() {
      it('should call cancelEmvPayment successfully', function(done) {
        //uncomment below and update the code to test cancelEmvPayment
        //instance.cancelEmvPayment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachStoreFromTerminal', function() {
      it('should call detachStoreFromTerminal successfully', function(done) {
        //uncomment below and update the code to test detachStoreFromTerminal
        //instance.detachStoreFromTerminal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAblyToken', function() {
      it('should call getAblyToken successfully', function(done) {
        //uncomment below and update the code to test getAblyToken
        //instance.getAblyToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAttachedDevice', function() {
      it('should call getAttachedDevice successfully', function(done) {
        //uncomment below and update the code to test getAttachedDevice
        //instance.getAttachedDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAttachedDevices', function() {
      it('should call getAttachedDevices successfully', function(done) {
        //uncomment below and update the code to test getAttachedDevices
        //instance.getAttachedDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEMVTerminalDetails', function() {
      it('should call getEMVTerminalDetails successfully', function(done) {
        //uncomment below and update the code to test getEMVTerminalDetails
        //instance.getEMVTerminalDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmvOrderState', function() {
      it('should call getEmvOrderState successfully', function(done) {
        //uncomment below and update the code to test getEmvOrderState
        //instance.getEmvOrderState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKioskCashPaymentSettings', function() {
      it('should call getKioskCashPaymentSettings successfully', function(done) {
        //uncomment below and update the code to test getKioskCashPaymentSettings
        //instance.getKioskCashPaymentSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKioskSettings', function() {
      it('should call getKioskSettings successfully', function(done) {
        //uncomment below and update the code to test getKioskSettings
        //instance.getKioskSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRegistration', function() {
      it('should call getRegistration successfully', function(done) {
        //uncomment below and update the code to test getRegistration
        //instance.getRegistration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSettings', function() {
      it('should call getSettings successfully', function(done) {
        //uncomment below and update the code to test getSettings
        //instance.getSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hydraCreateEmv', function() {
      it('should call hydraCreateEmv successfully', function(done) {
        //uncomment below and update the code to test hydraCreateEmv
        //instance.hydraCreateEmv(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hydraDeleteEmv', function() {
      it('should call hydraDeleteEmv successfully', function(done) {
        //uncomment below and update the code to test hydraDeleteEmv
        //instance.hydraDeleteEmv(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hydraDetachStoreFromKiosk', function() {
      it('should call hydraDetachStoreFromKiosk successfully', function(done) {
        //uncomment below and update the code to test hydraDetachStoreFromKiosk
        //instance.hydraDetachStoreFromKiosk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hydraGetEmvsForAppId', function() {
      it('should call hydraGetEmvsForAppId successfully', function(done) {
        //uncomment below and update the code to test hydraGetEmvsForAppId
        //instance.hydraGetEmvsForAppId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loginWithDeviceId', function() {
      it('should call loginWithDeviceId successfully', function(done) {
        //uncomment below and update the code to test loginWithDeviceId
        //instance.loginWithDeviceId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('register', function() {
      it('should call register successfully', function(done) {
        //uncomment below and update the code to test register
        //instance.register(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unAssign', function() {
      it('should call unAssign successfully', function(done) {
        //uncomment below and update the code to test unAssign
        //instance.unAssign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unassignEmv', function() {
      it('should call unassignEmv successfully', function(done) {
        //uncomment below and update the code to test unassignEmv
        //instance.unassignEmv(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKioskCashVisibilitySettings', function() {
      it('should call updateKioskCashVisibilitySettings successfully', function(done) {
        //uncomment below and update the code to test updateKioskCashVisibilitySettings
        //instance.updateKioskCashVisibilitySettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKioskSettings', function() {
      it('should call updateKioskSettings successfully', function(done) {
        //uncomment below and update the code to test updateKioskSettings
        //instance.updateKioskSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
