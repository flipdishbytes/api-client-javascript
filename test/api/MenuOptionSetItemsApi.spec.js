/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.MenuOptionSetItemsApi();
  });

  describe('(package)', function() {
    describe('MenuOptionSetItemsApi', function() {
      describe('addMenuItemOptionSetItem', function() {
        it('should call addMenuItemOptionSetItem successfully', function(done) {
          // TODO: uncomment, update parameter values for addMenuItemOptionSetItem call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;
          var menuItemOptionSetItem = new Flipdish.MenuItemOptionSetItemBase();
          menuItemOptionSetItem.Name = "";
          menuItemOptionSetItem.Price = 0.0;
          menuItemOptionSetItem.IsAvailable = false;
          menuItemOptionSetItem.DisplayOrder = 0;
          menuItemOptionSetItem.CellLayoutType = "Small";
          menuItemOptionSetItem.ImageUrl = "";

          instance.addMenuItemOptionSetItem(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItem, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOptionSetItemImage', function() {
        it('should call deleteOptionSetItemImage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOptionSetItemImage call
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;
          var menuItemOptionSetItemId = 56;

          instance.deleteOptionSetItemImage(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuItemOptionSetItemById', function() {
        it('should call getMenuItemOptionSetItemById successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuItemOptionSetItemById call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;
          var menuItemOptionSetItemId = 56;

          instance.getMenuItemOptionSetItemById(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultMenuItemOptionSetItem);
            expect(data.Data).to.be.a(Flipdish.MenuItemOptionSetItem);
                  expect(data.Data.MenuItemOptionSetItemId).to.be.a('number');
              expect(data.Data.MenuItemOptionSetItemId).to.be(0);
              expect(data.Data.PublicId).to.be.a('string');
              expect(data.Data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
              {
                let dataCtr = data.Data.Metadata;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.CreateMetadata);
                  expect(data.StoreId).to.be.a('number');
                  expect(data.StoreId).to.be(0);
                  expect(data.Key).to.be.a('string');
                  expect(data.Key).to.be("");
                  expect(data.Value).to.be.a('string');
                  expect(data.Value).to.be("");
  
                        }
              }
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.Price).to.be.a('number');
              expect(data.Data.Price).to.be(0.0);
              expect(data.Data.IsAvailable).to.be.a('boolean');
              expect(data.Data.IsAvailable).to.be(false);
              expect(data.Data.DisplayOrder).to.be.a('number');
              expect(data.Data.DisplayOrder).to.be(0);
              expect(data.Data.CellLayoutType).to.be.a('string');
              expect(data.Data.CellLayoutType).to.be("Small");
              expect(data.Data.ImageUrl).to.be.a('string');
              expect(data.Data.ImageUrl).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuItemOptionSetItems', function() {
        it('should call getMenuItemOptionSetItems successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuItemOptionSetItems call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;

          instance.getMenuItemOptionSetItems(menuId, menuSectionId, menuSectionItemId, optionSetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultMenuItemOptionSetItem);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.MenuItemOptionSetItem);
                expect(data.MenuItemOptionSetItemId).to.be.a('number');
                expect(data.MenuItemOptionSetItemId).to.be(0);
                expect(data.PublicId).to.be.a('string');
                expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                {
                  let dataCtr = data.Metadata;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.CreateMetadata);
                    expect(data.StoreId).to.be.a('number');
                    expect(data.StoreId).to.be(0);
                    expect(data.Key).to.be.a('string');
                    expect(data.Key).to.be("");
                    expect(data.Value).to.be.a('string');
                    expect(data.Value).to.be("");
    
                          }
                }
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.Price).to.be.a('number');
                expect(data.Price).to.be(0.0);
                expect(data.IsAvailable).to.be.a('boolean');
                expect(data.IsAvailable).to.be(false);
                expect(data.DisplayOrder).to.be.a('number');
                expect(data.DisplayOrder).to.be(0);
                expect(data.CellLayoutType).to.be.a('string');
                expect(data.CellLayoutType).to.be("Small");
                expect(data.ImageUrl).to.be.a('string');
                expect(data.ImageUrl).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeMenuItemOptionSetItem', function() {
        it('should call removeMenuItemOptionSetItem successfully', function(done) {
          // TODO: uncomment, update parameter values for removeMenuItemOptionSetItem call
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;
          var menuItemOptionSetItemId = 56;

          instance.removeMenuItemOptionSetItem(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setOptionSetItemTax', function() {
        it('should call setOptionSetItemTax successfully', function(done) {
          // TODO: uncomment, update parameter values for setOptionSetItemTax call
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;
          var menuItemOptionSetItemId = 56;
          var taxRateId = 56;

          instance.setOptionSetItemTax(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, taxRateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateMenuItemOptionSetItem', function() {
        it('should call updateMenuItemOptionSetItem successfully', function(done) {
          // TODO: uncomment, update parameter values for updateMenuItemOptionSetItem call
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;
          var menuItemOptionSetItemId = 56;
          var menuItemOptionSetItem = new Flipdish.MenuItemOptionSetItemBase();
          menuItemOptionSetItem.Name = "";
          menuItemOptionSetItem.Price = 0.0;
          menuItemOptionSetItem.IsAvailable = false;
          menuItemOptionSetItem.DisplayOrder = 0;
          menuItemOptionSetItem.CellLayoutType = "Small";
          menuItemOptionSetItem.ImageUrl = "";
          var opts = {};
          opts.undoAfter = 1.2;

          instance.updateMenuItemOptionSetItem(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, menuItemOptionSetItem, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadOptionSetItemImage', function() {
        it('should call uploadOptionSetItemImage successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadOptionSetItemImage call and complete the assertions
          /*
          var menuId = 56;
          var menuSectionId = 56;
          var menuSectionItemId = 56;
          var optionSetId = 56;
          var menuItemOptionSetItemId = 56;
          var Image = "/path/to/file.txt";

          instance.uploadOptionSetItemImage(menuId, menuSectionId, menuSectionItemId, optionSetId, menuItemOptionSetItemId, Image, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
