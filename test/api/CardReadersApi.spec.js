/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.CardReadersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CardReadersApi', function() {
    describe('cancelCurrentlyInitiatedBluetoothDeviceUpdate', function() {
      it('should call cancelCurrentlyInitiatedBluetoothDeviceUpdate successfully', function(done) {
        //uncomment below and update the code to test cancelCurrentlyInitiatedBluetoothDeviceUpdate
        //instance.cancelCurrentlyInitiatedBluetoothDeviceUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelReaderAction', function() {
      it('should call cancelReaderAction successfully', function(done) {
        //uncomment below and update the code to test cancelReaderAction
        //instance.cancelReaderAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cardReadersGetReader', function() {
      it('should call cardReadersGetReader successfully', function(done) {
        //uncomment below and update the code to test cardReadersGetReader
        //instance.cardReadersGetReader(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateStripeTerminalLocation', function() {
      it('should call generateStripeTerminalLocation successfully', function(done) {
        //uncomment below and update the code to test generateStripeTerminalLocation
        //instance.generateStripeTerminalLocation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBluetoothTerminalStatus', function() {
      it('should call getBluetoothTerminalStatus successfully', function(done) {
        //uncomment below and update the code to test getBluetoothTerminalStatus
        //instance.getBluetoothTerminalStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStripeConnectionToken', function() {
      it('should call getStripeConnectionToken successfully', function(done) {
        //uncomment below and update the code to test getStripeConnectionToken
        //instance.getStripeConnectionToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateBluetoothTerminalDeviceUpdateCheck', function() {
      it('should call initiateBluetoothTerminalDeviceUpdateCheck successfully', function(done) {
        //uncomment below and update the code to test initiateBluetoothTerminalDeviceUpdateCheck
        //instance.initiateBluetoothTerminalDeviceUpdateCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateKioskBluetoothPairingMode', function() {
      it('should call initiateKioskBluetoothPairingMode successfully', function(done) {
        //uncomment below and update the code to test initiateKioskBluetoothPairingMode
        //instance.initiateKioskBluetoothPairingMode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateKioskBluetoothUpdateInstall', function() {
      it('should call initiateKioskBluetoothUpdateInstall successfully', function(done) {
        //uncomment below and update the code to test initiateKioskBluetoothUpdateInstall
        //instance.initiateKioskBluetoothUpdateInstall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateReaderProcessPaymentIntent', function() {
      it('should call initiateReaderProcessPaymentIntent successfully', function(done) {
        //uncomment below and update the code to test initiateReaderProcessPaymentIntent
        //instance.initiateReaderProcessPaymentIntent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerStripeTerminal', function() {
      it('should call registerStripeTerminal successfully', function(done) {
        //uncomment below and update the code to test registerStripeTerminal
        //instance.registerStripeTerminal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unRegisterTerminal', function() {
      it('should call unRegisterTerminal successfully', function(done) {
        //uncomment below and update the code to test unRegisterTerminal
        //instance.unRegisterTerminal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unpairCurrentlyPairedBluetoothDevice', function() {
      it('should call unpairCurrentlyPairedBluetoothDevice successfully', function(done) {
        //uncomment below and update the code to test unpairCurrentlyPairedBluetoothDevice
        //instance.unpairCurrentlyPairedBluetoothDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
