/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.CardReadersApi();
  });

  describe('(package)', function() {
    describe('CardReadersApi', function() {
      describe('authorizeStripeTerminal', function() {
        it('should call authorizeStripeTerminal successfully', function(done) {
          // TODO: uncomment authorizeStripeTerminal call and complete the assertions
          /*

          instance.authorizeStripeTerminal(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStripeTerminalPrivateKey);
            expect(data.Data).to.be.a(Flipdish.StripeTerminalPrivateKey);
                  expect(data.Data.Location).to.be.a('string');
              expect(data.Data.Location).to.be("");
              expect(data.Data.Secret).to.be.a('string');
              expect(data.Data.Secret).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('authorizeStripeTerminal_0', function() {
        it('should call authorizeStripeTerminal_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for authorizeStripeTerminal_0 call and complete the assertions
          /*
          var appId = "appId_example";

          instance.authorizeStripeTerminal_0(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStripeTerminalPrivateKey);
            expect(data.Data).to.be.a(Flipdish.StripeTerminalPrivateKey);
                  expect(data.Data.Location).to.be.a('string');
              expect(data.Data.Location).to.be("");
              expect(data.Data.Secret).to.be.a('string');
              expect(data.Data.Secret).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBluetoothTerminalStatus', function() {
        it('should call getBluetoothTerminalStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getBluetoothTerminalStatus call and complete the assertions
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";

          instance.getBluetoothTerminalStatus(appId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultBluetoothTerminalStatus);
            expect(data.Data).to.be.a(Flipdish.BluetoothTerminalStatus);
                  expect(data.Data.SerialNumber).to.be.a('string');
              expect(data.Data.SerialNumber).to.be("");
              expect(data.Data.SoftwareVersion).to.be.a('string');
              expect(data.Data.SoftwareVersion).to.be("");
              expect(data.Data.DeviceType).to.be.a('string');
              expect(data.Data.DeviceType).to.be("CHIPPER_2X");
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("Not_Connected");
              expect(data.Data.BatteryLevel).to.be.a('number');
              expect(data.Data.BatteryLevel).to.be(0.0);
              expect(data.Data.UpdateTime).to.be.a(Date);
              expect(data.Data.UpdateTime).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initiateBluetoothTerminalDeviceUpdateCheck', function() {
        it('should call initiateBluetoothTerminalDeviceUpdateCheck successfully', function(done) {
          // TODO: uncomment, update parameter values for initiateBluetoothTerminalDeviceUpdateCheck call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";
          var terminalType = "terminalType_example";

          instance.initiateBluetoothTerminalDeviceUpdateCheck(appId, deviceId, terminalType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initiateKioskBluetoothPairingMode', function() {
        it('should call initiateKioskBluetoothPairingMode successfully', function(done) {
          // TODO: uncomment, update parameter values for initiateKioskBluetoothPairingMode call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";
          var terminalType = "terminalType_example";

          instance.initiateKioskBluetoothPairingMode(appId, deviceId, terminalType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initiateKioskUpdateInstallForBluetoothTerminal', function() {
        it('should call initiateKioskUpdateInstallForBluetoothTerminal successfully', function(done) {
          // TODO: uncomment, update parameter values for initiateKioskUpdateInstallForBluetoothTerminal call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";
          var terminalType = "terminalType_example";

          instance.initiateKioskUpdateInstallForBluetoothTerminal(appId, deviceId, terminalType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unpairCurrentlyPairedBluetoothDevice', function() {
        it('should call unpairCurrentlyPairedBluetoothDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for unpairCurrentlyPairedBluetoothDevice call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";

          instance.unpairCurrentlyPairedBluetoothDevice(appId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
