/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.CardReadersApi();
  });

  describe('(package)', function() {
    describe('CardReadersApi', function() {
      describe('cancelCurrentlyInitiatedBluetoothDeviceUpdate', function() {
        it('should call cancelCurrentlyInitiatedBluetoothDeviceUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelCurrentlyInitiatedBluetoothDeviceUpdate call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";
          var terminalType = "terminalType_example";

          instance.cancelCurrentlyInitiatedBluetoothDeviceUpdate(appId, deviceId, terminalType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cancelReaderAction', function() {
        it('should call cancelReaderAction successfully', function(done) {
          // TODO: uncomment, update parameter values for cancelReaderAction call and complete the assertions
          /*
          var readerId = "readerId_example";
          var appId = "appId_example";

          instance.cancelReaderAction(readerId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultCardReader);
            expect(data.Data).to.be.a(Flipdish.CardReader);
                  expect(data.Data.Id).to.be.a('string');
              expect(data.Data.Id).to.be("");
              expect(data.Data.DeviceSoftwareVersion).to.be.a('string');
              expect(data.Data.DeviceSoftwareVersion).to.be("");
              expect(data.Data.SerialNumber).to.be.a('string');
              expect(data.Data.SerialNumber).to.be("");
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("");
              expect(data.Data.RegistrationCode).to.be.a('string');
              expect(data.Data.RegistrationCode).to.be("");
              expect(data.Data.DeviceType).to.be.a('string');
              expect(data.Data.DeviceType).to.be("");
              expect(data.Data.Deleted).to.be.a('boolean');
              expect(data.Data.Deleted).to.be(false);
              expect(data.Data.Action).to.be.a(Flipdish.ReaderActionStateInfo);
                    expect(data.Data.Action.ActionState).to.be.a('string');
                expect(data.Data.Action.ActionState).to.be("");
                expect(data.Data.Action.FailureCode).to.be.a('string');
                expect(data.Data.Action.FailureCode).to.be("");
                expect(data.Data.Action.FailureMessage).to.be.a('string');
                expect(data.Data.Action.FailureMessage).to.be("");
                expect(data.Data.Action.Type).to.be.a('string');
                expect(data.Data.Action.Type).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cardReadersGetReader', function() {
        it('should call cardReadersGetReader successfully', function(done) {
          // TODO: uncomment, update parameter values for cardReadersGetReader call and complete the assertions
          /*
          var readerId = "readerId_example";
          var appId = "appId_example";

          instance.cardReadersGetReader(readerId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultCardReader);
            expect(data.Data).to.be.a(Flipdish.CardReader);
                  expect(data.Data.Id).to.be.a('string');
              expect(data.Data.Id).to.be("");
              expect(data.Data.DeviceSoftwareVersion).to.be.a('string');
              expect(data.Data.DeviceSoftwareVersion).to.be("");
              expect(data.Data.SerialNumber).to.be.a('string');
              expect(data.Data.SerialNumber).to.be("");
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("");
              expect(data.Data.RegistrationCode).to.be.a('string');
              expect(data.Data.RegistrationCode).to.be("");
              expect(data.Data.DeviceType).to.be.a('string');
              expect(data.Data.DeviceType).to.be("");
              expect(data.Data.Deleted).to.be.a('boolean');
              expect(data.Data.Deleted).to.be(false);
              expect(data.Data.Action).to.be.a(Flipdish.ReaderActionStateInfo);
                    expect(data.Data.Action.ActionState).to.be.a('string');
                expect(data.Data.Action.ActionState).to.be("");
                expect(data.Data.Action.FailureCode).to.be.a('string');
                expect(data.Data.Action.FailureCode).to.be("");
                expect(data.Data.Action.FailureMessage).to.be.a('string');
                expect(data.Data.Action.FailureMessage).to.be("");
                expect(data.Data.Action.Type).to.be.a('string');
                expect(data.Data.Action.Type).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generateStripeTerminalLocation', function() {
        it('should call generateStripeTerminalLocation successfully', function(done) {
          // TODO: uncomment, update parameter values for generateStripeTerminalLocation call and complete the assertions
          /*
          var geoPointRequest = new Flipdish.GeoPointRequest();
          geoPointRequest.Latitude = 0.0;
          geoPointRequest.Longitude = 0.0;
          var appId = "appId_example";

          instance.generateStripeTerminalLocation(geoPointRequest, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStripeTerminalLocation);
            expect(data.Data).to.be.a(Flipdish.StripeTerminalLocation);
                  expect(data.Data.Location).to.be.a('string');
              expect(data.Data.Location).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBluetoothTerminalStatus', function() {
        it('should call getBluetoothTerminalStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getBluetoothTerminalStatus call and complete the assertions
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";

          instance.getBluetoothTerminalStatus(appId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultBluetoothTerminalStatus);
            expect(data.Data).to.be.a(Flipdish.BluetoothTerminalStatus);
                  expect(data.Data.SerialNumber).to.be.a('string');
              expect(data.Data.SerialNumber).to.be("");
              expect(data.Data.SoftwareVersion).to.be.a('string');
              expect(data.Data.SoftwareVersion).to.be("");
              expect(data.Data.DeviceType).to.be.a('string');
              expect(data.Data.DeviceType).to.be("CHIPPER_2X");
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("Not_Connected");
              expect(data.Data.BatteryLevel).to.be.a('number');
              expect(data.Data.BatteryLevel).to.be(0.0);
              expect(data.Data.UpdateTime).to.be.a(Date);
              expect(data.Data.UpdateTime).to.be(new Date());
              expect(data.Data.ReaderId).to.be.a('string');
              expect(data.Data.ReaderId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStripeConnectionToken', function() {
        it('should call getStripeConnectionToken successfully', function(done) {
          // TODO: uncomment, update parameter values for getStripeConnectionToken call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getStripeConnectionToken(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultStripeTerminalConnectionToken);
            expect(data.Data).to.be.a(Flipdish.StripeTerminalConnectionToken);
                  expect(data.Data.Token).to.be.a('string');
              expect(data.Data.Token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initiateBluetoothTerminalDeviceUpdateCheck', function() {
        it('should call initiateBluetoothTerminalDeviceUpdateCheck successfully', function(done) {
          // TODO: uncomment, update parameter values for initiateBluetoothTerminalDeviceUpdateCheck call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";
          var terminalType = "terminalType_example";

          instance.initiateBluetoothTerminalDeviceUpdateCheck(appId, deviceId, terminalType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initiateKioskBluetoothPairingMode', function() {
        it('should call initiateKioskBluetoothPairingMode successfully', function(done) {
          // TODO: uncomment, update parameter values for initiateKioskBluetoothPairingMode call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";
          var terminalType = "terminalType_example";

          instance.initiateKioskBluetoothPairingMode(appId, deviceId, terminalType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initiateKioskBluetoothUpdateInstall', function() {
        it('should call initiateKioskBluetoothUpdateInstall successfully', function(done) {
          // TODO: uncomment, update parameter values for initiateKioskBluetoothUpdateInstall call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";
          var terminalType = "terminalType_example";

          instance.initiateKioskBluetoothUpdateInstall(appId, deviceId, terminalType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initiateReaderProcessPaymentIntent', function() {
        it('should call initiateReaderProcessPaymentIntent successfully', function(done) {
          // TODO: uncomment, update parameter values for initiateReaderProcessPaymentIntent call and complete the assertions
          /*
          var request = new Flipdish.ProcessPaymentIntentRequest();
          request.PaymentIntentId = "";
          var readerId = "readerId_example";
          var appId = "appId_example";

          instance.initiateReaderProcessPaymentIntent(request, readerId, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultCardReader);
            expect(data.Data).to.be.a(Flipdish.CardReader);
                  expect(data.Data.Id).to.be.a('string');
              expect(data.Data.Id).to.be("");
              expect(data.Data.DeviceSoftwareVersion).to.be.a('string');
              expect(data.Data.DeviceSoftwareVersion).to.be("");
              expect(data.Data.SerialNumber).to.be.a('string');
              expect(data.Data.SerialNumber).to.be("");
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("");
              expect(data.Data.RegistrationCode).to.be.a('string');
              expect(data.Data.RegistrationCode).to.be("");
              expect(data.Data.DeviceType).to.be.a('string');
              expect(data.Data.DeviceType).to.be("");
              expect(data.Data.Deleted).to.be.a('boolean');
              expect(data.Data.Deleted).to.be(false);
              expect(data.Data.Action).to.be.a(Flipdish.ReaderActionStateInfo);
                    expect(data.Data.Action.ActionState).to.be.a('string');
                expect(data.Data.Action.ActionState).to.be("");
                expect(data.Data.Action.FailureCode).to.be.a('string');
                expect(data.Data.Action.FailureCode).to.be("");
                expect(data.Data.Action.FailureMessage).to.be.a('string');
                expect(data.Data.Action.FailureMessage).to.be("");
                expect(data.Data.Action.Type).to.be.a('string');
                expect(data.Data.Action.Type).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('registerStripeTerminal', function() {
        it('should call registerStripeTerminal successfully', function(done) {
          // TODO: uncomment, update parameter values for registerStripeTerminal call and complete the assertions
          /*
          var request = new Flipdish.CardReaderRegistrationRequest();
          request.RegistrationCode = "";
          request.KioskDeviceId = "";
          var appId = "appId_example";

          instance.registerStripeTerminal(request, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultCardReader);
            expect(data.Data).to.be.a(Flipdish.CardReader);
                  expect(data.Data.Id).to.be.a('string');
              expect(data.Data.Id).to.be("");
              expect(data.Data.DeviceSoftwareVersion).to.be.a('string');
              expect(data.Data.DeviceSoftwareVersion).to.be("");
              expect(data.Data.SerialNumber).to.be.a('string');
              expect(data.Data.SerialNumber).to.be("");
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("");
              expect(data.Data.RegistrationCode).to.be.a('string');
              expect(data.Data.RegistrationCode).to.be("");
              expect(data.Data.DeviceType).to.be.a('string');
              expect(data.Data.DeviceType).to.be("");
              expect(data.Data.Deleted).to.be.a('boolean');
              expect(data.Data.Deleted).to.be(false);
              expect(data.Data.Action).to.be.a(Flipdish.ReaderActionStateInfo);
                    expect(data.Data.Action.ActionState).to.be.a('string');
                expect(data.Data.Action.ActionState).to.be("");
                expect(data.Data.Action.FailureCode).to.be.a('string');
                expect(data.Data.Action.FailureCode).to.be("");
                expect(data.Data.Action.FailureMessage).to.be.a('string');
                expect(data.Data.Action.FailureMessage).to.be("");
                expect(data.Data.Action.Type).to.be.a('string');
                expect(data.Data.Action.Type).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unRegisterTerminal', function() {
        it('should call unRegisterTerminal successfully', function(done) {
          // TODO: uncomment, update parameter values for unRegisterTerminal call and complete the assertions
          /*
          var request = new Flipdish.UnRegisterCardReaderRequest();
          request.ReaderId = "";
          request.KioskDeviceId = "";
          var appId = "appId_example";

          instance.unRegisterTerminal(request, appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultCardReader);
            expect(data.Data).to.be.a(Flipdish.CardReader);
                  expect(data.Data.Id).to.be.a('string');
              expect(data.Data.Id).to.be("");
              expect(data.Data.DeviceSoftwareVersion).to.be.a('string');
              expect(data.Data.DeviceSoftwareVersion).to.be("");
              expect(data.Data.SerialNumber).to.be.a('string');
              expect(data.Data.SerialNumber).to.be("");
              expect(data.Data.Status).to.be.a('string');
              expect(data.Data.Status).to.be("");
              expect(data.Data.RegistrationCode).to.be.a('string');
              expect(data.Data.RegistrationCode).to.be("");
              expect(data.Data.DeviceType).to.be.a('string');
              expect(data.Data.DeviceType).to.be("");
              expect(data.Data.Deleted).to.be.a('boolean');
              expect(data.Data.Deleted).to.be(false);
              expect(data.Data.Action).to.be.a(Flipdish.ReaderActionStateInfo);
                    expect(data.Data.Action.ActionState).to.be.a('string');
                expect(data.Data.Action.ActionState).to.be("");
                expect(data.Data.Action.FailureCode).to.be.a('string');
                expect(data.Data.Action.FailureCode).to.be("");
                expect(data.Data.Action.FailureMessage).to.be.a('string');
                expect(data.Data.Action.FailureMessage).to.be("");
                expect(data.Data.Action.Type).to.be.a('string');
                expect(data.Data.Action.Type).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unpairCurrentlyPairedBluetoothDevice', function() {
        it('should call unpairCurrentlyPairedBluetoothDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for unpairCurrentlyPairedBluetoothDevice call
          /*
          var appId = "appId_example";
          var deviceId = "deviceId_example";

          instance.unpairCurrentlyPairedBluetoothDevice(appId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
