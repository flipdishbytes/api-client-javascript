/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.OrdersApi();
  });

  describe('(package)', function() {
    describe('OrdersApi', function() {
      describe('acceptOrder', function() {
        it('should call acceptOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for acceptOrder call
          /*
          var id = 56;
          var acceptObject = new Flipdish.Accept();
          acceptObject.EstimatedMinutesForDelivery = 0;

          instance.acceptOrder(id, acceptObject, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dispatchOrder', function() {
        it('should call dispatchOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for dispatchOrder call
          /*
          var id = 56;

          instance.dispatchOrder(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrderById', function() {
        it('should call getOrderById successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrderById call and complete the assertions
          /*
          var id = 56;

          instance.getOrderById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultOrder);
            expect(data.Data).to.be.a(Flipdish.Order);
                  expect(data.Data.Store).to.be.a(Flipdish.StoreSummary);
                    expect(data.Data.Store.Id).to.be.a('number');
                expect(data.Data.Store.Id).to.be(0);
                expect(data.Data.Store.Name).to.be.a('string');
                expect(data.Data.Store.Name).to.be("");
                expect(data.Data.Store.MenuId).to.be.a('number');
                expect(data.Data.Store.MenuId).to.be(0);
                {
                  let dataCtr = data.Data.Store.Metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.Data.Store.Currency).to.be.a('string');
                expect(data.Data.Store.Currency).to.be("EUR");
                expect(data.Data.Store.Coordinates).to.be.a(Flipdish.Coordinates);
                      expect(data.Data.Store.Coordinates.Latitude).to.be.a('number');
                  expect(data.Data.Store.Coordinates.Latitude).to.be(0.0);
                  expect(data.Data.Store.Coordinates.Longitude).to.be.a('number');
                  expect(data.Data.Store.Coordinates.Longitude).to.be(0.0);
                expect(data.Data.Store.StoreTimezone).to.be.a('string');
                expect(data.Data.Store.StoreTimezone).to.be("");
                expect(data.Data.Store.StoreGroupId).to.be.a('number');
                expect(data.Data.Store.StoreGroupId).to.be(0);
              expect(data.Data.Customer).to.be.a(Flipdish.CustomerSummary);
                    expect(data.Data.Customer.Id).to.be.a('number');
                expect(data.Data.Customer.Id).to.be(0);
                expect(data.Data.Customer.Name).to.be.a('string');
                expect(data.Data.Customer.Name).to.be("");
                expect(data.Data.Customer.EmailAddress).to.be.a('string');
                expect(data.Data.Customer.EmailAddress).to.be("");
                expect(data.Data.Customer.PhoneNumberLocalFormat).to.be.a('string');
                expect(data.Data.Customer.PhoneNumberLocalFormat).to.be("");
                expect(data.Data.Customer.PhoneNumber).to.be.a('string');
                expect(data.Data.Customer.PhoneNumber).to.be("");
              expect(data.Data.Voucher).to.be.a(Flipdish.OrderVoucherSummary);
                    expect(data.Data.Voucher.Name).to.be.a('string');
                expect(data.Data.Voucher.Name).to.be("");
                expect(data.Data.Voucher.Description).to.be.a('string');
                expect(data.Data.Voucher.Description).to.be("");
                expect(data.Data.Voucher.Code).to.be.a('string');
                expect(data.Data.Voucher.Code).to.be("");
                expect(data.Data.Voucher.Amount).to.be.a('number');
                expect(data.Data.Voucher.Amount).to.be(0.0);
                expect(data.Data.Voucher.Type).to.be.a('string');
                expect(data.Data.Voucher.Type).to.be("PercentageDiscount");
                expect(data.Data.Voucher.SubType).to.be.a('string');
                expect(data.Data.Voucher.SubType).to.be("None");
              expect(data.Data.Fees).to.be.a(Flipdish.FeeSummary);
                    expect(data.Data.Fees.FeeAmount).to.be.a('number');
                expect(data.Data.Fees.FeeAmount).to.be(0.0);
                expect(data.Data.Fees.PercentageRate).to.be.a('number');
                expect(data.Data.Fees.PercentageRate).to.be(0.0);
                expect(data.Data.Fees.PerTransactionFee).to.be.a('number');
                expect(data.Data.Fees.PerTransactionFee).to.be(0.0);
              {
                let dataCtr = data.Data.OrderItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.OrderItem);
                  {
                    let dataCtr = data.OrderItemOptions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.OrderItemOption);
                      {
                        let dataCtr = data.Metadata;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.MenuItemOptionPublicId).to.be.a('string');
                      expect(data.MenuItemOptionPublicId).to.be("00000000-0000-0000-0000-000000000000");
                      expect(data.MenuItemOptionId).to.be.a('number');
                      expect(data.MenuItemOptionId).to.be(0);
                      expect(data.IsMasterOptionSetItem).to.be.a('boolean');
                      expect(data.IsMasterOptionSetItem).to.be(false);
                      expect(data.Name).to.be.a('string');
                      expect(data.Name).to.be("");
                      expect(data.Price).to.be.a('number');
                      expect(data.Price).to.be(0.0);
                      expect(data.MenuItemOptionDisplayOrder).to.be.a('number');
                      expect(data.MenuItemOptionDisplayOrder).to.be(0);
                      expect(data.MenuItemOptionSetDisplayOrder).to.be.a('number');
                      expect(data.MenuItemOptionSetDisplayOrder).to.be(0);
      
                            }
                  }
                  {
                    let dataCtr = data.Metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.MenuItemPublicId).to.be.a('string');
                  expect(data.MenuItemPublicId).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.MenuSectionName).to.be.a('string');
                  expect(data.MenuSectionName).to.be("");
                  expect(data.MenuSectionDisplayOrder).to.be.a('number');
                  expect(data.MenuSectionDisplayOrder).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
                  expect(data.Description).to.be.a('string');
                  expect(data.Description).to.be("");
                  expect(data.Price).to.be.a('number');
                  expect(data.Price).to.be(0.0);
                  expect(data.PriceIncludingOptionSetItems).to.be.a('number');
                  expect(data.PriceIncludingOptionSetItems).to.be(0.0);
                  expect(data.MenuItemId).to.be.a('number');
                  expect(data.MenuItemId).to.be(0);
                  expect(data.MenuItemDisplayOrder).to.be.a('number');
                  expect(data.MenuItemDisplayOrder).to.be(0);
                  expect(data.IsAvailable).to.be.a('boolean');
                  expect(data.IsAvailable).to.be(false);
  
                        }
              }
              expect(data.Data.DeliveryLocation).to.be.a(Flipdish.DeliveryLocation);
                    expect(data.Data.DeliveryLocation.Coordinates).to.be.a(Flipdish.Coordinates);
                      expect(data.Data.DeliveryLocation.Coordinates.Latitude).to.be.a('number');
                  expect(data.Data.DeliveryLocation.Coordinates.Latitude).to.be(0.0);
                  expect(data.Data.DeliveryLocation.Coordinates.Longitude).to.be.a('number');
                  expect(data.Data.DeliveryLocation.Coordinates.Longitude).to.be(0.0);
                expect(data.Data.DeliveryLocation.Building).to.be.a('string');
                expect(data.Data.DeliveryLocation.Building).to.be("");
                expect(data.Data.DeliveryLocation.Street).to.be.a('string');
                expect(data.Data.DeliveryLocation.Street).to.be("");
                expect(data.Data.DeliveryLocation.Town).to.be.a('string');
                expect(data.Data.DeliveryLocation.Town).to.be("");
                expect(data.Data.DeliveryLocation.PostCode).to.be.a('string');
                expect(data.Data.DeliveryLocation.PostCode).to.be("");
                expect(data.Data.DeliveryLocation.DeliveryInstructions).to.be.a('string');
                expect(data.Data.DeliveryLocation.DeliveryInstructions).to.be("");
                expect(data.Data.DeliveryLocation.PrettyAddressString).to.be.a('string');
                expect(data.Data.DeliveryLocation.PrettyAddressString).to.be("");
              expect(data.Data.CustomerLocation).to.be.a(Flipdish.Coordinates);
                    expect(data.Data.CustomerLocation.Latitude).to.be.a('number');
                expect(data.Data.CustomerLocation.Latitude).to.be(0.0);
                expect(data.Data.CustomerLocation.Longitude).to.be.a('number');
                expect(data.Data.CustomerLocation.Longitude).to.be(0.0);
              expect(data.Data.MaskedPhoneNumber).to.be.a(Flipdish.MaskedPhoneNumber);
                    expect(data.Data.MaskedPhoneNumber.IsEnabled).to.be.a('boolean');
                expect(data.Data.MaskedPhoneNumber.IsEnabled).to.be(false);
                expect(data.Data.MaskedPhoneNumber.PhoneNumber).to.be.a('string');
                expect(data.Data.MaskedPhoneNumber.PhoneNumber).to.be("");
                expect(data.Data.MaskedPhoneNumber.Code).to.be.a('string');
                expect(data.Data.MaskedPhoneNumber.Code).to.be("");
              expect(data.Data.DropOffLocationId).to.be.a('number');
              expect(data.Data.DropOffLocationId).to.be(0);
              expect(data.Data.DropOffLocation).to.be.a('string');
              expect(data.Data.DropOffLocation).to.be("");
              expect(data.Data.AcceptedFor).to.be.a(Date);
              expect(data.Data.AcceptedFor).to.be(new Date());
              expect(data.Data.InFraudZone).to.be.a('boolean');
              expect(data.Data.InFraudZone).to.be(false);
              expect(data.Data.UnusualHighValueOrder).to.be.a('boolean');
              expect(data.Data.UnusualHighValueOrder).to.be(false);
              expect(data.Data.RejectedByUserId).to.be.a('number');
              expect(data.Data.RejectedByUserId).to.be(0);
              expect(data.Data.OrderId).to.be.a('number');
              expect(data.Data.OrderId).to.be(0);
              expect(data.Data.LocalOrderId).to.be.a('string');
              expect(data.Data.LocalOrderId).to.be("");
              expect(data.Data.DeliveryType).to.be.a('string');
              expect(data.Data.DeliveryType).to.be("Delivery");
              expect(data.Data.PickupLocationType).to.be.a('string');
              expect(data.Data.PickupLocationType).to.be("TakeOut");
              expect(data.Data.TableServiceCatagory).to.be.a('string');
              expect(data.Data.TableServiceCatagory).to.be("Generic");
              expect(data.Data.TipAmount).to.be.a('number');
              expect(data.Data.TipAmount).to.be(0.0);
              expect(data.Data.DeliveryAmount).to.be.a('number');
              expect(data.Data.DeliveryAmount).to.be(0.0);
              expect(data.Data.OrderItemsAmount).to.be.a('number');
              expect(data.Data.OrderItemsAmount).to.be(0.0);
              expect(data.Data.Amount).to.be.a('number');
              expect(data.Data.Amount).to.be(0.0);
              expect(data.Data.ProcessingFee).to.be.a('number');
              expect(data.Data.ProcessingFee).to.be(0.0);
              expect(data.Data.PaymentAccountType).to.be.a('string');
              expect(data.Data.PaymentAccountType).to.be("Card");
              expect(data.Data.PaymentAccountDescription).to.be.a('string');
              expect(data.Data.PaymentAccountDescription).to.be("");
              expect(data.Data.OrderState).to.be.a('string');
              expect(data.Data.OrderState).to.be("Created");
              expect(data.Data.IsPreOrder).to.be.a('boolean');
              expect(data.Data.IsPreOrder).to.be(false);
              expect(data.Data.PlacedTime).to.be.a(Date);
              expect(data.Data.PlacedTime).to.be(new Date());
              expect(data.Data.RequestedForTime).to.be.a(Date);
              expect(data.Data.RequestedForTime).to.be(new Date());
              expect(data.Data.ChefNote).to.be.a('string');
              expect(data.Data.ChefNote).to.be("");
              expect(data.Data.AppType).to.be.a('string');
              expect(data.Data.AppType).to.be("Unknown");
              expect(data.Data.UserRating).to.be.a('number');
              expect(data.Data.UserRating).to.be(0);
              expect(data.Data.PaymentStatus).to.be.a('string');
              expect(data.Data.PaymentStatus).to.be("Paid");
              expect(data.Data.RejectionReason).to.be.a('string');
              expect(data.Data.RejectionReason).to.be("TooBusy");
              expect(data.Data.RefundedAmount).to.be.a('number');
              expect(data.Data.RefundedAmount).to.be(0.0);
              expect(data.Data.DeliveryTrackingStatus).to.be.a('string');
              expect(data.Data.DeliveryTrackingStatus).to.be("Unassigned");
              expect(data.Data.DriverId).to.be.a('number');
              expect(data.Data.DriverId).to.be(0);
              expect(data.Data.TotalTax).to.be.a('number');
              expect(data.Data.TotalTax).to.be(0.0);
              expect(data.Data.OrderTrackingCode).to.be.a('string');
              expect(data.Data.OrderTrackingCode).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrders', function() {
        it('should call getOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrders call and complete the assertions
          /*
          var opts = {};
          opts.physicalRestaurantId = [3.4];
          opts.state = ["state_example"];
          opts.from = new Date("2013-10-20T19:20:30+01:00");
          opts.to = new Date("2013-10-20T19:20:30+01:00");
          opts.page = 56;
          opts.limit = 56;

          instance.getOrders(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultOrder);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.Order);
                expect(data.Store).to.be.a(Flipdish.StoreSummary);
                      expect(data.Store.Id).to.be.a('number');
                  expect(data.Store.Id).to.be(0);
                  expect(data.Store.Name).to.be.a('string');
                  expect(data.Store.Name).to.be("");
                  expect(data.Store.MenuId).to.be.a('number');
                  expect(data.Store.MenuId).to.be(0);
                  {
                    let dataCtr = data.Store.Metadata;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.Store.Currency).to.be.a('string');
                  expect(data.Store.Currency).to.be("EUR");
                  expect(data.Store.Coordinates).to.be.a(Flipdish.Coordinates);
                        expect(data.Store.Coordinates.Latitude).to.be.a('number');
                    expect(data.Store.Coordinates.Latitude).to.be(0.0);
                    expect(data.Store.Coordinates.Longitude).to.be.a('number');
                    expect(data.Store.Coordinates.Longitude).to.be(0.0);
                  expect(data.Store.StoreTimezone).to.be.a('string');
                  expect(data.Store.StoreTimezone).to.be("");
                  expect(data.Store.StoreGroupId).to.be.a('number');
                  expect(data.Store.StoreGroupId).to.be(0);
                expect(data.Customer).to.be.a(Flipdish.CustomerSummary);
                      expect(data.Customer.Id).to.be.a('number');
                  expect(data.Customer.Id).to.be(0);
                  expect(data.Customer.Name).to.be.a('string');
                  expect(data.Customer.Name).to.be("");
                  expect(data.Customer.EmailAddress).to.be.a('string');
                  expect(data.Customer.EmailAddress).to.be("");
                  expect(data.Customer.PhoneNumberLocalFormat).to.be.a('string');
                  expect(data.Customer.PhoneNumberLocalFormat).to.be("");
                  expect(data.Customer.PhoneNumber).to.be.a('string');
                  expect(data.Customer.PhoneNumber).to.be("");
                expect(data.Voucher).to.be.a(Flipdish.OrderVoucherSummary);
                      expect(data.Voucher.Name).to.be.a('string');
                  expect(data.Voucher.Name).to.be("");
                  expect(data.Voucher.Description).to.be.a('string');
                  expect(data.Voucher.Description).to.be("");
                  expect(data.Voucher.Code).to.be.a('string');
                  expect(data.Voucher.Code).to.be("");
                  expect(data.Voucher.Amount).to.be.a('number');
                  expect(data.Voucher.Amount).to.be(0.0);
                  expect(data.Voucher.Type).to.be.a('string');
                  expect(data.Voucher.Type).to.be("PercentageDiscount");
                  expect(data.Voucher.SubType).to.be.a('string');
                  expect(data.Voucher.SubType).to.be("None");
                expect(data.Fees).to.be.a(Flipdish.FeeSummary);
                      expect(data.Fees.FeeAmount).to.be.a('number');
                  expect(data.Fees.FeeAmount).to.be(0.0);
                  expect(data.Fees.PercentageRate).to.be.a('number');
                  expect(data.Fees.PercentageRate).to.be(0.0);
                  expect(data.Fees.PerTransactionFee).to.be.a('number');
                  expect(data.Fees.PerTransactionFee).to.be(0.0);
                {
                  let dataCtr = data.OrderItems;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.OrderItem);
                    {
                      let dataCtr = data.OrderItemOptions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.OrderItemOption);
                        {
                          let dataCtr = data.Metadata;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.MenuItemOptionPublicId).to.be.a('string');
                        expect(data.MenuItemOptionPublicId).to.be("00000000-0000-0000-0000-000000000000");
                        expect(data.MenuItemOptionId).to.be.a('number');
                        expect(data.MenuItemOptionId).to.be(0);
                        expect(data.IsMasterOptionSetItem).to.be.a('boolean');
                        expect(data.IsMasterOptionSetItem).to.be(false);
                        expect(data.Name).to.be.a('string');
                        expect(data.Name).to.be("");
                        expect(data.Price).to.be.a('number');
                        expect(data.Price).to.be(0.0);
                        expect(data.MenuItemOptionDisplayOrder).to.be.a('number');
                        expect(data.MenuItemOptionDisplayOrder).to.be(0);
                        expect(data.MenuItemOptionSetDisplayOrder).to.be.a('number');
                        expect(data.MenuItemOptionSetDisplayOrder).to.be(0);
        
                              }
                    }
                    {
                      let dataCtr = data.Metadata;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.MenuItemPublicId).to.be.a('string');
                    expect(data.MenuItemPublicId).to.be("00000000-0000-0000-0000-000000000000");
                    expect(data.MenuSectionName).to.be.a('string');
                    expect(data.MenuSectionName).to.be("");
                    expect(data.MenuSectionDisplayOrder).to.be.a('number');
                    expect(data.MenuSectionDisplayOrder).to.be(0);
                    expect(data.Name).to.be.a('string');
                    expect(data.Name).to.be("");
                    expect(data.Description).to.be.a('string');
                    expect(data.Description).to.be("");
                    expect(data.Price).to.be.a('number');
                    expect(data.Price).to.be(0.0);
                    expect(data.PriceIncludingOptionSetItems).to.be.a('number');
                    expect(data.PriceIncludingOptionSetItems).to.be(0.0);
                    expect(data.MenuItemId).to.be.a('number');
                    expect(data.MenuItemId).to.be(0);
                    expect(data.MenuItemDisplayOrder).to.be.a('number');
                    expect(data.MenuItemDisplayOrder).to.be(0);
                    expect(data.IsAvailable).to.be.a('boolean');
                    expect(data.IsAvailable).to.be(false);
    
                          }
                }
                expect(data.DeliveryLocation).to.be.a(Flipdish.DeliveryLocation);
                      expect(data.DeliveryLocation.Coordinates).to.be.a(Flipdish.Coordinates);
                        expect(data.DeliveryLocation.Coordinates.Latitude).to.be.a('number');
                    expect(data.DeliveryLocation.Coordinates.Latitude).to.be(0.0);
                    expect(data.DeliveryLocation.Coordinates.Longitude).to.be.a('number');
                    expect(data.DeliveryLocation.Coordinates.Longitude).to.be(0.0);
                  expect(data.DeliveryLocation.Building).to.be.a('string');
                  expect(data.DeliveryLocation.Building).to.be("");
                  expect(data.DeliveryLocation.Street).to.be.a('string');
                  expect(data.DeliveryLocation.Street).to.be("");
                  expect(data.DeliveryLocation.Town).to.be.a('string');
                  expect(data.DeliveryLocation.Town).to.be("");
                  expect(data.DeliveryLocation.PostCode).to.be.a('string');
                  expect(data.DeliveryLocation.PostCode).to.be("");
                  expect(data.DeliveryLocation.DeliveryInstructions).to.be.a('string');
                  expect(data.DeliveryLocation.DeliveryInstructions).to.be("");
                  expect(data.DeliveryLocation.PrettyAddressString).to.be.a('string');
                  expect(data.DeliveryLocation.PrettyAddressString).to.be("");
                expect(data.CustomerLocation).to.be.a(Flipdish.Coordinates);
                      expect(data.CustomerLocation.Latitude).to.be.a('number');
                  expect(data.CustomerLocation.Latitude).to.be(0.0);
                  expect(data.CustomerLocation.Longitude).to.be.a('number');
                  expect(data.CustomerLocation.Longitude).to.be(0.0);
                expect(data.MaskedPhoneNumber).to.be.a(Flipdish.MaskedPhoneNumber);
                      expect(data.MaskedPhoneNumber.IsEnabled).to.be.a('boolean');
                  expect(data.MaskedPhoneNumber.IsEnabled).to.be(false);
                  expect(data.MaskedPhoneNumber.PhoneNumber).to.be.a('string');
                  expect(data.MaskedPhoneNumber.PhoneNumber).to.be("");
                  expect(data.MaskedPhoneNumber.Code).to.be.a('string');
                  expect(data.MaskedPhoneNumber.Code).to.be("");
                expect(data.DropOffLocationId).to.be.a('number');
                expect(data.DropOffLocationId).to.be(0);
                expect(data.DropOffLocation).to.be.a('string');
                expect(data.DropOffLocation).to.be("");
                expect(data.AcceptedFor).to.be.a(Date);
                expect(data.AcceptedFor).to.be(new Date());
                expect(data.InFraudZone).to.be.a('boolean');
                expect(data.InFraudZone).to.be(false);
                expect(data.UnusualHighValueOrder).to.be.a('boolean');
                expect(data.UnusualHighValueOrder).to.be(false);
                expect(data.RejectedByUserId).to.be.a('number');
                expect(data.RejectedByUserId).to.be(0);
                expect(data.OrderId).to.be.a('number');
                expect(data.OrderId).to.be(0);
                expect(data.LocalOrderId).to.be.a('string');
                expect(data.LocalOrderId).to.be("");
                expect(data.DeliveryType).to.be.a('string');
                expect(data.DeliveryType).to.be("Delivery");
                expect(data.PickupLocationType).to.be.a('string');
                expect(data.PickupLocationType).to.be("TakeOut");
                expect(data.TableServiceCatagory).to.be.a('string');
                expect(data.TableServiceCatagory).to.be("Generic");
                expect(data.TipAmount).to.be.a('number');
                expect(data.TipAmount).to.be(0.0);
                expect(data.DeliveryAmount).to.be.a('number');
                expect(data.DeliveryAmount).to.be(0.0);
                expect(data.OrderItemsAmount).to.be.a('number');
                expect(data.OrderItemsAmount).to.be(0.0);
                expect(data.Amount).to.be.a('number');
                expect(data.Amount).to.be(0.0);
                expect(data.ProcessingFee).to.be.a('number');
                expect(data.ProcessingFee).to.be(0.0);
                expect(data.PaymentAccountType).to.be.a('string');
                expect(data.PaymentAccountType).to.be("Card");
                expect(data.PaymentAccountDescription).to.be.a('string');
                expect(data.PaymentAccountDescription).to.be("");
                expect(data.OrderState).to.be.a('string');
                expect(data.OrderState).to.be("Created");
                expect(data.IsPreOrder).to.be.a('boolean');
                expect(data.IsPreOrder).to.be(false);
                expect(data.PlacedTime).to.be.a(Date);
                expect(data.PlacedTime).to.be(new Date());
                expect(data.RequestedForTime).to.be.a(Date);
                expect(data.RequestedForTime).to.be(new Date());
                expect(data.ChefNote).to.be.a('string');
                expect(data.ChefNote).to.be("");
                expect(data.AppType).to.be.a('string');
                expect(data.AppType).to.be("Unknown");
                expect(data.UserRating).to.be.a('number');
                expect(data.UserRating).to.be(0);
                expect(data.PaymentStatus).to.be.a('string');
                expect(data.PaymentStatus).to.be("Paid");
                expect(data.RejectionReason).to.be.a('string');
                expect(data.RejectionReason).to.be("TooBusy");
                expect(data.RefundedAmount).to.be.a('number');
                expect(data.RefundedAmount).to.be(0.0);
                expect(data.DeliveryTrackingStatus).to.be.a('string');
                expect(data.DeliveryTrackingStatus).to.be("Unassigned");
                expect(data.DriverId).to.be.a('number');
                expect(data.DriverId).to.be(0);
                expect(data.TotalTax).to.be.a('number');
                expect(data.TotalTax).to.be(0.0);
                expect(data.OrderTrackingCode).to.be.a('string');
                expect(data.OrderTrackingCode).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrdersSummary', function() {
        it('should call getOrdersSummary successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrdersSummary call and complete the assertions
          /*
          var appId = "appId_example";
          var opts = {};
          opts.searchQuery = "searchQuery_example";
          opts.physicalRestaurantId = [3.4];
          opts.state = ["state_example"];
          opts.page = 56;
          opts.limit = 56;
          opts.orderByRequestedForTime = true;

          instance.getOrdersSummary(appId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiPaginationResultOrderSummary);
            expect(data.Page).to.be.a('number');
            expect(data.Page).to.be(0);
            expect(data.Limit).to.be.a('number');
            expect(data.Limit).to.be(0);
            expect(data.TotalRecordCount).to.be.a('number');
            expect(data.TotalRecordCount).to.be(0);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.OrderSummary);
                expect(data.OrderId).to.be.a('number');
                expect(data.OrderId).to.be(0);
                expect(data.DeliveryType).to.be.a('string');
                expect(data.DeliveryType).to.be("Delivery");
                expect(data.PickupLocationType).to.be.a('string');
                expect(data.PickupLocationType).to.be("TakeOut");
                expect(data.TableServiceCatagory).to.be.a('string');
                expect(data.TableServiceCatagory).to.be("Generic");
                expect(data.OrderState).to.be.a('string');
                expect(data.OrderState).to.be("Created");
                expect(data.RequestedForTime).to.be.a(Date);
                expect(data.RequestedForTime).to.be(new Date());
                expect(data.StoreName).to.be.a('string');
                expect(data.StoreName).to.be("");
                expect(data.StoreIanaTimeZone).to.be.a('string');
                expect(data.StoreIanaTimeZone).to.be("");
                expect(data.CustomerName).to.be.a('string');
                expect(data.CustomerName).to.be("");
                expect(data.CustomerPhoneNumber).to.be.a('string');
                expect(data.CustomerPhoneNumber).to.be("");
                expect(data.Amount).to.be.a('number');
                expect(data.Amount).to.be(0.0);
                expect(data.RefundedAmount).to.be.a('number');
                expect(data.RefundedAmount).to.be(0.0);
                expect(data.PaymentAccountType).to.be.a('string');
                expect(data.PaymentAccountType).to.be("Card");
                expect(data.PaymentStatus).to.be.a('string');
                expect(data.PaymentStatus).to.be("Paid");
                expect(data.Currency).to.be.a('string');
                expect(data.Currency).to.be("EUR");
                expect(data.AppType).to.be.a('string');
                expect(data.AppType).to.be("Unknown");
                expect(data.LocalOrderId).to.be.a('string');
                expect(data.LocalOrderId).to.be("");
                expect(data.DropOffLocationId).to.be.a('number');
                expect(data.DropOffLocationId).to.be(0);
                expect(data.DropOffLocation).to.be.a('string');
                expect(data.DropOffLocation).to.be("");
                expect(data.AcceptedFor).to.be.a(Date);
                expect(data.AcceptedFor).to.be(new Date());
                expect(data.InFraudZone).to.be.a('boolean');
                expect(data.InFraudZone).to.be(false);
                expect(data.UnusualHighValueOrder).to.be.a('boolean');
                expect(data.UnusualHighValueOrder).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('refundOrder', function() {
        it('should call refundOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for refundOrder call
          /*
          var id = 56;
          var refundObject = new Flipdish.Refund();
          refundObject.RefundReason = "";
          refundObject.RefundAmount = 0.0;
          refundObject.NotifyCustomer = false;

          instance.refundOrder(id, refundObject, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('rejectOrder', function() {
        it('should call rejectOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for rejectOrder call
          /*
          var id = 56;
          var rejectObject = new Flipdish.Reject();
          rejectObject.RejectReason = "TooBusy";
          rejectObject.DoNotNotifyCustomer = false;

          instance.rejectOrder(id, rejectObject, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
