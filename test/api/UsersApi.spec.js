/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('getPreviousOrderCountForStore', function() {
      it('should call getPreviousOrderCountForStore successfully', function(done) {
        //uncomment below and update the code to test getPreviousOrderCountForStore
        //instance.getPreviousOrderCountForStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRestaurantUserAccounts', function() {
      it('should call getRestaurantUserAccounts successfully', function(done) {
        //uncomment below and update the code to test getRestaurantUserAccounts
        //instance.getRestaurantUserAccounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRestaurantUserStores', function() {
      it('should call getRestaurantUserStores successfully', function(done) {
        //uncomment below and update the code to test getRestaurantUserStores
        //instance.getRestaurantUserStores(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoles', function() {
      it('should call getRoles successfully', function(done) {
        //uncomment below and update the code to test getRoles
        //instance.getRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRolesAndUnassignedRoles', function() {
      it('should call getRolesAndUnassignedRoles successfully', function(done) {
        //uncomment below and update the code to test getRolesAndUnassignedRoles
        //instance.getRolesAndUnassignedRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserById', function() {
      it('should call getUserById successfully', function(done) {
        //uncomment below and update the code to test getUserById
        //instance.getUserById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserNotes', function() {
      it('should call getUserNotes successfully', function(done) {
        //uncomment below and update the code to test getUserNotes
        //instance.getUserNotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchUsers', function() {
      it('should call searchUsers successfully', function(done) {
        //uncomment below and update the code to test searchUsers
        //instance.searchUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
