/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.WebsiteApi();
  });

  describe('(package)', function() {
    describe('WebsiteApi', function() {
      describe('addTestimonial', function() {
        it('should call addTestimonial successfully', function(done) {
          // TODO: uncomment, update parameter values for addTestimonial call and complete the assertions
          /*
          var appId = "appId_example";
          var testimonial = new Flipdish.WebsiteTestimonialBase();
          testimonial.Author = "";
          testimonial.Message = "";

          instance.addTestimonial(appId, testimonial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultWebsiteTestimonial);
            expect(data.Data).to.be.a(Flipdish.WebsiteTestimonial);
                  expect(data.Data.TestimonialId).to.be.a('number');
              expect(data.Data.TestimonialId).to.be(0);
              expect(data.Data.Author).to.be.a('string');
              expect(data.Data.Author).to.be("");
              expect(data.Data.Message).to.be.a('string');
              expect(data.Data.Message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTestimonial', function() {
        it('should call deleteTestimonial successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTestimonial call
          /*
          var appId = "appId_example";
          var testimonialId = 56;

          instance.deleteTestimonial(appId, testimonialId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteWebsiteImage', function() {
        it('should call deleteWebsiteImage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteWebsiteImage call
          /*
          var appId = "appId_example";
          var imageId = 56;

          instance.deleteWebsiteImage(appId, imageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('editTestimonial', function() {
        it('should call editTestimonial successfully', function(done) {
          // TODO: uncomment, update parameter values for editTestimonial call and complete the assertions
          /*
          var appId = "appId_example";
          var testimonialId = 56;
          var testimonial = new Flipdish.WebsiteTestimonialBase();
          testimonial.Author = "";
          testimonial.Message = "";

          instance.editTestimonial(appId, testimonialId, testimonial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultWebsiteTestimonial);
            expect(data.Data).to.be.a(Flipdish.WebsiteTestimonial);
                  expect(data.Data.TestimonialId).to.be.a('number');
              expect(data.Data.TestimonialId).to.be(0);
              expect(data.Data.Author).to.be.a('string');
              expect(data.Data.Author).to.be("");
              expect(data.Data.Message).to.be.a('string');
              expect(data.Data.Message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getIndexConfiguration', function() {
        it('should call getIndexConfiguration successfully', function(done) {
          // TODO: uncomment, update parameter values for getIndexConfiguration call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getIndexConfiguration(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultIndexPage);
            expect(data.Data).to.be.a(Flipdish.IndexPage);
                  {
                let dataCtr = data.Data.Testimonials;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.WebsiteTestimonial);
                  expect(data.TestimonialId).to.be.a('number');
                  expect(data.TestimonialId).to.be(0);
                  expect(data.Author).to.be.a('string');
                  expect(data.Author).to.be("");
                  expect(data.Message).to.be.a('string');
                  expect(data.Message).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.Images;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.WebsiteImage);
                  expect(data.ImageId).to.be.a('number');
                  expect(data.ImageId).to.be(0);
                  expect(data.ImageLocation).to.be.a('string');
                  expect(data.ImageLocation).to.be("IndexHeader");
                  expect(data.ImageUrl).to.be.a('string');
                  expect(data.ImageUrl).to.be("");
  
                        }
              }
              expect(data.Data.AboutSectionEnabled).to.be.a('boolean');
              expect(data.Data.AboutSectionEnabled).to.be(false);
              expect(data.Data.AboutSectionTitle).to.be.a('string');
              expect(data.Data.AboutSectionTitle).to.be("");
              expect(data.Data.AboutSectionSubtitle).to.be.a('string');
              expect(data.Data.AboutSectionSubtitle).to.be("");
              expect(data.Data.AboutSectionLeftTitle).to.be.a('string');
              expect(data.Data.AboutSectionLeftTitle).to.be("");
              expect(data.Data.AboutSectionLeftBody).to.be.a('string');
              expect(data.Data.AboutSectionLeftBody).to.be("");
              expect(data.Data.AboutSectionRightTitle).to.be.a('string');
              expect(data.Data.AboutSectionRightTitle).to.be("");
              expect(data.Data.AboutSectionRightBody).to.be.a('string');
              expect(data.Data.AboutSectionRightBody).to.be("");
              expect(data.Data.OpeningHoursEnabled).to.be.a('boolean');
              expect(data.Data.OpeningHoursEnabled).to.be(false);
              expect(data.Data.MenuPreviewEnabled).to.be.a('boolean');
              expect(data.Data.MenuPreviewEnabled).to.be(false);
              expect(data.Data.GalleryEnabled).to.be.a('boolean');
              expect(data.Data.GalleryEnabled).to.be(false);
              expect(data.Data.TestimonialsEnabled).to.be.a('boolean');
              expect(data.Data.TestimonialsEnabled).to.be(false);
              expect(data.Data.ContactFormEnabled).to.be.a('boolean');
              expect(data.Data.ContactFormEnabled).to.be(false);
              expect(data.Data.ContactFormEmail).to.be.a('string');
              expect(data.Data.ContactFormEmail).to.be("");
              expect(data.Data.MapEnabled).to.be.a('boolean');
              expect(data.Data.MapEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setIndexConfiguration', function() {
        it('should call setIndexConfiguration successfully', function(done) {
          // TODO: uncomment, update parameter values for setIndexConfiguration call and complete the assertions
          /*
          var appId = "appId_example";
          var indexPage = new Flipdish.IndexPageBase();
          indexPage.AboutSectionEnabled = false;
          indexPage.AboutSectionTitle = "";
          indexPage.AboutSectionSubtitle = "";
          indexPage.AboutSectionLeftTitle = "";
          indexPage.AboutSectionLeftBody = "";
          indexPage.AboutSectionRightTitle = "";
          indexPage.AboutSectionRightBody = "";
          indexPage.OpeningHoursEnabled = false;
          indexPage.MenuPreviewEnabled = false;
          indexPage.GalleryEnabled = false;
          indexPage.TestimonialsEnabled = false;
          indexPage.ContactFormEnabled = false;
          indexPage.ContactFormEmail = "";
          indexPage.MapEnabled = false;

          instance.setIndexConfiguration(appId, indexPage, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultIndexPageBase);
            expect(data.Data).to.be.a(Flipdish.IndexPageBase);
                  expect(data.Data.AboutSectionEnabled).to.be.a('boolean');
              expect(data.Data.AboutSectionEnabled).to.be(false);
              expect(data.Data.AboutSectionTitle).to.be.a('string');
              expect(data.Data.AboutSectionTitle).to.be("");
              expect(data.Data.AboutSectionSubtitle).to.be.a('string');
              expect(data.Data.AboutSectionSubtitle).to.be("");
              expect(data.Data.AboutSectionLeftTitle).to.be.a('string');
              expect(data.Data.AboutSectionLeftTitle).to.be("");
              expect(data.Data.AboutSectionLeftBody).to.be.a('string');
              expect(data.Data.AboutSectionLeftBody).to.be("");
              expect(data.Data.AboutSectionRightTitle).to.be.a('string');
              expect(data.Data.AboutSectionRightTitle).to.be("");
              expect(data.Data.AboutSectionRightBody).to.be.a('string');
              expect(data.Data.AboutSectionRightBody).to.be("");
              expect(data.Data.OpeningHoursEnabled).to.be.a('boolean');
              expect(data.Data.OpeningHoursEnabled).to.be(false);
              expect(data.Data.MenuPreviewEnabled).to.be.a('boolean');
              expect(data.Data.MenuPreviewEnabled).to.be(false);
              expect(data.Data.GalleryEnabled).to.be.a('boolean');
              expect(data.Data.GalleryEnabled).to.be(false);
              expect(data.Data.TestimonialsEnabled).to.be.a('boolean');
              expect(data.Data.TestimonialsEnabled).to.be(false);
              expect(data.Data.ContactFormEnabled).to.be.a('boolean');
              expect(data.Data.ContactFormEnabled).to.be(false);
              expect(data.Data.ContactFormEmail).to.be.a('string');
              expect(data.Data.ContactFormEmail).to.be("");
              expect(data.Data.MapEnabled).to.be.a('boolean');
              expect(data.Data.MapEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadWebsiteImage', function() {
        it('should call uploadWebsiteImage successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadWebsiteImage call and complete the assertions
          /*
          var appId = "appId_example";
          var imageLocation = "imageLocation_example";
          var Image = "/path/to/file.txt";

          instance.uploadWebsiteImage(appId, imageLocation, Image, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultWebsiteImage);
            expect(data.Data).to.be.a(Flipdish.WebsiteImage);
                  expect(data.Data.ImageId).to.be.a('number');
              expect(data.Data.ImageId).to.be(0);
              expect(data.Data.ImageLocation).to.be.a('string');
              expect(data.Data.ImageLocation).to.be("IndexHeader");
              expect(data.Data.ImageUrl).to.be.a('string');
              expect(data.Data.ImageUrl).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('websiteCheckNow', function() {
        it('should call websiteCheckNow successfully', function(done) {
          // TODO: uncomment, update parameter values for websiteCheckNow call
          /*
          var appId = "appId_example";

          instance.websiteCheckNow(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
