/*
 * Flipdish Open API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.MenusApi();
  });

  describe('(package)', function() {
    describe('MenusApi', function() {
      describe('createDraftMenuFromExistingMenu', function() {
        it('should call createDraftMenuFromExistingMenu successfully', function(done) {
          // TODO: uncomment, update parameter values for createDraftMenuFromExistingMenu call and complete the assertions
          /*
          var menuId = 56;
          var newName = "newName_example";

          instance.createDraftMenuFromExistingMenu(menuId, newName, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultMenu);
            expect(data.Data).to.be.a(Flipdish.Menu);
                  expect(data.Data.MenuId).to.be.a('number');
              expect(data.Data.MenuId).to.be(0);
              expect(data.Data.ModifiedTime).to.be.a(Date);
              expect(data.Data.ModifiedTime).to.be(new Date());
              expect(data.Data.VersionNumber).to.be.a('number');
              expect(data.Data.VersionNumber).to.be(0);
              expect(data.Data.ImageUrl).to.be.a('string');
              expect(data.Data.ImageUrl).to.be("");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.Locked).to.be.a('boolean');
              expect(data.Data.Locked).to.be(false);
              {
                let dataCtr = data.Data.MenuSections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.MenuSection);
                  expect(data.MenuSectionId).to.be.a('number');
                  expect(data.MenuSectionId).to.be(0);
                  {
                    let dataCtr = data.MenuItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.MenuSectionItem);
                      expect(data.MenuItemId).to.be.a('number');
                      expect(data.MenuItemId).to.be(0);
                      expect(data.ActualPrice).to.be.a('number');
                      expect(data.ActualPrice).to.be(0.0);
                      {
                        let dataCtr = data.MenuItemOptionSets;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.MenuItemOptionSet);
                          expect(data.MenuItemOptionSetId).to.be.a('number');
                          expect(data.MenuItemOptionSetId).to.be(0);
                          expect(data.ImageUrl).to.be.a('string');
                          expect(data.ImageUrl).to.be("");
                          {
                            let dataCtr = data.MenuItemOptionSetItems;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Flipdish.MenuItemOptionSetItem);
                              expect(data.MenuItemOptionSetItemId).to.be.a('number');
                              expect(data.MenuItemOptionSetItemId).to.be(0);
                              expect(data.PublicId).to.be.a('string');
                              expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                              {
                                let dataCtr = data.Metadata;
                                expect(dataCtr).to.be.an(Array);
                                expect(dataCtr).to.not.be.empty();
                                for (let p in dataCtr) {
                                  let data = dataCtr[p];
                                  expect(data).to.be.a(Flipdish.CreateMetadata);
                                  expect(data.StoreId).to.be.a('number');
                                  expect(data.StoreId).to.be(0);
                                  expect(data.Key).to.be.a('string');
                                  expect(data.Key).to.be("");
                                  expect(data.Value).to.be.a('string');
                                  expect(data.Value).to.be("");
                  
                                        }
                              }
                              expect(data.Name).to.be.a('string');
                              expect(data.Name).to.be("");
                              expect(data.Price).to.be.a('number');
                              expect(data.Price).to.be(0.0);
                              expect(data.IsAvailable).to.be.a('boolean');
                              expect(data.IsAvailable).to.be(false);
                              expect(data.DisplayOrder).to.be.a('number');
                              expect(data.DisplayOrder).to.be(0);
                              expect(data.CellLayoutType).to.be.a('string');
                              expect(data.CellLayoutType).to.be("Small");
                              expect(data.ImageUrl).to.be.a('string');
                              expect(data.ImageUrl).to.be("");
              
                                    }
                          }
                          expect(data.PublicId).to.be.a('string');
                          expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                          expect(data.Name).to.be.a('string');
                          expect(data.Name).to.be("");
                          expect(data.IsMasterOptionSet).to.be.a('boolean');
                          expect(data.IsMasterOptionSet).to.be(false);
                          expect(data.DisplayOrder).to.be.a('number');
                          expect(data.DisplayOrder).to.be(0);
                          expect(data.MinSelectCount).to.be.a('number');
                          expect(data.MinSelectCount).to.be(0);
                          expect(data.MaxSelectCount).to.be.a('number');
                          expect(data.MaxSelectCount).to.be(0);
                          expect(data.CellLayoutType).to.be.a('string');
                          expect(data.CellLayoutType).to.be("Small");
          
                                }
                      }
                      {
                        let dataCtr = data.DailySpecialHours;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                          expect(data.Early).to.be.a(Flipdish.Range);
                                expect(data.Early.StartTime).to.be.a('string');
                            expect(data.Early.StartTime).to.be("");
                            expect(data.Early.Period).to.be.a('string');
                            expect(data.Early.Period).to.be("");
                            expect(data.Early.DayOfWeek).to.be.a('string');
                            expect(data.Early.DayOfWeek).to.be("Sunday");
                          expect(data.Late).to.be.a(Flipdish.Range);
                                expect(data.Late.StartTime).to.be.a('string');
                            expect(data.Late.StartTime).to.be("");
                            expect(data.Late.Period).to.be.a('string');
                            expect(data.Late.Period).to.be("");
                            expect(data.Late.DayOfWeek).to.be.a('string');
                            expect(data.Late.DayOfWeek).to.be("Sunday");
                          {
                            let dataCtr = data.Ranges;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Flipdish.Range);
                              expect(data.StartTime).to.be.a('string');
                              expect(data.StartTime).to.be("");
                              expect(data.Period).to.be.a('string');
                              expect(data.Period).to.be("");
                              expect(data.DayOfWeek).to.be.a('string');
                              expect(data.DayOfWeek).to.be("Sunday");
              
                                    }
                          }
                          expect(data.DayOfWeek).to.be.a('string');
                          expect(data.DayOfWeek).to.be("Sunday");
                          expect(data.StartTime).to.be.a('string');
                          expect(data.StartTime).to.be("");
                          expect(data.Period).to.be.a('string');
                          expect(data.Period).to.be("");
                          expect(data.StartTimeEarly).to.be.a('string');
                          expect(data.StartTimeEarly).to.be("");
                          expect(data.PeriodEarly).to.be.a('string');
                          expect(data.PeriodEarly).to.be("");
          
                                }
                      }
                      expect(data.PublicId).to.be.a('string');
                      expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                      {
                        let dataCtr = data.Metadata;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.CreateMetadata);
                          expect(data.StoreId).to.be.a('number');
                          expect(data.StoreId).to.be(0);
                          expect(data.Key).to.be.a('string');
                          expect(data.Key).to.be("");
                          expect(data.Value).to.be.a('string');
                          expect(data.Value).to.be("");
          
                                }
                      }
                      expect(data.Name).to.be.a('string');
                      expect(data.Name).to.be("");
                      expect(data.Description).to.be.a('string');
                      expect(data.Description).to.be("");
                      expect(data.SpicinessRating).to.be.a('string');
                      expect(data.SpicinessRating).to.be("NotRated");
                      expect(data.Price).to.be.a('number');
                      expect(data.Price).to.be(0.0);
                      expect(data.DisplayOrder).to.be.a('number');
                      expect(data.DisplayOrder).to.be(0);
                      expect(data.Alcohol).to.be.a('boolean');
                      expect(data.Alcohol).to.be(false);
                      expect(data.IsAvailable).to.be.a('boolean');
                      expect(data.IsAvailable).to.be(false);
                      expect(data.CellLayoutType).to.be.a('string');
                      expect(data.CellLayoutType).to.be("Small");
                      expect(data.DisableVouchers).to.be.a('boolean');
                      expect(data.DisableVouchers).to.be(false);
                      expect(data.ImageUrl).to.be.a('string');
                      expect(data.ImageUrl).to.be("");
      
                            }
                  }
                  expect(data.MenuSectionAvailability).to.be.a(Flipdish.MenuSectionAvailability);
                        {
                      let dataCtr = data.MenuSectionAvailability.AvailableTimes;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                        expect(data.Early).to.be.a(Flipdish.Range);
                              expect(data.Early.StartTime).to.be.a('string');
                          expect(data.Early.StartTime).to.be("");
                          expect(data.Early.Period).to.be.a('string');
                          expect(data.Early.Period).to.be("");
                          expect(data.Early.DayOfWeek).to.be.a('string');
                          expect(data.Early.DayOfWeek).to.be("Sunday");
                        expect(data.Late).to.be.a(Flipdish.Range);
                              expect(data.Late.StartTime).to.be.a('string');
                          expect(data.Late.StartTime).to.be("");
                          expect(data.Late.Period).to.be.a('string');
                          expect(data.Late.Period).to.be("");
                          expect(data.Late.DayOfWeek).to.be.a('string');
                          expect(data.Late.DayOfWeek).to.be("Sunday");
                        {
                          let dataCtr = data.Ranges;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Flipdish.Range);
                            expect(data.StartTime).to.be.a('string');
                            expect(data.StartTime).to.be("");
                            expect(data.Period).to.be.a('string');
                            expect(data.Period).to.be("");
                            expect(data.DayOfWeek).to.be.a('string');
                            expect(data.DayOfWeek).to.be("Sunday");
            
                                  }
                        }
                        expect(data.DayOfWeek).to.be.a('string');
                        expect(data.DayOfWeek).to.be("Sunday");
                        expect(data.StartTime).to.be.a('string');
                        expect(data.StartTime).to.be("");
                        expect(data.Period).to.be.a('string');
                        expect(data.Period).to.be("");
                        expect(data.StartTimeEarly).to.be.a('string');
                        expect(data.StartTimeEarly).to.be("");
                        expect(data.PeriodEarly).to.be.a('string');
                        expect(data.PeriodEarly).to.be("");
        
                              }
                    }
                    expect(data.MenuSectionAvailability.AvailabilityMode).to.be.a('string');
                    expect(data.MenuSectionAvailability.AvailabilityMode).to.be("DisplayAlways");
                  expect(data.PublicId).to.be.a('string');
                  expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
                  expect(data.Description).to.be.a('string');
                  expect(data.Description).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.IsAvailable).to.be.a('boolean');
                  expect(data.IsAvailable).to.be(false);
                  expect(data.IsHiddenFromCustomers).to.be.a('boolean');
                  expect(data.IsHiddenFromCustomers).to.be(false);
                  expect(data.ImageUrl).to.be.a('string');
                  expect(data.ImageUrl).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.TaxRates;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.MenuTaxRate);
                  expect(data.TaxRateId).to.be.a('number');
                  expect(data.TaxRateId).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
                  expect(data.Rate).to.be.a('number');
                  expect(data.Rate).to.be(0.0);
  
                        }
              }
              expect(data.Data.DisplaySectionLinks).to.be.a('boolean');
              expect(data.Data.DisplaySectionLinks).to.be(false);
              expect(data.Data.MenuSectionBehaviour).to.be.a('string');
              expect(data.Data.MenuSectionBehaviour).to.be("ExpandSingle");
              expect(data.Data.TaxType).to.be.a('string');
              expect(data.Data.TaxType).to.be("IncludedInBasePrice");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNewMenuForApp', function() {
        it('should call createNewMenuForApp successfully', function(done) {
          // TODO: uncomment, update parameter values for createNewMenuForApp call and complete the assertions
          /*
          var appId = "appId_example";
          var menu = new Flipdish.CreateFullMenu();
          menu.Name = "";
          menu.ImageUrl = "";
          menu.MenuSections = [new Flipdish.CreateFullMenuSection()];
          menu.MenuSections[0].MenuSectionAvailability = new Flipdish.MenuSectionAvailability();
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes = [new Flipdish.BusinessHoursPeriod()];
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Early = new Flipdish.Range();
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Early.StartTime = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Early.Period = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Early.DayOfWeek = "Sunday";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Late = new Flipdish.Range();
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Late.StartTime = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Late.Period = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Late.DayOfWeek = "Sunday";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Ranges = [new Flipdish.Range()];
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Ranges[0].StartTime = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Ranges[0].Period = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Ranges[0].DayOfWeek = "Sunday";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].DayOfWeek = "Sunday";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].StartTime = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].Period = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].StartTimeEarly = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailableTimes[0].PeriodEarly = "";
          menu.MenuSections[0].MenuSectionAvailability.AvailabilityMode = "DisplayAlways";
          menu.MenuSections[0].MenuItems = [new Flipdish.CreateFullMenuSectionItem()];
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets = [new Flipdish.CreateFullMenuItemOptionSet()];
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems = [new Flipdish.CreateFullMenuItemOptionSetItem()];
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].Metadata = [new Flipdish.CreateMetadata()];
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].Metadata[0].StoreId = 0;
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].Metadata[0].Key = "";
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].Metadata[0].Value = "";
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].TaxRateName = "";
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].Name = "";
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].Price = 0.0;
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].IsAvailable = false;
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].DisplayOrder = 0;
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].CellLayoutType = "Small";
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MenuItemOptionSetItems[0].ImageUrl = "";
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].Name = "";
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].IsMasterOptionSet = false;
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].DisplayOrder = 0;
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MinSelectCount = 0;
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].MaxSelectCount = 0;
          menu.MenuSections[0].MenuItems[0].MenuItemOptionSets[0].CellLayoutType = "Small";
          menu.MenuSections[0].MenuItems[0].Metadata = [new Flipdish.CreateMetadata()];
          menu.MenuSections[0].MenuItems[0].Metadata[0].StoreId = 0;
          menu.MenuSections[0].MenuItems[0].Metadata[0].Key = "";
          menu.MenuSections[0].MenuItems[0].Metadata[0].Value = "";
          menu.MenuSections[0].MenuItems[0].TaxRateName = "";
          menu.MenuSections[0].MenuItems[0].Name = "";
          menu.MenuSections[0].MenuItems[0].Description = "";
          menu.MenuSections[0].MenuItems[0].SpicinessRating = "NotRated";
          menu.MenuSections[0].MenuItems[0].Price = 0.0;
          menu.MenuSections[0].MenuItems[0].DisplayOrder = 0;
          menu.MenuSections[0].MenuItems[0].Alcohol = false;
          menu.MenuSections[0].MenuItems[0].IsAvailable = false;
          menu.MenuSections[0].MenuItems[0].CellLayoutType = "Small";
          menu.MenuSections[0].MenuItems[0].DisableVouchers = false;
          menu.MenuSections[0].MenuItems[0].ImageUrl = "";
          menu.MenuSections[0].Name = "";
          menu.MenuSections[0].Description = "";
          menu.MenuSections[0].DisplayOrder = 0;
          menu.MenuSections[0].IsAvailable = false;
          menu.MenuSections[0].IsHiddenFromCustomers = false;
          menu.MenuSections[0].ImageUrl = "";
          menu.TaxRates = [new Flipdish.CreateMenuTaxRate()];
          menu.TaxRates[0].Name = "";
          menu.TaxRates[0].Rate = 0.0;
          menu.DisplaySectionLinks = false;
          menu.MenuSectionBehaviour = "ExpandSingle";
          menu.TaxType = "IncludedInBasePrice";

          instance.createNewMenuForApp(appId, menu, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMenu', function() {
        it('should call deleteMenu successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMenu call
          /*
          var menuId = 56;

          instance.deleteMenu(menuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMenuImage', function() {
        it('should call deleteMenuImage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMenuImage call
          /*
          var menuId = 56;

          instance.deleteMenuImage(menuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMenuItemMetadata', function() {
        it('should call deleteMenuItemMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMenuItemMetadata call
          /*
          var menuId = 56;
          var storeId = 56;
          var menuItemId = 56;
          var key = "key_example";

          instance.deleteMenuItemMetadata(menuId, storeId, menuItemId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllMenuMetadataByMenuIdAndStoreId', function() {
        it('should call getAllMenuMetadataByMenuIdAndStoreId successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllMenuMetadataByMenuIdAndStoreId call and complete the assertions
          /*
          var menuId = 56;
          var storeId = 56;

          instance.getAllMenuMetadataByMenuIdAndStoreId(menuId, storeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultAllMetadataResult);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.AllMetadataResult);
                {
                  let dataCtr = data.MenuItemMetadata;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.Metadata);
                    expect(data.MenuEntityId).to.be.a('number');
                    expect(data.MenuEntityId).to.be(0);
                    expect(data.Key).to.be.a('string');
                    expect(data.Key).to.be("");
                    expect(data.Value).to.be.a('string');
                    expect(data.Value).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.MenuItemOptionSetItemMetadata;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.Metadata);
                    expect(data.MenuEntityId).to.be.a('number');
                    expect(data.MenuEntityId).to.be(0);
                    expect(data.Key).to.be.a('string');
                    expect(data.Key).to.be("");
                    expect(data.Value).to.be.a('string');
                    expect(data.Value).to.be("");
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuById', function() {
        it('should call getMenuById successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuById call and complete the assertions
          /*
          var menuId = 56;

          instance.getMenuById(menuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultMenu);
            expect(data.Data).to.be.a(Flipdish.Menu);
                  expect(data.Data.MenuId).to.be.a('number');
              expect(data.Data.MenuId).to.be(0);
              expect(data.Data.ModifiedTime).to.be.a(Date);
              expect(data.Data.ModifiedTime).to.be(new Date());
              expect(data.Data.VersionNumber).to.be.a('number');
              expect(data.Data.VersionNumber).to.be(0);
              expect(data.Data.ImageUrl).to.be.a('string');
              expect(data.Data.ImageUrl).to.be("");
              expect(data.Data.Name).to.be.a('string');
              expect(data.Data.Name).to.be("");
              expect(data.Data.Locked).to.be.a('boolean');
              expect(data.Data.Locked).to.be(false);
              {
                let dataCtr = data.Data.MenuSections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.MenuSection);
                  expect(data.MenuSectionId).to.be.a('number');
                  expect(data.MenuSectionId).to.be(0);
                  {
                    let dataCtr = data.MenuItems;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Flipdish.MenuSectionItem);
                      expect(data.MenuItemId).to.be.a('number');
                      expect(data.MenuItemId).to.be(0);
                      expect(data.ActualPrice).to.be.a('number');
                      expect(data.ActualPrice).to.be(0.0);
                      {
                        let dataCtr = data.MenuItemOptionSets;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.MenuItemOptionSet);
                          expect(data.MenuItemOptionSetId).to.be.a('number');
                          expect(data.MenuItemOptionSetId).to.be(0);
                          expect(data.ImageUrl).to.be.a('string');
                          expect(data.ImageUrl).to.be("");
                          {
                            let dataCtr = data.MenuItemOptionSetItems;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Flipdish.MenuItemOptionSetItem);
                              expect(data.MenuItemOptionSetItemId).to.be.a('number');
                              expect(data.MenuItemOptionSetItemId).to.be(0);
                              expect(data.PublicId).to.be.a('string');
                              expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                              {
                                let dataCtr = data.Metadata;
                                expect(dataCtr).to.be.an(Array);
                                expect(dataCtr).to.not.be.empty();
                                for (let p in dataCtr) {
                                  let data = dataCtr[p];
                                  expect(data).to.be.a(Flipdish.CreateMetadata);
                                  expect(data.StoreId).to.be.a('number');
                                  expect(data.StoreId).to.be(0);
                                  expect(data.Key).to.be.a('string');
                                  expect(data.Key).to.be("");
                                  expect(data.Value).to.be.a('string');
                                  expect(data.Value).to.be("");
                  
                                        }
                              }
                              expect(data.Name).to.be.a('string');
                              expect(data.Name).to.be("");
                              expect(data.Price).to.be.a('number');
                              expect(data.Price).to.be(0.0);
                              expect(data.IsAvailable).to.be.a('boolean');
                              expect(data.IsAvailable).to.be(false);
                              expect(data.DisplayOrder).to.be.a('number');
                              expect(data.DisplayOrder).to.be(0);
                              expect(data.CellLayoutType).to.be.a('string');
                              expect(data.CellLayoutType).to.be("Small");
                              expect(data.ImageUrl).to.be.a('string');
                              expect(data.ImageUrl).to.be("");
              
                                    }
                          }
                          expect(data.PublicId).to.be.a('string');
                          expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                          expect(data.Name).to.be.a('string');
                          expect(data.Name).to.be("");
                          expect(data.IsMasterOptionSet).to.be.a('boolean');
                          expect(data.IsMasterOptionSet).to.be(false);
                          expect(data.DisplayOrder).to.be.a('number');
                          expect(data.DisplayOrder).to.be(0);
                          expect(data.MinSelectCount).to.be.a('number');
                          expect(data.MinSelectCount).to.be(0);
                          expect(data.MaxSelectCount).to.be.a('number');
                          expect(data.MaxSelectCount).to.be(0);
                          expect(data.CellLayoutType).to.be.a('string');
                          expect(data.CellLayoutType).to.be("Small");
          
                                }
                      }
                      {
                        let dataCtr = data.DailySpecialHours;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                          expect(data.Early).to.be.a(Flipdish.Range);
                                expect(data.Early.StartTime).to.be.a('string');
                            expect(data.Early.StartTime).to.be("");
                            expect(data.Early.Period).to.be.a('string');
                            expect(data.Early.Period).to.be("");
                            expect(data.Early.DayOfWeek).to.be.a('string');
                            expect(data.Early.DayOfWeek).to.be("Sunday");
                          expect(data.Late).to.be.a(Flipdish.Range);
                                expect(data.Late.StartTime).to.be.a('string');
                            expect(data.Late.StartTime).to.be("");
                            expect(data.Late.Period).to.be.a('string');
                            expect(data.Late.Period).to.be("");
                            expect(data.Late.DayOfWeek).to.be.a('string');
                            expect(data.Late.DayOfWeek).to.be("Sunday");
                          {
                            let dataCtr = data.Ranges;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Flipdish.Range);
                              expect(data.StartTime).to.be.a('string');
                              expect(data.StartTime).to.be("");
                              expect(data.Period).to.be.a('string');
                              expect(data.Period).to.be("");
                              expect(data.DayOfWeek).to.be.a('string');
                              expect(data.DayOfWeek).to.be("Sunday");
              
                                    }
                          }
                          expect(data.DayOfWeek).to.be.a('string');
                          expect(data.DayOfWeek).to.be("Sunday");
                          expect(data.StartTime).to.be.a('string');
                          expect(data.StartTime).to.be("");
                          expect(data.Period).to.be.a('string');
                          expect(data.Period).to.be("");
                          expect(data.StartTimeEarly).to.be.a('string');
                          expect(data.StartTimeEarly).to.be("");
                          expect(data.PeriodEarly).to.be.a('string');
                          expect(data.PeriodEarly).to.be("");
          
                                }
                      }
                      expect(data.PublicId).to.be.a('string');
                      expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                      {
                        let dataCtr = data.Metadata;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Flipdish.CreateMetadata);
                          expect(data.StoreId).to.be.a('number');
                          expect(data.StoreId).to.be(0);
                          expect(data.Key).to.be.a('string');
                          expect(data.Key).to.be("");
                          expect(data.Value).to.be.a('string');
                          expect(data.Value).to.be("");
          
                                }
                      }
                      expect(data.Name).to.be.a('string');
                      expect(data.Name).to.be("");
                      expect(data.Description).to.be.a('string');
                      expect(data.Description).to.be("");
                      expect(data.SpicinessRating).to.be.a('string');
                      expect(data.SpicinessRating).to.be("NotRated");
                      expect(data.Price).to.be.a('number');
                      expect(data.Price).to.be(0.0);
                      expect(data.DisplayOrder).to.be.a('number');
                      expect(data.DisplayOrder).to.be(0);
                      expect(data.Alcohol).to.be.a('boolean');
                      expect(data.Alcohol).to.be(false);
                      expect(data.IsAvailable).to.be.a('boolean');
                      expect(data.IsAvailable).to.be(false);
                      expect(data.CellLayoutType).to.be.a('string');
                      expect(data.CellLayoutType).to.be("Small");
                      expect(data.DisableVouchers).to.be.a('boolean');
                      expect(data.DisableVouchers).to.be(false);
                      expect(data.ImageUrl).to.be.a('string');
                      expect(data.ImageUrl).to.be("");
      
                            }
                  }
                  expect(data.MenuSectionAvailability).to.be.a(Flipdish.MenuSectionAvailability);
                        {
                      let dataCtr = data.MenuSectionAvailability.AvailableTimes;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Flipdish.BusinessHoursPeriod);
                        expect(data.Early).to.be.a(Flipdish.Range);
                              expect(data.Early.StartTime).to.be.a('string');
                          expect(data.Early.StartTime).to.be("");
                          expect(data.Early.Period).to.be.a('string');
                          expect(data.Early.Period).to.be("");
                          expect(data.Early.DayOfWeek).to.be.a('string');
                          expect(data.Early.DayOfWeek).to.be("Sunday");
                        expect(data.Late).to.be.a(Flipdish.Range);
                              expect(data.Late.StartTime).to.be.a('string');
                          expect(data.Late.StartTime).to.be("");
                          expect(data.Late.Period).to.be.a('string');
                          expect(data.Late.Period).to.be("");
                          expect(data.Late.DayOfWeek).to.be.a('string');
                          expect(data.Late.DayOfWeek).to.be("Sunday");
                        {
                          let dataCtr = data.Ranges;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Flipdish.Range);
                            expect(data.StartTime).to.be.a('string');
                            expect(data.StartTime).to.be("");
                            expect(data.Period).to.be.a('string');
                            expect(data.Period).to.be("");
                            expect(data.DayOfWeek).to.be.a('string');
                            expect(data.DayOfWeek).to.be("Sunday");
            
                                  }
                        }
                        expect(data.DayOfWeek).to.be.a('string');
                        expect(data.DayOfWeek).to.be("Sunday");
                        expect(data.StartTime).to.be.a('string');
                        expect(data.StartTime).to.be("");
                        expect(data.Period).to.be.a('string');
                        expect(data.Period).to.be("");
                        expect(data.StartTimeEarly).to.be.a('string');
                        expect(data.StartTimeEarly).to.be("");
                        expect(data.PeriodEarly).to.be.a('string');
                        expect(data.PeriodEarly).to.be("");
        
                              }
                    }
                    expect(data.MenuSectionAvailability.AvailabilityMode).to.be.a('string');
                    expect(data.MenuSectionAvailability.AvailabilityMode).to.be("DisplayAlways");
                  expect(data.PublicId).to.be.a('string');
                  expect(data.PublicId).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
                  expect(data.Description).to.be.a('string');
                  expect(data.Description).to.be("");
                  expect(data.DisplayOrder).to.be.a('number');
                  expect(data.DisplayOrder).to.be(0);
                  expect(data.IsAvailable).to.be.a('boolean');
                  expect(data.IsAvailable).to.be(false);
                  expect(data.IsHiddenFromCustomers).to.be.a('boolean');
                  expect(data.IsHiddenFromCustomers).to.be(false);
                  expect(data.ImageUrl).to.be.a('string');
                  expect(data.ImageUrl).to.be("");
  
                        }
              }
              {
                let dataCtr = data.Data.TaxRates;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Flipdish.MenuTaxRate);
                  expect(data.TaxRateId).to.be.a('number');
                  expect(data.TaxRateId).to.be(0);
                  expect(data.Name).to.be.a('string');
                  expect(data.Name).to.be("");
                  expect(data.Rate).to.be.a('number');
                  expect(data.Rate).to.be(0.0);
  
                        }
              }
              expect(data.Data.DisplaySectionLinks).to.be.a('boolean');
              expect(data.Data.DisplaySectionLinks).to.be(false);
              expect(data.Data.MenuSectionBehaviour).to.be.a('string');
              expect(data.Data.MenuSectionBehaviour).to.be("ExpandSingle");
              expect(data.Data.TaxType).to.be.a('string');
              expect(data.Data.TaxType).to.be("IncludedInBasePrice");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuItemMetadata', function() {
        it('should call getMenuItemMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuItemMetadata call and complete the assertions
          /*
          var menuId = 56;
          var storeId = 56;
          var menuItemId = 56;

          instance.getMenuItemMetadata(menuId, storeId, menuItemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultMetadata);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.Metadata);
                expect(data.MenuEntityId).to.be.a('number');
                expect(data.MenuEntityId).to.be(0);
                expect(data.Key).to.be.a('string');
                expect(data.Key).to.be("");
                expect(data.Value).to.be.a('string');
                expect(data.Value).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuItemMetadataByKey', function() {
        it('should call getMenuItemMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuItemMetadataByKey call
          /*
          var menuId = 56;
          var storeId = 56;
          var menuItemId = 56;
          var key = "key_example";

          instance.getMenuItemMetadataByKey(menuId, storeId, menuItemId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuItemOptionSetItemMetadata', function() {
        it('should call getMenuItemOptionSetItemMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuItemOptionSetItemMetadata call and complete the assertions
          /*
          var menuId = 56;
          var storeId = 56;
          var optionSetItemId = 56;

          instance.getMenuItemOptionSetItemMetadata(menuId, storeId, optionSetItemId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiResultMetadata);
            expect(data.Data).to.be.a(Flipdish.Metadata);
                  expect(data.Data.MenuEntityId).to.be.a('number');
              expect(data.Data.MenuEntityId).to.be(0);
              expect(data.Data.Key).to.be.a('string');
              expect(data.Data.Key).to.be("");
              expect(data.Data.Value).to.be.a('string');
              expect(data.Data.Value).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuStoreNames', function() {
        it('should call getMenuStoreNames successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuStoreNames call and complete the assertions
          /*
          var menuId = 56;

          instance.getMenuStoreNames(menuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultMenuStoreNames);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.MenuStoreNames);
                {
                  let dataCtr = data.StoreNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenuTaxDetails', function() {
        it('should call getMenuTaxDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenuTaxDetails call and complete the assertions
          /*
          var menuId = 56;

          instance.getMenuTaxDetails(menuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultMenuTaxDetails);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.MenuTaxDetails);
                {
                  let dataCtr = data.TaxRates;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Flipdish.MenuTaxRate);
                    expect(data.TaxRateId).to.be.a('number');
                    expect(data.TaxRateId).to.be(0);
                    expect(data.Name).to.be.a('string');
                    expect(data.Name).to.be("");
                    expect(data.Rate).to.be.a('number');
                    expect(data.Rate).to.be(0.0);
    
                          }
                }
                expect(data.DisplayTax).to.be.a('boolean');
                expect(data.DisplayTax).to.be(false);
                expect(data.TaxType).to.be.a('string');
                expect(data.TaxType).to.be("IncludedInBasePrice");
                {
                  let dataCtr = data.ItemTaxes;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                {
                  let dataCtr = data.SetItemTaxes;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenusByAppId', function() {
        it('should call getMenusByAppId successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenusByAppId call and complete the assertions
          /*
          var appId = "appId_example";

          instance.getMenusByAppId(appId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultMenuSummary);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.MenuSummary);
                expect(data.MenuId).to.be.a('number');
                expect(data.MenuId).to.be(0);
                expect(data.ModifiedTime).to.be.a(Date);
                expect(data.ModifiedTime).to.be(new Date());
                expect(data.VersionNumber).to.be.a('number');
                expect(data.VersionNumber).to.be(0);
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.Locked).to.be.a('boolean');
                expect(data.Locked).to.be(false);
                {
                  let dataCtr = data.StoreNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMenusCheckpoints', function() {
        it('should call getMenusCheckpoints successfully', function(done) {
          // TODO: uncomment, update parameter values for getMenusCheckpoints call and complete the assertions
          /*
          var menuId = 56;

          instance.getMenusCheckpoints(menuId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultMenuCheckpoint);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.MenuCheckpoint);
                expect(data.MenuCheckpointId).to.be.a('number');
                expect(data.MenuCheckpointId).to.be(0);
                expect(data.Time).to.be.a(Date);
                expect(data.Time).to.be(new Date());
                expect(data.Name).to.be.a('string');
                expect(data.Name).to.be("");
                expect(data.Url).to.be.a('string');
                expect(data.Url).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('menusDeleteTaxRate', function() {
        it('should call menusDeleteTaxRate successfully', function(done) {
          // TODO: uncomment, update parameter values for menusDeleteTaxRate call
          /*
          var menuId = 56;
          var taxId = 56;

          instance.menusDeleteTaxRate(menuId, taxId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('menusSetDisplayOnMenuTax', function() {
        it('should call menusSetDisplayOnMenuTax successfully', function(done) {
          // TODO: uncomment, update parameter values for menusSetDisplayOnMenuTax call
          /*
          var menuId = 56;
          var show = true;

          instance.menusSetDisplayOnMenuTax(menuId, show, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('menusSetItemDisplayOrders', function() {
        it('should call menusSetItemDisplayOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for menusSetItemDisplayOrders call
          /*
          var menuId = 56;
          var displayOrders = new Flipdish.MenuObjectDisplayOrders();
          displayOrders.DisplayOrders = [new Flipdish.ObjectDisplayOrder()];
          displayOrders.DisplayOrders[0].Id = 0;
          displayOrders.DisplayOrders[0].DisplayOrder = 0;

          instance.menusSetItemDisplayOrders(menuId, displayOrders, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('menusShowHideBulkItems', function() {
        it('should call menusShowHideBulkItems successfully', function(done) {
          // TODO: uncomment, update parameter values for menusShowHideBulkItems call and complete the assertions
          /*
          var menuId = 56;
          var menuElements = [new Flipdish.MenuElementHide()];
          menuElements[0].MenuElementId = 0;
          menuElements[0].MenuElementType = "MenuItem";
          var hide = true;
          var undoAfter = 1.2;

          instance.menusShowHideBulkItems(menuId, menuElements, hide, undoAfter, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiArrayResultMenuElementEditResponse);
            {
              let dataCtr = data.Data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Flipdish.MenuElementEditResponse);
                expect(data.MenuElementId).to.be.a('number');
                expect(data.MenuElementId).to.be(0);
                expect(data.MenuElementType).to.be.a('string');
                expect(data.MenuElementType).to.be("MenuItem");
                expect(data.ValidationCode).to.be.a('string');
                expect(data.ValidationCode).to.be("Success");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('menusUpdateTaxType', function() {
        it('should call menusUpdateTaxType successfully', function(done) {
          // TODO: uncomment, update parameter values for menusUpdateTaxType call
          /*
          var menuId = 56;
          var type = "type_example";

          instance.menusUpdateTaxType(menuId, type, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('menusUpsertTaxRate', function() {
        it('should call menusUpsertTaxRate successfully', function(done) {
          // TODO: uncomment, update parameter values for menusUpsertTaxRate call and complete the assertions
          /*
          var menuId = 56;
          var taxRate = new Flipdish.MenuTaxRate();
          taxRate.TaxRateId = 0;
          taxRate.Name = "";
          taxRate.Rate = 0.0;

          instance.menusUpsertTaxRate(menuId, taxRate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.MenuTaxRate);
            expect(data.TaxRateId).to.be.a('number');
            expect(data.TaxRateId).to.be(0);
            expect(data.Name).to.be.a('string');
            expect(data.Name).to.be("");
            expect(data.Rate).to.be.a('number');
            expect(data.Rate).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('restoreAMenuCheckpoint', function() {
        it('should call restoreAMenuCheckpoint successfully', function(done) {
          // TODO: uncomment, update parameter values for restoreAMenuCheckpoint call
          /*
          var menuId = 56;
          var checkpointId = 56;

          instance.restoreAMenuCheckpoint(menuId, checkpointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setMenuItemMetadata', function() {
        it('should call setMenuItemMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for setMenuItemMetadata call
          /*
          var menuId = 56;
          var storeId = 56;
          var menuItemId = 56;
          var metadata = new Flipdish.Metadata();
          metadata.MenuEntityId = 0;
          metadata.Key = "";
          metadata.Value = "";

          instance.setMenuItemMetadata(menuId, storeId, menuItemId, metadata, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setMenuItemOptionSetItemMetadata', function() {
        it('should call setMenuItemOptionSetItemMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for setMenuItemOptionSetItemMetadata call
          /*
          var menuId = 56;
          var storeId = 56;
          var optionSetItemId = 56;
          var metadata = new Flipdish.Metadata();
          metadata.MenuEntityId = 0;
          metadata.Key = "";
          metadata.Value = "";

          instance.setMenuItemOptionSetItemMetadata(menuId, storeId, optionSetItemId, metadata, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setMenuLock', function() {
        it('should call setMenuLock successfully', function(done) {
          // TODO: uncomment, update parameter values for setMenuLock call
          /*
          var menuId = 56;
          var locked = true;

          instance.setMenuLock(menuId, locked, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('setMenuName', function() {
        it('should call setMenuName successfully', function(done) {
          // TODO: uncomment, update parameter values for setMenuName call
          /*
          var menuId = 56;
          var name = "name_example";

          instance.setMenuName(menuId, name, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateMenu', function() {
        it('should call updateMenu successfully', function(done) {
          // TODO: uncomment, update parameter values for updateMenu call
          /*
          var menuId = 56;
          var menu = new Flipdish.MenuBase();
          menu.DisplaySectionLinks = false;
          menu.MenuSectionBehaviour = "ExpandSingle";
          menu.TaxType = "IncludedInBasePrice";

          instance.updateMenu(menuId, menu, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadMenuImage', function() {
        it('should call uploadMenuImage successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadMenuImage call and complete the assertions
          /*
          var menuId = 56;
          var Image = "/path/to/file.txt";

          instance.uploadMenuImage(menuId, Image, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Flipdish.RestApiStringResult);
            expect(data.Data).to.be.a('string');
            expect(data.Data).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadNewMenuForApp', function() {
        it('should call uploadNewMenuForApp successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadNewMenuForApp call and complete the assertions
          /*
          var appId = "appId_example";
          var Menu = "/path/to/file.txt";

          instance.uploadNewMenuForApp(appId, Menu, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
