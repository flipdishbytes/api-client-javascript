/**
 * Flipdish Open API v1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Flipdish);
  }
}(this, function(expect, Flipdish) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Flipdish.MenusApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MenusApi', function() {
    describe('createDraftMenuFromExistingMenu', function() {
      it('should call createDraftMenuFromExistingMenu successfully', function(done) {
        //uncomment below and update the code to test createDraftMenuFromExistingMenu
        //instance.createDraftMenuFromExistingMenu(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNewMenuAsync', function() {
      it('should call createNewMenuAsync successfully', function(done) {
        //uncomment below and update the code to test createNewMenuAsync
        //instance.createNewMenuAsync(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNewMenuForApp', function() {
      it('should call createNewMenuForApp successfully', function(done) {
        //uncomment below and update the code to test createNewMenuForApp
        //instance.createNewMenuForApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMenu', function() {
      it('should call deleteMenu successfully', function(done) {
        //uncomment below and update the code to test deleteMenu
        //instance.deleteMenu(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMenuImage', function() {
      it('should call deleteMenuImage successfully', function(done) {
        //uncomment below and update the code to test deleteMenuImage
        //instance.deleteMenuImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMenuItemMetadata', function() {
      it('should call deleteMenuItemMetadata successfully', function(done) {
        //uncomment below and update the code to test deleteMenuItemMetadata
        //instance.deleteMenuItemMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllMenuMetadataByMenuIdAndStoreId', function() {
      it('should call getAllMenuMetadataByMenuIdAndStoreId successfully', function(done) {
        //uncomment below and update the code to test getAllMenuMetadataByMenuIdAndStoreId
        //instance.getAllMenuMetadataByMenuIdAndStoreId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenuById', function() {
      it('should call getMenuById successfully', function(done) {
        //uncomment below and update the code to test getMenuById
        //instance.getMenuById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenuItemMetadata', function() {
      it('should call getMenuItemMetadata successfully', function(done) {
        //uncomment below and update the code to test getMenuItemMetadata
        //instance.getMenuItemMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenuItemMetadataByKey', function() {
      it('should call getMenuItemMetadataByKey successfully', function(done) {
        //uncomment below and update the code to test getMenuItemMetadataByKey
        //instance.getMenuItemMetadataByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenuItemOptionSetItemMetadata', function() {
      it('should call getMenuItemOptionSetItemMetadata successfully', function(done) {
        //uncomment below and update the code to test getMenuItemOptionSetItemMetadata
        //instance.getMenuItemOptionSetItemMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenuName', function() {
      it('should call getMenuName successfully', function(done) {
        //uncomment below and update the code to test getMenuName
        //instance.getMenuName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenuStoreNames', function() {
      it('should call getMenuStoreNames successfully', function(done) {
        //uncomment below and update the code to test getMenuStoreNames
        //instance.getMenuStoreNames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenuTaxDetails', function() {
      it('should call getMenuTaxDetails successfully', function(done) {
        //uncomment below and update the code to test getMenuTaxDetails
        //instance.getMenuTaxDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenusByAppId', function() {
      it('should call getMenusByAppId successfully', function(done) {
        //uncomment below and update the code to test getMenusByAppId
        //instance.getMenusByAppId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMenusCheckpoints', function() {
      it('should call getMenusCheckpoints successfully', function(done) {
        //uncomment below and update the code to test getMenusCheckpoints
        //instance.getMenusCheckpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('menusDeleteTaxRate', function() {
      it('should call menusDeleteTaxRate successfully', function(done) {
        //uncomment below and update the code to test menusDeleteTaxRate
        //instance.menusDeleteTaxRate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('menusGetMenuBulkShowHide', function() {
      it('should call menusGetMenuBulkShowHide successfully', function(done) {
        //uncomment below and update the code to test menusGetMenuBulkShowHide
        //instance.menusGetMenuBulkShowHide(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('menusSetDisplayOnMenuTax', function() {
      it('should call menusSetDisplayOnMenuTax successfully', function(done) {
        //uncomment below and update the code to test menusSetDisplayOnMenuTax
        //instance.menusSetDisplayOnMenuTax(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('menusSetItemDisplayOrders', function() {
      it('should call menusSetItemDisplayOrders successfully', function(done) {
        //uncomment below and update the code to test menusSetItemDisplayOrders
        //instance.menusSetItemDisplayOrders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('menusShowHideBulkItems', function() {
      it('should call menusShowHideBulkItems successfully', function(done) {
        //uncomment below and update the code to test menusShowHideBulkItems
        //instance.menusShowHideBulkItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('menusUpdateTaxType', function() {
      it('should call menusUpdateTaxType successfully', function(done) {
        //uncomment below and update the code to test menusUpdateTaxType
        //instance.menusUpdateTaxType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('menusUpsertTaxRate', function() {
      it('should call menusUpsertTaxRate successfully', function(done) {
        //uncomment below and update the code to test menusUpsertTaxRate
        //instance.menusUpsertTaxRate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreAMenuCheckpoint', function() {
      it('should call restoreAMenuCheckpoint successfully', function(done) {
        //uncomment below and update the code to test restoreAMenuCheckpoint
        //instance.restoreAMenuCheckpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setMenuItemMetadata', function() {
      it('should call setMenuItemMetadata successfully', function(done) {
        //uncomment below and update the code to test setMenuItemMetadata
        //instance.setMenuItemMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setMenuItemOptionSetItemMetadata', function() {
      it('should call setMenuItemOptionSetItemMetadata successfully', function(done) {
        //uncomment below and update the code to test setMenuItemOptionSetItemMetadata
        //instance.setMenuItemOptionSetItemMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setMenuLock', function() {
      it('should call setMenuLock successfully', function(done) {
        //uncomment below and update the code to test setMenuLock
        //instance.setMenuLock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setMenuName', function() {
      it('should call setMenuName successfully', function(done) {
        //uncomment below and update the code to test setMenuName
        //instance.setMenuName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMenu', function() {
      it('should call updateMenu successfully', function(done) {
        //uncomment below and update the code to test updateMenu
        //instance.updateMenu(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadMenuImage', function() {
      it('should call uploadMenuImage successfully', function(done) {
        //uncomment below and update the code to test uploadMenuImage
        //instance.uploadMenuImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadNewMenuForApp', function() {
      it('should call uploadNewMenuForApp successfully', function(done) {
        //uncomment below and update the code to test uploadNewMenuForApp
        //instance.uploadNewMenuForApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
